
CubeMX_STM32H750VBT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000677c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006a14  08006a14  00016a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006a4c  08006a4c  00016a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006a54  08006a54  00016a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006a58  08006a58  00016a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08006a5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000013c  24000010  08006a6c  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00001204  2400014c  08006a6c  0002014c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00013ab4  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002832  00000000  00000000  00033b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000cd0  00000000  00000000  00036368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000009d1  00000000  00000000  00037038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000376c5  00000000  00000000  00037a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00014fbc  00000000  00000000  0006f0ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0015c9db  00000000  00000000  0008408a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00003410  00000000  00000000  001e0a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006d  00000000  00000000  001e3e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080069fc 	.word	0x080069fc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080069fc 	.word	0x080069fc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	; 0x28
 80005d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	f107 0314 	add.w	r3, r7, #20
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ea:	4b47      	ldr	r3, [pc, #284]	; (8000708 <MX_GPIO_Init+0x134>)
 80005ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005f0:	4a45      	ldr	r2, [pc, #276]	; (8000708 <MX_GPIO_Init+0x134>)
 80005f2:	f043 0304 	orr.w	r3, r3, #4
 80005f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005fa:	4b43      	ldr	r3, [pc, #268]	; (8000708 <MX_GPIO_Init+0x134>)
 80005fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000600:	f003 0304 	and.w	r3, r3, #4
 8000604:	613b      	str	r3, [r7, #16]
 8000606:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000608:	4b3f      	ldr	r3, [pc, #252]	; (8000708 <MX_GPIO_Init+0x134>)
 800060a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800060e:	4a3e      	ldr	r2, [pc, #248]	; (8000708 <MX_GPIO_Init+0x134>)
 8000610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000614:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000618:	4b3b      	ldr	r3, [pc, #236]	; (8000708 <MX_GPIO_Init+0x134>)
 800061a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800061e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000626:	4b38      	ldr	r3, [pc, #224]	; (8000708 <MX_GPIO_Init+0x134>)
 8000628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800062c:	4a36      	ldr	r2, [pc, #216]	; (8000708 <MX_GPIO_Init+0x134>)
 800062e:	f043 0310 	orr.w	r3, r3, #16
 8000632:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000636:	4b34      	ldr	r3, [pc, #208]	; (8000708 <MX_GPIO_Init+0x134>)
 8000638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800063c:	f003 0310 	and.w	r3, r3, #16
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000644:	4b30      	ldr	r3, [pc, #192]	; (8000708 <MX_GPIO_Init+0x134>)
 8000646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800064a:	4a2f      	ldr	r2, [pc, #188]	; (8000708 <MX_GPIO_Init+0x134>)
 800064c:	f043 0308 	orr.w	r3, r3, #8
 8000650:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000654:	4b2c      	ldr	r3, [pc, #176]	; (8000708 <MX_GPIO_Init+0x134>)
 8000656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800065a:	f003 0308 	and.w	r3, r3, #8
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b29      	ldr	r3, [pc, #164]	; (8000708 <MX_GPIO_Init+0x134>)
 8000664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000668:	4a27      	ldr	r2, [pc, #156]	; (8000708 <MX_GPIO_Init+0x134>)
 800066a:	f043 0301 	orr.w	r3, r3, #1
 800066e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000672:	4b25      	ldr	r3, [pc, #148]	; (8000708 <MX_GPIO_Init+0x134>)
 8000674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000678:	f003 0301 	and.w	r3, r3, #1
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000686:	4821      	ldr	r0, [pc, #132]	; (800070c <MX_GPIO_Init+0x138>)
 8000688:	f001 fccc 	bl	8002024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000692:	481f      	ldr	r0, [pc, #124]	; (8000710 <MX_GPIO_Init+0x13c>)
 8000694:	f001 fcc6 	bl	8002024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_Backlight_GPIO_Port, LCD_Backlight_Pin, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800069e:	481d      	ldr	r0, [pc, #116]	; (8000714 <MX_GPIO_Init+0x140>)
 80006a0:	f001 fcc0 	bl	8002024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80006a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006aa:	2301      	movs	r3, #1
 80006ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b2:	2300      	movs	r3, #0
 80006b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	4619      	mov	r1, r3
 80006bc:	4813      	ldr	r0, [pc, #76]	; (800070c <MX_GPIO_Init+0x138>)
 80006be:	f001 fb01 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 80006c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c8:	2301      	movs	r3, #1
 80006ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d0:	2300      	movs	r3, #0
 80006d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	4619      	mov	r1, r3
 80006da:	480d      	ldr	r0, [pc, #52]	; (8000710 <MX_GPIO_Init+0x13c>)
 80006dc:	f001 faf2 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_Backlight_Pin;
 80006e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e6:	2301      	movs	r3, #1
 80006e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ee:	2300      	movs	r3, #0
 80006f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_Backlight_GPIO_Port, &GPIO_InitStruct);
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4619      	mov	r1, r3
 80006f8:	4806      	ldr	r0, [pc, #24]	; (8000714 <MX_GPIO_Init+0x140>)
 80006fa:	f001 fae3 	bl	8001cc4 <HAL_GPIO_Init>

}
 80006fe:	bf00      	nop
 8000700:	3728      	adds	r7, #40	; 0x28
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	58024400 	.word	0x58024400
 800070c:	58020800 	.word	0x58020800
 8000710:	58021000 	.word	0x58021000
 8000714:	58020c00 	.word	0x58020c00

08000718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800071e:	4b38      	ldr	r3, [pc, #224]	; (8000800 <main+0xe8>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000726:	2b00      	cmp	r3, #0
 8000728:	d11b      	bne.n	8000762 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800072a:	f3bf 8f4f 	dsb	sy
}
 800072e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000730:	f3bf 8f6f 	isb	sy
}
 8000734:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000736:	4b32      	ldr	r3, [pc, #200]	; (8000800 <main+0xe8>)
 8000738:	2200      	movs	r2, #0
 800073a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800073e:	f3bf 8f4f 	dsb	sy
}
 8000742:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000744:	f3bf 8f6f 	isb	sy
}
 8000748:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800074a:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <main+0xe8>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	4a2c      	ldr	r2, [pc, #176]	; (8000800 <main+0xe8>)
 8000750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000754:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000756:	f3bf 8f4f 	dsb	sy
}
 800075a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800075c:	f3bf 8f6f 	isb	sy
}
 8000760:	e000      	b.n	8000764 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000762:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000764:	4b26      	ldr	r3, [pc, #152]	; (8000800 <main+0xe8>)
 8000766:	695b      	ldr	r3, [r3, #20]
 8000768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800076c:	2b00      	cmp	r3, #0
 800076e:	d138      	bne.n	80007e2 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000770:	4b23      	ldr	r3, [pc, #140]	; (8000800 <main+0xe8>)
 8000772:	2200      	movs	r2, #0
 8000774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000778:	f3bf 8f4f 	dsb	sy
}
 800077c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800077e:	4b20      	ldr	r3, [pc, #128]	; (8000800 <main+0xe8>)
 8000780:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000784:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	0b5b      	lsrs	r3, r3, #13
 800078a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800078e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	08db      	lsrs	r3, r3, #3
 8000794:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000798:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	015a      	lsls	r2, r3, #5
 800079e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80007a2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007a8:	4915      	ldr	r1, [pc, #84]	; (8000800 <main+0xe8>)
 80007aa:	4313      	orrs	r3, r2
 80007ac:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	1e5a      	subs	r2, r3, #1
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d1ef      	bne.n	800079a <main+0x82>
    } while(sets-- != 0U);
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	1e5a      	subs	r2, r3, #1
 80007be:	60ba      	str	r2, [r7, #8]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d1e5      	bne.n	8000790 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80007c4:	f3bf 8f4f 	dsb	sy
}
 80007c8:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <main+0xe8>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	4a0c      	ldr	r2, [pc, #48]	; (8000800 <main+0xe8>)
 80007d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007d4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007d6:	f3bf 8f4f 	dsb	sy
}
 80007da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007dc:	f3bf 8f6f 	isb	sy
}
 80007e0:	e000      	b.n	80007e4 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007e2:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e4:	f000 fb5c 	bl	8000ea0 <HAL_Init>

  /* USER CODE BEGIN Init */
  LED_Init();
 80007e8:	f006 f8d0 	bl	800698c <LED_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ec:	f000 f80a 	bl	8000804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f0:	f7ff fef0 	bl	80005d4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80007f4:	f000 fa6c 	bl	8000cd0 <MX_LPUART1_UART_Init>
  MX_SPI4_Init();
 80007f8:	f000 f8b8 	bl	800096c <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <main+0xe4>
 80007fe:	bf00      	nop
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b09e      	sub	sp, #120	; 0x78
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800080e:	224c      	movs	r2, #76	; 0x4c
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f006 f8c6 	bl	80069a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	2220      	movs	r2, #32
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f006 f8bf 	bl	80069a4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000826:	2002      	movs	r0, #2
 8000828:	f001 fc16 	bl	8002058 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800082c:	2300      	movs	r3, #0
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	4b48      	ldr	r3, [pc, #288]	; (8000954 <SystemClock_Config+0x150>)
 8000832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000834:	4a47      	ldr	r2, [pc, #284]	; (8000954 <SystemClock_Config+0x150>)
 8000836:	f023 0301 	bic.w	r3, r3, #1
 800083a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800083c:	4b45      	ldr	r3, [pc, #276]	; (8000954 <SystemClock_Config+0x150>)
 800083e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000840:	f003 0301 	and.w	r3, r3, #1
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	4b44      	ldr	r3, [pc, #272]	; (8000958 <SystemClock_Config+0x154>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	4a43      	ldr	r2, [pc, #268]	; (8000958 <SystemClock_Config+0x154>)
 800084c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000850:	6193      	str	r3, [r2, #24]
 8000852:	4b41      	ldr	r3, [pc, #260]	; (8000958 <SystemClock_Config+0x154>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800085e:	bf00      	nop
 8000860:	4b3d      	ldr	r3, [pc, #244]	; (8000958 <SystemClock_Config+0x154>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800086c:	d1f8      	bne.n	8000860 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086e:	4b3b      	ldr	r3, [pc, #236]	; (800095c <SystemClock_Config+0x158>)
 8000870:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000874:	4a39      	ldr	r2, [pc, #228]	; (800095c <SystemClock_Config+0x158>)
 8000876:	f043 0302 	orr.w	r3, r3, #2
 800087a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800087e:	4b37      	ldr	r3, [pc, #220]	; (800095c <SystemClock_Config+0x158>)
 8000880:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000884:	f003 0302 	and.w	r3, r3, #2
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800088c:	2300      	movs	r3, #0
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	4b31      	ldr	r3, [pc, #196]	; (8000958 <SystemClock_Config+0x154>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	4a30      	ldr	r2, [pc, #192]	; (8000958 <SystemClock_Config+0x154>)
 8000896:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800089a:	6193      	str	r3, [r2, #24]
 800089c:	4b2e      	ldr	r3, [pc, #184]	; (8000958 <SystemClock_Config+0x154>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	4b2b      	ldr	r3, [pc, #172]	; (8000954 <SystemClock_Config+0x150>)
 80008a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008aa:	4a2a      	ldr	r2, [pc, #168]	; (8000954 <SystemClock_Config+0x150>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008b2:	4b28      	ldr	r3, [pc, #160]	; (8000954 <SystemClock_Config+0x150>)
 80008b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008be:	bf00      	nop
 80008c0:	4b25      	ldr	r3, [pc, #148]	; (8000958 <SystemClock_Config+0x154>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008cc:	d1f8      	bne.n	80008c0 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008ce:	2301      	movs	r3, #1
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d8:	2302      	movs	r3, #2
 80008da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008dc:	2302      	movs	r3, #2
 80008de:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 80008e0:	2305      	movs	r3, #5
 80008e2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80008e4:	23c0      	movs	r3, #192	; 0xc0
 80008e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008e8:	2302      	movs	r3, #2
 80008ea:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008ec:	2302      	movs	r3, #2
 80008ee:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008f0:	2302      	movs	r3, #2
 80008f2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008f4:	2308      	movs	r3, #8
 80008f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000900:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000904:	4618      	mov	r0, r3
 8000906:	f001 fbe1 	bl	80020cc <HAL_RCC_OscConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000910:	f000 f826 	bl	8000960 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000914:	233f      	movs	r3, #63	; 0x3f
 8000916:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000918:	2303      	movs	r3, #3
 800091a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000920:	2308      	movs	r3, #8
 8000922:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000924:	2340      	movs	r3, #64	; 0x40
 8000926:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000928:	2340      	movs	r3, #64	; 0x40
 800092a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800092c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000932:	2340      	movs	r3, #64	; 0x40
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000936:	f107 030c 	add.w	r3, r7, #12
 800093a:	2104      	movs	r1, #4
 800093c:	4618      	mov	r0, r3
 800093e:	f002 f81f 	bl	8002980 <HAL_RCC_ClockConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000948:	f000 f80a 	bl	8000960 <Error_Handler>
  }
}
 800094c:	bf00      	nop
 800094e:	3778      	adds	r7, #120	; 0x78
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	58000400 	.word	0x58000400
 8000958:	58024800 	.word	0x58024800
 800095c:	58024400 	.word	0x58024400

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
}
 8000966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000968:	e7fe      	b.n	8000968 <Error_Handler+0x8>
	...

0800096c <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8000970:	4b27      	ldr	r3, [pc, #156]	; (8000a10 <MX_SPI4_Init+0xa4>)
 8000972:	4a28      	ldr	r2, [pc, #160]	; (8000a14 <MX_SPI4_Init+0xa8>)
 8000974:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000976:	4b26      	ldr	r3, [pc, #152]	; (8000a10 <MX_SPI4_Init+0xa4>)
 8000978:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800097c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 800097e:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <MX_SPI4_Init+0xa4>)
 8000980:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000984:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000986:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <MX_SPI4_Init+0xa4>)
 8000988:	2207      	movs	r2, #7
 800098a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800098c:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <MX_SPI4_Init+0xa4>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000992:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <MX_SPI4_Init+0xa4>)
 8000994:	2200      	movs	r2, #0
 8000996:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000998:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <MX_SPI4_Init+0xa4>)
 800099a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800099e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009a0:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <MX_SPI4_Init+0xa4>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009a6:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <MX_SPI4_Init+0xa4>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ac:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <MX_SPI4_Init+0xa4>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b2:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <MX_SPI4_Init+0xa4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <MX_SPI4_Init+0xa4>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009be:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_SPI4_Init+0xa4>)
 80009c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009c4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <MX_SPI4_Init+0xa4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_02DATA;
 80009cc:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <MX_SPI4_Init+0xa4>)
 80009ce:	2220      	movs	r2, #32
 80009d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_SPI4_Init+0xa4>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009d8:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <MX_SPI4_Init+0xa4>)
 80009da:	2200      	movs	r2, #0
 80009dc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_SPI4_Init+0xa4>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <MX_SPI4_Init+0xa4>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_SPI4_Init+0xa4>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <MX_SPI4_Init+0xa4>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_SPI4_Init+0xa4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MX_SPI4_Init+0xa4>)
 80009fe:	f004 f977 	bl	8004cf0 <HAL_SPI_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000a08:	f7ff ffaa 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	2400002c 	.word	0x2400002c
 8000a14:	40013400 	.word	0x40013400

08000a18 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b0bc      	sub	sp, #240	; 0xf0
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a30:	f107 0318 	add.w	r3, r7, #24
 8000a34:	22c0      	movs	r2, #192	; 0xc0
 8000a36:	2100      	movs	r1, #0
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f005 ffb3 	bl	80069a4 <memset>
  if(spiHandle->Instance==SPI4)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a35      	ldr	r2, [pc, #212]	; (8000b18 <HAL_SPI_MspInit+0x100>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d163      	bne.n	8000b10 <HAL_SPI_MspInit+0xf8>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

    GPIO_LDC_Backlight_CLK_ENABLE; // 使能 背光        引脚时钟
 8000a48:	4b34      	ldr	r3, [pc, #208]	; (8000b1c <HAL_SPI_MspInit+0x104>)
 8000a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4e:	4a33      	ldr	r2, [pc, #204]	; (8000b1c <HAL_SPI_MspInit+0x104>)
 8000a50:	f043 0308 	orr.w	r3, r3, #8
 8000a54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a58:	4b30      	ldr	r3, [pc, #192]	; (8000b1c <HAL_SPI_MspInit+0x104>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5e:	f003 0308 	and.w	r3, r3, #8
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697b      	ldr	r3, [r7, #20]
    GPIO_LDC_DC_CLK_ENABLE;        // 使能 数据指令选择 引脚时钟
 8000a66:	4b2d      	ldr	r3, [pc, #180]	; (8000b1c <HAL_SPI_MspInit+0x104>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6c:	4a2b      	ldr	r2, [pc, #172]	; (8000b1c <HAL_SPI_MspInit+0x104>)
 8000a6e:	f043 0310 	orr.w	r3, r3, #16
 8000a72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a76:	4b29      	ldr	r3, [pc, #164]	; (8000b1c <HAL_SPI_MspInit+0x104>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7c:	f003 0310 	and.w	r3, r3, #16
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	693b      	ldr	r3, [r7, #16]

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8000a84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a88:	f04f 0300 	mov.w	r3, #0
 8000a8c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000a90:	2300      	movs	r3, #0
 8000a92:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a94:	f107 0318 	add.w	r3, r7, #24
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f002 fafd 	bl	8003098 <HAL_RCCEx_PeriphCLKConfig>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <HAL_SPI_MspInit+0x90>
    {
      Error_Handler();
 8000aa4:	f7ff ff5c 	bl	8000960 <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000aa8:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <HAL_SPI_MspInit+0x104>)
 8000aaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000aae:	4a1b      	ldr	r2, [pc, #108]	; (8000b1c <HAL_SPI_MspInit+0x104>)
 8000ab0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ab4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000ab8:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <HAL_SPI_MspInit+0x104>)
 8000aba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000abe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <HAL_SPI_MspInit+0x104>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000acc:	4a13      	ldr	r2, [pc, #76]	; (8000b1c <HAL_SPI_MspInit+0x104>)
 8000ace:	f043 0310 	orr.w	r3, r3, #16
 8000ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <HAL_SPI_MspInit+0x104>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000adc:	f003 0310 	and.w	r3, r3, #16
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE11     ------> SPI4_NSS
    PE12     ------> SPI4_SCK
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
 8000ae4:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8000ae8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000afe:	2305      	movs	r3, #5
 8000b00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b04:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <HAL_SPI_MspInit+0x108>)
 8000b0c:	f001 f8da 	bl	8001cc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8000b10:	bf00      	nop
 8000b12:	37f0      	adds	r7, #240	; 0xf0
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40013400 	.word	0x40013400
 8000b1c:	58024400 	.word	0x58024400
 8000b20:	58021000 	.word	0x58021000

08000b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <HAL_MspInit+0x30>)
 8000b2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b30:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <HAL_MspInit+0x30>)
 8000b32:	f043 0302 	orr.w	r3, r3, #2
 8000b36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_MspInit+0x30>)
 8000b3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b40:	f003 0302 	and.w	r3, r3, #2
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	58024400 	.word	0x58024400

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b5c:	e7fe      	b.n	8000b5c <NMI_Handler+0x4>

08000b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba4:	f000 f9ee 	bl	8000f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}

08000bac <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000bb0:	4802      	ldr	r0, [pc, #8]	; (8000bbc <LPUART1_IRQHandler+0x10>)
 8000bb2:	f004 fa2d 	bl	8005010 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	240000b4 	.word	0x240000b4

08000bc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bc4:	4b37      	ldr	r3, [pc, #220]	; (8000ca4 <SystemInit+0xe4>)
 8000bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bca:	4a36      	ldr	r2, [pc, #216]	; (8000ca4 <SystemInit+0xe4>)
 8000bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bd4:	4b34      	ldr	r3, [pc, #208]	; (8000ca8 <SystemInit+0xe8>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f003 030f 	and.w	r3, r3, #15
 8000bdc:	2b06      	cmp	r3, #6
 8000bde:	d807      	bhi.n	8000bf0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000be0:	4b31      	ldr	r3, [pc, #196]	; (8000ca8 <SystemInit+0xe8>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f023 030f 	bic.w	r3, r3, #15
 8000be8:	4a2f      	ldr	r2, [pc, #188]	; (8000ca8 <SystemInit+0xe8>)
 8000bea:	f043 0307 	orr.w	r3, r3, #7
 8000bee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bf0:	4b2e      	ldr	r3, [pc, #184]	; (8000cac <SystemInit+0xec>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a2d      	ldr	r2, [pc, #180]	; (8000cac <SystemInit+0xec>)
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000bfc:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <SystemInit+0xec>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c02:	4b2a      	ldr	r3, [pc, #168]	; (8000cac <SystemInit+0xec>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	4929      	ldr	r1, [pc, #164]	; (8000cac <SystemInit+0xec>)
 8000c08:	4b29      	ldr	r3, [pc, #164]	; (8000cb0 <SystemInit+0xf0>)
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c0e:	4b26      	ldr	r3, [pc, #152]	; (8000ca8 <SystemInit+0xe8>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f003 0308 	and.w	r3, r3, #8
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d007      	beq.n	8000c2a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c1a:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <SystemInit+0xe8>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f023 030f 	bic.w	r3, r3, #15
 8000c22:	4a21      	ldr	r2, [pc, #132]	; (8000ca8 <SystemInit+0xe8>)
 8000c24:	f043 0307 	orr.w	r3, r3, #7
 8000c28:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c2a:	4b20      	ldr	r3, [pc, #128]	; (8000cac <SystemInit+0xec>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c30:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <SystemInit+0xec>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c36:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <SystemInit+0xec>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <SystemInit+0xec>)
 8000c3e:	4a1d      	ldr	r2, [pc, #116]	; (8000cb4 <SystemInit+0xf4>)
 8000c40:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <SystemInit+0xec>)
 8000c44:	4a1c      	ldr	r2, [pc, #112]	; (8000cb8 <SystemInit+0xf8>)
 8000c46:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c48:	4b18      	ldr	r3, [pc, #96]	; (8000cac <SystemInit+0xec>)
 8000c4a:	4a1c      	ldr	r2, [pc, #112]	; (8000cbc <SystemInit+0xfc>)
 8000c4c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c4e:	4b17      	ldr	r3, [pc, #92]	; (8000cac <SystemInit+0xec>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <SystemInit+0xec>)
 8000c56:	4a19      	ldr	r2, [pc, #100]	; (8000cbc <SystemInit+0xfc>)
 8000c58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <SystemInit+0xec>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <SystemInit+0xec>)
 8000c62:	4a16      	ldr	r2, [pc, #88]	; (8000cbc <SystemInit+0xfc>)
 8000c64:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <SystemInit+0xec>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <SystemInit+0xec>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <SystemInit+0xec>)
 8000c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <SystemInit+0xec>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <SystemInit+0x100>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <SystemInit+0x104>)
 8000c84:	4013      	ands	r3, r2
 8000c86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c8a:	d202      	bcs.n	8000c92 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <SystemInit+0x108>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <SystemInit+0x10c>)
 8000c94:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c98:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00
 8000ca8:	52002000 	.word	0x52002000
 8000cac:	58024400 	.word	0x58024400
 8000cb0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cb4:	02020200 	.word	0x02020200
 8000cb8:	01ff0000 	.word	0x01ff0000
 8000cbc:	01010280 	.word	0x01010280
 8000cc0:	5c001000 	.word	0x5c001000
 8000cc4:	ffff0000 	.word	0xffff0000
 8000cc8:	51008108 	.word	0x51008108
 8000ccc:	52004000 	.word	0x52004000

08000cd0 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000cd4:	4b22      	ldr	r3, [pc, #136]	; (8000d60 <MX_LPUART1_UART_Init+0x90>)
 8000cd6:	4a23      	ldr	r2, [pc, #140]	; (8000d64 <MX_LPUART1_UART_Init+0x94>)
 8000cd8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000cda:	4b21      	ldr	r3, [pc, #132]	; (8000d60 <MX_LPUART1_UART_Init+0x90>)
 8000cdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ce0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce2:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <MX_LPUART1_UART_Init+0x90>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000ce8:	4b1d      	ldr	r3, [pc, #116]	; (8000d60 <MX_LPUART1_UART_Init+0x90>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000cee:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <MX_LPUART1_UART_Init+0x90>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <MX_LPUART1_UART_Init+0x90>)
 8000cf6:	220c      	movs	r2, #12
 8000cf8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfa:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <MX_LPUART1_UART_Init+0x90>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d00:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <MX_LPUART1_UART_Init+0x90>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d06:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <MX_LPUART1_UART_Init+0x90>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <MX_LPUART1_UART_Init+0x90>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000d12:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <MX_LPUART1_UART_Init+0x90>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000d18:	4811      	ldr	r0, [pc, #68]	; (8000d60 <MX_LPUART1_UART_Init+0x90>)
 8000d1a:	f004 f928 	bl	8004f6e <HAL_UART_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d24:	f7ff fe1c 	bl	8000960 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d28:	2100      	movs	r1, #0
 8000d2a:	480d      	ldr	r0, [pc, #52]	; (8000d60 <MX_LPUART1_UART_Init+0x90>)
 8000d2c:	f005 fd64 	bl	80067f8 <HAL_UARTEx_SetTxFifoThreshold>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d36:	f7ff fe13 	bl	8000960 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4808      	ldr	r0, [pc, #32]	; (8000d60 <MX_LPUART1_UART_Init+0x90>)
 8000d3e:	f005 fd99 	bl	8006874 <HAL_UARTEx_SetRxFifoThreshold>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d48:	f7ff fe0a 	bl	8000960 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000d4c:	4804      	ldr	r0, [pc, #16]	; (8000d60 <MX_LPUART1_UART_Init+0x90>)
 8000d4e:	f005 fd1a 	bl	8006786 <HAL_UARTEx_DisableFifoMode>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d58:	f7ff fe02 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	240000b4 	.word	0x240000b4
 8000d64:	58000c00 	.word	0x58000c00

08000d68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b0ba      	sub	sp, #232	; 0xe8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	22c0      	movs	r2, #192	; 0xc0
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f005 fe0b 	bl	80069a4 <memset>
  if(uartHandle->Instance==LPUART1)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a2b      	ldr	r2, [pc, #172]	; (8000e40 <HAL_UART_MspInit+0xd8>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d14e      	bne.n	8000e36 <HAL_UART_MspInit+0xce>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d98:	f04f 0204 	mov.w	r2, #4
 8000d9c:	f04f 0300 	mov.w	r3, #0
 8000da0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000daa:	f107 0310 	add.w	r3, r7, #16
 8000dae:	4618      	mov	r0, r3
 8000db0:	f002 f972 	bl	8003098 <HAL_RCCEx_PeriphCLKConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000dba:	f7ff fdd1 	bl	8000960 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000dbe:	4b21      	ldr	r3, [pc, #132]	; (8000e44 <HAL_UART_MspInit+0xdc>)
 8000dc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dc4:	4a1f      	ldr	r2, [pc, #124]	; (8000e44 <HAL_UART_MspInit+0xdc>)
 8000dc6:	f043 0308 	orr.w	r3, r3, #8
 8000dca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000dce:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <HAL_UART_MspInit+0xdc>)
 8000dd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dd4:	f003 0308 	and.w	r3, r3, #8
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ddc:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <HAL_UART_MspInit+0xdc>)
 8000dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de2:	4a18      	ldr	r2, [pc, #96]	; (8000e44 <HAL_UART_MspInit+0xdc>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dec:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <HAL_UART_MspInit+0xdc>)
 8000dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dfa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000dfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8000e14:	2303      	movs	r3, #3
 8000e16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4809      	ldr	r0, [pc, #36]	; (8000e48 <HAL_UART_MspInit+0xe0>)
 8000e22:	f000 ff4f 	bl	8001cc4 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2100      	movs	r1, #0
 8000e2a:	208e      	movs	r0, #142	; 0x8e
 8000e2c:	f000 f9b1 	bl	8001192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000e30:	208e      	movs	r0, #142	; 0x8e
 8000e32:	f000 f9c8 	bl	80011c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000e36:	bf00      	nop
 8000e38:	37e8      	adds	r7, #232	; 0xe8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	58000c00 	.word	0x58000c00
 8000e44:	58024400 	.word	0x58024400
 8000e48:	58020000 	.word	0x58020000

08000e4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e50:	f7ff feb6 	bl	8000bc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e54:	480c      	ldr	r0, [pc, #48]	; (8000e88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e56:	490d      	ldr	r1, [pc, #52]	; (8000e8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e58:	4a0d      	ldr	r2, [pc, #52]	; (8000e90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e5c:	e002      	b.n	8000e64 <LoopCopyDataInit>

08000e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e62:	3304      	adds	r3, #4

08000e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e68:	d3f9      	bcc.n	8000e5e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e6c:	4c0a      	ldr	r4, [pc, #40]	; (8000e98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e70:	e001      	b.n	8000e76 <LoopFillZerobss>

08000e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e74:	3204      	adds	r2, #4

08000e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e78:	d3fb      	bcc.n	8000e72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e7a:	f005 fd9b 	bl	80069b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e7e:	f7ff fc4b 	bl	8000718 <main>
  bx  lr
 8000e82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e84:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000e88:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e8c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000e90:	08006a5c 	.word	0x08006a5c
  ldr r2, =_sbss
 8000e94:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000e98:	2400014c 	.word	0x2400014c

08000e9c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e9c:	e7fe      	b.n	8000e9c <ADC3_IRQHandler>
	...

08000ea0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea6:	2003      	movs	r0, #3
 8000ea8:	f000 f968 	bl	800117c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000eac:	f001 ff1e 	bl	8002cec <HAL_RCC_GetSysClockFreq>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <HAL_Init+0x68>)
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	0a1b      	lsrs	r3, r3, #8
 8000eb8:	f003 030f 	and.w	r3, r3, #15
 8000ebc:	4913      	ldr	r1, [pc, #76]	; (8000f0c <HAL_Init+0x6c>)
 8000ebe:	5ccb      	ldrb	r3, [r1, r3]
 8000ec0:	f003 031f 	and.w	r3, r3, #31
 8000ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ec8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <HAL_Init+0x68>)
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	f003 030f 	and.w	r3, r3, #15
 8000ed2:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <HAL_Init+0x6c>)
 8000ed4:	5cd3      	ldrb	r3, [r2, r3]
 8000ed6:	f003 031f 	and.w	r3, r3, #31
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee0:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <HAL_Init+0x70>)
 8000ee2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ee4:	4a0b      	ldr	r2, [pc, #44]	; (8000f14 <HAL_Init+0x74>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eea:	200f      	movs	r0, #15
 8000eec:	f000 f814 	bl	8000f18 <HAL_InitTick>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e002      	b.n	8000f00 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000efa:	f7ff fe13 	bl	8000b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	58024400 	.word	0x58024400
 8000f0c:	08006a14 	.word	0x08006a14
 8000f10:	24000004 	.word	0x24000004
 8000f14:	24000000 	.word	0x24000000

08000f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f20:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <HAL_InitTick+0x60>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d101      	bne.n	8000f2c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e021      	b.n	8000f70 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f2c:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <HAL_InitTick+0x64>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <HAL_InitTick+0x60>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4619      	mov	r1, r3
 8000f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 f94d 	bl	80011e2 <HAL_SYSTICK_Config>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00e      	b.n	8000f70 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	d80a      	bhi.n	8000f6e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f60:	f000 f917 	bl	8001192 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f64:	4a06      	ldr	r2, [pc, #24]	; (8000f80 <HAL_InitTick+0x68>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e000      	b.n	8000f70 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	2400000c 	.word	0x2400000c
 8000f7c:	24000000 	.word	0x24000000
 8000f80:	24000008 	.word	0x24000008

08000f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_IncTick+0x20>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	2400000c 	.word	0x2400000c
 8000fa8:	24000148 	.word	0x24000148

08000fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <HAL_GetTick+0x14>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	24000148 	.word	0x24000148

08000fc4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000fc8:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <HAL_GetREVID+0x14>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	0c1b      	lsrs	r3, r3, #16
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	5c001000 	.word	0x5c001000

08000fdc <__NVIC_SetPriorityGrouping>:
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fec:	4b0b      	ldr	r3, [pc, #44]	; (800101c <__NVIC_SetPriorityGrouping+0x40>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8001006:	4313      	orrs	r3, r2
 8001008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100a:	4a04      	ldr	r2, [pc, #16]	; (800101c <__NVIC_SetPriorityGrouping+0x40>)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	60d3      	str	r3, [r2, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00
 8001020:	05fa0000 	.word	0x05fa0000

08001024 <__NVIC_GetPriorityGrouping>:
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <__NVIC_GetPriorityGrouping+0x18>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	f003 0307 	and.w	r3, r3, #7
}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_EnableIRQ>:
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800104a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800104e:	2b00      	cmp	r3, #0
 8001050:	db0b      	blt.n	800106a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	f003 021f 	and.w	r2, r3, #31
 8001058:	4907      	ldr	r1, [pc, #28]	; (8001078 <__NVIC_EnableIRQ+0x38>)
 800105a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800105e:	095b      	lsrs	r3, r3, #5
 8001060:	2001      	movs	r0, #1
 8001062:	fa00 f202 	lsl.w	r2, r0, r2
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000e100 	.word	0xe000e100

0800107c <__NVIC_SetPriority>:
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001088:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800108c:	2b00      	cmp	r3, #0
 800108e:	db0a      	blt.n	80010a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	b2da      	uxtb	r2, r3
 8001094:	490c      	ldr	r1, [pc, #48]	; (80010c8 <__NVIC_SetPriority+0x4c>)
 8001096:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800109a:	0112      	lsls	r2, r2, #4
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	440b      	add	r3, r1
 80010a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80010a4:	e00a      	b.n	80010bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4908      	ldr	r1, [pc, #32]	; (80010cc <__NVIC_SetPriority+0x50>)
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	3b04      	subs	r3, #4
 80010b4:	0112      	lsls	r2, r2, #4
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	440b      	add	r3, r1
 80010ba:	761a      	strb	r2, [r3, #24]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000e100 	.word	0xe000e100
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <NVIC_EncodePriority>:
{
 80010d0:	b480      	push	{r7}
 80010d2:	b089      	sub	sp, #36	; 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f1c3 0307 	rsb	r3, r3, #7
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	bf28      	it	cs
 80010ee:	2304      	movcs	r3, #4
 80010f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3304      	adds	r3, #4
 80010f6:	2b06      	cmp	r3, #6
 80010f8:	d902      	bls.n	8001100 <NVIC_EncodePriority+0x30>
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3b03      	subs	r3, #3
 80010fe:	e000      	b.n	8001102 <NVIC_EncodePriority+0x32>
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	f04f 32ff 	mov.w	r2, #4294967295
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43da      	mvns	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	401a      	ands	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001118:	f04f 31ff 	mov.w	r1, #4294967295
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa01 f303 	lsl.w	r3, r1, r3
 8001122:	43d9      	mvns	r1, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	4313      	orrs	r3, r2
}
 800112a:	4618      	mov	r0, r3
 800112c:	3724      	adds	r7, #36	; 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001148:	d301      	bcc.n	800114e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114a:	2301      	movs	r3, #1
 800114c:	e00f      	b.n	800116e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <SysTick_Config+0x40>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001156:	210f      	movs	r1, #15
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f7ff ff8e 	bl	800107c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <SysTick_Config+0x40>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001166:	4b04      	ldr	r3, [pc, #16]	; (8001178 <SysTick_Config+0x40>)
 8001168:	2207      	movs	r2, #7
 800116a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	e000e010 	.word	0xe000e010

0800117c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff29 	bl	8000fdc <__NVIC_SetPriorityGrouping>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b086      	sub	sp, #24
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
 800119e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011a0:	f7ff ff40 	bl	8001024 <__NVIC_GetPriorityGrouping>
 80011a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	68b9      	ldr	r1, [r7, #8]
 80011aa:	6978      	ldr	r0, [r7, #20]
 80011ac:	f7ff ff90 	bl	80010d0 <NVIC_EncodePriority>
 80011b0:	4602      	mov	r2, r0
 80011b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011b6:	4611      	mov	r1, r2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff5f 	bl	800107c <__NVIC_SetPriority>
}
 80011be:	bf00      	nop
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff33 	bl	8001040 <__NVIC_EnableIRQ>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ffa4 	bl	8001138 <SysTick_Config>
 80011f0:	4603      	mov	r3, r0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001204:	f7ff fed2 	bl	8000fac <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d101      	bne.n	8001214 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e2dc      	b.n	80017ce <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d008      	beq.n	8001232 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2280      	movs	r2, #128	; 0x80
 8001224:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e2cd      	b.n	80017ce <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a76      	ldr	r2, [pc, #472]	; (8001410 <HAL_DMA_Abort+0x214>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d04a      	beq.n	80012d2 <HAL_DMA_Abort+0xd6>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a74      	ldr	r2, [pc, #464]	; (8001414 <HAL_DMA_Abort+0x218>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d045      	beq.n	80012d2 <HAL_DMA_Abort+0xd6>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a73      	ldr	r2, [pc, #460]	; (8001418 <HAL_DMA_Abort+0x21c>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d040      	beq.n	80012d2 <HAL_DMA_Abort+0xd6>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a71      	ldr	r2, [pc, #452]	; (800141c <HAL_DMA_Abort+0x220>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d03b      	beq.n	80012d2 <HAL_DMA_Abort+0xd6>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a70      	ldr	r2, [pc, #448]	; (8001420 <HAL_DMA_Abort+0x224>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d036      	beq.n	80012d2 <HAL_DMA_Abort+0xd6>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a6e      	ldr	r2, [pc, #440]	; (8001424 <HAL_DMA_Abort+0x228>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d031      	beq.n	80012d2 <HAL_DMA_Abort+0xd6>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a6d      	ldr	r2, [pc, #436]	; (8001428 <HAL_DMA_Abort+0x22c>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d02c      	beq.n	80012d2 <HAL_DMA_Abort+0xd6>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a6b      	ldr	r2, [pc, #428]	; (800142c <HAL_DMA_Abort+0x230>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d027      	beq.n	80012d2 <HAL_DMA_Abort+0xd6>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a6a      	ldr	r2, [pc, #424]	; (8001430 <HAL_DMA_Abort+0x234>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d022      	beq.n	80012d2 <HAL_DMA_Abort+0xd6>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a68      	ldr	r2, [pc, #416]	; (8001434 <HAL_DMA_Abort+0x238>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d01d      	beq.n	80012d2 <HAL_DMA_Abort+0xd6>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a67      	ldr	r2, [pc, #412]	; (8001438 <HAL_DMA_Abort+0x23c>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d018      	beq.n	80012d2 <HAL_DMA_Abort+0xd6>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a65      	ldr	r2, [pc, #404]	; (800143c <HAL_DMA_Abort+0x240>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d013      	beq.n	80012d2 <HAL_DMA_Abort+0xd6>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a64      	ldr	r2, [pc, #400]	; (8001440 <HAL_DMA_Abort+0x244>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d00e      	beq.n	80012d2 <HAL_DMA_Abort+0xd6>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a62      	ldr	r2, [pc, #392]	; (8001444 <HAL_DMA_Abort+0x248>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d009      	beq.n	80012d2 <HAL_DMA_Abort+0xd6>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a61      	ldr	r2, [pc, #388]	; (8001448 <HAL_DMA_Abort+0x24c>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d004      	beq.n	80012d2 <HAL_DMA_Abort+0xd6>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a5f      	ldr	r2, [pc, #380]	; (800144c <HAL_DMA_Abort+0x250>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d101      	bne.n	80012d6 <HAL_DMA_Abort+0xda>
 80012d2:	2301      	movs	r3, #1
 80012d4:	e000      	b.n	80012d8 <HAL_DMA_Abort+0xdc>
 80012d6:	2300      	movs	r3, #0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d013      	beq.n	8001304 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 021e 	bic.w	r2, r2, #30
 80012ea:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	695a      	ldr	r2, [r3, #20]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012fa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	e00a      	b.n	800131a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 020e 	bic.w	r2, r2, #14
 8001312:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a3c      	ldr	r2, [pc, #240]	; (8001410 <HAL_DMA_Abort+0x214>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d072      	beq.n	800140a <HAL_DMA_Abort+0x20e>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a3a      	ldr	r2, [pc, #232]	; (8001414 <HAL_DMA_Abort+0x218>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d06d      	beq.n	800140a <HAL_DMA_Abort+0x20e>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a39      	ldr	r2, [pc, #228]	; (8001418 <HAL_DMA_Abort+0x21c>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d068      	beq.n	800140a <HAL_DMA_Abort+0x20e>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a37      	ldr	r2, [pc, #220]	; (800141c <HAL_DMA_Abort+0x220>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d063      	beq.n	800140a <HAL_DMA_Abort+0x20e>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a36      	ldr	r2, [pc, #216]	; (8001420 <HAL_DMA_Abort+0x224>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d05e      	beq.n	800140a <HAL_DMA_Abort+0x20e>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a34      	ldr	r2, [pc, #208]	; (8001424 <HAL_DMA_Abort+0x228>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d059      	beq.n	800140a <HAL_DMA_Abort+0x20e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a33      	ldr	r2, [pc, #204]	; (8001428 <HAL_DMA_Abort+0x22c>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d054      	beq.n	800140a <HAL_DMA_Abort+0x20e>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a31      	ldr	r2, [pc, #196]	; (800142c <HAL_DMA_Abort+0x230>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d04f      	beq.n	800140a <HAL_DMA_Abort+0x20e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a30      	ldr	r2, [pc, #192]	; (8001430 <HAL_DMA_Abort+0x234>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d04a      	beq.n	800140a <HAL_DMA_Abort+0x20e>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a2e      	ldr	r2, [pc, #184]	; (8001434 <HAL_DMA_Abort+0x238>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d045      	beq.n	800140a <HAL_DMA_Abort+0x20e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a2d      	ldr	r2, [pc, #180]	; (8001438 <HAL_DMA_Abort+0x23c>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d040      	beq.n	800140a <HAL_DMA_Abort+0x20e>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a2b      	ldr	r2, [pc, #172]	; (800143c <HAL_DMA_Abort+0x240>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d03b      	beq.n	800140a <HAL_DMA_Abort+0x20e>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a2a      	ldr	r2, [pc, #168]	; (8001440 <HAL_DMA_Abort+0x244>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d036      	beq.n	800140a <HAL_DMA_Abort+0x20e>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a28      	ldr	r2, [pc, #160]	; (8001444 <HAL_DMA_Abort+0x248>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d031      	beq.n	800140a <HAL_DMA_Abort+0x20e>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a27      	ldr	r2, [pc, #156]	; (8001448 <HAL_DMA_Abort+0x24c>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d02c      	beq.n	800140a <HAL_DMA_Abort+0x20e>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a25      	ldr	r2, [pc, #148]	; (800144c <HAL_DMA_Abort+0x250>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d027      	beq.n	800140a <HAL_DMA_Abort+0x20e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a24      	ldr	r2, [pc, #144]	; (8001450 <HAL_DMA_Abort+0x254>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d022      	beq.n	800140a <HAL_DMA_Abort+0x20e>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a22      	ldr	r2, [pc, #136]	; (8001454 <HAL_DMA_Abort+0x258>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d01d      	beq.n	800140a <HAL_DMA_Abort+0x20e>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a21      	ldr	r2, [pc, #132]	; (8001458 <HAL_DMA_Abort+0x25c>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d018      	beq.n	800140a <HAL_DMA_Abort+0x20e>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a1f      	ldr	r2, [pc, #124]	; (800145c <HAL_DMA_Abort+0x260>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d013      	beq.n	800140a <HAL_DMA_Abort+0x20e>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a1e      	ldr	r2, [pc, #120]	; (8001460 <HAL_DMA_Abort+0x264>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d00e      	beq.n	800140a <HAL_DMA_Abort+0x20e>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a1c      	ldr	r2, [pc, #112]	; (8001464 <HAL_DMA_Abort+0x268>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d009      	beq.n	800140a <HAL_DMA_Abort+0x20e>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a1b      	ldr	r2, [pc, #108]	; (8001468 <HAL_DMA_Abort+0x26c>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d004      	beq.n	800140a <HAL_DMA_Abort+0x20e>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a19      	ldr	r2, [pc, #100]	; (800146c <HAL_DMA_Abort+0x270>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d132      	bne.n	8001470 <HAL_DMA_Abort+0x274>
 800140a:	2301      	movs	r3, #1
 800140c:	e031      	b.n	8001472 <HAL_DMA_Abort+0x276>
 800140e:	bf00      	nop
 8001410:	40020010 	.word	0x40020010
 8001414:	40020028 	.word	0x40020028
 8001418:	40020040 	.word	0x40020040
 800141c:	40020058 	.word	0x40020058
 8001420:	40020070 	.word	0x40020070
 8001424:	40020088 	.word	0x40020088
 8001428:	400200a0 	.word	0x400200a0
 800142c:	400200b8 	.word	0x400200b8
 8001430:	40020410 	.word	0x40020410
 8001434:	40020428 	.word	0x40020428
 8001438:	40020440 	.word	0x40020440
 800143c:	40020458 	.word	0x40020458
 8001440:	40020470 	.word	0x40020470
 8001444:	40020488 	.word	0x40020488
 8001448:	400204a0 	.word	0x400204a0
 800144c:	400204b8 	.word	0x400204b8
 8001450:	58025408 	.word	0x58025408
 8001454:	5802541c 	.word	0x5802541c
 8001458:	58025430 	.word	0x58025430
 800145c:	58025444 	.word	0x58025444
 8001460:	58025458 	.word	0x58025458
 8001464:	5802546c 	.word	0x5802546c
 8001468:	58025480 	.word	0x58025480
 800146c:	58025494 	.word	0x58025494
 8001470:	2300      	movs	r3, #0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d007      	beq.n	8001486 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001480:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001484:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a6d      	ldr	r2, [pc, #436]	; (8001640 <HAL_DMA_Abort+0x444>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d04a      	beq.n	8001526 <HAL_DMA_Abort+0x32a>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a6b      	ldr	r2, [pc, #428]	; (8001644 <HAL_DMA_Abort+0x448>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d045      	beq.n	8001526 <HAL_DMA_Abort+0x32a>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a6a      	ldr	r2, [pc, #424]	; (8001648 <HAL_DMA_Abort+0x44c>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d040      	beq.n	8001526 <HAL_DMA_Abort+0x32a>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a68      	ldr	r2, [pc, #416]	; (800164c <HAL_DMA_Abort+0x450>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d03b      	beq.n	8001526 <HAL_DMA_Abort+0x32a>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a67      	ldr	r2, [pc, #412]	; (8001650 <HAL_DMA_Abort+0x454>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d036      	beq.n	8001526 <HAL_DMA_Abort+0x32a>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a65      	ldr	r2, [pc, #404]	; (8001654 <HAL_DMA_Abort+0x458>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d031      	beq.n	8001526 <HAL_DMA_Abort+0x32a>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a64      	ldr	r2, [pc, #400]	; (8001658 <HAL_DMA_Abort+0x45c>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d02c      	beq.n	8001526 <HAL_DMA_Abort+0x32a>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a62      	ldr	r2, [pc, #392]	; (800165c <HAL_DMA_Abort+0x460>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d027      	beq.n	8001526 <HAL_DMA_Abort+0x32a>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a61      	ldr	r2, [pc, #388]	; (8001660 <HAL_DMA_Abort+0x464>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d022      	beq.n	8001526 <HAL_DMA_Abort+0x32a>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a5f      	ldr	r2, [pc, #380]	; (8001664 <HAL_DMA_Abort+0x468>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d01d      	beq.n	8001526 <HAL_DMA_Abort+0x32a>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a5e      	ldr	r2, [pc, #376]	; (8001668 <HAL_DMA_Abort+0x46c>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d018      	beq.n	8001526 <HAL_DMA_Abort+0x32a>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a5c      	ldr	r2, [pc, #368]	; (800166c <HAL_DMA_Abort+0x470>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d013      	beq.n	8001526 <HAL_DMA_Abort+0x32a>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a5b      	ldr	r2, [pc, #364]	; (8001670 <HAL_DMA_Abort+0x474>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d00e      	beq.n	8001526 <HAL_DMA_Abort+0x32a>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a59      	ldr	r2, [pc, #356]	; (8001674 <HAL_DMA_Abort+0x478>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d009      	beq.n	8001526 <HAL_DMA_Abort+0x32a>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a58      	ldr	r2, [pc, #352]	; (8001678 <HAL_DMA_Abort+0x47c>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d004      	beq.n	8001526 <HAL_DMA_Abort+0x32a>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a56      	ldr	r2, [pc, #344]	; (800167c <HAL_DMA_Abort+0x480>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d108      	bne.n	8001538 <HAL_DMA_Abort+0x33c>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0201 	bic.w	r2, r2, #1
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	e007      	b.n	8001548 <HAL_DMA_Abort+0x34c>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0201 	bic.w	r2, r2, #1
 8001546:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001548:	e013      	b.n	8001572 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800154a:	f7ff fd2f 	bl	8000fac <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b05      	cmp	r3, #5
 8001556:	d90c      	bls.n	8001572 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2220      	movs	r2, #32
 800155c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2203      	movs	r2, #3
 8001562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e12d      	b.n	80017ce <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1e5      	bne.n	800154a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a2f      	ldr	r2, [pc, #188]	; (8001640 <HAL_DMA_Abort+0x444>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d04a      	beq.n	800161e <HAL_DMA_Abort+0x422>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a2d      	ldr	r2, [pc, #180]	; (8001644 <HAL_DMA_Abort+0x448>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d045      	beq.n	800161e <HAL_DMA_Abort+0x422>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a2c      	ldr	r2, [pc, #176]	; (8001648 <HAL_DMA_Abort+0x44c>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d040      	beq.n	800161e <HAL_DMA_Abort+0x422>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a2a      	ldr	r2, [pc, #168]	; (800164c <HAL_DMA_Abort+0x450>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d03b      	beq.n	800161e <HAL_DMA_Abort+0x422>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a29      	ldr	r2, [pc, #164]	; (8001650 <HAL_DMA_Abort+0x454>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d036      	beq.n	800161e <HAL_DMA_Abort+0x422>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a27      	ldr	r2, [pc, #156]	; (8001654 <HAL_DMA_Abort+0x458>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d031      	beq.n	800161e <HAL_DMA_Abort+0x422>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a26      	ldr	r2, [pc, #152]	; (8001658 <HAL_DMA_Abort+0x45c>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d02c      	beq.n	800161e <HAL_DMA_Abort+0x422>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a24      	ldr	r2, [pc, #144]	; (800165c <HAL_DMA_Abort+0x460>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d027      	beq.n	800161e <HAL_DMA_Abort+0x422>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a23      	ldr	r2, [pc, #140]	; (8001660 <HAL_DMA_Abort+0x464>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d022      	beq.n	800161e <HAL_DMA_Abort+0x422>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a21      	ldr	r2, [pc, #132]	; (8001664 <HAL_DMA_Abort+0x468>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d01d      	beq.n	800161e <HAL_DMA_Abort+0x422>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a20      	ldr	r2, [pc, #128]	; (8001668 <HAL_DMA_Abort+0x46c>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d018      	beq.n	800161e <HAL_DMA_Abort+0x422>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a1e      	ldr	r2, [pc, #120]	; (800166c <HAL_DMA_Abort+0x470>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d013      	beq.n	800161e <HAL_DMA_Abort+0x422>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a1d      	ldr	r2, [pc, #116]	; (8001670 <HAL_DMA_Abort+0x474>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d00e      	beq.n	800161e <HAL_DMA_Abort+0x422>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a1b      	ldr	r2, [pc, #108]	; (8001674 <HAL_DMA_Abort+0x478>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d009      	beq.n	800161e <HAL_DMA_Abort+0x422>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a1a      	ldr	r2, [pc, #104]	; (8001678 <HAL_DMA_Abort+0x47c>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d004      	beq.n	800161e <HAL_DMA_Abort+0x422>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a18      	ldr	r2, [pc, #96]	; (800167c <HAL_DMA_Abort+0x480>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d101      	bne.n	8001622 <HAL_DMA_Abort+0x426>
 800161e:	2301      	movs	r3, #1
 8001620:	e000      	b.n	8001624 <HAL_DMA_Abort+0x428>
 8001622:	2300      	movs	r3, #0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d02b      	beq.n	8001680 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001632:	f003 031f 	and.w	r3, r3, #31
 8001636:	223f      	movs	r2, #63	; 0x3f
 8001638:	409a      	lsls	r2, r3
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	e02a      	b.n	8001696 <HAL_DMA_Abort+0x49a>
 8001640:	40020010 	.word	0x40020010
 8001644:	40020028 	.word	0x40020028
 8001648:	40020040 	.word	0x40020040
 800164c:	40020058 	.word	0x40020058
 8001650:	40020070 	.word	0x40020070
 8001654:	40020088 	.word	0x40020088
 8001658:	400200a0 	.word	0x400200a0
 800165c:	400200b8 	.word	0x400200b8
 8001660:	40020410 	.word	0x40020410
 8001664:	40020428 	.word	0x40020428
 8001668:	40020440 	.word	0x40020440
 800166c:	40020458 	.word	0x40020458
 8001670:	40020470 	.word	0x40020470
 8001674:	40020488 	.word	0x40020488
 8001678:	400204a0 	.word	0x400204a0
 800167c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001684:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800168a:	f003 031f 	and.w	r3, r3, #31
 800168e:	2201      	movs	r2, #1
 8001690:	409a      	lsls	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a4f      	ldr	r2, [pc, #316]	; (80017d8 <HAL_DMA_Abort+0x5dc>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d072      	beq.n	8001786 <HAL_DMA_Abort+0x58a>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a4d      	ldr	r2, [pc, #308]	; (80017dc <HAL_DMA_Abort+0x5e0>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d06d      	beq.n	8001786 <HAL_DMA_Abort+0x58a>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a4c      	ldr	r2, [pc, #304]	; (80017e0 <HAL_DMA_Abort+0x5e4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d068      	beq.n	8001786 <HAL_DMA_Abort+0x58a>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a4a      	ldr	r2, [pc, #296]	; (80017e4 <HAL_DMA_Abort+0x5e8>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d063      	beq.n	8001786 <HAL_DMA_Abort+0x58a>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a49      	ldr	r2, [pc, #292]	; (80017e8 <HAL_DMA_Abort+0x5ec>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d05e      	beq.n	8001786 <HAL_DMA_Abort+0x58a>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a47      	ldr	r2, [pc, #284]	; (80017ec <HAL_DMA_Abort+0x5f0>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d059      	beq.n	8001786 <HAL_DMA_Abort+0x58a>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a46      	ldr	r2, [pc, #280]	; (80017f0 <HAL_DMA_Abort+0x5f4>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d054      	beq.n	8001786 <HAL_DMA_Abort+0x58a>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a44      	ldr	r2, [pc, #272]	; (80017f4 <HAL_DMA_Abort+0x5f8>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d04f      	beq.n	8001786 <HAL_DMA_Abort+0x58a>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a43      	ldr	r2, [pc, #268]	; (80017f8 <HAL_DMA_Abort+0x5fc>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d04a      	beq.n	8001786 <HAL_DMA_Abort+0x58a>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a41      	ldr	r2, [pc, #260]	; (80017fc <HAL_DMA_Abort+0x600>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d045      	beq.n	8001786 <HAL_DMA_Abort+0x58a>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a40      	ldr	r2, [pc, #256]	; (8001800 <HAL_DMA_Abort+0x604>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d040      	beq.n	8001786 <HAL_DMA_Abort+0x58a>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a3e      	ldr	r2, [pc, #248]	; (8001804 <HAL_DMA_Abort+0x608>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d03b      	beq.n	8001786 <HAL_DMA_Abort+0x58a>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a3d      	ldr	r2, [pc, #244]	; (8001808 <HAL_DMA_Abort+0x60c>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d036      	beq.n	8001786 <HAL_DMA_Abort+0x58a>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a3b      	ldr	r2, [pc, #236]	; (800180c <HAL_DMA_Abort+0x610>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d031      	beq.n	8001786 <HAL_DMA_Abort+0x58a>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a3a      	ldr	r2, [pc, #232]	; (8001810 <HAL_DMA_Abort+0x614>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d02c      	beq.n	8001786 <HAL_DMA_Abort+0x58a>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a38      	ldr	r2, [pc, #224]	; (8001814 <HAL_DMA_Abort+0x618>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d027      	beq.n	8001786 <HAL_DMA_Abort+0x58a>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a37      	ldr	r2, [pc, #220]	; (8001818 <HAL_DMA_Abort+0x61c>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d022      	beq.n	8001786 <HAL_DMA_Abort+0x58a>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a35      	ldr	r2, [pc, #212]	; (800181c <HAL_DMA_Abort+0x620>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d01d      	beq.n	8001786 <HAL_DMA_Abort+0x58a>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a34      	ldr	r2, [pc, #208]	; (8001820 <HAL_DMA_Abort+0x624>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d018      	beq.n	8001786 <HAL_DMA_Abort+0x58a>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a32      	ldr	r2, [pc, #200]	; (8001824 <HAL_DMA_Abort+0x628>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d013      	beq.n	8001786 <HAL_DMA_Abort+0x58a>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a31      	ldr	r2, [pc, #196]	; (8001828 <HAL_DMA_Abort+0x62c>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d00e      	beq.n	8001786 <HAL_DMA_Abort+0x58a>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a2f      	ldr	r2, [pc, #188]	; (800182c <HAL_DMA_Abort+0x630>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d009      	beq.n	8001786 <HAL_DMA_Abort+0x58a>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a2e      	ldr	r2, [pc, #184]	; (8001830 <HAL_DMA_Abort+0x634>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d004      	beq.n	8001786 <HAL_DMA_Abort+0x58a>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a2c      	ldr	r2, [pc, #176]	; (8001834 <HAL_DMA_Abort+0x638>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d101      	bne.n	800178a <HAL_DMA_Abort+0x58e>
 8001786:	2301      	movs	r3, #1
 8001788:	e000      	b.n	800178c <HAL_DMA_Abort+0x590>
 800178a:	2300      	movs	r3, #0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d015      	beq.n	80017bc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001798:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00c      	beq.n	80017bc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017b0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80017ba:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40020010 	.word	0x40020010
 80017dc:	40020028 	.word	0x40020028
 80017e0:	40020040 	.word	0x40020040
 80017e4:	40020058 	.word	0x40020058
 80017e8:	40020070 	.word	0x40020070
 80017ec:	40020088 	.word	0x40020088
 80017f0:	400200a0 	.word	0x400200a0
 80017f4:	400200b8 	.word	0x400200b8
 80017f8:	40020410 	.word	0x40020410
 80017fc:	40020428 	.word	0x40020428
 8001800:	40020440 	.word	0x40020440
 8001804:	40020458 	.word	0x40020458
 8001808:	40020470 	.word	0x40020470
 800180c:	40020488 	.word	0x40020488
 8001810:	400204a0 	.word	0x400204a0
 8001814:	400204b8 	.word	0x400204b8
 8001818:	58025408 	.word	0x58025408
 800181c:	5802541c 	.word	0x5802541c
 8001820:	58025430 	.word	0x58025430
 8001824:	58025444 	.word	0x58025444
 8001828:	58025458 	.word	0x58025458
 800182c:	5802546c 	.word	0x5802546c
 8001830:	58025480 	.word	0x58025480
 8001834:	58025494 	.word	0x58025494

08001838 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e237      	b.n	8001cba <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d004      	beq.n	8001860 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2280      	movs	r2, #128	; 0x80
 800185a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e22c      	b.n	8001cba <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a5c      	ldr	r2, [pc, #368]	; (80019d8 <HAL_DMA_Abort_IT+0x1a0>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d04a      	beq.n	8001900 <HAL_DMA_Abort_IT+0xc8>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a5b      	ldr	r2, [pc, #364]	; (80019dc <HAL_DMA_Abort_IT+0x1a4>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d045      	beq.n	8001900 <HAL_DMA_Abort_IT+0xc8>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a59      	ldr	r2, [pc, #356]	; (80019e0 <HAL_DMA_Abort_IT+0x1a8>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d040      	beq.n	8001900 <HAL_DMA_Abort_IT+0xc8>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a58      	ldr	r2, [pc, #352]	; (80019e4 <HAL_DMA_Abort_IT+0x1ac>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d03b      	beq.n	8001900 <HAL_DMA_Abort_IT+0xc8>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a56      	ldr	r2, [pc, #344]	; (80019e8 <HAL_DMA_Abort_IT+0x1b0>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d036      	beq.n	8001900 <HAL_DMA_Abort_IT+0xc8>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a55      	ldr	r2, [pc, #340]	; (80019ec <HAL_DMA_Abort_IT+0x1b4>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d031      	beq.n	8001900 <HAL_DMA_Abort_IT+0xc8>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a53      	ldr	r2, [pc, #332]	; (80019f0 <HAL_DMA_Abort_IT+0x1b8>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d02c      	beq.n	8001900 <HAL_DMA_Abort_IT+0xc8>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a52      	ldr	r2, [pc, #328]	; (80019f4 <HAL_DMA_Abort_IT+0x1bc>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d027      	beq.n	8001900 <HAL_DMA_Abort_IT+0xc8>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a50      	ldr	r2, [pc, #320]	; (80019f8 <HAL_DMA_Abort_IT+0x1c0>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d022      	beq.n	8001900 <HAL_DMA_Abort_IT+0xc8>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a4f      	ldr	r2, [pc, #316]	; (80019fc <HAL_DMA_Abort_IT+0x1c4>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d01d      	beq.n	8001900 <HAL_DMA_Abort_IT+0xc8>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a4d      	ldr	r2, [pc, #308]	; (8001a00 <HAL_DMA_Abort_IT+0x1c8>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d018      	beq.n	8001900 <HAL_DMA_Abort_IT+0xc8>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a4c      	ldr	r2, [pc, #304]	; (8001a04 <HAL_DMA_Abort_IT+0x1cc>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d013      	beq.n	8001900 <HAL_DMA_Abort_IT+0xc8>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a4a      	ldr	r2, [pc, #296]	; (8001a08 <HAL_DMA_Abort_IT+0x1d0>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d00e      	beq.n	8001900 <HAL_DMA_Abort_IT+0xc8>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a49      	ldr	r2, [pc, #292]	; (8001a0c <HAL_DMA_Abort_IT+0x1d4>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d009      	beq.n	8001900 <HAL_DMA_Abort_IT+0xc8>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a47      	ldr	r2, [pc, #284]	; (8001a10 <HAL_DMA_Abort_IT+0x1d8>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d004      	beq.n	8001900 <HAL_DMA_Abort_IT+0xc8>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a46      	ldr	r2, [pc, #280]	; (8001a14 <HAL_DMA_Abort_IT+0x1dc>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d101      	bne.n	8001904 <HAL_DMA_Abort_IT+0xcc>
 8001900:	2301      	movs	r3, #1
 8001902:	e000      	b.n	8001906 <HAL_DMA_Abort_IT+0xce>
 8001904:	2300      	movs	r3, #0
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 8086 	beq.w	8001a18 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2204      	movs	r2, #4
 8001910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a2f      	ldr	r2, [pc, #188]	; (80019d8 <HAL_DMA_Abort_IT+0x1a0>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d04a      	beq.n	80019b4 <HAL_DMA_Abort_IT+0x17c>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a2e      	ldr	r2, [pc, #184]	; (80019dc <HAL_DMA_Abort_IT+0x1a4>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d045      	beq.n	80019b4 <HAL_DMA_Abort_IT+0x17c>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a2c      	ldr	r2, [pc, #176]	; (80019e0 <HAL_DMA_Abort_IT+0x1a8>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d040      	beq.n	80019b4 <HAL_DMA_Abort_IT+0x17c>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a2b      	ldr	r2, [pc, #172]	; (80019e4 <HAL_DMA_Abort_IT+0x1ac>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d03b      	beq.n	80019b4 <HAL_DMA_Abort_IT+0x17c>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a29      	ldr	r2, [pc, #164]	; (80019e8 <HAL_DMA_Abort_IT+0x1b0>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d036      	beq.n	80019b4 <HAL_DMA_Abort_IT+0x17c>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a28      	ldr	r2, [pc, #160]	; (80019ec <HAL_DMA_Abort_IT+0x1b4>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d031      	beq.n	80019b4 <HAL_DMA_Abort_IT+0x17c>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a26      	ldr	r2, [pc, #152]	; (80019f0 <HAL_DMA_Abort_IT+0x1b8>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d02c      	beq.n	80019b4 <HAL_DMA_Abort_IT+0x17c>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a25      	ldr	r2, [pc, #148]	; (80019f4 <HAL_DMA_Abort_IT+0x1bc>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d027      	beq.n	80019b4 <HAL_DMA_Abort_IT+0x17c>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a23      	ldr	r2, [pc, #140]	; (80019f8 <HAL_DMA_Abort_IT+0x1c0>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d022      	beq.n	80019b4 <HAL_DMA_Abort_IT+0x17c>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a22      	ldr	r2, [pc, #136]	; (80019fc <HAL_DMA_Abort_IT+0x1c4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d01d      	beq.n	80019b4 <HAL_DMA_Abort_IT+0x17c>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a20      	ldr	r2, [pc, #128]	; (8001a00 <HAL_DMA_Abort_IT+0x1c8>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d018      	beq.n	80019b4 <HAL_DMA_Abort_IT+0x17c>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a1f      	ldr	r2, [pc, #124]	; (8001a04 <HAL_DMA_Abort_IT+0x1cc>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d013      	beq.n	80019b4 <HAL_DMA_Abort_IT+0x17c>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a1d      	ldr	r2, [pc, #116]	; (8001a08 <HAL_DMA_Abort_IT+0x1d0>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d00e      	beq.n	80019b4 <HAL_DMA_Abort_IT+0x17c>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a1c      	ldr	r2, [pc, #112]	; (8001a0c <HAL_DMA_Abort_IT+0x1d4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d009      	beq.n	80019b4 <HAL_DMA_Abort_IT+0x17c>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a1a      	ldr	r2, [pc, #104]	; (8001a10 <HAL_DMA_Abort_IT+0x1d8>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d004      	beq.n	80019b4 <HAL_DMA_Abort_IT+0x17c>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a19      	ldr	r2, [pc, #100]	; (8001a14 <HAL_DMA_Abort_IT+0x1dc>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d108      	bne.n	80019c6 <HAL_DMA_Abort_IT+0x18e>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 0201 	bic.w	r2, r2, #1
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	e178      	b.n	8001cb8 <HAL_DMA_Abort_IT+0x480>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 0201 	bic.w	r2, r2, #1
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	e16f      	b.n	8001cb8 <HAL_DMA_Abort_IT+0x480>
 80019d8:	40020010 	.word	0x40020010
 80019dc:	40020028 	.word	0x40020028
 80019e0:	40020040 	.word	0x40020040
 80019e4:	40020058 	.word	0x40020058
 80019e8:	40020070 	.word	0x40020070
 80019ec:	40020088 	.word	0x40020088
 80019f0:	400200a0 	.word	0x400200a0
 80019f4:	400200b8 	.word	0x400200b8
 80019f8:	40020410 	.word	0x40020410
 80019fc:	40020428 	.word	0x40020428
 8001a00:	40020440 	.word	0x40020440
 8001a04:	40020458 	.word	0x40020458
 8001a08:	40020470 	.word	0x40020470
 8001a0c:	40020488 	.word	0x40020488
 8001a10:	400204a0 	.word	0x400204a0
 8001a14:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 020e 	bic.w	r2, r2, #14
 8001a26:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a6c      	ldr	r2, [pc, #432]	; (8001be0 <HAL_DMA_Abort_IT+0x3a8>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d04a      	beq.n	8001ac8 <HAL_DMA_Abort_IT+0x290>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a6b      	ldr	r2, [pc, #428]	; (8001be4 <HAL_DMA_Abort_IT+0x3ac>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d045      	beq.n	8001ac8 <HAL_DMA_Abort_IT+0x290>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a69      	ldr	r2, [pc, #420]	; (8001be8 <HAL_DMA_Abort_IT+0x3b0>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d040      	beq.n	8001ac8 <HAL_DMA_Abort_IT+0x290>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a68      	ldr	r2, [pc, #416]	; (8001bec <HAL_DMA_Abort_IT+0x3b4>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d03b      	beq.n	8001ac8 <HAL_DMA_Abort_IT+0x290>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a66      	ldr	r2, [pc, #408]	; (8001bf0 <HAL_DMA_Abort_IT+0x3b8>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d036      	beq.n	8001ac8 <HAL_DMA_Abort_IT+0x290>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a65      	ldr	r2, [pc, #404]	; (8001bf4 <HAL_DMA_Abort_IT+0x3bc>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d031      	beq.n	8001ac8 <HAL_DMA_Abort_IT+0x290>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a63      	ldr	r2, [pc, #396]	; (8001bf8 <HAL_DMA_Abort_IT+0x3c0>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d02c      	beq.n	8001ac8 <HAL_DMA_Abort_IT+0x290>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a62      	ldr	r2, [pc, #392]	; (8001bfc <HAL_DMA_Abort_IT+0x3c4>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d027      	beq.n	8001ac8 <HAL_DMA_Abort_IT+0x290>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a60      	ldr	r2, [pc, #384]	; (8001c00 <HAL_DMA_Abort_IT+0x3c8>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d022      	beq.n	8001ac8 <HAL_DMA_Abort_IT+0x290>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a5f      	ldr	r2, [pc, #380]	; (8001c04 <HAL_DMA_Abort_IT+0x3cc>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d01d      	beq.n	8001ac8 <HAL_DMA_Abort_IT+0x290>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a5d      	ldr	r2, [pc, #372]	; (8001c08 <HAL_DMA_Abort_IT+0x3d0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d018      	beq.n	8001ac8 <HAL_DMA_Abort_IT+0x290>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a5c      	ldr	r2, [pc, #368]	; (8001c0c <HAL_DMA_Abort_IT+0x3d4>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d013      	beq.n	8001ac8 <HAL_DMA_Abort_IT+0x290>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a5a      	ldr	r2, [pc, #360]	; (8001c10 <HAL_DMA_Abort_IT+0x3d8>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d00e      	beq.n	8001ac8 <HAL_DMA_Abort_IT+0x290>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a59      	ldr	r2, [pc, #356]	; (8001c14 <HAL_DMA_Abort_IT+0x3dc>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d009      	beq.n	8001ac8 <HAL_DMA_Abort_IT+0x290>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a57      	ldr	r2, [pc, #348]	; (8001c18 <HAL_DMA_Abort_IT+0x3e0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d004      	beq.n	8001ac8 <HAL_DMA_Abort_IT+0x290>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a56      	ldr	r2, [pc, #344]	; (8001c1c <HAL_DMA_Abort_IT+0x3e4>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d108      	bne.n	8001ada <HAL_DMA_Abort_IT+0x2a2>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0201 	bic.w	r2, r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	e007      	b.n	8001aea <HAL_DMA_Abort_IT+0x2b2>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0201 	bic.w	r2, r2, #1
 8001ae8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a3c      	ldr	r2, [pc, #240]	; (8001be0 <HAL_DMA_Abort_IT+0x3a8>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d072      	beq.n	8001bda <HAL_DMA_Abort_IT+0x3a2>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a3a      	ldr	r2, [pc, #232]	; (8001be4 <HAL_DMA_Abort_IT+0x3ac>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d06d      	beq.n	8001bda <HAL_DMA_Abort_IT+0x3a2>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a39      	ldr	r2, [pc, #228]	; (8001be8 <HAL_DMA_Abort_IT+0x3b0>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d068      	beq.n	8001bda <HAL_DMA_Abort_IT+0x3a2>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a37      	ldr	r2, [pc, #220]	; (8001bec <HAL_DMA_Abort_IT+0x3b4>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d063      	beq.n	8001bda <HAL_DMA_Abort_IT+0x3a2>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a36      	ldr	r2, [pc, #216]	; (8001bf0 <HAL_DMA_Abort_IT+0x3b8>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d05e      	beq.n	8001bda <HAL_DMA_Abort_IT+0x3a2>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a34      	ldr	r2, [pc, #208]	; (8001bf4 <HAL_DMA_Abort_IT+0x3bc>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d059      	beq.n	8001bda <HAL_DMA_Abort_IT+0x3a2>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a33      	ldr	r2, [pc, #204]	; (8001bf8 <HAL_DMA_Abort_IT+0x3c0>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d054      	beq.n	8001bda <HAL_DMA_Abort_IT+0x3a2>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a31      	ldr	r2, [pc, #196]	; (8001bfc <HAL_DMA_Abort_IT+0x3c4>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d04f      	beq.n	8001bda <HAL_DMA_Abort_IT+0x3a2>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a30      	ldr	r2, [pc, #192]	; (8001c00 <HAL_DMA_Abort_IT+0x3c8>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d04a      	beq.n	8001bda <HAL_DMA_Abort_IT+0x3a2>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a2e      	ldr	r2, [pc, #184]	; (8001c04 <HAL_DMA_Abort_IT+0x3cc>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d045      	beq.n	8001bda <HAL_DMA_Abort_IT+0x3a2>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a2d      	ldr	r2, [pc, #180]	; (8001c08 <HAL_DMA_Abort_IT+0x3d0>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d040      	beq.n	8001bda <HAL_DMA_Abort_IT+0x3a2>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a2b      	ldr	r2, [pc, #172]	; (8001c0c <HAL_DMA_Abort_IT+0x3d4>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d03b      	beq.n	8001bda <HAL_DMA_Abort_IT+0x3a2>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a2a      	ldr	r2, [pc, #168]	; (8001c10 <HAL_DMA_Abort_IT+0x3d8>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d036      	beq.n	8001bda <HAL_DMA_Abort_IT+0x3a2>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a28      	ldr	r2, [pc, #160]	; (8001c14 <HAL_DMA_Abort_IT+0x3dc>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d031      	beq.n	8001bda <HAL_DMA_Abort_IT+0x3a2>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a27      	ldr	r2, [pc, #156]	; (8001c18 <HAL_DMA_Abort_IT+0x3e0>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d02c      	beq.n	8001bda <HAL_DMA_Abort_IT+0x3a2>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a25      	ldr	r2, [pc, #148]	; (8001c1c <HAL_DMA_Abort_IT+0x3e4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d027      	beq.n	8001bda <HAL_DMA_Abort_IT+0x3a2>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a24      	ldr	r2, [pc, #144]	; (8001c20 <HAL_DMA_Abort_IT+0x3e8>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d022      	beq.n	8001bda <HAL_DMA_Abort_IT+0x3a2>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a22      	ldr	r2, [pc, #136]	; (8001c24 <HAL_DMA_Abort_IT+0x3ec>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d01d      	beq.n	8001bda <HAL_DMA_Abort_IT+0x3a2>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a21      	ldr	r2, [pc, #132]	; (8001c28 <HAL_DMA_Abort_IT+0x3f0>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d018      	beq.n	8001bda <HAL_DMA_Abort_IT+0x3a2>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a1f      	ldr	r2, [pc, #124]	; (8001c2c <HAL_DMA_Abort_IT+0x3f4>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d013      	beq.n	8001bda <HAL_DMA_Abort_IT+0x3a2>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a1e      	ldr	r2, [pc, #120]	; (8001c30 <HAL_DMA_Abort_IT+0x3f8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d00e      	beq.n	8001bda <HAL_DMA_Abort_IT+0x3a2>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a1c      	ldr	r2, [pc, #112]	; (8001c34 <HAL_DMA_Abort_IT+0x3fc>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d009      	beq.n	8001bda <HAL_DMA_Abort_IT+0x3a2>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a1b      	ldr	r2, [pc, #108]	; (8001c38 <HAL_DMA_Abort_IT+0x400>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d004      	beq.n	8001bda <HAL_DMA_Abort_IT+0x3a2>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a19      	ldr	r2, [pc, #100]	; (8001c3c <HAL_DMA_Abort_IT+0x404>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d132      	bne.n	8001c40 <HAL_DMA_Abort_IT+0x408>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e031      	b.n	8001c42 <HAL_DMA_Abort_IT+0x40a>
 8001bde:	bf00      	nop
 8001be0:	40020010 	.word	0x40020010
 8001be4:	40020028 	.word	0x40020028
 8001be8:	40020040 	.word	0x40020040
 8001bec:	40020058 	.word	0x40020058
 8001bf0:	40020070 	.word	0x40020070
 8001bf4:	40020088 	.word	0x40020088
 8001bf8:	400200a0 	.word	0x400200a0
 8001bfc:	400200b8 	.word	0x400200b8
 8001c00:	40020410 	.word	0x40020410
 8001c04:	40020428 	.word	0x40020428
 8001c08:	40020440 	.word	0x40020440
 8001c0c:	40020458 	.word	0x40020458
 8001c10:	40020470 	.word	0x40020470
 8001c14:	40020488 	.word	0x40020488
 8001c18:	400204a0 	.word	0x400204a0
 8001c1c:	400204b8 	.word	0x400204b8
 8001c20:	58025408 	.word	0x58025408
 8001c24:	5802541c 	.word	0x5802541c
 8001c28:	58025430 	.word	0x58025430
 8001c2c:	58025444 	.word	0x58025444
 8001c30:	58025458 	.word	0x58025458
 8001c34:	5802546c 	.word	0x5802546c
 8001c38:	58025480 	.word	0x58025480
 8001c3c:	58025494 	.word	0x58025494
 8001c40:	2300      	movs	r3, #0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d028      	beq.n	8001c98 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c54:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c60:	f003 031f 	and.w	r3, r3, #31
 8001c64:	2201      	movs	r2, #1
 8001c66:	409a      	lsls	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001c74:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00c      	beq.n	8001c98 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c8c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001c96:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop

08001cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b089      	sub	sp, #36	; 0x24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001cd2:	4b89      	ldr	r3, [pc, #548]	; (8001ef8 <HAL_GPIO_Init+0x234>)
 8001cd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001cd6:	e194      	b.n	8002002 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	2101      	movs	r1, #1
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 8186 	beq.w	8001ffc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d005      	beq.n	8001d08 <HAL_GPIO_Init+0x44>
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d130      	bne.n	8001d6a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	2203      	movs	r2, #3
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d3e:	2201      	movs	r2, #1
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	091b      	lsrs	r3, r3, #4
 8001d54:	f003 0201 	and.w	r2, r3, #1
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	d017      	beq.n	8001da6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	2203      	movs	r2, #3
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d123      	bne.n	8001dfa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	08da      	lsrs	r2, r3, #3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3208      	adds	r2, #8
 8001dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	220f      	movs	r2, #15
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	691a      	ldr	r2, [r3, #16]
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	08da      	lsrs	r2, r3, #3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3208      	adds	r2, #8
 8001df4:	69b9      	ldr	r1, [r7, #24]
 8001df6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	2203      	movs	r2, #3
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 0203 	and.w	r2, r3, #3
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 80e0 	beq.w	8001ffc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3c:	4b2f      	ldr	r3, [pc, #188]	; (8001efc <HAL_GPIO_Init+0x238>)
 8001e3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e42:	4a2e      	ldr	r2, [pc, #184]	; (8001efc <HAL_GPIO_Init+0x238>)
 8001e44:	f043 0302 	orr.w	r3, r3, #2
 8001e48:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e4c:	4b2b      	ldr	r3, [pc, #172]	; (8001efc <HAL_GPIO_Init+0x238>)
 8001e4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e5a:	4a29      	ldr	r2, [pc, #164]	; (8001f00 <HAL_GPIO_Init+0x23c>)
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	089b      	lsrs	r3, r3, #2
 8001e60:	3302      	adds	r3, #2
 8001e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	220f      	movs	r2, #15
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a20      	ldr	r2, [pc, #128]	; (8001f04 <HAL_GPIO_Init+0x240>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d052      	beq.n	8001f2c <HAL_GPIO_Init+0x268>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a1f      	ldr	r2, [pc, #124]	; (8001f08 <HAL_GPIO_Init+0x244>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d031      	beq.n	8001ef2 <HAL_GPIO_Init+0x22e>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a1e      	ldr	r2, [pc, #120]	; (8001f0c <HAL_GPIO_Init+0x248>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d02b      	beq.n	8001eee <HAL_GPIO_Init+0x22a>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a1d      	ldr	r2, [pc, #116]	; (8001f10 <HAL_GPIO_Init+0x24c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d025      	beq.n	8001eea <HAL_GPIO_Init+0x226>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a1c      	ldr	r2, [pc, #112]	; (8001f14 <HAL_GPIO_Init+0x250>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d01f      	beq.n	8001ee6 <HAL_GPIO_Init+0x222>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a1b      	ldr	r2, [pc, #108]	; (8001f18 <HAL_GPIO_Init+0x254>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d019      	beq.n	8001ee2 <HAL_GPIO_Init+0x21e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a1a      	ldr	r2, [pc, #104]	; (8001f1c <HAL_GPIO_Init+0x258>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d013      	beq.n	8001ede <HAL_GPIO_Init+0x21a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a19      	ldr	r2, [pc, #100]	; (8001f20 <HAL_GPIO_Init+0x25c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d00d      	beq.n	8001eda <HAL_GPIO_Init+0x216>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a18      	ldr	r2, [pc, #96]	; (8001f24 <HAL_GPIO_Init+0x260>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d007      	beq.n	8001ed6 <HAL_GPIO_Init+0x212>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a17      	ldr	r2, [pc, #92]	; (8001f28 <HAL_GPIO_Init+0x264>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d101      	bne.n	8001ed2 <HAL_GPIO_Init+0x20e>
 8001ece:	2309      	movs	r3, #9
 8001ed0:	e02d      	b.n	8001f2e <HAL_GPIO_Init+0x26a>
 8001ed2:	230a      	movs	r3, #10
 8001ed4:	e02b      	b.n	8001f2e <HAL_GPIO_Init+0x26a>
 8001ed6:	2308      	movs	r3, #8
 8001ed8:	e029      	b.n	8001f2e <HAL_GPIO_Init+0x26a>
 8001eda:	2307      	movs	r3, #7
 8001edc:	e027      	b.n	8001f2e <HAL_GPIO_Init+0x26a>
 8001ede:	2306      	movs	r3, #6
 8001ee0:	e025      	b.n	8001f2e <HAL_GPIO_Init+0x26a>
 8001ee2:	2305      	movs	r3, #5
 8001ee4:	e023      	b.n	8001f2e <HAL_GPIO_Init+0x26a>
 8001ee6:	2304      	movs	r3, #4
 8001ee8:	e021      	b.n	8001f2e <HAL_GPIO_Init+0x26a>
 8001eea:	2303      	movs	r3, #3
 8001eec:	e01f      	b.n	8001f2e <HAL_GPIO_Init+0x26a>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	e01d      	b.n	8001f2e <HAL_GPIO_Init+0x26a>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e01b      	b.n	8001f2e <HAL_GPIO_Init+0x26a>
 8001ef6:	bf00      	nop
 8001ef8:	58000080 	.word	0x58000080
 8001efc:	58024400 	.word	0x58024400
 8001f00:	58000400 	.word	0x58000400
 8001f04:	58020000 	.word	0x58020000
 8001f08:	58020400 	.word	0x58020400
 8001f0c:	58020800 	.word	0x58020800
 8001f10:	58020c00 	.word	0x58020c00
 8001f14:	58021000 	.word	0x58021000
 8001f18:	58021400 	.word	0x58021400
 8001f1c:	58021800 	.word	0x58021800
 8001f20:	58021c00 	.word	0x58021c00
 8001f24:	58022000 	.word	0x58022000
 8001f28:	58022400 	.word	0x58022400
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	69fa      	ldr	r2, [r7, #28]
 8001f30:	f002 0203 	and.w	r2, r2, #3
 8001f34:	0092      	lsls	r2, r2, #2
 8001f36:	4093      	lsls	r3, r2
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f3e:	4938      	ldr	r1, [pc, #224]	; (8002020 <HAL_GPIO_Init+0x35c>)
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	089b      	lsrs	r3, r3, #2
 8001f44:	3302      	adds	r3, #2
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	43db      	mvns	r3, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001f72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001fa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	3301      	adds	r3, #1
 8002000:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	fa22 f303 	lsr.w	r3, r2, r3
 800200c:	2b00      	cmp	r3, #0
 800200e:	f47f ae63 	bne.w	8001cd8 <HAL_GPIO_Init+0x14>
  }
}
 8002012:	bf00      	nop
 8002014:	bf00      	nop
 8002016:	3724      	adds	r7, #36	; 0x24
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	58000400 	.word	0x58000400

08002024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	807b      	strh	r3, [r7, #2]
 8002030:	4613      	mov	r3, r2
 8002032:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002034:	787b      	ldrb	r3, [r7, #1]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800203a:	887a      	ldrh	r2, [r7, #2]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002040:	e003      	b.n	800204a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002042:	887b      	ldrh	r3, [r7, #2]
 8002044:	041a      	lsls	r2, r3, #16
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	619a      	str	r2, [r3, #24]
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002060:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <HAL_PWREx_ConfigSupply+0x70>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b04      	cmp	r3, #4
 800206a:	d00a      	beq.n	8002082 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800206c:	4b16      	ldr	r3, [pc, #88]	; (80020c8 <HAL_PWREx_ConfigSupply+0x70>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	429a      	cmp	r2, r3
 8002078:	d001      	beq.n	800207e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e01f      	b.n	80020be <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800207e:	2300      	movs	r3, #0
 8002080:	e01d      	b.n	80020be <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002082:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <HAL_PWREx_ConfigSupply+0x70>)
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	f023 0207 	bic.w	r2, r3, #7
 800208a:	490f      	ldr	r1, [pc, #60]	; (80020c8 <HAL_PWREx_ConfigSupply+0x70>)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4313      	orrs	r3, r2
 8002090:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002092:	f7fe ff8b 	bl	8000fac <HAL_GetTick>
 8002096:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002098:	e009      	b.n	80020ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800209a:	f7fe ff87 	bl	8000fac <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020a8:	d901      	bls.n	80020ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e007      	b.n	80020be <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <HAL_PWREx_ConfigSupply+0x70>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020ba:	d1ee      	bne.n	800209a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	58024800 	.word	0x58024800

080020cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08c      	sub	sp, #48	; 0x30
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d102      	bne.n	80020e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	f000 bc48 	b.w	8002970 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 8088 	beq.w	80021fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020ee:	4b99      	ldr	r3, [pc, #612]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020f8:	4b96      	ldr	r3, [pc, #600]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 80020fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80020fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002100:	2b10      	cmp	r3, #16
 8002102:	d007      	beq.n	8002114 <HAL_RCC_OscConfig+0x48>
 8002104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002106:	2b18      	cmp	r3, #24
 8002108:	d111      	bne.n	800212e <HAL_RCC_OscConfig+0x62>
 800210a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d10c      	bne.n	800212e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002114:	4b8f      	ldr	r3, [pc, #572]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d06d      	beq.n	80021fc <HAL_RCC_OscConfig+0x130>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d169      	bne.n	80021fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	f000 bc21 	b.w	8002970 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002136:	d106      	bne.n	8002146 <HAL_RCC_OscConfig+0x7a>
 8002138:	4b86      	ldr	r3, [pc, #536]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a85      	ldr	r2, [pc, #532]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 800213e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	e02e      	b.n	80021a4 <HAL_RCC_OscConfig+0xd8>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10c      	bne.n	8002168 <HAL_RCC_OscConfig+0x9c>
 800214e:	4b81      	ldr	r3, [pc, #516]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a80      	ldr	r2, [pc, #512]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 8002154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	4b7e      	ldr	r3, [pc, #504]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a7d      	ldr	r2, [pc, #500]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 8002160:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	e01d      	b.n	80021a4 <HAL_RCC_OscConfig+0xd8>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0xc0>
 8002172:	4b78      	ldr	r3, [pc, #480]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a77      	ldr	r2, [pc, #476]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 8002178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	4b75      	ldr	r3, [pc, #468]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a74      	ldr	r2, [pc, #464]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 8002184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	e00b      	b.n	80021a4 <HAL_RCC_OscConfig+0xd8>
 800218c:	4b71      	ldr	r3, [pc, #452]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a70      	ldr	r2, [pc, #448]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 8002192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002196:	6013      	str	r3, [r2, #0]
 8002198:	4b6e      	ldr	r3, [pc, #440]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a6d      	ldr	r2, [pc, #436]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 800219e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d013      	beq.n	80021d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7fe fefe 	bl	8000fac <HAL_GetTick>
 80021b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b4:	f7fe fefa 	bl	8000fac <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b64      	cmp	r3, #100	; 0x64
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e3d4      	b.n	8002970 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021c6:	4b63      	ldr	r3, [pc, #396]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0xe8>
 80021d2:	e014      	b.n	80021fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d4:	f7fe feea 	bl	8000fac <HAL_GetTick>
 80021d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021dc:	f7fe fee6 	bl	8000fac <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	; 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e3c0      	b.n	8002970 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80021ee:	4b59      	ldr	r3, [pc, #356]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x110>
 80021fa:	e000      	b.n	80021fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 80ca 	beq.w	80023a0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800220c:	4b51      	ldr	r3, [pc, #324]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002214:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002216:	4b4f      	ldr	r3, [pc, #316]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 8002218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800221c:	6a3b      	ldr	r3, [r7, #32]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d007      	beq.n	8002232 <HAL_RCC_OscConfig+0x166>
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	2b18      	cmp	r3, #24
 8002226:	d156      	bne.n	80022d6 <HAL_RCC_OscConfig+0x20a>
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d151      	bne.n	80022d6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002232:	4b48      	ldr	r3, [pc, #288]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	2b00      	cmp	r3, #0
 800223c:	d005      	beq.n	800224a <HAL_RCC_OscConfig+0x17e>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e392      	b.n	8002970 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800224a:	4b42      	ldr	r3, [pc, #264]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f023 0219 	bic.w	r2, r3, #25
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	493f      	ldr	r1, [pc, #252]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 8002258:	4313      	orrs	r3, r2
 800225a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7fe fea6 	bl	8000fac <HAL_GetTick>
 8002260:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002264:	f7fe fea2 	bl	8000fac <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e37c      	b.n	8002970 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002276:	4b37      	ldr	r3, [pc, #220]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f0      	beq.n	8002264 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002282:	f7fe fe9f 	bl	8000fc4 <HAL_GetREVID>
 8002286:	4603      	mov	r3, r0
 8002288:	f241 0203 	movw	r2, #4099	; 0x1003
 800228c:	4293      	cmp	r3, r2
 800228e:	d817      	bhi.n	80022c0 <HAL_RCC_OscConfig+0x1f4>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	2b40      	cmp	r3, #64	; 0x40
 8002296:	d108      	bne.n	80022aa <HAL_RCC_OscConfig+0x1de>
 8002298:	4b2e      	ldr	r3, [pc, #184]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80022a0:	4a2c      	ldr	r2, [pc, #176]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 80022a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022a8:	e07a      	b.n	80023a0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022aa:	4b2a      	ldr	r3, [pc, #168]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	031b      	lsls	r3, r3, #12
 80022b8:	4926      	ldr	r1, [pc, #152]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022be:	e06f      	b.n	80023a0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c0:	4b24      	ldr	r3, [pc, #144]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	061b      	lsls	r3, r3, #24
 80022ce:	4921      	ldr	r1, [pc, #132]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022d4:	e064      	b.n	80023a0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d047      	beq.n	800236e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80022de:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f023 0219 	bic.w	r2, r3, #25
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	491a      	ldr	r1, [pc, #104]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f0:	f7fe fe5c 	bl	8000fac <HAL_GetTick>
 80022f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f8:	f7fe fe58 	bl	8000fac <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e332      	b.n	8002970 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800230a:	4b12      	ldr	r3, [pc, #72]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0f0      	beq.n	80022f8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002316:	f7fe fe55 	bl	8000fc4 <HAL_GetREVID>
 800231a:	4603      	mov	r3, r0
 800231c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002320:	4293      	cmp	r3, r2
 8002322:	d819      	bhi.n	8002358 <HAL_RCC_OscConfig+0x28c>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	2b40      	cmp	r3, #64	; 0x40
 800232a:	d108      	bne.n	800233e <HAL_RCC_OscConfig+0x272>
 800232c:	4b09      	ldr	r3, [pc, #36]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002334:	4a07      	ldr	r2, [pc, #28]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 8002336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800233a:	6053      	str	r3, [r2, #4]
 800233c:	e030      	b.n	80023a0 <HAL_RCC_OscConfig+0x2d4>
 800233e:	4b05      	ldr	r3, [pc, #20]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	031b      	lsls	r3, r3, #12
 800234c:	4901      	ldr	r1, [pc, #4]	; (8002354 <HAL_RCC_OscConfig+0x288>)
 800234e:	4313      	orrs	r3, r2
 8002350:	604b      	str	r3, [r1, #4]
 8002352:	e025      	b.n	80023a0 <HAL_RCC_OscConfig+0x2d4>
 8002354:	58024400 	.word	0x58024400
 8002358:	4b9a      	ldr	r3, [pc, #616]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	061b      	lsls	r3, r3, #24
 8002366:	4997      	ldr	r1, [pc, #604]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 8002368:	4313      	orrs	r3, r2
 800236a:	604b      	str	r3, [r1, #4]
 800236c:	e018      	b.n	80023a0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800236e:	4b95      	ldr	r3, [pc, #596]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a94      	ldr	r2, [pc, #592]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 8002374:	f023 0301 	bic.w	r3, r3, #1
 8002378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237a:	f7fe fe17 	bl	8000fac <HAL_GetTick>
 800237e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002382:	f7fe fe13 	bl	8000fac <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e2ed      	b.n	8002970 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002394:	4b8b      	ldr	r3, [pc, #556]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1f0      	bne.n	8002382 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0310 	and.w	r3, r3, #16
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 80a9 	beq.w	8002500 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ae:	4b85      	ldr	r3, [pc, #532]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023b6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023b8:	4b82      	ldr	r3, [pc, #520]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 80023ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023bc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d007      	beq.n	80023d4 <HAL_RCC_OscConfig+0x308>
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	2b18      	cmp	r3, #24
 80023c8:	d13a      	bne.n	8002440 <HAL_RCC_OscConfig+0x374>
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d135      	bne.n	8002440 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023d4:	4b7b      	ldr	r3, [pc, #492]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_RCC_OscConfig+0x320>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	2b80      	cmp	r3, #128	; 0x80
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e2c1      	b.n	8002970 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023ec:	f7fe fdea 	bl	8000fc4 <HAL_GetREVID>
 80023f0:	4603      	mov	r3, r0
 80023f2:	f241 0203 	movw	r2, #4099	; 0x1003
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d817      	bhi.n	800242a <HAL_RCC_OscConfig+0x35e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	2b20      	cmp	r3, #32
 8002400:	d108      	bne.n	8002414 <HAL_RCC_OscConfig+0x348>
 8002402:	4b70      	ldr	r3, [pc, #448]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800240a:	4a6e      	ldr	r2, [pc, #440]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 800240c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002410:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002412:	e075      	b.n	8002500 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002414:	4b6b      	ldr	r3, [pc, #428]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	069b      	lsls	r3, r3, #26
 8002422:	4968      	ldr	r1, [pc, #416]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 8002424:	4313      	orrs	r3, r2
 8002426:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002428:	e06a      	b.n	8002500 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800242a:	4b66      	ldr	r3, [pc, #408]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	061b      	lsls	r3, r3, #24
 8002438:	4962      	ldr	r1, [pc, #392]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 800243a:	4313      	orrs	r3, r2
 800243c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800243e:	e05f      	b.n	8002500 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d042      	beq.n	80024ce <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002448:	4b5e      	ldr	r3, [pc, #376]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a5d      	ldr	r2, [pc, #372]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 800244e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002454:	f7fe fdaa 	bl	8000fac <HAL_GetTick>
 8002458:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800245c:	f7fe fda6 	bl	8000fac <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e280      	b.n	8002970 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800246e:	4b55      	ldr	r3, [pc, #340]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0f0      	beq.n	800245c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800247a:	f7fe fda3 	bl	8000fc4 <HAL_GetREVID>
 800247e:	4603      	mov	r3, r0
 8002480:	f241 0203 	movw	r2, #4099	; 0x1003
 8002484:	4293      	cmp	r3, r2
 8002486:	d817      	bhi.n	80024b8 <HAL_RCC_OscConfig+0x3ec>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	2b20      	cmp	r3, #32
 800248e:	d108      	bne.n	80024a2 <HAL_RCC_OscConfig+0x3d6>
 8002490:	4b4c      	ldr	r3, [pc, #304]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002498:	4a4a      	ldr	r2, [pc, #296]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 800249a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800249e:	6053      	str	r3, [r2, #4]
 80024a0:	e02e      	b.n	8002500 <HAL_RCC_OscConfig+0x434>
 80024a2:	4b48      	ldr	r3, [pc, #288]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	069b      	lsls	r3, r3, #26
 80024b0:	4944      	ldr	r1, [pc, #272]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	604b      	str	r3, [r1, #4]
 80024b6:	e023      	b.n	8002500 <HAL_RCC_OscConfig+0x434>
 80024b8:	4b42      	ldr	r3, [pc, #264]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	061b      	lsls	r3, r3, #24
 80024c6:	493f      	ldr	r1, [pc, #252]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	60cb      	str	r3, [r1, #12]
 80024cc:	e018      	b.n	8002500 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80024ce:	4b3d      	ldr	r3, [pc, #244]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a3c      	ldr	r2, [pc, #240]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 80024d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024da:	f7fe fd67 	bl	8000fac <HAL_GetTick>
 80024de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80024e2:	f7fe fd63 	bl	8000fac <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e23d      	b.n	8002970 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80024f4:	4b33      	ldr	r3, [pc, #204]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1f0      	bne.n	80024e2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0308 	and.w	r3, r3, #8
 8002508:	2b00      	cmp	r3, #0
 800250a:	d036      	beq.n	800257a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d019      	beq.n	8002548 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002514:	4b2b      	ldr	r3, [pc, #172]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 8002516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002518:	4a2a      	ldr	r2, [pc, #168]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002520:	f7fe fd44 	bl	8000fac <HAL_GetTick>
 8002524:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002528:	f7fe fd40 	bl	8000fac <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e21a      	b.n	8002970 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800253a:	4b22      	ldr	r3, [pc, #136]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 800253c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0x45c>
 8002546:	e018      	b.n	800257a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002548:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 800254a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800254c:	4a1d      	ldr	r2, [pc, #116]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 800254e:	f023 0301 	bic.w	r3, r3, #1
 8002552:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002554:	f7fe fd2a 	bl	8000fac <HAL_GetTick>
 8002558:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800255c:	f7fe fd26 	bl	8000fac <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e200      	b.n	8002970 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800256e:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 8002570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0320 	and.w	r3, r3, #32
 8002582:	2b00      	cmp	r3, #0
 8002584:	d039      	beq.n	80025fa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d01c      	beq.n	80025c8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800258e:	4b0d      	ldr	r3, [pc, #52]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a0c      	ldr	r2, [pc, #48]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 8002594:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002598:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800259a:	f7fe fd07 	bl	8000fac <HAL_GetTick>
 800259e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025a2:	f7fe fd03 	bl	8000fac <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e1dd      	b.n	8002970 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025b4:	4b03      	ldr	r3, [pc, #12]	; (80025c4 <HAL_RCC_OscConfig+0x4f8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_OscConfig+0x4d6>
 80025c0:	e01b      	b.n	80025fa <HAL_RCC_OscConfig+0x52e>
 80025c2:	bf00      	nop
 80025c4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025c8:	4b9b      	ldr	r3, [pc, #620]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a9a      	ldr	r2, [pc, #616]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 80025ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025d2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80025d4:	f7fe fcea 	bl	8000fac <HAL_GetTick>
 80025d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025dc:	f7fe fce6 	bl	8000fac <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e1c0      	b.n	8002970 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80025ee:	4b92      	ldr	r3, [pc, #584]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 8081 	beq.w	800270a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002608:	4b8c      	ldr	r3, [pc, #560]	; (800283c <HAL_RCC_OscConfig+0x770>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a8b      	ldr	r2, [pc, #556]	; (800283c <HAL_RCC_OscConfig+0x770>)
 800260e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002612:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002614:	f7fe fcca 	bl	8000fac <HAL_GetTick>
 8002618:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800261c:	f7fe fcc6 	bl	8000fac <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b64      	cmp	r3, #100	; 0x64
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e1a0      	b.n	8002970 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800262e:	4b83      	ldr	r3, [pc, #524]	; (800283c <HAL_RCC_OscConfig+0x770>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d106      	bne.n	8002650 <HAL_RCC_OscConfig+0x584>
 8002642:	4b7d      	ldr	r3, [pc, #500]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 8002644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002646:	4a7c      	ldr	r2, [pc, #496]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	6713      	str	r3, [r2, #112]	; 0x70
 800264e:	e02d      	b.n	80026ac <HAL_RCC_OscConfig+0x5e0>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10c      	bne.n	8002672 <HAL_RCC_OscConfig+0x5a6>
 8002658:	4b77      	ldr	r3, [pc, #476]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 800265a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265c:	4a76      	ldr	r2, [pc, #472]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 800265e:	f023 0301 	bic.w	r3, r3, #1
 8002662:	6713      	str	r3, [r2, #112]	; 0x70
 8002664:	4b74      	ldr	r3, [pc, #464]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 8002666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002668:	4a73      	ldr	r2, [pc, #460]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 800266a:	f023 0304 	bic.w	r3, r3, #4
 800266e:	6713      	str	r3, [r2, #112]	; 0x70
 8002670:	e01c      	b.n	80026ac <HAL_RCC_OscConfig+0x5e0>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	2b05      	cmp	r3, #5
 8002678:	d10c      	bne.n	8002694 <HAL_RCC_OscConfig+0x5c8>
 800267a:	4b6f      	ldr	r3, [pc, #444]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 800267c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267e:	4a6e      	ldr	r2, [pc, #440]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 8002680:	f043 0304 	orr.w	r3, r3, #4
 8002684:	6713      	str	r3, [r2, #112]	; 0x70
 8002686:	4b6c      	ldr	r3, [pc, #432]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 8002688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268a:	4a6b      	ldr	r2, [pc, #428]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	6713      	str	r3, [r2, #112]	; 0x70
 8002692:	e00b      	b.n	80026ac <HAL_RCC_OscConfig+0x5e0>
 8002694:	4b68      	ldr	r3, [pc, #416]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 8002696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002698:	4a67      	ldr	r2, [pc, #412]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 800269a:	f023 0301 	bic.w	r3, r3, #1
 800269e:	6713      	str	r3, [r2, #112]	; 0x70
 80026a0:	4b65      	ldr	r3, [pc, #404]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 80026a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a4:	4a64      	ldr	r2, [pc, #400]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 80026a6:	f023 0304 	bic.w	r3, r3, #4
 80026aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d015      	beq.n	80026e0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b4:	f7fe fc7a 	bl	8000fac <HAL_GetTick>
 80026b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026ba:	e00a      	b.n	80026d2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026bc:	f7fe fc76 	bl	8000fac <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e14e      	b.n	8002970 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026d2:	4b59      	ldr	r3, [pc, #356]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 80026d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0ee      	beq.n	80026bc <HAL_RCC_OscConfig+0x5f0>
 80026de:	e014      	b.n	800270a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e0:	f7fe fc64 	bl	8000fac <HAL_GetTick>
 80026e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026e6:	e00a      	b.n	80026fe <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e8:	f7fe fc60 	bl	8000fac <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e138      	b.n	8002970 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026fe:	4b4e      	ldr	r3, [pc, #312]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 8002700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1ee      	bne.n	80026e8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 812d 	beq.w	800296e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002714:	4b48      	ldr	r3, [pc, #288]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800271c:	2b18      	cmp	r3, #24
 800271e:	f000 80bd 	beq.w	800289c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	2b02      	cmp	r3, #2
 8002728:	f040 809e 	bne.w	8002868 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272c:	4b42      	ldr	r3, [pc, #264]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a41      	ldr	r2, [pc, #260]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 8002732:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002736:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002738:	f7fe fc38 	bl	8000fac <HAL_GetTick>
 800273c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002740:	f7fe fc34 	bl	8000fac <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e10e      	b.n	8002970 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002752:	4b39      	ldr	r3, [pc, #228]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800275e:	4b36      	ldr	r3, [pc, #216]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 8002760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002762:	4b37      	ldr	r3, [pc, #220]	; (8002840 <HAL_RCC_OscConfig+0x774>)
 8002764:	4013      	ands	r3, r2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800276e:	0112      	lsls	r2, r2, #4
 8002770:	430a      	orrs	r2, r1
 8002772:	4931      	ldr	r1, [pc, #196]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 8002774:	4313      	orrs	r3, r2
 8002776:	628b      	str	r3, [r1, #40]	; 0x28
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277c:	3b01      	subs	r3, #1
 800277e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002786:	3b01      	subs	r3, #1
 8002788:	025b      	lsls	r3, r3, #9
 800278a:	b29b      	uxth	r3, r3
 800278c:	431a      	orrs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002792:	3b01      	subs	r3, #1
 8002794:	041b      	lsls	r3, r3, #16
 8002796:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a0:	3b01      	subs	r3, #1
 80027a2:	061b      	lsls	r3, r3, #24
 80027a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80027a8:	4923      	ldr	r1, [pc, #140]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80027ae:	4b22      	ldr	r3, [pc, #136]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 80027b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b2:	4a21      	ldr	r2, [pc, #132]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 80027b4:	f023 0301 	bic.w	r3, r3, #1
 80027b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80027ba:	4b1f      	ldr	r3, [pc, #124]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 80027bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027be:	4b21      	ldr	r3, [pc, #132]	; (8002844 <HAL_RCC_OscConfig+0x778>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027c6:	00d2      	lsls	r2, r2, #3
 80027c8:	491b      	ldr	r1, [pc, #108]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80027ce:	4b1a      	ldr	r3, [pc, #104]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 80027d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d2:	f023 020c 	bic.w	r2, r3, #12
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	4917      	ldr	r1, [pc, #92]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80027e0:	4b15      	ldr	r3, [pc, #84]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	f023 0202 	bic.w	r2, r3, #2
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ec:	4912      	ldr	r1, [pc, #72]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80027f2:	4b11      	ldr	r3, [pc, #68]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 80027f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f6:	4a10      	ldr	r2, [pc, #64]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 80027f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027fe:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	4a0d      	ldr	r2, [pc, #52]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 8002804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002808:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800280a:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 800280c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280e:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 8002810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002814:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002816:	4b08      	ldr	r3, [pc, #32]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 8002818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281a:	4a07      	ldr	r2, [pc, #28]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002822:	4b05      	ldr	r3, [pc, #20]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a04      	ldr	r2, [pc, #16]	; (8002838 <HAL_RCC_OscConfig+0x76c>)
 8002828:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800282c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282e:	f7fe fbbd 	bl	8000fac <HAL_GetTick>
 8002832:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002834:	e011      	b.n	800285a <HAL_RCC_OscConfig+0x78e>
 8002836:	bf00      	nop
 8002838:	58024400 	.word	0x58024400
 800283c:	58024800 	.word	0x58024800
 8002840:	fffffc0c 	.word	0xfffffc0c
 8002844:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002848:	f7fe fbb0 	bl	8000fac <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e08a      	b.n	8002970 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800285a:	4b47      	ldr	r3, [pc, #284]	; (8002978 <HAL_RCC_OscConfig+0x8ac>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCC_OscConfig+0x77c>
 8002866:	e082      	b.n	800296e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002868:	4b43      	ldr	r3, [pc, #268]	; (8002978 <HAL_RCC_OscConfig+0x8ac>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a42      	ldr	r2, [pc, #264]	; (8002978 <HAL_RCC_OscConfig+0x8ac>)
 800286e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002874:	f7fe fb9a 	bl	8000fac <HAL_GetTick>
 8002878:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287c:	f7fe fb96 	bl	8000fac <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e070      	b.n	8002970 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800288e:	4b3a      	ldr	r3, [pc, #232]	; (8002978 <HAL_RCC_OscConfig+0x8ac>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0x7b0>
 800289a:	e068      	b.n	800296e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800289c:	4b36      	ldr	r3, [pc, #216]	; (8002978 <HAL_RCC_OscConfig+0x8ac>)
 800289e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80028a2:	4b35      	ldr	r3, [pc, #212]	; (8002978 <HAL_RCC_OscConfig+0x8ac>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d031      	beq.n	8002914 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	f003 0203 	and.w	r2, r3, #3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d12a      	bne.n	8002914 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	091b      	lsrs	r3, r3, #4
 80028c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d122      	bne.n	8002914 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028da:	429a      	cmp	r2, r3
 80028dc:	d11a      	bne.n	8002914 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	0a5b      	lsrs	r3, r3, #9
 80028e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d111      	bne.n	8002914 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	0c1b      	lsrs	r3, r3, #16
 80028f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80028fe:	429a      	cmp	r2, r3
 8002900:	d108      	bne.n	8002914 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	0e1b      	lsrs	r3, r3, #24
 8002906:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002910:	429a      	cmp	r2, r3
 8002912:	d001      	beq.n	8002918 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e02b      	b.n	8002970 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002918:	4b17      	ldr	r3, [pc, #92]	; (8002978 <HAL_RCC_OscConfig+0x8ac>)
 800291a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291c:	08db      	lsrs	r3, r3, #3
 800291e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002922:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	429a      	cmp	r2, r3
 800292c:	d01f      	beq.n	800296e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800292e:	4b12      	ldr	r3, [pc, #72]	; (8002978 <HAL_RCC_OscConfig+0x8ac>)
 8002930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002932:	4a11      	ldr	r2, [pc, #68]	; (8002978 <HAL_RCC_OscConfig+0x8ac>)
 8002934:	f023 0301 	bic.w	r3, r3, #1
 8002938:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800293a:	f7fe fb37 	bl	8000fac <HAL_GetTick>
 800293e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002940:	bf00      	nop
 8002942:	f7fe fb33 	bl	8000fac <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	4293      	cmp	r3, r2
 800294c:	d0f9      	beq.n	8002942 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800294e:	4b0a      	ldr	r3, [pc, #40]	; (8002978 <HAL_RCC_OscConfig+0x8ac>)
 8002950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002952:	4b0a      	ldr	r3, [pc, #40]	; (800297c <HAL_RCC_OscConfig+0x8b0>)
 8002954:	4013      	ands	r3, r2
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800295a:	00d2      	lsls	r2, r2, #3
 800295c:	4906      	ldr	r1, [pc, #24]	; (8002978 <HAL_RCC_OscConfig+0x8ac>)
 800295e:	4313      	orrs	r3, r2
 8002960:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002962:	4b05      	ldr	r3, [pc, #20]	; (8002978 <HAL_RCC_OscConfig+0x8ac>)
 8002964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002966:	4a04      	ldr	r2, [pc, #16]	; (8002978 <HAL_RCC_OscConfig+0x8ac>)
 8002968:	f043 0301 	orr.w	r3, r3, #1
 800296c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3730      	adds	r7, #48	; 0x30
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	58024400 	.word	0x58024400
 800297c:	ffff0007 	.word	0xffff0007

08002980 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e19c      	b.n	8002cce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002994:	4b8a      	ldr	r3, [pc, #552]	; (8002bc0 <HAL_RCC_ClockConfig+0x240>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 030f 	and.w	r3, r3, #15
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d910      	bls.n	80029c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a2:	4b87      	ldr	r3, [pc, #540]	; (8002bc0 <HAL_RCC_ClockConfig+0x240>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f023 020f 	bic.w	r2, r3, #15
 80029aa:	4985      	ldr	r1, [pc, #532]	; (8002bc0 <HAL_RCC_ClockConfig+0x240>)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b2:	4b83      	ldr	r3, [pc, #524]	; (8002bc0 <HAL_RCC_ClockConfig+0x240>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d001      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e184      	b.n	8002cce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d010      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691a      	ldr	r2, [r3, #16]
 80029d4:	4b7b      	ldr	r3, [pc, #492]	; (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029dc:	429a      	cmp	r2, r3
 80029de:	d908      	bls.n	80029f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80029e0:	4b78      	ldr	r3, [pc, #480]	; (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	4975      	ldr	r1, [pc, #468]	; (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d010      	beq.n	8002a20 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695a      	ldr	r2, [r3, #20]
 8002a02:	4b70      	ldr	r3, [pc, #448]	; (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d908      	bls.n	8002a20 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a0e:	4b6d      	ldr	r3, [pc, #436]	; (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	496a      	ldr	r1, [pc, #424]	; (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0310 	and.w	r3, r3, #16
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d010      	beq.n	8002a4e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	699a      	ldr	r2, [r3, #24]
 8002a30:	4b64      	ldr	r3, [pc, #400]	; (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d908      	bls.n	8002a4e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a3c:	4b61      	ldr	r3, [pc, #388]	; (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	495e      	ldr	r1, [pc, #376]	; (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0320 	and.w	r3, r3, #32
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d010      	beq.n	8002a7c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69da      	ldr	r2, [r3, #28]
 8002a5e:	4b59      	ldr	r3, [pc, #356]	; (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d908      	bls.n	8002a7c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002a6a:	4b56      	ldr	r3, [pc, #344]	; (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	4953      	ldr	r1, [pc, #332]	; (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d010      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	4b4d      	ldr	r3, [pc, #308]	; (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	f003 030f 	and.w	r3, r3, #15
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d908      	bls.n	8002aaa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a98:	4b4a      	ldr	r3, [pc, #296]	; (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	f023 020f 	bic.w	r2, r3, #15
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	4947      	ldr	r1, [pc, #284]	; (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d055      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002ab6:	4b43      	ldr	r3, [pc, #268]	; (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	4940      	ldr	r1, [pc, #256]	; (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d107      	bne.n	8002ae0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ad0:	4b3c      	ldr	r3, [pc, #240]	; (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d121      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e0f6      	b.n	8002cce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d107      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ae8:	4b36      	ldr	r3, [pc, #216]	; (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d115      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0ea      	b.n	8002cce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d107      	bne.n	8002b10 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b00:	4b30      	ldr	r3, [pc, #192]	; (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d109      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e0de      	b.n	8002cce <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b10:	4b2c      	ldr	r3, [pc, #176]	; (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0d6      	b.n	8002cce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b20:	4b28      	ldr	r3, [pc, #160]	; (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	f023 0207 	bic.w	r2, r3, #7
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	4925      	ldr	r1, [pc, #148]	; (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b32:	f7fe fa3b 	bl	8000fac <HAL_GetTick>
 8002b36:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b38:	e00a      	b.n	8002b50 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b3a:	f7fe fa37 	bl	8000fac <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e0be      	b.n	8002cce <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b50:	4b1c      	ldr	r3, [pc, #112]	; (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d1eb      	bne.n	8002b3a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d010      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	4b14      	ldr	r3, [pc, #80]	; (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d208      	bcs.n	8002b90 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b7e:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	f023 020f 	bic.w	r2, r3, #15
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	490e      	ldr	r1, [pc, #56]	; (8002bc4 <HAL_RCC_ClockConfig+0x244>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_RCC_ClockConfig+0x240>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 030f 	and.w	r3, r3, #15
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d214      	bcs.n	8002bc8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9e:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <HAL_RCC_ClockConfig+0x240>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f023 020f 	bic.w	r2, r3, #15
 8002ba6:	4906      	ldr	r1, [pc, #24]	; (8002bc0 <HAL_RCC_ClockConfig+0x240>)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bae:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <HAL_RCC_ClockConfig+0x240>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d005      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e086      	b.n	8002cce <HAL_RCC_ClockConfig+0x34e>
 8002bc0:	52002000 	.word	0x52002000
 8002bc4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d010      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691a      	ldr	r2, [r3, #16]
 8002bd8:	4b3f      	ldr	r3, [pc, #252]	; (8002cd8 <HAL_RCC_ClockConfig+0x358>)
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d208      	bcs.n	8002bf6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002be4:	4b3c      	ldr	r3, [pc, #240]	; (8002cd8 <HAL_RCC_ClockConfig+0x358>)
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	4939      	ldr	r1, [pc, #228]	; (8002cd8 <HAL_RCC_ClockConfig+0x358>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d010      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	695a      	ldr	r2, [r3, #20]
 8002c06:	4b34      	ldr	r3, [pc, #208]	; (8002cd8 <HAL_RCC_ClockConfig+0x358>)
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d208      	bcs.n	8002c24 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c12:	4b31      	ldr	r3, [pc, #196]	; (8002cd8 <HAL_RCC_ClockConfig+0x358>)
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	492e      	ldr	r1, [pc, #184]	; (8002cd8 <HAL_RCC_ClockConfig+0x358>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0310 	and.w	r3, r3, #16
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d010      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	699a      	ldr	r2, [r3, #24]
 8002c34:	4b28      	ldr	r3, [pc, #160]	; (8002cd8 <HAL_RCC_ClockConfig+0x358>)
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d208      	bcs.n	8002c52 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c40:	4b25      	ldr	r3, [pc, #148]	; (8002cd8 <HAL_RCC_ClockConfig+0x358>)
 8002c42:	69db      	ldr	r3, [r3, #28]
 8002c44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	4922      	ldr	r1, [pc, #136]	; (8002cd8 <HAL_RCC_ClockConfig+0x358>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0320 	and.w	r3, r3, #32
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d010      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69da      	ldr	r2, [r3, #28]
 8002c62:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <HAL_RCC_ClockConfig+0x358>)
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d208      	bcs.n	8002c80 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c6e:	4b1a      	ldr	r3, [pc, #104]	; (8002cd8 <HAL_RCC_ClockConfig+0x358>)
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	4917      	ldr	r1, [pc, #92]	; (8002cd8 <HAL_RCC_ClockConfig+0x358>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c80:	f000 f834 	bl	8002cec <HAL_RCC_GetSysClockFreq>
 8002c84:	4602      	mov	r2, r0
 8002c86:	4b14      	ldr	r3, [pc, #80]	; (8002cd8 <HAL_RCC_ClockConfig+0x358>)
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	0a1b      	lsrs	r3, r3, #8
 8002c8c:	f003 030f 	and.w	r3, r3, #15
 8002c90:	4912      	ldr	r1, [pc, #72]	; (8002cdc <HAL_RCC_ClockConfig+0x35c>)
 8002c92:	5ccb      	ldrb	r3, [r1, r3]
 8002c94:	f003 031f 	and.w	r3, r3, #31
 8002c98:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c9e:	4b0e      	ldr	r3, [pc, #56]	; (8002cd8 <HAL_RCC_ClockConfig+0x358>)
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	4a0d      	ldr	r2, [pc, #52]	; (8002cdc <HAL_RCC_ClockConfig+0x35c>)
 8002ca8:	5cd3      	ldrb	r3, [r2, r3]
 8002caa:	f003 031f 	and.w	r3, r3, #31
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb4:	4a0a      	ldr	r2, [pc, #40]	; (8002ce0 <HAL_RCC_ClockConfig+0x360>)
 8002cb6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002cb8:	4a0a      	ldr	r2, [pc, #40]	; (8002ce4 <HAL_RCC_ClockConfig+0x364>)
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <HAL_RCC_ClockConfig+0x368>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fe f928 	bl	8000f18 <HAL_InitTick>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	58024400 	.word	0x58024400
 8002cdc:	08006a14 	.word	0x08006a14
 8002ce0:	24000004 	.word	0x24000004
 8002ce4:	24000000 	.word	0x24000000
 8002ce8:	24000008 	.word	0x24000008

08002cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b089      	sub	sp, #36	; 0x24
 8002cf0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cf2:	4bb3      	ldr	r3, [pc, #716]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cfa:	2b18      	cmp	r3, #24
 8002cfc:	f200 8155 	bhi.w	8002faa <HAL_RCC_GetSysClockFreq+0x2be>
 8002d00:	a201      	add	r2, pc, #4	; (adr r2, 8002d08 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d06:	bf00      	nop
 8002d08:	08002d6d 	.word	0x08002d6d
 8002d0c:	08002fab 	.word	0x08002fab
 8002d10:	08002fab 	.word	0x08002fab
 8002d14:	08002fab 	.word	0x08002fab
 8002d18:	08002fab 	.word	0x08002fab
 8002d1c:	08002fab 	.word	0x08002fab
 8002d20:	08002fab 	.word	0x08002fab
 8002d24:	08002fab 	.word	0x08002fab
 8002d28:	08002d93 	.word	0x08002d93
 8002d2c:	08002fab 	.word	0x08002fab
 8002d30:	08002fab 	.word	0x08002fab
 8002d34:	08002fab 	.word	0x08002fab
 8002d38:	08002fab 	.word	0x08002fab
 8002d3c:	08002fab 	.word	0x08002fab
 8002d40:	08002fab 	.word	0x08002fab
 8002d44:	08002fab 	.word	0x08002fab
 8002d48:	08002d99 	.word	0x08002d99
 8002d4c:	08002fab 	.word	0x08002fab
 8002d50:	08002fab 	.word	0x08002fab
 8002d54:	08002fab 	.word	0x08002fab
 8002d58:	08002fab 	.word	0x08002fab
 8002d5c:	08002fab 	.word	0x08002fab
 8002d60:	08002fab 	.word	0x08002fab
 8002d64:	08002fab 	.word	0x08002fab
 8002d68:	08002d9f 	.word	0x08002d9f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d6c:	4b94      	ldr	r3, [pc, #592]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0320 	and.w	r3, r3, #32
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d009      	beq.n	8002d8c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d78:	4b91      	ldr	r3, [pc, #580]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	08db      	lsrs	r3, r3, #3
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	4a90      	ldr	r2, [pc, #576]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d84:	fa22 f303 	lsr.w	r3, r2, r3
 8002d88:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002d8a:	e111      	b.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002d8c:	4b8d      	ldr	r3, [pc, #564]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d8e:	61bb      	str	r3, [r7, #24]
      break;
 8002d90:	e10e      	b.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002d92:	4b8d      	ldr	r3, [pc, #564]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d94:	61bb      	str	r3, [r7, #24]
      break;
 8002d96:	e10b      	b.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002d98:	4b8c      	ldr	r3, [pc, #560]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002d9a:	61bb      	str	r3, [r7, #24]
      break;
 8002d9c:	e108      	b.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002d9e:	4b88      	ldr	r3, [pc, #544]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002da8:	4b85      	ldr	r3, [pc, #532]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dac:	091b      	lsrs	r3, r3, #4
 8002dae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002db2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002db4:	4b82      	ldr	r3, [pc, #520]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002dbe:	4b80      	ldr	r3, [pc, #512]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc2:	08db      	lsrs	r3, r3, #3
 8002dc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	fb02 f303 	mul.w	r3, r2, r3
 8002dce:	ee07 3a90 	vmov	s15, r3
 8002dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dd6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 80e1 	beq.w	8002fa4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	f000 8083 	beq.w	8002ef0 <HAL_RCC_GetSysClockFreq+0x204>
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	f200 80a1 	bhi.w	8002f34 <HAL_RCC_GetSysClockFreq+0x248>
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <HAL_RCC_GetSysClockFreq+0x114>
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d056      	beq.n	8002eac <HAL_RCC_GetSysClockFreq+0x1c0>
 8002dfe:	e099      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e00:	4b6f      	ldr	r3, [pc, #444]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0320 	and.w	r3, r3, #32
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d02d      	beq.n	8002e68 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e0c:	4b6c      	ldr	r3, [pc, #432]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	08db      	lsrs	r3, r3, #3
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	4a6b      	ldr	r2, [pc, #428]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e18:	fa22 f303 	lsr.w	r3, r2, r3
 8002e1c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	ee07 3a90 	vmov	s15, r3
 8002e24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	ee07 3a90 	vmov	s15, r3
 8002e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e36:	4b62      	ldr	r3, [pc, #392]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e3e:	ee07 3a90 	vmov	s15, r3
 8002e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e46:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e4a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002fd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e62:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002e66:	e087      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	ee07 3a90 	vmov	s15, r3
 8002e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e72:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002fd4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e7a:	4b51      	ldr	r3, [pc, #324]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e82:	ee07 3a90 	vmov	s15, r3
 8002e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e8e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002fd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ea6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002eaa:	e065      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	ee07 3a90 	vmov	s15, r3
 8002eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eb6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002fd8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ebe:	4b40      	ldr	r3, [pc, #256]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ec6:	ee07 3a90 	vmov	s15, r3
 8002eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ece:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ed2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002fd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ede:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002eee:	e043      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	ee07 3a90 	vmov	s15, r3
 8002ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002efa:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002fdc <HAL_RCC_GetSysClockFreq+0x2f0>
 8002efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f02:	4b2f      	ldr	r3, [pc, #188]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f0a:	ee07 3a90 	vmov	s15, r3
 8002f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f12:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f16:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002fd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f32:	e021      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	ee07 3a90 	vmov	s15, r3
 8002f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f3e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002fd8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f46:	4b1e      	ldr	r3, [pc, #120]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f4e:	ee07 3a90 	vmov	s15, r3
 8002f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f56:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f5a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002fd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f76:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002f78:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7c:	0a5b      	lsrs	r3, r3, #9
 8002f7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f82:	3301      	adds	r3, #1
 8002f84:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	ee07 3a90 	vmov	s15, r3
 8002f8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f90:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f9c:	ee17 3a90 	vmov	r3, s15
 8002fa0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002fa2:	e005      	b.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	61bb      	str	r3, [r7, #24]
      break;
 8002fa8:	e002      	b.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002faa:	4b07      	ldr	r3, [pc, #28]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002fac:	61bb      	str	r3, [r7, #24]
      break;
 8002fae:	bf00      	nop
  }

  return sysclockfreq;
 8002fb0:	69bb      	ldr	r3, [r7, #24]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3724      	adds	r7, #36	; 0x24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	58024400 	.word	0x58024400
 8002fc4:	03d09000 	.word	0x03d09000
 8002fc8:	003d0900 	.word	0x003d0900
 8002fcc:	017d7840 	.word	0x017d7840
 8002fd0:	46000000 	.word	0x46000000
 8002fd4:	4c742400 	.word	0x4c742400
 8002fd8:	4a742400 	.word	0x4a742400
 8002fdc:	4bbebc20 	.word	0x4bbebc20

08002fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002fe6:	f7ff fe81 	bl	8002cec <HAL_RCC_GetSysClockFreq>
 8002fea:	4602      	mov	r2, r0
 8002fec:	4b10      	ldr	r3, [pc, #64]	; (8003030 <HAL_RCC_GetHCLKFreq+0x50>)
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	0a1b      	lsrs	r3, r3, #8
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	490f      	ldr	r1, [pc, #60]	; (8003034 <HAL_RCC_GetHCLKFreq+0x54>)
 8002ff8:	5ccb      	ldrb	r3, [r1, r3]
 8002ffa:	f003 031f 	and.w	r3, r3, #31
 8002ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8003002:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003004:	4b0a      	ldr	r3, [pc, #40]	; (8003030 <HAL_RCC_GetHCLKFreq+0x50>)
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	f003 030f 	and.w	r3, r3, #15
 800300c:	4a09      	ldr	r2, [pc, #36]	; (8003034 <HAL_RCC_GetHCLKFreq+0x54>)
 800300e:	5cd3      	ldrb	r3, [r2, r3]
 8003010:	f003 031f 	and.w	r3, r3, #31
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	fa22 f303 	lsr.w	r3, r2, r3
 800301a:	4a07      	ldr	r2, [pc, #28]	; (8003038 <HAL_RCC_GetHCLKFreq+0x58>)
 800301c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800301e:	4a07      	ldr	r2, [pc, #28]	; (800303c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003024:	4b04      	ldr	r3, [pc, #16]	; (8003038 <HAL_RCC_GetHCLKFreq+0x58>)
 8003026:	681b      	ldr	r3, [r3, #0]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	58024400 	.word	0x58024400
 8003034:	08006a14 	.word	0x08006a14
 8003038:	24000004 	.word	0x24000004
 800303c:	24000000 	.word	0x24000000

08003040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003044:	f7ff ffcc 	bl	8002fe0 <HAL_RCC_GetHCLKFreq>
 8003048:	4602      	mov	r2, r0
 800304a:	4b06      	ldr	r3, [pc, #24]	; (8003064 <HAL_RCC_GetPCLK1Freq+0x24>)
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	091b      	lsrs	r3, r3, #4
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	4904      	ldr	r1, [pc, #16]	; (8003068 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003056:	5ccb      	ldrb	r3, [r1, r3]
 8003058:	f003 031f 	and.w	r3, r3, #31
 800305c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003060:	4618      	mov	r0, r3
 8003062:	bd80      	pop	{r7, pc}
 8003064:	58024400 	.word	0x58024400
 8003068:	08006a14 	.word	0x08006a14

0800306c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003070:	f7ff ffb6 	bl	8002fe0 <HAL_RCC_GetHCLKFreq>
 8003074:	4602      	mov	r2, r0
 8003076:	4b06      	ldr	r3, [pc, #24]	; (8003090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003078:	69db      	ldr	r3, [r3, #28]
 800307a:	0a1b      	lsrs	r3, r3, #8
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	4904      	ldr	r1, [pc, #16]	; (8003094 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003082:	5ccb      	ldrb	r3, [r1, r3]
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800308c:	4618      	mov	r0, r3
 800308e:	bd80      	pop	{r7, pc}
 8003090:	58024400 	.word	0x58024400
 8003094:	08006a14 	.word	0x08006a14

08003098 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800309c:	b0ca      	sub	sp, #296	; 0x128
 800309e:	af00      	add	r7, sp, #0
 80030a0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030a4:	2300      	movs	r3, #0
 80030a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030aa:	2300      	movs	r3, #0
 80030ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80030bc:	2500      	movs	r5, #0
 80030be:	ea54 0305 	orrs.w	r3, r4, r5
 80030c2:	d049      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80030c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030ce:	d02f      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80030d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030d4:	d828      	bhi.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80030d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030da:	d01a      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80030dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030e0:	d822      	bhi.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 80030e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030ea:	d007      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030ec:	e01c      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030ee:	4bb8      	ldr	r3, [pc, #736]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f2:	4ab7      	ldr	r2, [pc, #732]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80030fa:	e01a      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80030fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003100:	3308      	adds	r3, #8
 8003102:	2102      	movs	r1, #2
 8003104:	4618      	mov	r0, r3
 8003106:	f001 fc8f 	bl	8004a28 <RCCEx_PLL2_Config>
 800310a:	4603      	mov	r3, r0
 800310c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003110:	e00f      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003116:	3328      	adds	r3, #40	; 0x28
 8003118:	2102      	movs	r1, #2
 800311a:	4618      	mov	r0, r3
 800311c:	f001 fd36 	bl	8004b8c <RCCEx_PLL3_Config>
 8003120:	4603      	mov	r3, r0
 8003122:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003126:	e004      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800312e:	e000      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003130:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003132:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10a      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800313a:	4ba5      	ldr	r3, [pc, #660]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800313c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800313e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003146:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003148:	4aa1      	ldr	r2, [pc, #644]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800314a:	430b      	orrs	r3, r1
 800314c:	6513      	str	r3, [r2, #80]	; 0x50
 800314e:	e003      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003150:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003154:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800315c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003160:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003164:	f04f 0900 	mov.w	r9, #0
 8003168:	ea58 0309 	orrs.w	r3, r8, r9
 800316c:	d047      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800316e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003174:	2b04      	cmp	r3, #4
 8003176:	d82a      	bhi.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003178:	a201      	add	r2, pc, #4	; (adr r2, 8003180 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800317a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317e:	bf00      	nop
 8003180:	08003195 	.word	0x08003195
 8003184:	080031a3 	.word	0x080031a3
 8003188:	080031b9 	.word	0x080031b9
 800318c:	080031d7 	.word	0x080031d7
 8003190:	080031d7 	.word	0x080031d7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003194:	4b8e      	ldr	r3, [pc, #568]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003198:	4a8d      	ldr	r2, [pc, #564]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800319a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800319e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031a0:	e01a      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031a6:	3308      	adds	r3, #8
 80031a8:	2100      	movs	r1, #0
 80031aa:	4618      	mov	r0, r3
 80031ac:	f001 fc3c 	bl	8004a28 <RCCEx_PLL2_Config>
 80031b0:	4603      	mov	r3, r0
 80031b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031b6:	e00f      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031bc:	3328      	adds	r3, #40	; 0x28
 80031be:	2100      	movs	r1, #0
 80031c0:	4618      	mov	r0, r3
 80031c2:	f001 fce3 	bl	8004b8c <RCCEx_PLL3_Config>
 80031c6:	4603      	mov	r3, r0
 80031c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031cc:	e004      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80031d4:	e000      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80031d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10a      	bne.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031e0:	4b7b      	ldr	r3, [pc, #492]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e4:	f023 0107 	bic.w	r1, r3, #7
 80031e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ee:	4a78      	ldr	r2, [pc, #480]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031f0:	430b      	orrs	r3, r1
 80031f2:	6513      	str	r3, [r2, #80]	; 0x50
 80031f4:	e003      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80031fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003206:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800320a:	f04f 0b00 	mov.w	fp, #0
 800320e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003212:	d04c      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800321e:	d030      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003224:	d829      	bhi.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003226:	2bc0      	cmp	r3, #192	; 0xc0
 8003228:	d02d      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800322a:	2bc0      	cmp	r3, #192	; 0xc0
 800322c:	d825      	bhi.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800322e:	2b80      	cmp	r3, #128	; 0x80
 8003230:	d018      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003232:	2b80      	cmp	r3, #128	; 0x80
 8003234:	d821      	bhi.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800323a:	2b40      	cmp	r3, #64	; 0x40
 800323c:	d007      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800323e:	e01c      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003240:	4b63      	ldr	r3, [pc, #396]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003244:	4a62      	ldr	r2, [pc, #392]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800324a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800324c:	e01c      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800324e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003252:	3308      	adds	r3, #8
 8003254:	2100      	movs	r1, #0
 8003256:	4618      	mov	r0, r3
 8003258:	f001 fbe6 	bl	8004a28 <RCCEx_PLL2_Config>
 800325c:	4603      	mov	r3, r0
 800325e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003262:	e011      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003268:	3328      	adds	r3, #40	; 0x28
 800326a:	2100      	movs	r1, #0
 800326c:	4618      	mov	r0, r3
 800326e:	f001 fc8d 	bl	8004b8c <RCCEx_PLL3_Config>
 8003272:	4603      	mov	r3, r0
 8003274:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003278:	e006      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003280:	e002      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003282:	bf00      	nop
 8003284:	e000      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003286:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003288:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10a      	bne.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003290:	4b4f      	ldr	r3, [pc, #316]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003294:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003298:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800329c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329e:	4a4c      	ldr	r2, [pc, #304]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032a0:	430b      	orrs	r3, r1
 80032a2:	6513      	str	r3, [r2, #80]	; 0x50
 80032a4:	e003      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80032ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80032ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80032be:	2300      	movs	r3, #0
 80032c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80032c4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80032c8:	460b      	mov	r3, r1
 80032ca:	4313      	orrs	r3, r2
 80032cc:	d053      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80032ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80032d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032da:	d035      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80032dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032e0:	d82e      	bhi.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80032e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80032e6:	d031      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80032e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80032ec:	d828      	bhi.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80032ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032f2:	d01a      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80032f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032f8:	d822      	bhi.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80032fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003302:	d007      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003304:	e01c      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003306:	4b32      	ldr	r3, [pc, #200]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330a:	4a31      	ldr	r2, [pc, #196]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800330c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003310:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003312:	e01c      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003318:	3308      	adds	r3, #8
 800331a:	2100      	movs	r1, #0
 800331c:	4618      	mov	r0, r3
 800331e:	f001 fb83 	bl	8004a28 <RCCEx_PLL2_Config>
 8003322:	4603      	mov	r3, r0
 8003324:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003328:	e011      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800332a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800332e:	3328      	adds	r3, #40	; 0x28
 8003330:	2100      	movs	r1, #0
 8003332:	4618      	mov	r0, r3
 8003334:	f001 fc2a 	bl	8004b8c <RCCEx_PLL3_Config>
 8003338:	4603      	mov	r3, r0
 800333a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800333e:	e006      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003346:	e002      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003348:	bf00      	nop
 800334a:	e000      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800334c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800334e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10b      	bne.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003356:	4b1e      	ldr	r3, [pc, #120]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800335e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003362:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003366:	4a1a      	ldr	r2, [pc, #104]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003368:	430b      	orrs	r3, r1
 800336a:	6593      	str	r3, [r2, #88]	; 0x58
 800336c:	e003      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800336e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003372:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800337a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003382:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003386:	2300      	movs	r3, #0
 8003388:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800338c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003390:	460b      	mov	r3, r1
 8003392:	4313      	orrs	r3, r2
 8003394:	d056      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800339a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800339e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033a2:	d038      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80033a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033a8:	d831      	bhi.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80033aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033ae:	d034      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80033b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033b4:	d82b      	bhi.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80033b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033ba:	d01d      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80033bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033c0:	d825      	bhi.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d006      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80033c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033ca:	d00a      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80033cc:	e01f      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80033ce:	bf00      	nop
 80033d0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033d4:	4ba2      	ldr	r3, [pc, #648]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d8:	4aa1      	ldr	r2, [pc, #644]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033e0:	e01c      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033e6:	3308      	adds	r3, #8
 80033e8:	2100      	movs	r1, #0
 80033ea:	4618      	mov	r0, r3
 80033ec:	f001 fb1c 	bl	8004a28 <RCCEx_PLL2_Config>
 80033f0:	4603      	mov	r3, r0
 80033f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80033f6:	e011      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033fc:	3328      	adds	r3, #40	; 0x28
 80033fe:	2100      	movs	r1, #0
 8003400:	4618      	mov	r0, r3
 8003402:	f001 fbc3 	bl	8004b8c <RCCEx_PLL3_Config>
 8003406:	4603      	mov	r3, r0
 8003408:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800340c:	e006      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003414:	e002      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003416:	bf00      	nop
 8003418:	e000      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800341a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800341c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10b      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003424:	4b8e      	ldr	r3, [pc, #568]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003428:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800342c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003430:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003434:	4a8a      	ldr	r2, [pc, #552]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003436:	430b      	orrs	r3, r1
 8003438:	6593      	str	r3, [r2, #88]	; 0x58
 800343a:	e003      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003440:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003444:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003450:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003454:	2300      	movs	r3, #0
 8003456:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800345a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800345e:	460b      	mov	r3, r1
 8003460:	4313      	orrs	r3, r2
 8003462:	d03a      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800346a:	2b30      	cmp	r3, #48	; 0x30
 800346c:	d01f      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x416>
 800346e:	2b30      	cmp	r3, #48	; 0x30
 8003470:	d819      	bhi.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003472:	2b20      	cmp	r3, #32
 8003474:	d00c      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003476:	2b20      	cmp	r3, #32
 8003478:	d815      	bhi.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800347a:	2b00      	cmp	r3, #0
 800347c:	d019      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800347e:	2b10      	cmp	r3, #16
 8003480:	d111      	bne.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003482:	4b77      	ldr	r3, [pc, #476]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003486:	4a76      	ldr	r2, [pc, #472]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800348c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800348e:	e011      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003494:	3308      	adds	r3, #8
 8003496:	2102      	movs	r1, #2
 8003498:	4618      	mov	r0, r3
 800349a:	f001 fac5 	bl	8004a28 <RCCEx_PLL2_Config>
 800349e:	4603      	mov	r3, r0
 80034a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80034a4:	e006      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034ac:	e002      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80034ae:	bf00      	nop
 80034b0:	e000      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80034b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10a      	bne.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80034bc:	4b68      	ldr	r3, [pc, #416]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80034c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ca:	4a65      	ldr	r2, [pc, #404]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034cc:	430b      	orrs	r3, r1
 80034ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034d0:	e003      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80034da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80034e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80034ea:	2300      	movs	r3, #0
 80034ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80034f0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4313      	orrs	r3, r2
 80034f8:	d051      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80034fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003500:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003504:	d035      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003506:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800350a:	d82e      	bhi.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800350c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003510:	d031      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003512:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003516:	d828      	bhi.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003518:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800351c:	d01a      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800351e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003522:	d822      	bhi.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800352c:	d007      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800352e:	e01c      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003530:	4b4b      	ldr	r3, [pc, #300]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	4a4a      	ldr	r2, [pc, #296]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800353a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800353c:	e01c      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800353e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003542:	3308      	adds	r3, #8
 8003544:	2100      	movs	r1, #0
 8003546:	4618      	mov	r0, r3
 8003548:	f001 fa6e 	bl	8004a28 <RCCEx_PLL2_Config>
 800354c:	4603      	mov	r3, r0
 800354e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003552:	e011      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003558:	3328      	adds	r3, #40	; 0x28
 800355a:	2100      	movs	r1, #0
 800355c:	4618      	mov	r0, r3
 800355e:	f001 fb15 	bl	8004b8c <RCCEx_PLL3_Config>
 8003562:	4603      	mov	r3, r0
 8003564:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003568:	e006      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003570:	e002      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003572:	bf00      	nop
 8003574:	e000      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003576:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003578:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10a      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003580:	4b37      	ldr	r3, [pc, #220]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003584:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800358c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800358e:	4a34      	ldr	r2, [pc, #208]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003590:	430b      	orrs	r3, r1
 8003592:	6513      	str	r3, [r2, #80]	; 0x50
 8003594:	e003      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003596:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800359a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800359e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80035aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035ae:	2300      	movs	r3, #0
 80035b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80035b4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80035b8:	460b      	mov	r3, r1
 80035ba:	4313      	orrs	r3, r2
 80035bc:	d056      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80035be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035c8:	d033      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80035ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035ce:	d82c      	bhi.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80035d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035d4:	d02f      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80035d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035da:	d826      	bhi.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80035dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80035e0:	d02b      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80035e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80035e6:	d820      	bhi.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80035e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035ec:	d012      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80035ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035f2:	d81a      	bhi.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d022      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80035f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035fc:	d115      	bne.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003602:	3308      	adds	r3, #8
 8003604:	2101      	movs	r1, #1
 8003606:	4618      	mov	r0, r3
 8003608:	f001 fa0e 	bl	8004a28 <RCCEx_PLL2_Config>
 800360c:	4603      	mov	r3, r0
 800360e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003612:	e015      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003614:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003618:	3328      	adds	r3, #40	; 0x28
 800361a:	2101      	movs	r1, #1
 800361c:	4618      	mov	r0, r3
 800361e:	f001 fab5 	bl	8004b8c <RCCEx_PLL3_Config>
 8003622:	4603      	mov	r3, r0
 8003624:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003628:	e00a      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003630:	e006      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003632:	bf00      	nop
 8003634:	e004      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003636:	bf00      	nop
 8003638:	e002      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800363a:	bf00      	nop
 800363c:	e000      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800363e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003640:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10d      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003648:	4b05      	ldr	r3, [pc, #20]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800364a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800364c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003650:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003656:	4a02      	ldr	r2, [pc, #8]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003658:	430b      	orrs	r3, r1
 800365a:	6513      	str	r3, [r2, #80]	; 0x50
 800365c:	e006      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800365e:	bf00      	nop
 8003660:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003664:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003668:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800366c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003674:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003678:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800367c:	2300      	movs	r3, #0
 800367e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003682:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003686:	460b      	mov	r3, r1
 8003688:	4313      	orrs	r3, r2
 800368a:	d055      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800368c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003690:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003694:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003698:	d033      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800369a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800369e:	d82c      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x662>
 80036a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a4:	d02f      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80036a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036aa:	d826      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x662>
 80036ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036b0:	d02b      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80036b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036b6:	d820      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x662>
 80036b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036bc:	d012      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80036be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036c2:	d81a      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x662>
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d022      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80036c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036cc:	d115      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036d2:	3308      	adds	r3, #8
 80036d4:	2101      	movs	r1, #1
 80036d6:	4618      	mov	r0, r3
 80036d8:	f001 f9a6 	bl	8004a28 <RCCEx_PLL2_Config>
 80036dc:	4603      	mov	r3, r0
 80036de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80036e2:	e015      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036e8:	3328      	adds	r3, #40	; 0x28
 80036ea:	2101      	movs	r1, #1
 80036ec:	4618      	mov	r0, r3
 80036ee:	f001 fa4d 	bl	8004b8c <RCCEx_PLL3_Config>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80036f8:	e00a      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003700:	e006      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003702:	bf00      	nop
 8003704:	e004      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003706:	bf00      	nop
 8003708:	e002      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800370a:	bf00      	nop
 800370c:	e000      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800370e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003710:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10b      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003718:	4ba3      	ldr	r3, [pc, #652]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800371a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003720:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003724:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003728:	4a9f      	ldr	r2, [pc, #636]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800372a:	430b      	orrs	r3, r1
 800372c:	6593      	str	r3, [r2, #88]	; 0x58
 800372e:	e003      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003730:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003734:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800373c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003740:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003744:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003748:	2300      	movs	r3, #0
 800374a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800374e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003752:	460b      	mov	r3, r1
 8003754:	4313      	orrs	r3, r2
 8003756:	d037      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800375c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003762:	d00e      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003764:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003768:	d816      	bhi.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800376a:	2b00      	cmp	r3, #0
 800376c:	d018      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800376e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003772:	d111      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003774:	4b8c      	ldr	r3, [pc, #560]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	4a8b      	ldr	r2, [pc, #556]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800377a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800377e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003780:	e00f      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003786:	3308      	adds	r3, #8
 8003788:	2101      	movs	r1, #1
 800378a:	4618      	mov	r0, r3
 800378c:	f001 f94c 	bl	8004a28 <RCCEx_PLL2_Config>
 8003790:	4603      	mov	r3, r0
 8003792:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003796:	e004      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800379e:	e000      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80037a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10a      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80037aa:	4b7f      	ldr	r3, [pc, #508]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ae:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80037b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b8:	4a7b      	ldr	r2, [pc, #492]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037ba:	430b      	orrs	r3, r1
 80037bc:	6513      	str	r3, [r2, #80]	; 0x50
 80037be:	e003      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80037c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80037d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037d8:	2300      	movs	r3, #0
 80037da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80037de:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4313      	orrs	r3, r2
 80037e6:	d039      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80037e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ee:	2b03      	cmp	r3, #3
 80037f0:	d81c      	bhi.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x794>
 80037f2:	a201      	add	r2, pc, #4	; (adr r2, 80037f8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80037f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f8:	08003835 	.word	0x08003835
 80037fc:	08003809 	.word	0x08003809
 8003800:	08003817 	.word	0x08003817
 8003804:	08003835 	.word	0x08003835
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003808:	4b67      	ldr	r3, [pc, #412]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380c:	4a66      	ldr	r2, [pc, #408]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800380e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003812:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003814:	e00f      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800381a:	3308      	adds	r3, #8
 800381c:	2102      	movs	r1, #2
 800381e:	4618      	mov	r0, r3
 8003820:	f001 f902 	bl	8004a28 <RCCEx_PLL2_Config>
 8003824:	4603      	mov	r3, r0
 8003826:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800382a:	e004      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003832:	e000      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003834:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003836:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10a      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800383e:	4b5a      	ldr	r3, [pc, #360]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003842:	f023 0103 	bic.w	r1, r3, #3
 8003846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800384a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800384c:	4a56      	ldr	r2, [pc, #344]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800384e:	430b      	orrs	r3, r1
 8003850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003852:	e003      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003854:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003858:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800385c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003864:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003868:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800386c:	2300      	movs	r3, #0
 800386e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003872:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003876:	460b      	mov	r3, r1
 8003878:	4313      	orrs	r3, r2
 800387a:	f000 809f 	beq.w	80039bc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800387e:	4b4b      	ldr	r3, [pc, #300]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a4a      	ldr	r2, [pc, #296]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003888:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800388a:	f7fd fb8f 	bl	8000fac <HAL_GetTick>
 800388e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003892:	e00b      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003894:	f7fd fb8a 	bl	8000fac <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b64      	cmp	r3, #100	; 0x64
 80038a2:	d903      	bls.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80038aa:	e005      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038ac:	4b3f      	ldr	r3, [pc, #252]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0ed      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80038b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d179      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80038c0:	4b39      	ldr	r3, [pc, #228]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80038cc:	4053      	eors	r3, r2
 80038ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d015      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038d6:	4b34      	ldr	r3, [pc, #208]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038e2:	4b31      	ldr	r3, [pc, #196]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e6:	4a30      	ldr	r2, [pc, #192]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ec:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038ee:	4b2e      	ldr	r3, [pc, #184]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f2:	4a2d      	ldr	r2, [pc, #180]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038f8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80038fa:	4a2b      	ldr	r2, [pc, #172]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003900:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003906:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800390a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800390e:	d118      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003910:	f7fd fb4c 	bl	8000fac <HAL_GetTick>
 8003914:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003918:	e00d      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800391a:	f7fd fb47 	bl	8000fac <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003924:	1ad2      	subs	r2, r2, r3
 8003926:	f241 3388 	movw	r3, #5000	; 0x1388
 800392a:	429a      	cmp	r2, r3
 800392c:	d903      	bls.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003934:	e005      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003936:	4b1c      	ldr	r3, [pc, #112]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0eb      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003942:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003946:	2b00      	cmp	r3, #0
 8003948:	d129      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800394a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800394e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003956:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800395a:	d10e      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800395c:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003968:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800396c:	091a      	lsrs	r2, r3, #4
 800396e:	4b10      	ldr	r3, [pc, #64]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003970:	4013      	ands	r3, r2
 8003972:	4a0d      	ldr	r2, [pc, #52]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003974:	430b      	orrs	r3, r1
 8003976:	6113      	str	r3, [r2, #16]
 8003978:	e005      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800397a:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	4a0a      	ldr	r2, [pc, #40]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003980:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003984:	6113      	str	r3, [r2, #16]
 8003986:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003988:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800398a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800398e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003996:	4a04      	ldr	r2, [pc, #16]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003998:	430b      	orrs	r3, r1
 800399a:	6713      	str	r3, [r2, #112]	; 0x70
 800399c:	e00e      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800399e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80039a6:	e009      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80039a8:	58024400 	.word	0x58024400
 80039ac:	58024800 	.word	0x58024800
 80039b0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80039bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c4:	f002 0301 	and.w	r3, r2, #1
 80039c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039cc:	2300      	movs	r3, #0
 80039ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039d2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4313      	orrs	r3, r2
 80039da:	f000 8089 	beq.w	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80039de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039e4:	2b28      	cmp	r3, #40	; 0x28
 80039e6:	d86b      	bhi.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80039e8:	a201      	add	r2, pc, #4	; (adr r2, 80039f0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80039ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ee:	bf00      	nop
 80039f0:	08003ac9 	.word	0x08003ac9
 80039f4:	08003ac1 	.word	0x08003ac1
 80039f8:	08003ac1 	.word	0x08003ac1
 80039fc:	08003ac1 	.word	0x08003ac1
 8003a00:	08003ac1 	.word	0x08003ac1
 8003a04:	08003ac1 	.word	0x08003ac1
 8003a08:	08003ac1 	.word	0x08003ac1
 8003a0c:	08003ac1 	.word	0x08003ac1
 8003a10:	08003a95 	.word	0x08003a95
 8003a14:	08003ac1 	.word	0x08003ac1
 8003a18:	08003ac1 	.word	0x08003ac1
 8003a1c:	08003ac1 	.word	0x08003ac1
 8003a20:	08003ac1 	.word	0x08003ac1
 8003a24:	08003ac1 	.word	0x08003ac1
 8003a28:	08003ac1 	.word	0x08003ac1
 8003a2c:	08003ac1 	.word	0x08003ac1
 8003a30:	08003aab 	.word	0x08003aab
 8003a34:	08003ac1 	.word	0x08003ac1
 8003a38:	08003ac1 	.word	0x08003ac1
 8003a3c:	08003ac1 	.word	0x08003ac1
 8003a40:	08003ac1 	.word	0x08003ac1
 8003a44:	08003ac1 	.word	0x08003ac1
 8003a48:	08003ac1 	.word	0x08003ac1
 8003a4c:	08003ac1 	.word	0x08003ac1
 8003a50:	08003ac9 	.word	0x08003ac9
 8003a54:	08003ac1 	.word	0x08003ac1
 8003a58:	08003ac1 	.word	0x08003ac1
 8003a5c:	08003ac1 	.word	0x08003ac1
 8003a60:	08003ac1 	.word	0x08003ac1
 8003a64:	08003ac1 	.word	0x08003ac1
 8003a68:	08003ac1 	.word	0x08003ac1
 8003a6c:	08003ac1 	.word	0x08003ac1
 8003a70:	08003ac9 	.word	0x08003ac9
 8003a74:	08003ac1 	.word	0x08003ac1
 8003a78:	08003ac1 	.word	0x08003ac1
 8003a7c:	08003ac1 	.word	0x08003ac1
 8003a80:	08003ac1 	.word	0x08003ac1
 8003a84:	08003ac1 	.word	0x08003ac1
 8003a88:	08003ac1 	.word	0x08003ac1
 8003a8c:	08003ac1 	.word	0x08003ac1
 8003a90:	08003ac9 	.word	0x08003ac9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a98:	3308      	adds	r3, #8
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 ffc3 	bl	8004a28 <RCCEx_PLL2_Config>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003aa8:	e00f      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aae:	3328      	adds	r3, #40	; 0x28
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f001 f86a 	bl	8004b8c <RCCEx_PLL3_Config>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003abe:	e004      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ac6:	e000      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10a      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003ad2:	4bbf      	ldr	r3, [pc, #764]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ade:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ae0:	4abb      	ldr	r2, [pc, #748]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ae2:	430b      	orrs	r3, r1
 8003ae4:	6553      	str	r3, [r2, #84]	; 0x54
 8003ae6:	e003      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003aec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af8:	f002 0302 	and.w	r3, r2, #2
 8003afc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b00:	2300      	movs	r3, #0
 8003b02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003b06:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	d041      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b16:	2b05      	cmp	r3, #5
 8003b18:	d824      	bhi.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003b1a:	a201      	add	r2, pc, #4	; (adr r2, 8003b20 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b20:	08003b6d 	.word	0x08003b6d
 8003b24:	08003b39 	.word	0x08003b39
 8003b28:	08003b4f 	.word	0x08003b4f
 8003b2c:	08003b6d 	.word	0x08003b6d
 8003b30:	08003b6d 	.word	0x08003b6d
 8003b34:	08003b6d 	.word	0x08003b6d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b3c:	3308      	adds	r3, #8
 8003b3e:	2101      	movs	r1, #1
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 ff71 	bl	8004a28 <RCCEx_PLL2_Config>
 8003b46:	4603      	mov	r3, r0
 8003b48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b4c:	e00f      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b52:	3328      	adds	r3, #40	; 0x28
 8003b54:	2101      	movs	r1, #1
 8003b56:	4618      	mov	r0, r3
 8003b58:	f001 f818 	bl	8004b8c <RCCEx_PLL3_Config>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b62:	e004      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b6a:	e000      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003b6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10a      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003b76:	4b96      	ldr	r3, [pc, #600]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7a:	f023 0107 	bic.w	r1, r3, #7
 8003b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b84:	4a92      	ldr	r2, [pc, #584]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b86:	430b      	orrs	r3, r1
 8003b88:	6553      	str	r3, [r2, #84]	; 0x54
 8003b8a:	e003      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9c:	f002 0304 	and.w	r3, r2, #4
 8003ba0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003baa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	d044      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bbc:	2b05      	cmp	r3, #5
 8003bbe:	d825      	bhi.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003bc0:	a201      	add	r2, pc, #4	; (adr r2, 8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc6:	bf00      	nop
 8003bc8:	08003c15 	.word	0x08003c15
 8003bcc:	08003be1 	.word	0x08003be1
 8003bd0:	08003bf7 	.word	0x08003bf7
 8003bd4:	08003c15 	.word	0x08003c15
 8003bd8:	08003c15 	.word	0x08003c15
 8003bdc:	08003c15 	.word	0x08003c15
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003be4:	3308      	adds	r3, #8
 8003be6:	2101      	movs	r1, #1
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 ff1d 	bl	8004a28 <RCCEx_PLL2_Config>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003bf4:	e00f      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bfa:	3328      	adds	r3, #40	; 0x28
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 ffc4 	bl	8004b8c <RCCEx_PLL3_Config>
 8003c04:	4603      	mov	r3, r0
 8003c06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003c0a:	e004      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c12:	e000      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10b      	bne.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c1e:	4b6c      	ldr	r3, [pc, #432]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c22:	f023 0107 	bic.w	r1, r3, #7
 8003c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c2e:	4a68      	ldr	r2, [pc, #416]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c30:	430b      	orrs	r3, r1
 8003c32:	6593      	str	r3, [r2, #88]	; 0x58
 8003c34:	e003      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c46:	f002 0320 	and.w	r3, r2, #32
 8003c4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c4e:	2300      	movs	r3, #0
 8003c50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c58:	460b      	mov	r3, r1
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	d055      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c6a:	d033      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003c6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c70:	d82c      	bhi.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c76:	d02f      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c7c:	d826      	bhi.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003c7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c82:	d02b      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003c84:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c88:	d820      	bhi.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003c8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c8e:	d012      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003c90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c94:	d81a      	bhi.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d022      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003c9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c9e:	d115      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ca4:	3308      	adds	r3, #8
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 febd 	bl	8004a28 <RCCEx_PLL2_Config>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003cb4:	e015      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cba:	3328      	adds	r3, #40	; 0x28
 8003cbc:	2102      	movs	r1, #2
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 ff64 	bl	8004b8c <RCCEx_PLL3_Config>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003cca:	e00a      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003cd2:	e006      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003cd4:	bf00      	nop
 8003cd6:	e004      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003cd8:	bf00      	nop
 8003cda:	e002      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003cdc:	bf00      	nop
 8003cde:	e000      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10b      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cea:	4b39      	ldr	r3, [pc, #228]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cee:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfa:	4a35      	ldr	r2, [pc, #212]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	6553      	str	r3, [r2, #84]	; 0x54
 8003d00:	e003      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d12:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003d16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003d20:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003d24:	460b      	mov	r3, r1
 8003d26:	4313      	orrs	r3, r2
 8003d28:	d058      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d32:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003d36:	d033      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003d38:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003d3c:	d82c      	bhi.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d42:	d02f      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d48:	d826      	bhi.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003d4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d4e:	d02b      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003d50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d54:	d820      	bhi.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003d56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d5a:	d012      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003d5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d60:	d81a      	bhi.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d022      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d6a:	d115      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d70:	3308      	adds	r3, #8
 8003d72:	2100      	movs	r1, #0
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 fe57 	bl	8004a28 <RCCEx_PLL2_Config>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003d80:	e015      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d86:	3328      	adds	r3, #40	; 0x28
 8003d88:	2102      	movs	r1, #2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 fefe 	bl	8004b8c <RCCEx_PLL3_Config>
 8003d90:	4603      	mov	r3, r0
 8003d92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003d96:	e00a      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d9e:	e006      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003da0:	bf00      	nop
 8003da2:	e004      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003da4:	bf00      	nop
 8003da6:	e002      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003da8:	bf00      	nop
 8003daa:	e000      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003dac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10e      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003db6:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dba:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dc6:	4a02      	ldr	r2, [pc, #8]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dc8:	430b      	orrs	r3, r1
 8003dca:	6593      	str	r3, [r2, #88]	; 0x58
 8003dcc:	e006      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003dce:	bf00      	nop
 8003dd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003de8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003dec:	2300      	movs	r3, #0
 8003dee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003df2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003df6:	460b      	mov	r3, r1
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	d055      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e04:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e08:	d033      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003e0a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e0e:	d82c      	bhi.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e14:	d02f      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003e16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e1a:	d826      	bhi.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e1c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e20:	d02b      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003e22:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e26:	d820      	bhi.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e2c:	d012      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003e2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e32:	d81a      	bhi.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d022      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e3c:	d115      	bne.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e42:	3308      	adds	r3, #8
 8003e44:	2100      	movs	r1, #0
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 fdee 	bl	8004a28 <RCCEx_PLL2_Config>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e52:	e015      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e58:	3328      	adds	r3, #40	; 0x28
 8003e5a:	2102      	movs	r1, #2
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 fe95 	bl	8004b8c <RCCEx_PLL3_Config>
 8003e62:	4603      	mov	r3, r0
 8003e64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e68:	e00a      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e70:	e006      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003e72:	bf00      	nop
 8003e74:	e004      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003e76:	bf00      	nop
 8003e78:	e002      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003e7a:	bf00      	nop
 8003e7c:	e000      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003e7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10b      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003e88:	4ba1      	ldr	r3, [pc, #644]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e98:	4a9d      	ldr	r2, [pc, #628]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e9a:	430b      	orrs	r3, r1
 8003e9c:	6593      	str	r3, [r2, #88]	; 0x58
 8003e9e:	e003      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ea4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb0:	f002 0308 	and.w	r3, r2, #8
 8003eb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003eb8:	2300      	movs	r3, #0
 8003eba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ebe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	d01e      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed4:	d10c      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eda:	3328      	adds	r3, #40	; 0x28
 8003edc:	2102      	movs	r1, #2
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 fe54 	bl	8004b8c <RCCEx_PLL3_Config>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003ef0:	4b87      	ldr	r3, [pc, #540]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003efc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f00:	4a83      	ldr	r2, [pc, #524]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f02:	430b      	orrs	r3, r1
 8003f04:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0e:	f002 0310 	and.w	r3, r2, #16
 8003f12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f16:	2300      	movs	r3, #0
 8003f18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003f1c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003f20:	460b      	mov	r3, r1
 8003f22:	4313      	orrs	r3, r2
 8003f24:	d01e      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f32:	d10c      	bne.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f38:	3328      	adds	r3, #40	; 0x28
 8003f3a:	2102      	movs	r1, #2
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 fe25 	bl	8004b8c <RCCEx_PLL3_Config>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f4e:	4b70      	ldr	r3, [pc, #448]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f5e:	4a6c      	ldr	r2, [pc, #432]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f60:	430b      	orrs	r3, r1
 8003f62:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003f70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f74:	2300      	movs	r3, #0
 8003f76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f7a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003f7e:	460b      	mov	r3, r1
 8003f80:	4313      	orrs	r3, r2
 8003f82:	d03e      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f90:	d022      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003f92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f96:	d81b      	bhi.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa0:	d00b      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003fa2:	e015      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fa8:	3308      	adds	r3, #8
 8003faa:	2100      	movs	r1, #0
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 fd3b 	bl	8004a28 <RCCEx_PLL2_Config>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003fb8:	e00f      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fbe:	3328      	adds	r3, #40	; 0x28
 8003fc0:	2102      	movs	r1, #2
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 fde2 	bl	8004b8c <RCCEx_PLL3_Config>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003fce:	e004      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fd6:	e000      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003fd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10b      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fe2:	4b4b      	ldr	r3, [pc, #300]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ff2:	4a47      	ldr	r2, [pc, #284]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ff4:	430b      	orrs	r3, r1
 8003ff6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ff8:	e003      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ffa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ffe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004002:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800400e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004010:	2300      	movs	r3, #0
 8004012:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004014:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004018:	460b      	mov	r3, r1
 800401a:	4313      	orrs	r3, r2
 800401c:	d03b      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800401e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004026:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800402a:	d01f      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800402c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004030:	d818      	bhi.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004032:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004036:	d003      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004038:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800403c:	d007      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800403e:	e011      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004040:	4b33      	ldr	r3, [pc, #204]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	4a32      	ldr	r2, [pc, #200]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800404a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800404c:	e00f      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800404e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004052:	3328      	adds	r3, #40	; 0x28
 8004054:	2101      	movs	r1, #1
 8004056:	4618      	mov	r0, r3
 8004058:	f000 fd98 	bl	8004b8c <RCCEx_PLL3_Config>
 800405c:	4603      	mov	r3, r0
 800405e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004062:	e004      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800406a:	e000      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800406c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800406e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10b      	bne.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004076:	4b26      	ldr	r3, [pc, #152]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800407e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004086:	4a22      	ldr	r2, [pc, #136]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004088:	430b      	orrs	r3, r1
 800408a:	6553      	str	r3, [r2, #84]	; 0x54
 800408c:	e003      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004092:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800409a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80040a2:	673b      	str	r3, [r7, #112]	; 0x70
 80040a4:	2300      	movs	r3, #0
 80040a6:	677b      	str	r3, [r7, #116]	; 0x74
 80040a8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80040ac:	460b      	mov	r3, r1
 80040ae:	4313      	orrs	r3, r2
 80040b0:	d034      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80040b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d003      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80040bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c0:	d007      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80040c2:	e011      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040c4:	4b12      	ldr	r3, [pc, #72]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	4a11      	ldr	r2, [pc, #68]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80040d0:	e00e      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040d6:	3308      	adds	r3, #8
 80040d8:	2102      	movs	r1, #2
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fca4 	bl	8004a28 <RCCEx_PLL2_Config>
 80040e0:	4603      	mov	r3, r0
 80040e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80040e6:	e003      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10d      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80040f8:	4b05      	ldr	r3, [pc, #20]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004106:	4a02      	ldr	r2, [pc, #8]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004108:	430b      	orrs	r3, r1
 800410a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800410c:	e006      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800410e:	bf00      	nop
 8004110:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004114:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004118:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800411c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004124:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004128:	66bb      	str	r3, [r7, #104]	; 0x68
 800412a:	2300      	movs	r3, #0
 800412c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800412e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004132:	460b      	mov	r3, r1
 8004134:	4313      	orrs	r3, r2
 8004136:	d00c      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800413c:	3328      	adds	r3, #40	; 0x28
 800413e:	2102      	movs	r1, #2
 8004140:	4618      	mov	r0, r3
 8004142:	f000 fd23 	bl	8004b8c <RCCEx_PLL3_Config>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800415e:	663b      	str	r3, [r7, #96]	; 0x60
 8004160:	2300      	movs	r3, #0
 8004162:	667b      	str	r3, [r7, #100]	; 0x64
 8004164:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004168:	460b      	mov	r3, r1
 800416a:	4313      	orrs	r3, r2
 800416c:	d038      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800416e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004176:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800417a:	d018      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800417c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004180:	d811      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004186:	d014      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800418c:	d80b      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800418e:	2b00      	cmp	r3, #0
 8004190:	d011      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004196:	d106      	bne.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004198:	4bc3      	ldr	r3, [pc, #780]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419c:	4ac2      	ldr	r2, [pc, #776]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800419e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80041a4:	e008      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80041ac:	e004      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80041ae:	bf00      	nop
 80041b0:	e002      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80041b2:	bf00      	nop
 80041b4:	e000      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80041b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10b      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041c0:	4bb9      	ldr	r3, [pc, #740]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041d0:	4ab5      	ldr	r2, [pc, #724]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041d2:	430b      	orrs	r3, r1
 80041d4:	6553      	str	r3, [r2, #84]	; 0x54
 80041d6:	e003      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80041ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80041ee:	2300      	movs	r3, #0
 80041f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041f2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80041f6:	460b      	mov	r3, r1
 80041f8:	4313      	orrs	r3, r2
 80041fa:	d009      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041fc:	4baa      	ldr	r3, [pc, #680]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004200:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800420a:	4aa7      	ldr	r2, [pc, #668]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800420c:	430b      	orrs	r3, r1
 800420e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004218:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800421c:	653b      	str	r3, [r7, #80]	; 0x50
 800421e:	2300      	movs	r3, #0
 8004220:	657b      	str	r3, [r7, #84]	; 0x54
 8004222:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004226:	460b      	mov	r3, r1
 8004228:	4313      	orrs	r3, r2
 800422a:	d00a      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800422c:	4b9e      	ldr	r3, [pc, #632]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004238:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800423c:	4a9a      	ldr	r2, [pc, #616]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800423e:	430b      	orrs	r3, r1
 8004240:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800424e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004250:	2300      	movs	r3, #0
 8004252:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004254:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004258:	460b      	mov	r3, r1
 800425a:	4313      	orrs	r3, r2
 800425c:	d009      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800425e:	4b92      	ldr	r3, [pc, #584]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004262:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800426a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800426c:	4a8e      	ldr	r2, [pc, #568]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800426e:	430b      	orrs	r3, r1
 8004270:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800427e:	643b      	str	r3, [r7, #64]	; 0x40
 8004280:	2300      	movs	r3, #0
 8004282:	647b      	str	r3, [r7, #68]	; 0x44
 8004284:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004288:	460b      	mov	r3, r1
 800428a:	4313      	orrs	r3, r2
 800428c:	d00e      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800428e:	4b86      	ldr	r3, [pc, #536]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	4a85      	ldr	r2, [pc, #532]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004294:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004298:	6113      	str	r3, [r2, #16]
 800429a:	4b83      	ldr	r3, [pc, #524]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800429c:	6919      	ldr	r1, [r3, #16]
 800429e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80042a6:	4a80      	ldr	r2, [pc, #512]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042a8:	430b      	orrs	r3, r1
 80042aa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80042ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80042b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80042ba:	2300      	movs	r3, #0
 80042bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042be:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80042c2:	460b      	mov	r3, r1
 80042c4:	4313      	orrs	r3, r2
 80042c6:	d009      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80042c8:	4b77      	ldr	r3, [pc, #476]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042cc:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80042d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d6:	4a74      	ldr	r2, [pc, #464]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042d8:	430b      	orrs	r3, r1
 80042da:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80042e8:	633b      	str	r3, [r7, #48]	; 0x30
 80042ea:	2300      	movs	r3, #0
 80042ec:	637b      	str	r3, [r7, #52]	; 0x34
 80042ee:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80042f2:	460b      	mov	r3, r1
 80042f4:	4313      	orrs	r3, r2
 80042f6:	d00a      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042f8:	4b6b      	ldr	r3, [pc, #428]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004304:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004308:	4a67      	ldr	r2, [pc, #412]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800430a:	430b      	orrs	r3, r1
 800430c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800430e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004316:	2100      	movs	r1, #0
 8004318:	62b9      	str	r1, [r7, #40]	; 0x28
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004320:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004324:	460b      	mov	r3, r1
 8004326:	4313      	orrs	r3, r2
 8004328:	d011      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800432a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800432e:	3308      	adds	r3, #8
 8004330:	2100      	movs	r1, #0
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fb78 	bl	8004a28 <RCCEx_PLL2_Config>
 8004338:	4603      	mov	r3, r0
 800433a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800433e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004346:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800434a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800434e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004356:	2100      	movs	r1, #0
 8004358:	6239      	str	r1, [r7, #32]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
 8004360:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004364:	460b      	mov	r3, r1
 8004366:	4313      	orrs	r3, r2
 8004368:	d011      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800436a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800436e:	3308      	adds	r3, #8
 8004370:	2101      	movs	r1, #1
 8004372:	4618      	mov	r0, r3
 8004374:	f000 fb58 	bl	8004a28 <RCCEx_PLL2_Config>
 8004378:	4603      	mov	r3, r0
 800437a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800437e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004386:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800438a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800438e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004396:	2100      	movs	r1, #0
 8004398:	61b9      	str	r1, [r7, #24]
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	61fb      	str	r3, [r7, #28]
 80043a0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80043a4:	460b      	mov	r3, r1
 80043a6:	4313      	orrs	r3, r2
 80043a8:	d011      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ae:	3308      	adds	r3, #8
 80043b0:	2102      	movs	r1, #2
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 fb38 	bl	8004a28 <RCCEx_PLL2_Config>
 80043b8:	4603      	mov	r3, r0
 80043ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80043be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80043ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d6:	2100      	movs	r1, #0
 80043d8:	6139      	str	r1, [r7, #16]
 80043da:	f003 0308 	and.w	r3, r3, #8
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80043e4:	460b      	mov	r3, r1
 80043e6:	4313      	orrs	r3, r2
 80043e8:	d011      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ee:	3328      	adds	r3, #40	; 0x28
 80043f0:	2100      	movs	r1, #0
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fbca 	bl	8004b8c <RCCEx_PLL3_Config>
 80043f8:	4603      	mov	r3, r0
 80043fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80043fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004406:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800440a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800440e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004416:	2100      	movs	r1, #0
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	f003 0310 	and.w	r3, r3, #16
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004424:	460b      	mov	r3, r1
 8004426:	4313      	orrs	r3, r2
 8004428:	d011      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800442a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800442e:	3328      	adds	r3, #40	; 0x28
 8004430:	2101      	movs	r1, #1
 8004432:	4618      	mov	r0, r3
 8004434:	f000 fbaa 	bl	8004b8c <RCCEx_PLL3_Config>
 8004438:	4603      	mov	r3, r0
 800443a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800443e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004446:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800444a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800444e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004456:	2100      	movs	r1, #0
 8004458:	6039      	str	r1, [r7, #0]
 800445a:	f003 0320 	and.w	r3, r3, #32
 800445e:	607b      	str	r3, [r7, #4]
 8004460:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004464:	460b      	mov	r3, r1
 8004466:	4313      	orrs	r3, r2
 8004468:	d011      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800446a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800446e:	3328      	adds	r3, #40	; 0x28
 8004470:	2102      	movs	r1, #2
 8004472:	4618      	mov	r0, r3
 8004474:	f000 fb8a 	bl	8004b8c <RCCEx_PLL3_Config>
 8004478:	4603      	mov	r3, r0
 800447a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800447e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004486:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800448a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800448e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004496:	2300      	movs	r3, #0
 8004498:	e000      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
}
 800449c:	4618      	mov	r0, r3
 800449e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80044a2:	46bd      	mov	sp, r7
 80044a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044a8:	58024400 	.word	0x58024400

080044ac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80044b0:	f7fe fd96 	bl	8002fe0 <HAL_RCC_GetHCLKFreq>
 80044b4:	4602      	mov	r2, r0
 80044b6:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	091b      	lsrs	r3, r3, #4
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	4904      	ldr	r1, [pc, #16]	; (80044d4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80044c2:	5ccb      	ldrb	r3, [r1, r3]
 80044c4:	f003 031f 	and.w	r3, r3, #31
 80044c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	58024400 	.word	0x58024400
 80044d4:	08006a14 	.word	0x08006a14

080044d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80044d8:	b480      	push	{r7}
 80044da:	b089      	sub	sp, #36	; 0x24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044e0:	4ba1      	ldr	r3, [pc, #644]	; (8004768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e4:	f003 0303 	and.w	r3, r3, #3
 80044e8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80044ea:	4b9f      	ldr	r3, [pc, #636]	; (8004768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ee:	0b1b      	lsrs	r3, r3, #12
 80044f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044f4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80044f6:	4b9c      	ldr	r3, [pc, #624]	; (8004768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fa:	091b      	lsrs	r3, r3, #4
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004502:	4b99      	ldr	r3, [pc, #612]	; (8004768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004506:	08db      	lsrs	r3, r3, #3
 8004508:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	fb02 f303 	mul.w	r3, r2, r3
 8004512:	ee07 3a90 	vmov	s15, r3
 8004516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800451a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 8111 	beq.w	8004748 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	2b02      	cmp	r3, #2
 800452a:	f000 8083 	beq.w	8004634 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	2b02      	cmp	r3, #2
 8004532:	f200 80a1 	bhi.w	8004678 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d056      	beq.n	80045f0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004542:	e099      	b.n	8004678 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004544:	4b88      	ldr	r3, [pc, #544]	; (8004768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	2b00      	cmp	r3, #0
 800454e:	d02d      	beq.n	80045ac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004550:	4b85      	ldr	r3, [pc, #532]	; (8004768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	08db      	lsrs	r3, r3, #3
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	4a84      	ldr	r2, [pc, #528]	; (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800455c:	fa22 f303 	lsr.w	r3, r2, r3
 8004560:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	ee07 3a90 	vmov	s15, r3
 8004568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	ee07 3a90 	vmov	s15, r3
 8004572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800457a:	4b7b      	ldr	r3, [pc, #492]	; (8004768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800457c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004582:	ee07 3a90 	vmov	s15, r3
 8004586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800458a:	ed97 6a03 	vldr	s12, [r7, #12]
 800458e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004770 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800459a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800459e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80045aa:	e087      	b.n	80046bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	ee07 3a90 	vmov	s15, r3
 80045b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004774 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80045ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045be:	4b6a      	ldr	r3, [pc, #424]	; (8004768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045c6:	ee07 3a90 	vmov	s15, r3
 80045ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80045d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004770 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045ee:	e065      	b.n	80046bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	ee07 3a90 	vmov	s15, r3
 80045f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004778 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80045fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004602:	4b59      	ldr	r3, [pc, #356]	; (8004768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800460a:	ee07 3a90 	vmov	s15, r3
 800460e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004612:	ed97 6a03 	vldr	s12, [r7, #12]
 8004616:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004770 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800461a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800461e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800462a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800462e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004632:	e043      	b.n	80046bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	ee07 3a90 	vmov	s15, r3
 800463a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800463e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800477c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004646:	4b48      	ldr	r3, [pc, #288]	; (8004768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800464e:	ee07 3a90 	vmov	s15, r3
 8004652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004656:	ed97 6a03 	vldr	s12, [r7, #12]
 800465a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004770 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800465e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800466a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800466e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004672:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004676:	e021      	b.n	80046bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	ee07 3a90 	vmov	s15, r3
 800467e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004682:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004778 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800468a:	4b37      	ldr	r3, [pc, #220]	; (8004768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800468c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004692:	ee07 3a90 	vmov	s15, r3
 8004696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800469a:	ed97 6a03 	vldr	s12, [r7, #12]
 800469e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004770 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046ba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80046bc:	4b2a      	ldr	r3, [pc, #168]	; (8004768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c0:	0a5b      	lsrs	r3, r3, #9
 80046c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046c6:	ee07 3a90 	vmov	s15, r3
 80046ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80046da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046e2:	ee17 2a90 	vmov	r2, s15
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80046ea:	4b1f      	ldr	r3, [pc, #124]	; (8004768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ee:	0c1b      	lsrs	r3, r3, #16
 80046f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046f4:	ee07 3a90 	vmov	s15, r3
 80046f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004700:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004704:	edd7 6a07 	vldr	s13, [r7, #28]
 8004708:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800470c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004710:	ee17 2a90 	vmov	r2, s15
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004718:	4b13      	ldr	r3, [pc, #76]	; (8004768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800471a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471c:	0e1b      	lsrs	r3, r3, #24
 800471e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004722:	ee07 3a90 	vmov	s15, r3
 8004726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800472e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004732:	edd7 6a07 	vldr	s13, [r7, #28]
 8004736:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800473a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800473e:	ee17 2a90 	vmov	r2, s15
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004746:	e008      	b.n	800475a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	609a      	str	r2, [r3, #8]
}
 800475a:	bf00      	nop
 800475c:	3724      	adds	r7, #36	; 0x24
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	58024400 	.word	0x58024400
 800476c:	03d09000 	.word	0x03d09000
 8004770:	46000000 	.word	0x46000000
 8004774:	4c742400 	.word	0x4c742400
 8004778:	4a742400 	.word	0x4a742400
 800477c:	4bbebc20 	.word	0x4bbebc20

08004780 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004780:	b480      	push	{r7}
 8004782:	b089      	sub	sp, #36	; 0x24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004788:	4ba1      	ldr	r3, [pc, #644]	; (8004a10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800478a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478c:	f003 0303 	and.w	r3, r3, #3
 8004790:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004792:	4b9f      	ldr	r3, [pc, #636]	; (8004a10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004796:	0d1b      	lsrs	r3, r3, #20
 8004798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800479c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800479e:	4b9c      	ldr	r3, [pc, #624]	; (8004a10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a2:	0a1b      	lsrs	r3, r3, #8
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80047aa:	4b99      	ldr	r3, [pc, #612]	; (8004a10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ae:	08db      	lsrs	r3, r3, #3
 80047b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	fb02 f303 	mul.w	r3, r2, r3
 80047ba:	ee07 3a90 	vmov	s15, r3
 80047be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 8111 	beq.w	80049f0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	f000 8083 	beq.w	80048dc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	f200 80a1 	bhi.w	8004920 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d003      	beq.n	80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d056      	beq.n	8004898 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80047ea:	e099      	b.n	8004920 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047ec:	4b88      	ldr	r3, [pc, #544]	; (8004a10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0320 	and.w	r3, r3, #32
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d02d      	beq.n	8004854 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047f8:	4b85      	ldr	r3, [pc, #532]	; (8004a10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	08db      	lsrs	r3, r3, #3
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	4a84      	ldr	r2, [pc, #528]	; (8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004804:	fa22 f303 	lsr.w	r3, r2, r3
 8004808:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	ee07 3a90 	vmov	s15, r3
 8004810:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	ee07 3a90 	vmov	s15, r3
 800481a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800481e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004822:	4b7b      	ldr	r3, [pc, #492]	; (8004a10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800482a:	ee07 3a90 	vmov	s15, r3
 800482e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004832:	ed97 6a03 	vldr	s12, [r7, #12]
 8004836:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800483a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800483e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800484a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800484e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004852:	e087      	b.n	8004964 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	ee07 3a90 	vmov	s15, r3
 800485a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800485e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004a1c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004866:	4b6a      	ldr	r3, [pc, #424]	; (8004a10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800486e:	ee07 3a90 	vmov	s15, r3
 8004872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004876:	ed97 6a03 	vldr	s12, [r7, #12]
 800487a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800487e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800488a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800488e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004892:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004896:	e065      	b.n	8004964 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	ee07 3a90 	vmov	s15, r3
 800489e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004a20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80048a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048aa:	4b59      	ldr	r3, [pc, #356]	; (8004a10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b2:	ee07 3a90 	vmov	s15, r3
 80048b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80048be:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048da:	e043      	b.n	8004964 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	ee07 3a90 	vmov	s15, r3
 80048e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80048ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ee:	4b48      	ldr	r3, [pc, #288]	; (8004a10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048f6:	ee07 3a90 	vmov	s15, r3
 80048fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004902:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800490a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800490e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800491e:	e021      	b.n	8004964 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	ee07 3a90 	vmov	s15, r3
 8004926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004a20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800492e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004932:	4b37      	ldr	r3, [pc, #220]	; (8004a10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800493a:	ee07 3a90 	vmov	s15, r3
 800493e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004942:	ed97 6a03 	vldr	s12, [r7, #12]
 8004946:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800494a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800494e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800495a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800495e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004962:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004964:	4b2a      	ldr	r3, [pc, #168]	; (8004a10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004968:	0a5b      	lsrs	r3, r3, #9
 800496a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800496e:	ee07 3a90 	vmov	s15, r3
 8004972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004976:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800497a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800497e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004982:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004986:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800498a:	ee17 2a90 	vmov	r2, s15
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004992:	4b1f      	ldr	r3, [pc, #124]	; (8004a10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	0c1b      	lsrs	r3, r3, #16
 8004998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800499c:	ee07 3a90 	vmov	s15, r3
 80049a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80049b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049b8:	ee17 2a90 	vmov	r2, s15
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80049c0:	4b13      	ldr	r3, [pc, #76]	; (8004a10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c4:	0e1b      	lsrs	r3, r3, #24
 80049c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049ca:	ee07 3a90 	vmov	s15, r3
 80049ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049da:	edd7 6a07 	vldr	s13, [r7, #28]
 80049de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049e6:	ee17 2a90 	vmov	r2, s15
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80049ee:	e008      	b.n	8004a02 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	609a      	str	r2, [r3, #8]
}
 8004a02:	bf00      	nop
 8004a04:	3724      	adds	r7, #36	; 0x24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	58024400 	.word	0x58024400
 8004a14:	03d09000 	.word	0x03d09000
 8004a18:	46000000 	.word	0x46000000
 8004a1c:	4c742400 	.word	0x4c742400
 8004a20:	4a742400 	.word	0x4a742400
 8004a24:	4bbebc20 	.word	0x4bbebc20

08004a28 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a32:	2300      	movs	r3, #0
 8004a34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a36:	4b53      	ldr	r3, [pc, #332]	; (8004b84 <RCCEx_PLL2_Config+0x15c>)
 8004a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	2b03      	cmp	r3, #3
 8004a40:	d101      	bne.n	8004a46 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e099      	b.n	8004b7a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004a46:	4b4f      	ldr	r3, [pc, #316]	; (8004b84 <RCCEx_PLL2_Config+0x15c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a4e      	ldr	r2, [pc, #312]	; (8004b84 <RCCEx_PLL2_Config+0x15c>)
 8004a4c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a52:	f7fc faab 	bl	8000fac <HAL_GetTick>
 8004a56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a58:	e008      	b.n	8004a6c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a5a:	f7fc faa7 	bl	8000fac <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d901      	bls.n	8004a6c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e086      	b.n	8004b7a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a6c:	4b45      	ldr	r3, [pc, #276]	; (8004b84 <RCCEx_PLL2_Config+0x15c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1f0      	bne.n	8004a5a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004a78:	4b42      	ldr	r3, [pc, #264]	; (8004b84 <RCCEx_PLL2_Config+0x15c>)
 8004a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	031b      	lsls	r3, r3, #12
 8004a86:	493f      	ldr	r1, [pc, #252]	; (8004b84 <RCCEx_PLL2_Config+0x15c>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	628b      	str	r3, [r1, #40]	; 0x28
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	3b01      	subs	r3, #1
 8004a92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	025b      	lsls	r3, r3, #9
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	041b      	lsls	r3, r3, #16
 8004aaa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	061b      	lsls	r3, r3, #24
 8004ab8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004abc:	4931      	ldr	r1, [pc, #196]	; (8004b84 <RCCEx_PLL2_Config+0x15c>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004ac2:	4b30      	ldr	r3, [pc, #192]	; (8004b84 <RCCEx_PLL2_Config+0x15c>)
 8004ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	492d      	ldr	r1, [pc, #180]	; (8004b84 <RCCEx_PLL2_Config+0x15c>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004ad4:	4b2b      	ldr	r3, [pc, #172]	; (8004b84 <RCCEx_PLL2_Config+0x15c>)
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad8:	f023 0220 	bic.w	r2, r3, #32
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	4928      	ldr	r1, [pc, #160]	; (8004b84 <RCCEx_PLL2_Config+0x15c>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004ae6:	4b27      	ldr	r3, [pc, #156]	; (8004b84 <RCCEx_PLL2_Config+0x15c>)
 8004ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aea:	4a26      	ldr	r2, [pc, #152]	; (8004b84 <RCCEx_PLL2_Config+0x15c>)
 8004aec:	f023 0310 	bic.w	r3, r3, #16
 8004af0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004af2:	4b24      	ldr	r3, [pc, #144]	; (8004b84 <RCCEx_PLL2_Config+0x15c>)
 8004af4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004af6:	4b24      	ldr	r3, [pc, #144]	; (8004b88 <RCCEx_PLL2_Config+0x160>)
 8004af8:	4013      	ands	r3, r2
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	69d2      	ldr	r2, [r2, #28]
 8004afe:	00d2      	lsls	r2, r2, #3
 8004b00:	4920      	ldr	r1, [pc, #128]	; (8004b84 <RCCEx_PLL2_Config+0x15c>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004b06:	4b1f      	ldr	r3, [pc, #124]	; (8004b84 <RCCEx_PLL2_Config+0x15c>)
 8004b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0a:	4a1e      	ldr	r2, [pc, #120]	; (8004b84 <RCCEx_PLL2_Config+0x15c>)
 8004b0c:	f043 0310 	orr.w	r3, r3, #16
 8004b10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d106      	bne.n	8004b26 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004b18:	4b1a      	ldr	r3, [pc, #104]	; (8004b84 <RCCEx_PLL2_Config+0x15c>)
 8004b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1c:	4a19      	ldr	r2, [pc, #100]	; (8004b84 <RCCEx_PLL2_Config+0x15c>)
 8004b1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b24:	e00f      	b.n	8004b46 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d106      	bne.n	8004b3a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004b2c:	4b15      	ldr	r3, [pc, #84]	; (8004b84 <RCCEx_PLL2_Config+0x15c>)
 8004b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b30:	4a14      	ldr	r2, [pc, #80]	; (8004b84 <RCCEx_PLL2_Config+0x15c>)
 8004b32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b38:	e005      	b.n	8004b46 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004b3a:	4b12      	ldr	r3, [pc, #72]	; (8004b84 <RCCEx_PLL2_Config+0x15c>)
 8004b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3e:	4a11      	ldr	r2, [pc, #68]	; (8004b84 <RCCEx_PLL2_Config+0x15c>)
 8004b40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b44:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004b46:	4b0f      	ldr	r3, [pc, #60]	; (8004b84 <RCCEx_PLL2_Config+0x15c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a0e      	ldr	r2, [pc, #56]	; (8004b84 <RCCEx_PLL2_Config+0x15c>)
 8004b4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b52:	f7fc fa2b 	bl	8000fac <HAL_GetTick>
 8004b56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b58:	e008      	b.n	8004b6c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b5a:	f7fc fa27 	bl	8000fac <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d901      	bls.n	8004b6c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e006      	b.n	8004b7a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b6c:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <RCCEx_PLL2_Config+0x15c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0f0      	beq.n	8004b5a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	58024400 	.word	0x58024400
 8004b88:	ffff0007 	.word	0xffff0007

08004b8c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b96:	2300      	movs	r3, #0
 8004b98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b9a:	4b53      	ldr	r3, [pc, #332]	; (8004ce8 <RCCEx_PLL3_Config+0x15c>)
 8004b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	2b03      	cmp	r3, #3
 8004ba4:	d101      	bne.n	8004baa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e099      	b.n	8004cde <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004baa:	4b4f      	ldr	r3, [pc, #316]	; (8004ce8 <RCCEx_PLL3_Config+0x15c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a4e      	ldr	r2, [pc, #312]	; (8004ce8 <RCCEx_PLL3_Config+0x15c>)
 8004bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bb6:	f7fc f9f9 	bl	8000fac <HAL_GetTick>
 8004bba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004bbc:	e008      	b.n	8004bd0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004bbe:	f7fc f9f5 	bl	8000fac <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e086      	b.n	8004cde <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004bd0:	4b45      	ldr	r3, [pc, #276]	; (8004ce8 <RCCEx_PLL3_Config+0x15c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1f0      	bne.n	8004bbe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004bdc:	4b42      	ldr	r3, [pc, #264]	; (8004ce8 <RCCEx_PLL3_Config+0x15c>)
 8004bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	051b      	lsls	r3, r3, #20
 8004bea:	493f      	ldr	r1, [pc, #252]	; (8004ce8 <RCCEx_PLL3_Config+0x15c>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	628b      	str	r3, [r1, #40]	; 0x28
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	025b      	lsls	r3, r3, #9
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	431a      	orrs	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	041b      	lsls	r3, r3, #16
 8004c0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	061b      	lsls	r3, r3, #24
 8004c1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c20:	4931      	ldr	r1, [pc, #196]	; (8004ce8 <RCCEx_PLL3_Config+0x15c>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004c26:	4b30      	ldr	r3, [pc, #192]	; (8004ce8 <RCCEx_PLL3_Config+0x15c>)
 8004c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	492d      	ldr	r1, [pc, #180]	; (8004ce8 <RCCEx_PLL3_Config+0x15c>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004c38:	4b2b      	ldr	r3, [pc, #172]	; (8004ce8 <RCCEx_PLL3_Config+0x15c>)
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	4928      	ldr	r1, [pc, #160]	; (8004ce8 <RCCEx_PLL3_Config+0x15c>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004c4a:	4b27      	ldr	r3, [pc, #156]	; (8004ce8 <RCCEx_PLL3_Config+0x15c>)
 8004c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4e:	4a26      	ldr	r2, [pc, #152]	; (8004ce8 <RCCEx_PLL3_Config+0x15c>)
 8004c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004c56:	4b24      	ldr	r3, [pc, #144]	; (8004ce8 <RCCEx_PLL3_Config+0x15c>)
 8004c58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c5a:	4b24      	ldr	r3, [pc, #144]	; (8004cec <RCCEx_PLL3_Config+0x160>)
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	69d2      	ldr	r2, [r2, #28]
 8004c62:	00d2      	lsls	r2, r2, #3
 8004c64:	4920      	ldr	r1, [pc, #128]	; (8004ce8 <RCCEx_PLL3_Config+0x15c>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004c6a:	4b1f      	ldr	r3, [pc, #124]	; (8004ce8 <RCCEx_PLL3_Config+0x15c>)
 8004c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6e:	4a1e      	ldr	r2, [pc, #120]	; (8004ce8 <RCCEx_PLL3_Config+0x15c>)
 8004c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d106      	bne.n	8004c8a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004c7c:	4b1a      	ldr	r3, [pc, #104]	; (8004ce8 <RCCEx_PLL3_Config+0x15c>)
 8004c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c80:	4a19      	ldr	r2, [pc, #100]	; (8004ce8 <RCCEx_PLL3_Config+0x15c>)
 8004c82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c88:	e00f      	b.n	8004caa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d106      	bne.n	8004c9e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004c90:	4b15      	ldr	r3, [pc, #84]	; (8004ce8 <RCCEx_PLL3_Config+0x15c>)
 8004c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c94:	4a14      	ldr	r2, [pc, #80]	; (8004ce8 <RCCEx_PLL3_Config+0x15c>)
 8004c96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c9c:	e005      	b.n	8004caa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004c9e:	4b12      	ldr	r3, [pc, #72]	; (8004ce8 <RCCEx_PLL3_Config+0x15c>)
 8004ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca2:	4a11      	ldr	r2, [pc, #68]	; (8004ce8 <RCCEx_PLL3_Config+0x15c>)
 8004ca4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ca8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004caa:	4b0f      	ldr	r3, [pc, #60]	; (8004ce8 <RCCEx_PLL3_Config+0x15c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a0e      	ldr	r2, [pc, #56]	; (8004ce8 <RCCEx_PLL3_Config+0x15c>)
 8004cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cb6:	f7fc f979 	bl	8000fac <HAL_GetTick>
 8004cba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004cbc:	e008      	b.n	8004cd0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004cbe:	f7fc f975 	bl	8000fac <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d901      	bls.n	8004cd0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e006      	b.n	8004cde <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004cd0:	4b05      	ldr	r3, [pc, #20]	; (8004ce8 <RCCEx_PLL3_Config+0x15c>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d0f0      	beq.n	8004cbe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	58024400 	.word	0x58024400
 8004cec:	ffff0007 	.word	0xffff0007

08004cf0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e10f      	b.n	8004f22 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a87      	ldr	r2, [pc, #540]	; (8004f2c <HAL_SPI_Init+0x23c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d00f      	beq.n	8004d32 <HAL_SPI_Init+0x42>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a86      	ldr	r2, [pc, #536]	; (8004f30 <HAL_SPI_Init+0x240>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00a      	beq.n	8004d32 <HAL_SPI_Init+0x42>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a84      	ldr	r2, [pc, #528]	; (8004f34 <HAL_SPI_Init+0x244>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d005      	beq.n	8004d32 <HAL_SPI_Init+0x42>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	2b0f      	cmp	r3, #15
 8004d2c:	d901      	bls.n	8004d32 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e0f7      	b.n	8004f22 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f900 	bl	8004f38 <SPI_GetPacketSize>
 8004d38:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a7b      	ldr	r2, [pc, #492]	; (8004f2c <HAL_SPI_Init+0x23c>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d00c      	beq.n	8004d5e <HAL_SPI_Init+0x6e>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a79      	ldr	r2, [pc, #484]	; (8004f30 <HAL_SPI_Init+0x240>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d007      	beq.n	8004d5e <HAL_SPI_Init+0x6e>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a78      	ldr	r2, [pc, #480]	; (8004f34 <HAL_SPI_Init+0x244>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d002      	beq.n	8004d5e <HAL_SPI_Init+0x6e>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b08      	cmp	r3, #8
 8004d5c:	d811      	bhi.n	8004d82 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004d62:	4a72      	ldr	r2, [pc, #456]	; (8004f2c <HAL_SPI_Init+0x23c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d009      	beq.n	8004d7c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a70      	ldr	r2, [pc, #448]	; (8004f30 <HAL_SPI_Init+0x240>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d004      	beq.n	8004d7c <HAL_SPI_Init+0x8c>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a6f      	ldr	r2, [pc, #444]	; (8004f34 <HAL_SPI_Init+0x244>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d104      	bne.n	8004d86 <HAL_SPI_Init+0x96>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2b10      	cmp	r3, #16
 8004d80:	d901      	bls.n	8004d86 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e0cd      	b.n	8004f22 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d106      	bne.n	8004da0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7fb fe3c 	bl	8000a18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0201 	bic.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004dc2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dcc:	d119      	bne.n	8004e02 <HAL_SPI_Init+0x112>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dd6:	d103      	bne.n	8004de0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d008      	beq.n	8004df2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10c      	bne.n	8004e02 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004dec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004df0:	d107      	bne.n	8004e02 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e00:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00f      	beq.n	8004e2e <HAL_SPI_Init+0x13e>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	2b06      	cmp	r3, #6
 8004e14:	d90b      	bls.n	8004e2e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	e007      	b.n	8004e3e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e3c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	69da      	ldr	r2, [r3, #28]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e46:	431a      	orrs	r2, r3
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e50:	ea42 0103 	orr.w	r1, r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68da      	ldr	r2, [r3, #12]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	431a      	orrs	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	431a      	orrs	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	431a      	orrs	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e92:	431a      	orrs	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e9e:	ea42 0103 	orr.w	r1, r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d113      	bne.n	8004ede <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ec8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004edc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 0201 	bic.w	r2, r2, #1
 8004eec:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40013000 	.word	0x40013000
 8004f30:	40003800 	.word	0x40003800
 8004f34:	40003c00 	.word	0x40003c00

08004f38 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f44:	095b      	lsrs	r3, r3, #5
 8004f46:	3301      	adds	r3, #1
 8004f48:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	3307      	adds	r3, #7
 8004f56:	08db      	lsrs	r3, r3, #3
 8004f58:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	fb02 f303 	mul.w	r3, r2, r3
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b082      	sub	sp, #8
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d101      	bne.n	8004f80 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e042      	b.n	8005006 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d106      	bne.n	8004f98 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7fb fee8 	bl	8000d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2224      	movs	r2, #36	; 0x24
 8004f9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0201 	bic.w	r2, r2, #1
 8004fae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 fc07 	bl	80057c4 <UART_SetConfig>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d101      	bne.n	8004fc0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e022      	b.n	8005006 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d002      	beq.n	8004fce <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f001 f963 	bl	8006294 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fdc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f042 0201 	orr.w	r2, r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f001 f9ea 	bl	80063d8 <UART_CheckIdleState>
 8005004:	4603      	mov	r3, r0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
	...

08005010 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b0ba      	sub	sp, #232	; 0xe8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005036:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800503a:	f640 030f 	movw	r3, #2063	; 0x80f
 800503e:	4013      	ands	r3, r2
 8005040:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005044:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005048:	2b00      	cmp	r3, #0
 800504a:	d11b      	bne.n	8005084 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800504c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005050:	f003 0320 	and.w	r3, r3, #32
 8005054:	2b00      	cmp	r3, #0
 8005056:	d015      	beq.n	8005084 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800505c:	f003 0320 	and.w	r3, r3, #32
 8005060:	2b00      	cmp	r3, #0
 8005062:	d105      	bne.n	8005070 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005064:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d009      	beq.n	8005084 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 8377 	beq.w	8005768 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	4798      	blx	r3
      }
      return;
 8005082:	e371      	b.n	8005768 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005084:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 8123 	beq.w	80052d4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800508e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005092:	4b8d      	ldr	r3, [pc, #564]	; (80052c8 <HAL_UART_IRQHandler+0x2b8>)
 8005094:	4013      	ands	r3, r2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d106      	bne.n	80050a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800509a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800509e:	4b8b      	ldr	r3, [pc, #556]	; (80052cc <HAL_UART_IRQHandler+0x2bc>)
 80050a0:	4013      	ands	r3, r2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 8116 	beq.w	80052d4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80050a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d011      	beq.n	80050d8 <HAL_UART_IRQHandler+0xc8>
 80050b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00b      	beq.n	80050d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2201      	movs	r2, #1
 80050c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ce:	f043 0201 	orr.w	r2, r3, #1
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d011      	beq.n	8005108 <HAL_UART_IRQHandler+0xf8>
 80050e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00b      	beq.n	8005108 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2202      	movs	r2, #2
 80050f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fe:	f043 0204 	orr.w	r2, r3, #4
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800510c:	f003 0304 	and.w	r3, r3, #4
 8005110:	2b00      	cmp	r3, #0
 8005112:	d011      	beq.n	8005138 <HAL_UART_IRQHandler+0x128>
 8005114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00b      	beq.n	8005138 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2204      	movs	r2, #4
 8005126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800512e:	f043 0202 	orr.w	r2, r3, #2
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800513c:	f003 0308 	and.w	r3, r3, #8
 8005140:	2b00      	cmp	r3, #0
 8005142:	d017      	beq.n	8005174 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005148:	f003 0320 	and.w	r3, r3, #32
 800514c:	2b00      	cmp	r3, #0
 800514e:	d105      	bne.n	800515c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005150:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005154:	4b5c      	ldr	r3, [pc, #368]	; (80052c8 <HAL_UART_IRQHandler+0x2b8>)
 8005156:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00b      	beq.n	8005174 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2208      	movs	r2, #8
 8005162:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516a:	f043 0208 	orr.w	r2, r3, #8
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005178:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800517c:	2b00      	cmp	r3, #0
 800517e:	d012      	beq.n	80051a6 <HAL_UART_IRQHandler+0x196>
 8005180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005184:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00c      	beq.n	80051a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005194:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800519c:	f043 0220 	orr.w	r2, r3, #32
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 82dd 	beq.w	800576c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80051b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051b6:	f003 0320 	and.w	r3, r3, #32
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d013      	beq.n	80051e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80051be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051c2:	f003 0320 	and.w	r3, r3, #32
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d105      	bne.n	80051d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80051ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d007      	beq.n	80051e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051fa:	2b40      	cmp	r3, #64	; 0x40
 80051fc:	d005      	beq.n	800520a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80051fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005202:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005206:	2b00      	cmp	r3, #0
 8005208:	d054      	beq.n	80052b4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f001 f9f6 	bl	80065fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521a:	2b40      	cmp	r3, #64	; 0x40
 800521c:	d146      	bne.n	80052ac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	3308      	adds	r3, #8
 8005224:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005228:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800522c:	e853 3f00 	ldrex	r3, [r3]
 8005230:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005234:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005238:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800523c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	3308      	adds	r3, #8
 8005246:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800524a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800524e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005252:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005256:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800525a:	e841 2300 	strex	r3, r2, [r1]
 800525e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005262:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1d9      	bne.n	800521e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005270:	2b00      	cmp	r3, #0
 8005272:	d017      	beq.n	80052a4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800527a:	4a15      	ldr	r2, [pc, #84]	; (80052d0 <HAL_UART_IRQHandler+0x2c0>)
 800527c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005284:	4618      	mov	r0, r3
 8005286:	f7fc fad7 	bl	8001838 <HAL_DMA_Abort_IT>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d019      	beq.n	80052c4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800529e:	4610      	mov	r0, r2
 80052a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a2:	e00f      	b.n	80052c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 fa77 	bl	8005798 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052aa:	e00b      	b.n	80052c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 fa73 	bl	8005798 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b2:	e007      	b.n	80052c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 fa6f 	bl	8005798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80052c2:	e253      	b.n	800576c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052c4:	bf00      	nop
    return;
 80052c6:	e251      	b.n	800576c <HAL_UART_IRQHandler+0x75c>
 80052c8:	10000001 	.word	0x10000001
 80052cc:	04000120 	.word	0x04000120
 80052d0:	080066c9 	.word	0x080066c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052d8:	2b01      	cmp	r3, #1
 80052da:	f040 81e7 	bne.w	80056ac <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80052de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052e2:	f003 0310 	and.w	r3, r3, #16
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f000 81e0 	beq.w	80056ac <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80052ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052f0:	f003 0310 	and.w	r3, r3, #16
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 81d9 	beq.w	80056ac <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2210      	movs	r2, #16
 8005300:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800530c:	2b40      	cmp	r3, #64	; 0x40
 800530e:	f040 8151 	bne.w	80055b4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a96      	ldr	r2, [pc, #600]	; (8005574 <HAL_UART_IRQHandler+0x564>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d068      	beq.n	80053f2 <HAL_UART_IRQHandler+0x3e2>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a93      	ldr	r2, [pc, #588]	; (8005578 <HAL_UART_IRQHandler+0x568>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d061      	beq.n	80053f2 <HAL_UART_IRQHandler+0x3e2>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a91      	ldr	r2, [pc, #580]	; (800557c <HAL_UART_IRQHandler+0x56c>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d05a      	beq.n	80053f2 <HAL_UART_IRQHandler+0x3e2>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a8e      	ldr	r2, [pc, #568]	; (8005580 <HAL_UART_IRQHandler+0x570>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d053      	beq.n	80053f2 <HAL_UART_IRQHandler+0x3e2>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a8c      	ldr	r2, [pc, #560]	; (8005584 <HAL_UART_IRQHandler+0x574>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d04c      	beq.n	80053f2 <HAL_UART_IRQHandler+0x3e2>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a89      	ldr	r2, [pc, #548]	; (8005588 <HAL_UART_IRQHandler+0x578>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d045      	beq.n	80053f2 <HAL_UART_IRQHandler+0x3e2>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a87      	ldr	r2, [pc, #540]	; (800558c <HAL_UART_IRQHandler+0x57c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d03e      	beq.n	80053f2 <HAL_UART_IRQHandler+0x3e2>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a84      	ldr	r2, [pc, #528]	; (8005590 <HAL_UART_IRQHandler+0x580>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d037      	beq.n	80053f2 <HAL_UART_IRQHandler+0x3e2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a82      	ldr	r2, [pc, #520]	; (8005594 <HAL_UART_IRQHandler+0x584>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d030      	beq.n	80053f2 <HAL_UART_IRQHandler+0x3e2>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a7f      	ldr	r2, [pc, #508]	; (8005598 <HAL_UART_IRQHandler+0x588>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d029      	beq.n	80053f2 <HAL_UART_IRQHandler+0x3e2>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a7d      	ldr	r2, [pc, #500]	; (800559c <HAL_UART_IRQHandler+0x58c>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d022      	beq.n	80053f2 <HAL_UART_IRQHandler+0x3e2>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a7a      	ldr	r2, [pc, #488]	; (80055a0 <HAL_UART_IRQHandler+0x590>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d01b      	beq.n	80053f2 <HAL_UART_IRQHandler+0x3e2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a78      	ldr	r2, [pc, #480]	; (80055a4 <HAL_UART_IRQHandler+0x594>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d014      	beq.n	80053f2 <HAL_UART_IRQHandler+0x3e2>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a75      	ldr	r2, [pc, #468]	; (80055a8 <HAL_UART_IRQHandler+0x598>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d00d      	beq.n	80053f2 <HAL_UART_IRQHandler+0x3e2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a73      	ldr	r2, [pc, #460]	; (80055ac <HAL_UART_IRQHandler+0x59c>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d006      	beq.n	80053f2 <HAL_UART_IRQHandler+0x3e2>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a70      	ldr	r2, [pc, #448]	; (80055b0 <HAL_UART_IRQHandler+0x5a0>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d106      	bne.n	8005400 <HAL_UART_IRQHandler+0x3f0>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	e005      	b.n	800540c <HAL_UART_IRQHandler+0x3fc>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	b29b      	uxth	r3, r3
 800540c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005410:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005414:	2b00      	cmp	r3, #0
 8005416:	f000 81ab 	beq.w	8005770 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005420:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005424:	429a      	cmp	r2, r3
 8005426:	f080 81a3 	bcs.w	8005770 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005430:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800543a:	69db      	ldr	r3, [r3, #28]
 800543c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005440:	f000 8087 	beq.w	8005552 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005450:	e853 3f00 	ldrex	r3, [r3]
 8005454:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005458:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800545c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005460:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	461a      	mov	r2, r3
 800546a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800546e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005472:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005476:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800547a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800547e:	e841 2300 	strex	r3, r2, [r1]
 8005482:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005486:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1da      	bne.n	8005444 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3308      	adds	r3, #8
 8005494:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005496:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005498:	e853 3f00 	ldrex	r3, [r3]
 800549c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800549e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054a0:	f023 0301 	bic.w	r3, r3, #1
 80054a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3308      	adds	r3, #8
 80054ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80054b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80054b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80054ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054be:	e841 2300 	strex	r3, r2, [r1]
 80054c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80054c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e1      	bne.n	800548e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	3308      	adds	r3, #8
 80054d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054d4:	e853 3f00 	ldrex	r3, [r3]
 80054d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80054da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	3308      	adds	r3, #8
 80054ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80054ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80054f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80054f6:	e841 2300 	strex	r3, r2, [r1]
 80054fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80054fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1e3      	bne.n	80054ca <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2220      	movs	r2, #32
 8005506:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005518:	e853 3f00 	ldrex	r3, [r3]
 800551c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800551e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005520:	f023 0310 	bic.w	r3, r3, #16
 8005524:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	461a      	mov	r2, r3
 800552e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005532:	65bb      	str	r3, [r7, #88]	; 0x58
 8005534:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005536:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005538:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800553a:	e841 2300 	strex	r3, r2, [r1]
 800553e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1e4      	bne.n	8005510 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800554c:	4618      	mov	r0, r3
 800554e:	f7fb fe55 	bl	80011fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2202      	movs	r2, #2
 8005556:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005564:	b29b      	uxth	r3, r3
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	b29b      	uxth	r3, r3
 800556a:	4619      	mov	r1, r3
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 f91d 	bl	80057ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005572:	e0fd      	b.n	8005770 <HAL_UART_IRQHandler+0x760>
 8005574:	40020010 	.word	0x40020010
 8005578:	40020028 	.word	0x40020028
 800557c:	40020040 	.word	0x40020040
 8005580:	40020058 	.word	0x40020058
 8005584:	40020070 	.word	0x40020070
 8005588:	40020088 	.word	0x40020088
 800558c:	400200a0 	.word	0x400200a0
 8005590:	400200b8 	.word	0x400200b8
 8005594:	40020410 	.word	0x40020410
 8005598:	40020428 	.word	0x40020428
 800559c:	40020440 	.word	0x40020440
 80055a0:	40020458 	.word	0x40020458
 80055a4:	40020470 	.word	0x40020470
 80055a8:	40020488 	.word	0x40020488
 80055ac:	400204a0 	.word	0x400204a0
 80055b0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 80cf 	beq.w	8005774 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80055d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f000 80ca 	beq.w	8005774 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e8:	e853 3f00 	ldrex	r3, [r3]
 80055ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	461a      	mov	r2, r3
 80055fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005602:	647b      	str	r3, [r7, #68]	; 0x44
 8005604:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005606:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005608:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800560a:	e841 2300 	strex	r3, r2, [r1]
 800560e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1e4      	bne.n	80055e0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	3308      	adds	r3, #8
 800561c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	e853 3f00 	ldrex	r3, [r3]
 8005624:	623b      	str	r3, [r7, #32]
   return(result);
 8005626:	6a3a      	ldr	r2, [r7, #32]
 8005628:	4b55      	ldr	r3, [pc, #340]	; (8005780 <HAL_UART_IRQHandler+0x770>)
 800562a:	4013      	ands	r3, r2
 800562c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	3308      	adds	r3, #8
 8005636:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800563a:	633a      	str	r2, [r7, #48]	; 0x30
 800563c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005642:	e841 2300 	strex	r3, r2, [r1]
 8005646:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1e3      	bne.n	8005616 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2220      	movs	r2, #32
 8005652:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	e853 3f00 	ldrex	r3, [r3]
 800566e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 0310 	bic.w	r3, r3, #16
 8005676:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	461a      	mov	r2, r3
 8005680:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005684:	61fb      	str	r3, [r7, #28]
 8005686:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005688:	69b9      	ldr	r1, [r7, #24]
 800568a:	69fa      	ldr	r2, [r7, #28]
 800568c:	e841 2300 	strex	r3, r2, [r1]
 8005690:	617b      	str	r3, [r7, #20]
   return(result);
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1e4      	bne.n	8005662 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800569e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056a2:	4619      	mov	r1, r3
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f881 	bl	80057ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80056aa:	e063      	b.n	8005774 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80056ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00e      	beq.n	80056d6 <HAL_UART_IRQHandler+0x6c6>
 80056b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d008      	beq.n	80056d6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80056cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f001 f83b 	bl	800674a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056d4:	e051      	b.n	800577a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80056d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d014      	beq.n	800570c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80056e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d105      	bne.n	80056fa <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80056ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d008      	beq.n	800570c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d03a      	beq.n	8005778 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	4798      	blx	r3
    }
    return;
 800570a:	e035      	b.n	8005778 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800570c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005714:	2b00      	cmp	r3, #0
 8005716:	d009      	beq.n	800572c <HAL_UART_IRQHandler+0x71c>
 8005718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800571c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005720:	2b00      	cmp	r3, #0
 8005722:	d003      	beq.n	800572c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 ffe5 	bl	80066f4 <UART_EndTransmit_IT>
    return;
 800572a:	e026      	b.n	800577a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800572c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005730:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d009      	beq.n	800574c <HAL_UART_IRQHandler+0x73c>
 8005738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800573c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d003      	beq.n	800574c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f001 f814 	bl	8006772 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800574a:	e016      	b.n	800577a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800574c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005750:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d010      	beq.n	800577a <HAL_UART_IRQHandler+0x76a>
 8005758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800575c:	2b00      	cmp	r3, #0
 800575e:	da0c      	bge.n	800577a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 fffc 	bl	800675e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005766:	e008      	b.n	800577a <HAL_UART_IRQHandler+0x76a>
      return;
 8005768:	bf00      	nop
 800576a:	e006      	b.n	800577a <HAL_UART_IRQHandler+0x76a>
    return;
 800576c:	bf00      	nop
 800576e:	e004      	b.n	800577a <HAL_UART_IRQHandler+0x76a>
      return;
 8005770:	bf00      	nop
 8005772:	e002      	b.n	800577a <HAL_UART_IRQHandler+0x76a>
      return;
 8005774:	bf00      	nop
 8005776:	e000      	b.n	800577a <HAL_UART_IRQHandler+0x76a>
    return;
 8005778:	bf00      	nop
  }
}
 800577a:	37e8      	adds	r7, #232	; 0xe8
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	effffffe 	.word	0xeffffffe

08005784 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	460b      	mov	r3, r1
 80057b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057c8:	b092      	sub	sp, #72	; 0x48
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057ce:	2300      	movs	r3, #0
 80057d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	689a      	ldr	r2, [r3, #8]
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	431a      	orrs	r2, r3
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	431a      	orrs	r2, r3
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	69db      	ldr	r3, [r3, #28]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	4bbe      	ldr	r3, [pc, #760]	; (8005aec <UART_SetConfig+0x328>)
 80057f4:	4013      	ands	r3, r2
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	6812      	ldr	r2, [r2, #0]
 80057fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80057fc:	430b      	orrs	r3, r1
 80057fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	68da      	ldr	r2, [r3, #12]
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4ab3      	ldr	r2, [pc, #716]	; (8005af0 <UART_SetConfig+0x32c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d004      	beq.n	8005830 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800582c:	4313      	orrs	r3, r2
 800582e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689a      	ldr	r2, [r3, #8]
 8005836:	4baf      	ldr	r3, [pc, #700]	; (8005af4 <UART_SetConfig+0x330>)
 8005838:	4013      	ands	r3, r2
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	6812      	ldr	r2, [r2, #0]
 800583e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005840:	430b      	orrs	r3, r1
 8005842:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584a:	f023 010f 	bic.w	r1, r3, #15
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4aa6      	ldr	r2, [pc, #664]	; (8005af8 <UART_SetConfig+0x334>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d177      	bne.n	8005954 <UART_SetConfig+0x190>
 8005864:	4ba5      	ldr	r3, [pc, #660]	; (8005afc <UART_SetConfig+0x338>)
 8005866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005868:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800586c:	2b28      	cmp	r3, #40	; 0x28
 800586e:	d86d      	bhi.n	800594c <UART_SetConfig+0x188>
 8005870:	a201      	add	r2, pc, #4	; (adr r2, 8005878 <UART_SetConfig+0xb4>)
 8005872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005876:	bf00      	nop
 8005878:	0800591d 	.word	0x0800591d
 800587c:	0800594d 	.word	0x0800594d
 8005880:	0800594d 	.word	0x0800594d
 8005884:	0800594d 	.word	0x0800594d
 8005888:	0800594d 	.word	0x0800594d
 800588c:	0800594d 	.word	0x0800594d
 8005890:	0800594d 	.word	0x0800594d
 8005894:	0800594d 	.word	0x0800594d
 8005898:	08005925 	.word	0x08005925
 800589c:	0800594d 	.word	0x0800594d
 80058a0:	0800594d 	.word	0x0800594d
 80058a4:	0800594d 	.word	0x0800594d
 80058a8:	0800594d 	.word	0x0800594d
 80058ac:	0800594d 	.word	0x0800594d
 80058b0:	0800594d 	.word	0x0800594d
 80058b4:	0800594d 	.word	0x0800594d
 80058b8:	0800592d 	.word	0x0800592d
 80058bc:	0800594d 	.word	0x0800594d
 80058c0:	0800594d 	.word	0x0800594d
 80058c4:	0800594d 	.word	0x0800594d
 80058c8:	0800594d 	.word	0x0800594d
 80058cc:	0800594d 	.word	0x0800594d
 80058d0:	0800594d 	.word	0x0800594d
 80058d4:	0800594d 	.word	0x0800594d
 80058d8:	08005935 	.word	0x08005935
 80058dc:	0800594d 	.word	0x0800594d
 80058e0:	0800594d 	.word	0x0800594d
 80058e4:	0800594d 	.word	0x0800594d
 80058e8:	0800594d 	.word	0x0800594d
 80058ec:	0800594d 	.word	0x0800594d
 80058f0:	0800594d 	.word	0x0800594d
 80058f4:	0800594d 	.word	0x0800594d
 80058f8:	0800593d 	.word	0x0800593d
 80058fc:	0800594d 	.word	0x0800594d
 8005900:	0800594d 	.word	0x0800594d
 8005904:	0800594d 	.word	0x0800594d
 8005908:	0800594d 	.word	0x0800594d
 800590c:	0800594d 	.word	0x0800594d
 8005910:	0800594d 	.word	0x0800594d
 8005914:	0800594d 	.word	0x0800594d
 8005918:	08005945 	.word	0x08005945
 800591c:	2301      	movs	r3, #1
 800591e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005922:	e222      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005924:	2304      	movs	r3, #4
 8005926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800592a:	e21e      	b.n	8005d6a <UART_SetConfig+0x5a6>
 800592c:	2308      	movs	r3, #8
 800592e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005932:	e21a      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005934:	2310      	movs	r3, #16
 8005936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800593a:	e216      	b.n	8005d6a <UART_SetConfig+0x5a6>
 800593c:	2320      	movs	r3, #32
 800593e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005942:	e212      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005944:	2340      	movs	r3, #64	; 0x40
 8005946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800594a:	e20e      	b.n	8005d6a <UART_SetConfig+0x5a6>
 800594c:	2380      	movs	r3, #128	; 0x80
 800594e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005952:	e20a      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a69      	ldr	r2, [pc, #420]	; (8005b00 <UART_SetConfig+0x33c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d130      	bne.n	80059c0 <UART_SetConfig+0x1fc>
 800595e:	4b67      	ldr	r3, [pc, #412]	; (8005afc <UART_SetConfig+0x338>)
 8005960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005962:	f003 0307 	and.w	r3, r3, #7
 8005966:	2b05      	cmp	r3, #5
 8005968:	d826      	bhi.n	80059b8 <UART_SetConfig+0x1f4>
 800596a:	a201      	add	r2, pc, #4	; (adr r2, 8005970 <UART_SetConfig+0x1ac>)
 800596c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005970:	08005989 	.word	0x08005989
 8005974:	08005991 	.word	0x08005991
 8005978:	08005999 	.word	0x08005999
 800597c:	080059a1 	.word	0x080059a1
 8005980:	080059a9 	.word	0x080059a9
 8005984:	080059b1 	.word	0x080059b1
 8005988:	2300      	movs	r3, #0
 800598a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800598e:	e1ec      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005990:	2304      	movs	r3, #4
 8005992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005996:	e1e8      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005998:	2308      	movs	r3, #8
 800599a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800599e:	e1e4      	b.n	8005d6a <UART_SetConfig+0x5a6>
 80059a0:	2310      	movs	r3, #16
 80059a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059a6:	e1e0      	b.n	8005d6a <UART_SetConfig+0x5a6>
 80059a8:	2320      	movs	r3, #32
 80059aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059ae:	e1dc      	b.n	8005d6a <UART_SetConfig+0x5a6>
 80059b0:	2340      	movs	r3, #64	; 0x40
 80059b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059b6:	e1d8      	b.n	8005d6a <UART_SetConfig+0x5a6>
 80059b8:	2380      	movs	r3, #128	; 0x80
 80059ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059be:	e1d4      	b.n	8005d6a <UART_SetConfig+0x5a6>
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a4f      	ldr	r2, [pc, #316]	; (8005b04 <UART_SetConfig+0x340>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d130      	bne.n	8005a2c <UART_SetConfig+0x268>
 80059ca:	4b4c      	ldr	r3, [pc, #304]	; (8005afc <UART_SetConfig+0x338>)
 80059cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ce:	f003 0307 	and.w	r3, r3, #7
 80059d2:	2b05      	cmp	r3, #5
 80059d4:	d826      	bhi.n	8005a24 <UART_SetConfig+0x260>
 80059d6:	a201      	add	r2, pc, #4	; (adr r2, 80059dc <UART_SetConfig+0x218>)
 80059d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059dc:	080059f5 	.word	0x080059f5
 80059e0:	080059fd 	.word	0x080059fd
 80059e4:	08005a05 	.word	0x08005a05
 80059e8:	08005a0d 	.word	0x08005a0d
 80059ec:	08005a15 	.word	0x08005a15
 80059f0:	08005a1d 	.word	0x08005a1d
 80059f4:	2300      	movs	r3, #0
 80059f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059fa:	e1b6      	b.n	8005d6a <UART_SetConfig+0x5a6>
 80059fc:	2304      	movs	r3, #4
 80059fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a02:	e1b2      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005a04:	2308      	movs	r3, #8
 8005a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a0a:	e1ae      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005a0c:	2310      	movs	r3, #16
 8005a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a12:	e1aa      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005a14:	2320      	movs	r3, #32
 8005a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a1a:	e1a6      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005a1c:	2340      	movs	r3, #64	; 0x40
 8005a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a22:	e1a2      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005a24:	2380      	movs	r3, #128	; 0x80
 8005a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a2a:	e19e      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a35      	ldr	r2, [pc, #212]	; (8005b08 <UART_SetConfig+0x344>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d130      	bne.n	8005a98 <UART_SetConfig+0x2d4>
 8005a36:	4b31      	ldr	r3, [pc, #196]	; (8005afc <UART_SetConfig+0x338>)
 8005a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3a:	f003 0307 	and.w	r3, r3, #7
 8005a3e:	2b05      	cmp	r3, #5
 8005a40:	d826      	bhi.n	8005a90 <UART_SetConfig+0x2cc>
 8005a42:	a201      	add	r2, pc, #4	; (adr r2, 8005a48 <UART_SetConfig+0x284>)
 8005a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a48:	08005a61 	.word	0x08005a61
 8005a4c:	08005a69 	.word	0x08005a69
 8005a50:	08005a71 	.word	0x08005a71
 8005a54:	08005a79 	.word	0x08005a79
 8005a58:	08005a81 	.word	0x08005a81
 8005a5c:	08005a89 	.word	0x08005a89
 8005a60:	2300      	movs	r3, #0
 8005a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a66:	e180      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005a68:	2304      	movs	r3, #4
 8005a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a6e:	e17c      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005a70:	2308      	movs	r3, #8
 8005a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a76:	e178      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005a78:	2310      	movs	r3, #16
 8005a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a7e:	e174      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005a80:	2320      	movs	r3, #32
 8005a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a86:	e170      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005a88:	2340      	movs	r3, #64	; 0x40
 8005a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a8e:	e16c      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005a90:	2380      	movs	r3, #128	; 0x80
 8005a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a96:	e168      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a1b      	ldr	r2, [pc, #108]	; (8005b0c <UART_SetConfig+0x348>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d142      	bne.n	8005b28 <UART_SetConfig+0x364>
 8005aa2:	4b16      	ldr	r3, [pc, #88]	; (8005afc <UART_SetConfig+0x338>)
 8005aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa6:	f003 0307 	and.w	r3, r3, #7
 8005aaa:	2b05      	cmp	r3, #5
 8005aac:	d838      	bhi.n	8005b20 <UART_SetConfig+0x35c>
 8005aae:	a201      	add	r2, pc, #4	; (adr r2, 8005ab4 <UART_SetConfig+0x2f0>)
 8005ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab4:	08005acd 	.word	0x08005acd
 8005ab8:	08005ad5 	.word	0x08005ad5
 8005abc:	08005add 	.word	0x08005add
 8005ac0:	08005ae5 	.word	0x08005ae5
 8005ac4:	08005b11 	.word	0x08005b11
 8005ac8:	08005b19 	.word	0x08005b19
 8005acc:	2300      	movs	r3, #0
 8005ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ad2:	e14a      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005ad4:	2304      	movs	r3, #4
 8005ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ada:	e146      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005adc:	2308      	movs	r3, #8
 8005ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ae2:	e142      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005ae4:	2310      	movs	r3, #16
 8005ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aea:	e13e      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005aec:	cfff69f3 	.word	0xcfff69f3
 8005af0:	58000c00 	.word	0x58000c00
 8005af4:	11fff4ff 	.word	0x11fff4ff
 8005af8:	40011000 	.word	0x40011000
 8005afc:	58024400 	.word	0x58024400
 8005b00:	40004400 	.word	0x40004400
 8005b04:	40004800 	.word	0x40004800
 8005b08:	40004c00 	.word	0x40004c00
 8005b0c:	40005000 	.word	0x40005000
 8005b10:	2320      	movs	r3, #32
 8005b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b16:	e128      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005b18:	2340      	movs	r3, #64	; 0x40
 8005b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b1e:	e124      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005b20:	2380      	movs	r3, #128	; 0x80
 8005b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b26:	e120      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4acb      	ldr	r2, [pc, #812]	; (8005e5c <UART_SetConfig+0x698>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d176      	bne.n	8005c20 <UART_SetConfig+0x45c>
 8005b32:	4bcb      	ldr	r3, [pc, #812]	; (8005e60 <UART_SetConfig+0x69c>)
 8005b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b3a:	2b28      	cmp	r3, #40	; 0x28
 8005b3c:	d86c      	bhi.n	8005c18 <UART_SetConfig+0x454>
 8005b3e:	a201      	add	r2, pc, #4	; (adr r2, 8005b44 <UART_SetConfig+0x380>)
 8005b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b44:	08005be9 	.word	0x08005be9
 8005b48:	08005c19 	.word	0x08005c19
 8005b4c:	08005c19 	.word	0x08005c19
 8005b50:	08005c19 	.word	0x08005c19
 8005b54:	08005c19 	.word	0x08005c19
 8005b58:	08005c19 	.word	0x08005c19
 8005b5c:	08005c19 	.word	0x08005c19
 8005b60:	08005c19 	.word	0x08005c19
 8005b64:	08005bf1 	.word	0x08005bf1
 8005b68:	08005c19 	.word	0x08005c19
 8005b6c:	08005c19 	.word	0x08005c19
 8005b70:	08005c19 	.word	0x08005c19
 8005b74:	08005c19 	.word	0x08005c19
 8005b78:	08005c19 	.word	0x08005c19
 8005b7c:	08005c19 	.word	0x08005c19
 8005b80:	08005c19 	.word	0x08005c19
 8005b84:	08005bf9 	.word	0x08005bf9
 8005b88:	08005c19 	.word	0x08005c19
 8005b8c:	08005c19 	.word	0x08005c19
 8005b90:	08005c19 	.word	0x08005c19
 8005b94:	08005c19 	.word	0x08005c19
 8005b98:	08005c19 	.word	0x08005c19
 8005b9c:	08005c19 	.word	0x08005c19
 8005ba0:	08005c19 	.word	0x08005c19
 8005ba4:	08005c01 	.word	0x08005c01
 8005ba8:	08005c19 	.word	0x08005c19
 8005bac:	08005c19 	.word	0x08005c19
 8005bb0:	08005c19 	.word	0x08005c19
 8005bb4:	08005c19 	.word	0x08005c19
 8005bb8:	08005c19 	.word	0x08005c19
 8005bbc:	08005c19 	.word	0x08005c19
 8005bc0:	08005c19 	.word	0x08005c19
 8005bc4:	08005c09 	.word	0x08005c09
 8005bc8:	08005c19 	.word	0x08005c19
 8005bcc:	08005c19 	.word	0x08005c19
 8005bd0:	08005c19 	.word	0x08005c19
 8005bd4:	08005c19 	.word	0x08005c19
 8005bd8:	08005c19 	.word	0x08005c19
 8005bdc:	08005c19 	.word	0x08005c19
 8005be0:	08005c19 	.word	0x08005c19
 8005be4:	08005c11 	.word	0x08005c11
 8005be8:	2301      	movs	r3, #1
 8005bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bee:	e0bc      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005bf0:	2304      	movs	r3, #4
 8005bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bf6:	e0b8      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005bf8:	2308      	movs	r3, #8
 8005bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bfe:	e0b4      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005c00:	2310      	movs	r3, #16
 8005c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c06:	e0b0      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005c08:	2320      	movs	r3, #32
 8005c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c0e:	e0ac      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005c10:	2340      	movs	r3, #64	; 0x40
 8005c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c16:	e0a8      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005c18:	2380      	movs	r3, #128	; 0x80
 8005c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c1e:	e0a4      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a8f      	ldr	r2, [pc, #572]	; (8005e64 <UART_SetConfig+0x6a0>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d130      	bne.n	8005c8c <UART_SetConfig+0x4c8>
 8005c2a:	4b8d      	ldr	r3, [pc, #564]	; (8005e60 <UART_SetConfig+0x69c>)
 8005c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c2e:	f003 0307 	and.w	r3, r3, #7
 8005c32:	2b05      	cmp	r3, #5
 8005c34:	d826      	bhi.n	8005c84 <UART_SetConfig+0x4c0>
 8005c36:	a201      	add	r2, pc, #4	; (adr r2, 8005c3c <UART_SetConfig+0x478>)
 8005c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3c:	08005c55 	.word	0x08005c55
 8005c40:	08005c5d 	.word	0x08005c5d
 8005c44:	08005c65 	.word	0x08005c65
 8005c48:	08005c6d 	.word	0x08005c6d
 8005c4c:	08005c75 	.word	0x08005c75
 8005c50:	08005c7d 	.word	0x08005c7d
 8005c54:	2300      	movs	r3, #0
 8005c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c5a:	e086      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005c5c:	2304      	movs	r3, #4
 8005c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c62:	e082      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005c64:	2308      	movs	r3, #8
 8005c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c6a:	e07e      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005c6c:	2310      	movs	r3, #16
 8005c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c72:	e07a      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005c74:	2320      	movs	r3, #32
 8005c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c7a:	e076      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005c7c:	2340      	movs	r3, #64	; 0x40
 8005c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c82:	e072      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005c84:	2380      	movs	r3, #128	; 0x80
 8005c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c8a:	e06e      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a75      	ldr	r2, [pc, #468]	; (8005e68 <UART_SetConfig+0x6a4>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d130      	bne.n	8005cf8 <UART_SetConfig+0x534>
 8005c96:	4b72      	ldr	r3, [pc, #456]	; (8005e60 <UART_SetConfig+0x69c>)
 8005c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c9a:	f003 0307 	and.w	r3, r3, #7
 8005c9e:	2b05      	cmp	r3, #5
 8005ca0:	d826      	bhi.n	8005cf0 <UART_SetConfig+0x52c>
 8005ca2:	a201      	add	r2, pc, #4	; (adr r2, 8005ca8 <UART_SetConfig+0x4e4>)
 8005ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca8:	08005cc1 	.word	0x08005cc1
 8005cac:	08005cc9 	.word	0x08005cc9
 8005cb0:	08005cd1 	.word	0x08005cd1
 8005cb4:	08005cd9 	.word	0x08005cd9
 8005cb8:	08005ce1 	.word	0x08005ce1
 8005cbc:	08005ce9 	.word	0x08005ce9
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cc6:	e050      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005cc8:	2304      	movs	r3, #4
 8005cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cce:	e04c      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005cd0:	2308      	movs	r3, #8
 8005cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cd6:	e048      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005cd8:	2310      	movs	r3, #16
 8005cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cde:	e044      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005ce0:	2320      	movs	r3, #32
 8005ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ce6:	e040      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005ce8:	2340      	movs	r3, #64	; 0x40
 8005cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cee:	e03c      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005cf0:	2380      	movs	r3, #128	; 0x80
 8005cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cf6:	e038      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a5b      	ldr	r2, [pc, #364]	; (8005e6c <UART_SetConfig+0x6a8>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d130      	bne.n	8005d64 <UART_SetConfig+0x5a0>
 8005d02:	4b57      	ldr	r3, [pc, #348]	; (8005e60 <UART_SetConfig+0x69c>)
 8005d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d06:	f003 0307 	and.w	r3, r3, #7
 8005d0a:	2b05      	cmp	r3, #5
 8005d0c:	d826      	bhi.n	8005d5c <UART_SetConfig+0x598>
 8005d0e:	a201      	add	r2, pc, #4	; (adr r2, 8005d14 <UART_SetConfig+0x550>)
 8005d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d14:	08005d2d 	.word	0x08005d2d
 8005d18:	08005d35 	.word	0x08005d35
 8005d1c:	08005d3d 	.word	0x08005d3d
 8005d20:	08005d45 	.word	0x08005d45
 8005d24:	08005d4d 	.word	0x08005d4d
 8005d28:	08005d55 	.word	0x08005d55
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d32:	e01a      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005d34:	2304      	movs	r3, #4
 8005d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d3a:	e016      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005d3c:	2308      	movs	r3, #8
 8005d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d42:	e012      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005d44:	2310      	movs	r3, #16
 8005d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d4a:	e00e      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005d4c:	2320      	movs	r3, #32
 8005d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d52:	e00a      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005d54:	2340      	movs	r3, #64	; 0x40
 8005d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d5a:	e006      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005d5c:	2380      	movs	r3, #128	; 0x80
 8005d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d62:	e002      	b.n	8005d6a <UART_SetConfig+0x5a6>
 8005d64:	2380      	movs	r3, #128	; 0x80
 8005d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a3f      	ldr	r2, [pc, #252]	; (8005e6c <UART_SetConfig+0x6a8>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	f040 80f8 	bne.w	8005f66 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d76:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005d7a:	2b20      	cmp	r3, #32
 8005d7c:	dc46      	bgt.n	8005e0c <UART_SetConfig+0x648>
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	f2c0 8082 	blt.w	8005e88 <UART_SetConfig+0x6c4>
 8005d84:	3b02      	subs	r3, #2
 8005d86:	2b1e      	cmp	r3, #30
 8005d88:	d87e      	bhi.n	8005e88 <UART_SetConfig+0x6c4>
 8005d8a:	a201      	add	r2, pc, #4	; (adr r2, 8005d90 <UART_SetConfig+0x5cc>)
 8005d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d90:	08005e13 	.word	0x08005e13
 8005d94:	08005e89 	.word	0x08005e89
 8005d98:	08005e1b 	.word	0x08005e1b
 8005d9c:	08005e89 	.word	0x08005e89
 8005da0:	08005e89 	.word	0x08005e89
 8005da4:	08005e89 	.word	0x08005e89
 8005da8:	08005e2b 	.word	0x08005e2b
 8005dac:	08005e89 	.word	0x08005e89
 8005db0:	08005e89 	.word	0x08005e89
 8005db4:	08005e89 	.word	0x08005e89
 8005db8:	08005e89 	.word	0x08005e89
 8005dbc:	08005e89 	.word	0x08005e89
 8005dc0:	08005e89 	.word	0x08005e89
 8005dc4:	08005e89 	.word	0x08005e89
 8005dc8:	08005e3b 	.word	0x08005e3b
 8005dcc:	08005e89 	.word	0x08005e89
 8005dd0:	08005e89 	.word	0x08005e89
 8005dd4:	08005e89 	.word	0x08005e89
 8005dd8:	08005e89 	.word	0x08005e89
 8005ddc:	08005e89 	.word	0x08005e89
 8005de0:	08005e89 	.word	0x08005e89
 8005de4:	08005e89 	.word	0x08005e89
 8005de8:	08005e89 	.word	0x08005e89
 8005dec:	08005e89 	.word	0x08005e89
 8005df0:	08005e89 	.word	0x08005e89
 8005df4:	08005e89 	.word	0x08005e89
 8005df8:	08005e89 	.word	0x08005e89
 8005dfc:	08005e89 	.word	0x08005e89
 8005e00:	08005e89 	.word	0x08005e89
 8005e04:	08005e89 	.word	0x08005e89
 8005e08:	08005e7b 	.word	0x08005e7b
 8005e0c:	2b40      	cmp	r3, #64	; 0x40
 8005e0e:	d037      	beq.n	8005e80 <UART_SetConfig+0x6bc>
 8005e10:	e03a      	b.n	8005e88 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005e12:	f7fe fb4b 	bl	80044ac <HAL_RCCEx_GetD3PCLK1Freq>
 8005e16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005e18:	e03c      	b.n	8005e94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fe fb5a 	bl	80044d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e28:	e034      	b.n	8005e94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e2a:	f107 0318 	add.w	r3, r7, #24
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fe fca6 	bl	8004780 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e38:	e02c      	b.n	8005e94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e3a:	4b09      	ldr	r3, [pc, #36]	; (8005e60 <UART_SetConfig+0x69c>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0320 	and.w	r3, r3, #32
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d016      	beq.n	8005e74 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e46:	4b06      	ldr	r3, [pc, #24]	; (8005e60 <UART_SetConfig+0x69c>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	08db      	lsrs	r3, r3, #3
 8005e4c:	f003 0303 	and.w	r3, r3, #3
 8005e50:	4a07      	ldr	r2, [pc, #28]	; (8005e70 <UART_SetConfig+0x6ac>)
 8005e52:	fa22 f303 	lsr.w	r3, r2, r3
 8005e56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e58:	e01c      	b.n	8005e94 <UART_SetConfig+0x6d0>
 8005e5a:	bf00      	nop
 8005e5c:	40011400 	.word	0x40011400
 8005e60:	58024400 	.word	0x58024400
 8005e64:	40007800 	.word	0x40007800
 8005e68:	40007c00 	.word	0x40007c00
 8005e6c:	58000c00 	.word	0x58000c00
 8005e70:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005e74:	4b9d      	ldr	r3, [pc, #628]	; (80060ec <UART_SetConfig+0x928>)
 8005e76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e78:	e00c      	b.n	8005e94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005e7a:	4b9d      	ldr	r3, [pc, #628]	; (80060f0 <UART_SetConfig+0x92c>)
 8005e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e7e:	e009      	b.n	8005e94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e86:	e005      	b.n	8005e94 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005e92:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f000 81de 	beq.w	8006258 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	4a94      	ldr	r2, [pc, #592]	; (80060f4 <UART_SetConfig+0x930>)
 8005ea2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eaa:	fbb3 f3f2 	udiv	r3, r3, r2
 8005eae:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	4413      	add	r3, r2
 8005eba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d305      	bcc.n	8005ecc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d903      	bls.n	8005ed4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005ed2:	e1c1      	b.n	8006258 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	60bb      	str	r3, [r7, #8]
 8005eda:	60fa      	str	r2, [r7, #12]
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee0:	4a84      	ldr	r2, [pc, #528]	; (80060f4 <UART_SetConfig+0x930>)
 8005ee2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	2200      	movs	r2, #0
 8005eea:	603b      	str	r3, [r7, #0]
 8005eec:	607a      	str	r2, [r7, #4]
 8005eee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ef2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ef6:	f7fa f9ef 	bl	80002d8 <__aeabi_uldivmod>
 8005efa:	4602      	mov	r2, r0
 8005efc:	460b      	mov	r3, r1
 8005efe:	4610      	mov	r0, r2
 8005f00:	4619      	mov	r1, r3
 8005f02:	f04f 0200 	mov.w	r2, #0
 8005f06:	f04f 0300 	mov.w	r3, #0
 8005f0a:	020b      	lsls	r3, r1, #8
 8005f0c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f10:	0202      	lsls	r2, r0, #8
 8005f12:	6979      	ldr	r1, [r7, #20]
 8005f14:	6849      	ldr	r1, [r1, #4]
 8005f16:	0849      	lsrs	r1, r1, #1
 8005f18:	2000      	movs	r0, #0
 8005f1a:	460c      	mov	r4, r1
 8005f1c:	4605      	mov	r5, r0
 8005f1e:	eb12 0804 	adds.w	r8, r2, r4
 8005f22:	eb43 0905 	adc.w	r9, r3, r5
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	469a      	mov	sl, r3
 8005f2e:	4693      	mov	fp, r2
 8005f30:	4652      	mov	r2, sl
 8005f32:	465b      	mov	r3, fp
 8005f34:	4640      	mov	r0, r8
 8005f36:	4649      	mov	r1, r9
 8005f38:	f7fa f9ce 	bl	80002d8 <__aeabi_uldivmod>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	460b      	mov	r3, r1
 8005f40:	4613      	mov	r3, r2
 8005f42:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f4a:	d308      	bcc.n	8005f5e <UART_SetConfig+0x79a>
 8005f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f52:	d204      	bcs.n	8005f5e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f5a:	60da      	str	r2, [r3, #12]
 8005f5c:	e17c      	b.n	8006258 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005f64:	e178      	b.n	8006258 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f6e:	f040 80c5 	bne.w	80060fc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005f72:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005f76:	2b20      	cmp	r3, #32
 8005f78:	dc48      	bgt.n	800600c <UART_SetConfig+0x848>
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	db7b      	blt.n	8006076 <UART_SetConfig+0x8b2>
 8005f7e:	2b20      	cmp	r3, #32
 8005f80:	d879      	bhi.n	8006076 <UART_SetConfig+0x8b2>
 8005f82:	a201      	add	r2, pc, #4	; (adr r2, 8005f88 <UART_SetConfig+0x7c4>)
 8005f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f88:	08006013 	.word	0x08006013
 8005f8c:	0800601b 	.word	0x0800601b
 8005f90:	08006077 	.word	0x08006077
 8005f94:	08006077 	.word	0x08006077
 8005f98:	08006023 	.word	0x08006023
 8005f9c:	08006077 	.word	0x08006077
 8005fa0:	08006077 	.word	0x08006077
 8005fa4:	08006077 	.word	0x08006077
 8005fa8:	08006033 	.word	0x08006033
 8005fac:	08006077 	.word	0x08006077
 8005fb0:	08006077 	.word	0x08006077
 8005fb4:	08006077 	.word	0x08006077
 8005fb8:	08006077 	.word	0x08006077
 8005fbc:	08006077 	.word	0x08006077
 8005fc0:	08006077 	.word	0x08006077
 8005fc4:	08006077 	.word	0x08006077
 8005fc8:	08006043 	.word	0x08006043
 8005fcc:	08006077 	.word	0x08006077
 8005fd0:	08006077 	.word	0x08006077
 8005fd4:	08006077 	.word	0x08006077
 8005fd8:	08006077 	.word	0x08006077
 8005fdc:	08006077 	.word	0x08006077
 8005fe0:	08006077 	.word	0x08006077
 8005fe4:	08006077 	.word	0x08006077
 8005fe8:	08006077 	.word	0x08006077
 8005fec:	08006077 	.word	0x08006077
 8005ff0:	08006077 	.word	0x08006077
 8005ff4:	08006077 	.word	0x08006077
 8005ff8:	08006077 	.word	0x08006077
 8005ffc:	08006077 	.word	0x08006077
 8006000:	08006077 	.word	0x08006077
 8006004:	08006077 	.word	0x08006077
 8006008:	08006069 	.word	0x08006069
 800600c:	2b40      	cmp	r3, #64	; 0x40
 800600e:	d02e      	beq.n	800606e <UART_SetConfig+0x8aa>
 8006010:	e031      	b.n	8006076 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006012:	f7fd f815 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 8006016:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006018:	e033      	b.n	8006082 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800601a:	f7fd f827 	bl	800306c <HAL_RCC_GetPCLK2Freq>
 800601e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006020:	e02f      	b.n	8006082 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006026:	4618      	mov	r0, r3
 8006028:	f7fe fa56 	bl	80044d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800602c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006030:	e027      	b.n	8006082 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006032:	f107 0318 	add.w	r3, r7, #24
 8006036:	4618      	mov	r0, r3
 8006038:	f7fe fba2 	bl	8004780 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006040:	e01f      	b.n	8006082 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006042:	4b2d      	ldr	r3, [pc, #180]	; (80060f8 <UART_SetConfig+0x934>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0320 	and.w	r3, r3, #32
 800604a:	2b00      	cmp	r3, #0
 800604c:	d009      	beq.n	8006062 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800604e:	4b2a      	ldr	r3, [pc, #168]	; (80060f8 <UART_SetConfig+0x934>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	08db      	lsrs	r3, r3, #3
 8006054:	f003 0303 	and.w	r3, r3, #3
 8006058:	4a24      	ldr	r2, [pc, #144]	; (80060ec <UART_SetConfig+0x928>)
 800605a:	fa22 f303 	lsr.w	r3, r2, r3
 800605e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006060:	e00f      	b.n	8006082 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006062:	4b22      	ldr	r3, [pc, #136]	; (80060ec <UART_SetConfig+0x928>)
 8006064:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006066:	e00c      	b.n	8006082 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006068:	4b21      	ldr	r3, [pc, #132]	; (80060f0 <UART_SetConfig+0x92c>)
 800606a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800606c:	e009      	b.n	8006082 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800606e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006072:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006074:	e005      	b.n	8006082 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006076:	2300      	movs	r3, #0
 8006078:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006080:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 80e7 	beq.w	8006258 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608e:	4a19      	ldr	r2, [pc, #100]	; (80060f4 <UART_SetConfig+0x930>)
 8006090:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006094:	461a      	mov	r2, r3
 8006096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006098:	fbb3 f3f2 	udiv	r3, r3, r2
 800609c:	005a      	lsls	r2, r3, #1
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	085b      	lsrs	r3, r3, #1
 80060a4:	441a      	add	r2, r3
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ae:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b2:	2b0f      	cmp	r3, #15
 80060b4:	d916      	bls.n	80060e4 <UART_SetConfig+0x920>
 80060b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060bc:	d212      	bcs.n	80060e4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	f023 030f 	bic.w	r3, r3, #15
 80060c6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ca:	085b      	lsrs	r3, r3, #1
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	f003 0307 	and.w	r3, r3, #7
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80060d6:	4313      	orrs	r3, r2
 80060d8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80060e0:	60da      	str	r2, [r3, #12]
 80060e2:	e0b9      	b.n	8006258 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80060ea:	e0b5      	b.n	8006258 <UART_SetConfig+0xa94>
 80060ec:	03d09000 	.word	0x03d09000
 80060f0:	003d0900 	.word	0x003d0900
 80060f4:	08006a24 	.word	0x08006a24
 80060f8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80060fc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006100:	2b20      	cmp	r3, #32
 8006102:	dc49      	bgt.n	8006198 <UART_SetConfig+0x9d4>
 8006104:	2b00      	cmp	r3, #0
 8006106:	db7c      	blt.n	8006202 <UART_SetConfig+0xa3e>
 8006108:	2b20      	cmp	r3, #32
 800610a:	d87a      	bhi.n	8006202 <UART_SetConfig+0xa3e>
 800610c:	a201      	add	r2, pc, #4	; (adr r2, 8006114 <UART_SetConfig+0x950>)
 800610e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006112:	bf00      	nop
 8006114:	0800619f 	.word	0x0800619f
 8006118:	080061a7 	.word	0x080061a7
 800611c:	08006203 	.word	0x08006203
 8006120:	08006203 	.word	0x08006203
 8006124:	080061af 	.word	0x080061af
 8006128:	08006203 	.word	0x08006203
 800612c:	08006203 	.word	0x08006203
 8006130:	08006203 	.word	0x08006203
 8006134:	080061bf 	.word	0x080061bf
 8006138:	08006203 	.word	0x08006203
 800613c:	08006203 	.word	0x08006203
 8006140:	08006203 	.word	0x08006203
 8006144:	08006203 	.word	0x08006203
 8006148:	08006203 	.word	0x08006203
 800614c:	08006203 	.word	0x08006203
 8006150:	08006203 	.word	0x08006203
 8006154:	080061cf 	.word	0x080061cf
 8006158:	08006203 	.word	0x08006203
 800615c:	08006203 	.word	0x08006203
 8006160:	08006203 	.word	0x08006203
 8006164:	08006203 	.word	0x08006203
 8006168:	08006203 	.word	0x08006203
 800616c:	08006203 	.word	0x08006203
 8006170:	08006203 	.word	0x08006203
 8006174:	08006203 	.word	0x08006203
 8006178:	08006203 	.word	0x08006203
 800617c:	08006203 	.word	0x08006203
 8006180:	08006203 	.word	0x08006203
 8006184:	08006203 	.word	0x08006203
 8006188:	08006203 	.word	0x08006203
 800618c:	08006203 	.word	0x08006203
 8006190:	08006203 	.word	0x08006203
 8006194:	080061f5 	.word	0x080061f5
 8006198:	2b40      	cmp	r3, #64	; 0x40
 800619a:	d02e      	beq.n	80061fa <UART_SetConfig+0xa36>
 800619c:	e031      	b.n	8006202 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800619e:	f7fc ff4f 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 80061a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80061a4:	e033      	b.n	800620e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061a6:	f7fc ff61 	bl	800306c <HAL_RCC_GetPCLK2Freq>
 80061aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80061ac:	e02f      	b.n	800620e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7fe f990 	bl	80044d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80061b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061bc:	e027      	b.n	800620e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061be:	f107 0318 	add.w	r3, r7, #24
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fe fadc 	bl	8004780 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061cc:	e01f      	b.n	800620e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061ce:	4b2d      	ldr	r3, [pc, #180]	; (8006284 <UART_SetConfig+0xac0>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0320 	and.w	r3, r3, #32
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d009      	beq.n	80061ee <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80061da:	4b2a      	ldr	r3, [pc, #168]	; (8006284 <UART_SetConfig+0xac0>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	08db      	lsrs	r3, r3, #3
 80061e0:	f003 0303 	and.w	r3, r3, #3
 80061e4:	4a28      	ldr	r2, [pc, #160]	; (8006288 <UART_SetConfig+0xac4>)
 80061e6:	fa22 f303 	lsr.w	r3, r2, r3
 80061ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061ec:	e00f      	b.n	800620e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80061ee:	4b26      	ldr	r3, [pc, #152]	; (8006288 <UART_SetConfig+0xac4>)
 80061f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061f2:	e00c      	b.n	800620e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80061f4:	4b25      	ldr	r3, [pc, #148]	; (800628c <UART_SetConfig+0xac8>)
 80061f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061f8:	e009      	b.n	800620e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006200:	e005      	b.n	800620e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006202:	2300      	movs	r3, #0
 8006204:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800620c:	bf00      	nop
    }

    if (pclk != 0U)
 800620e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006210:	2b00      	cmp	r3, #0
 8006212:	d021      	beq.n	8006258 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	4a1d      	ldr	r2, [pc, #116]	; (8006290 <UART_SetConfig+0xacc>)
 800621a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800621e:	461a      	mov	r2, r3
 8006220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006222:	fbb3 f2f2 	udiv	r2, r3, r2
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	085b      	lsrs	r3, r3, #1
 800622c:	441a      	add	r2, r3
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	fbb2 f3f3 	udiv	r3, r2, r3
 8006236:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623a:	2b0f      	cmp	r3, #15
 800623c:	d909      	bls.n	8006252 <UART_SetConfig+0xa8e>
 800623e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006244:	d205      	bcs.n	8006252 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006248:	b29a      	uxth	r2, r3
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	60da      	str	r2, [r3, #12]
 8006250:	e002      	b.n	8006258 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	2201      	movs	r2, #1
 800625c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	2201      	movs	r2, #1
 8006264:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	2200      	movs	r2, #0
 800626c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	2200      	movs	r2, #0
 8006272:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006274:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006278:	4618      	mov	r0, r3
 800627a:	3748      	adds	r7, #72	; 0x48
 800627c:	46bd      	mov	sp, r7
 800627e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006282:	bf00      	nop
 8006284:	58024400 	.word	0x58024400
 8006288:	03d09000 	.word	0x03d09000
 800628c:	003d0900 	.word	0x003d0900
 8006290:	08006a24 	.word	0x08006a24

08006294 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a0:	f003 0301 	and.w	r3, r3, #1
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00a      	beq.n	80062be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00a      	beq.n	80062e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e4:	f003 0304 	and.w	r3, r3, #4
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00a      	beq.n	8006302 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	430a      	orrs	r2, r1
 8006300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006306:	f003 0308 	and.w	r3, r3, #8
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00a      	beq.n	8006324 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006328:	f003 0310 	and.w	r3, r3, #16
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00a      	beq.n	8006346 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634a:	f003 0320 	and.w	r3, r3, #32
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00a      	beq.n	8006368 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	430a      	orrs	r2, r1
 8006366:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006370:	2b00      	cmp	r3, #0
 8006372:	d01a      	beq.n	80063aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800638e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006392:	d10a      	bne.n	80063aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00a      	beq.n	80063cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	605a      	str	r2, [r3, #4]
  }
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b098      	sub	sp, #96	; 0x60
 80063dc:	af02      	add	r7, sp, #8
 80063de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063e8:	f7fa fde0 	bl	8000fac <HAL_GetTick>
 80063ec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0308 	and.w	r3, r3, #8
 80063f8:	2b08      	cmp	r3, #8
 80063fa:	d12f      	bne.n	800645c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006404:	2200      	movs	r2, #0
 8006406:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f88e 	bl	800652c <UART_WaitOnFlagUntilTimeout>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d022      	beq.n	800645c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641e:	e853 3f00 	ldrex	r3, [r3]
 8006422:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800642a:	653b      	str	r3, [r7, #80]	; 0x50
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	461a      	mov	r2, r3
 8006432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006434:	647b      	str	r3, [r7, #68]	; 0x44
 8006436:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006438:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800643a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800643c:	e841 2300 	strex	r3, r2, [r1]
 8006440:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1e6      	bne.n	8006416 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2220      	movs	r2, #32
 800644c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e063      	b.n	8006524 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0304 	and.w	r3, r3, #4
 8006466:	2b04      	cmp	r3, #4
 8006468:	d149      	bne.n	80064fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800646a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006472:	2200      	movs	r2, #0
 8006474:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 f857 	bl	800652c <UART_WaitOnFlagUntilTimeout>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d03c      	beq.n	80064fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648c:	e853 3f00 	ldrex	r3, [r3]
 8006490:	623b      	str	r3, [r7, #32]
   return(result);
 8006492:	6a3b      	ldr	r3, [r7, #32]
 8006494:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006498:	64fb      	str	r3, [r7, #76]	; 0x4c
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	461a      	mov	r2, r3
 80064a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064a2:	633b      	str	r3, [r7, #48]	; 0x30
 80064a4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064aa:	e841 2300 	strex	r3, r2, [r1]
 80064ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1e6      	bne.n	8006484 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	3308      	adds	r3, #8
 80064bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	e853 3f00 	ldrex	r3, [r3]
 80064c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f023 0301 	bic.w	r3, r3, #1
 80064cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	3308      	adds	r3, #8
 80064d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064d6:	61fa      	str	r2, [r7, #28]
 80064d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064da:	69b9      	ldr	r1, [r7, #24]
 80064dc:	69fa      	ldr	r2, [r7, #28]
 80064de:	e841 2300 	strex	r3, r2, [r1]
 80064e2:	617b      	str	r3, [r7, #20]
   return(result);
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1e5      	bne.n	80064b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2220      	movs	r2, #32
 80064ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e012      	b.n	8006524 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2220      	movs	r2, #32
 8006502:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2220      	movs	r2, #32
 800650a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3758      	adds	r7, #88	; 0x58
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	603b      	str	r3, [r7, #0]
 8006538:	4613      	mov	r3, r2
 800653a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800653c:	e049      	b.n	80065d2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006544:	d045      	beq.n	80065d2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006546:	f7fa fd31 	bl	8000fac <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	429a      	cmp	r2, r3
 8006554:	d302      	bcc.n	800655c <UART_WaitOnFlagUntilTimeout+0x30>
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d101      	bne.n	8006560 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	e048      	b.n	80065f2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0304 	and.w	r3, r3, #4
 800656a:	2b00      	cmp	r3, #0
 800656c:	d031      	beq.n	80065d2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	f003 0308 	and.w	r3, r3, #8
 8006578:	2b08      	cmp	r3, #8
 800657a:	d110      	bne.n	800659e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2208      	movs	r2, #8
 8006582:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 f839 	bl	80065fc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2208      	movs	r2, #8
 800658e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e029      	b.n	80065f2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	69db      	ldr	r3, [r3, #28]
 80065a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065ac:	d111      	bne.n	80065d2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f000 f81f 	bl	80065fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2220      	movs	r2, #32
 80065c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e00f      	b.n	80065f2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	69da      	ldr	r2, [r3, #28]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	4013      	ands	r3, r2
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	429a      	cmp	r2, r3
 80065e0:	bf0c      	ite	eq
 80065e2:	2301      	moveq	r3, #1
 80065e4:	2300      	movne	r3, #0
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	461a      	mov	r2, r3
 80065ea:	79fb      	ldrb	r3, [r7, #7]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d0a6      	beq.n	800653e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
	...

080065fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b095      	sub	sp, #84	; 0x54
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800660c:	e853 3f00 	ldrex	r3, [r3]
 8006610:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006614:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006618:	64fb      	str	r3, [r7, #76]	; 0x4c
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	461a      	mov	r2, r3
 8006620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006622:	643b      	str	r3, [r7, #64]	; 0x40
 8006624:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006626:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006628:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800662a:	e841 2300 	strex	r3, r2, [r1]
 800662e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1e6      	bne.n	8006604 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3308      	adds	r3, #8
 800663c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	e853 3f00 	ldrex	r3, [r3]
 8006644:	61fb      	str	r3, [r7, #28]
   return(result);
 8006646:	69fa      	ldr	r2, [r7, #28]
 8006648:	4b1e      	ldr	r3, [pc, #120]	; (80066c4 <UART_EndRxTransfer+0xc8>)
 800664a:	4013      	ands	r3, r2
 800664c:	64bb      	str	r3, [r7, #72]	; 0x48
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	3308      	adds	r3, #8
 8006654:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006656:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006658:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800665c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800665e:	e841 2300 	strex	r3, r2, [r1]
 8006662:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1e5      	bne.n	8006636 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800666e:	2b01      	cmp	r3, #1
 8006670:	d118      	bne.n	80066a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	e853 3f00 	ldrex	r3, [r3]
 800667e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	f023 0310 	bic.w	r3, r3, #16
 8006686:	647b      	str	r3, [r7, #68]	; 0x44
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	461a      	mov	r2, r3
 800668e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006690:	61bb      	str	r3, [r7, #24]
 8006692:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006694:	6979      	ldr	r1, [r7, #20]
 8006696:	69ba      	ldr	r2, [r7, #24]
 8006698:	e841 2300 	strex	r3, r2, [r1]
 800669c:	613b      	str	r3, [r7, #16]
   return(result);
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1e6      	bne.n	8006672 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2220      	movs	r2, #32
 80066a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80066b8:	bf00      	nop
 80066ba:	3754      	adds	r7, #84	; 0x54
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr
 80066c4:	effffffe 	.word	0xeffffffe

080066c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f7ff f856 	bl	8005798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066ec:	bf00      	nop
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b088      	sub	sp, #32
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	e853 3f00 	ldrex	r3, [r3]
 8006708:	60bb      	str	r3, [r7, #8]
   return(result);
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006710:	61fb      	str	r3, [r7, #28]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	461a      	mov	r2, r3
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	61bb      	str	r3, [r7, #24]
 800671c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671e:	6979      	ldr	r1, [r7, #20]
 8006720:	69ba      	ldr	r2, [r7, #24]
 8006722:	e841 2300 	strex	r3, r2, [r1]
 8006726:	613b      	str	r3, [r7, #16]
   return(result);
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1e6      	bne.n	80066fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2220      	movs	r2, #32
 8006732:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f7ff f821 	bl	8005784 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006742:	bf00      	nop
 8006744:	3720      	adds	r7, #32
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800674a:	b480      	push	{r7}
 800674c:	b083      	sub	sp, #12
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006752:	bf00      	nop
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800675e:	b480      	push	{r7}
 8006760:	b083      	sub	sp, #12
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006766:	bf00      	nop
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006772:	b480      	push	{r7}
 8006774:	b083      	sub	sp, #12
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800677a:	bf00      	nop
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006786:	b480      	push	{r7}
 8006788:	b085      	sub	sp, #20
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006794:	2b01      	cmp	r3, #1
 8006796:	d101      	bne.n	800679c <HAL_UARTEx_DisableFifoMode+0x16>
 8006798:	2302      	movs	r3, #2
 800679a:	e027      	b.n	80067ec <HAL_UARTEx_DisableFifoMode+0x66>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2224      	movs	r2, #36	; 0x24
 80067a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f022 0201 	bic.w	r2, r2, #1
 80067c2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80067ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2220      	movs	r2, #32
 80067de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3714      	adds	r7, #20
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006808:	2b01      	cmp	r3, #1
 800680a:	d101      	bne.n	8006810 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800680c:	2302      	movs	r3, #2
 800680e:	e02d      	b.n	800686c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2224      	movs	r2, #36	; 0x24
 800681c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f022 0201 	bic.w	r2, r2, #1
 8006836:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	683a      	ldr	r2, [r7, #0]
 8006848:	430a      	orrs	r2, r1
 800684a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 f84f 	bl	80068f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2220      	movs	r2, #32
 800685e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006884:	2b01      	cmp	r3, #1
 8006886:	d101      	bne.n	800688c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006888:	2302      	movs	r3, #2
 800688a:	e02d      	b.n	80068e8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2224      	movs	r2, #36	; 0x24
 8006898:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f022 0201 	bic.w	r2, r2, #1
 80068b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f811 	bl	80068f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2220      	movs	r2, #32
 80068da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d108      	bne.n	8006912 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006910:	e031      	b.n	8006976 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006912:	2310      	movs	r3, #16
 8006914:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006916:	2310      	movs	r3, #16
 8006918:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	0e5b      	lsrs	r3, r3, #25
 8006922:	b2db      	uxtb	r3, r3
 8006924:	f003 0307 	and.w	r3, r3, #7
 8006928:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	0f5b      	lsrs	r3, r3, #29
 8006932:	b2db      	uxtb	r3, r3
 8006934:	f003 0307 	and.w	r3, r3, #7
 8006938:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800693a:	7bbb      	ldrb	r3, [r7, #14]
 800693c:	7b3a      	ldrb	r2, [r7, #12]
 800693e:	4911      	ldr	r1, [pc, #68]	; (8006984 <UARTEx_SetNbDataToProcess+0x94>)
 8006940:	5c8a      	ldrb	r2, [r1, r2]
 8006942:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006946:	7b3a      	ldrb	r2, [r7, #12]
 8006948:	490f      	ldr	r1, [pc, #60]	; (8006988 <UARTEx_SetNbDataToProcess+0x98>)
 800694a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800694c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006950:	b29a      	uxth	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006958:	7bfb      	ldrb	r3, [r7, #15]
 800695a:	7b7a      	ldrb	r2, [r7, #13]
 800695c:	4909      	ldr	r1, [pc, #36]	; (8006984 <UARTEx_SetNbDataToProcess+0x94>)
 800695e:	5c8a      	ldrb	r2, [r1, r2]
 8006960:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006964:	7b7a      	ldrb	r2, [r7, #13]
 8006966:	4908      	ldr	r1, [pc, #32]	; (8006988 <UARTEx_SetNbDataToProcess+0x98>)
 8006968:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800696a:	fb93 f3f2 	sdiv	r3, r3, r2
 800696e:	b29a      	uxth	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006976:	bf00      	nop
 8006978:	3714      	adds	r7, #20
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	08006a3c 	.word	0x08006a3c
 8006988:	08006a44 	.word	0x08006a44

0800698c <LED_Init>:

#include "stm32h7xx_hal.h"
#include "led.h"

void LED_Init(void)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	af00      	add	r7, sp, #0
  LED1_ON;
 8006990:	2200      	movs	r2, #0
 8006992:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006996:	4802      	ldr	r0, [pc, #8]	; (80069a0 <LED_Init+0x14>)
 8006998:	f7fb fb44 	bl	8002024 <HAL_GPIO_WritePin>
}
 800699c:	bf00      	nop
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	58020800 	.word	0x58020800

080069a4 <memset>:
 80069a4:	4402      	add	r2, r0
 80069a6:	4603      	mov	r3, r0
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d100      	bne.n	80069ae <memset+0xa>
 80069ac:	4770      	bx	lr
 80069ae:	f803 1b01 	strb.w	r1, [r3], #1
 80069b2:	e7f9      	b.n	80069a8 <memset+0x4>

080069b4 <__libc_init_array>:
 80069b4:	b570      	push	{r4, r5, r6, lr}
 80069b6:	4d0d      	ldr	r5, [pc, #52]	; (80069ec <__libc_init_array+0x38>)
 80069b8:	4c0d      	ldr	r4, [pc, #52]	; (80069f0 <__libc_init_array+0x3c>)
 80069ba:	1b64      	subs	r4, r4, r5
 80069bc:	10a4      	asrs	r4, r4, #2
 80069be:	2600      	movs	r6, #0
 80069c0:	42a6      	cmp	r6, r4
 80069c2:	d109      	bne.n	80069d8 <__libc_init_array+0x24>
 80069c4:	4d0b      	ldr	r5, [pc, #44]	; (80069f4 <__libc_init_array+0x40>)
 80069c6:	4c0c      	ldr	r4, [pc, #48]	; (80069f8 <__libc_init_array+0x44>)
 80069c8:	f000 f818 	bl	80069fc <_init>
 80069cc:	1b64      	subs	r4, r4, r5
 80069ce:	10a4      	asrs	r4, r4, #2
 80069d0:	2600      	movs	r6, #0
 80069d2:	42a6      	cmp	r6, r4
 80069d4:	d105      	bne.n	80069e2 <__libc_init_array+0x2e>
 80069d6:	bd70      	pop	{r4, r5, r6, pc}
 80069d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069dc:	4798      	blx	r3
 80069de:	3601      	adds	r6, #1
 80069e0:	e7ee      	b.n	80069c0 <__libc_init_array+0xc>
 80069e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069e6:	4798      	blx	r3
 80069e8:	3601      	adds	r6, #1
 80069ea:	e7f2      	b.n	80069d2 <__libc_init_array+0x1e>
 80069ec:	08006a54 	.word	0x08006a54
 80069f0:	08006a54 	.word	0x08006a54
 80069f4:	08006a54 	.word	0x08006a54
 80069f8:	08006a58 	.word	0x08006a58

080069fc <_init>:
 80069fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069fe:	bf00      	nop
 8006a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a02:	bc08      	pop	{r3}
 8006a04:	469e      	mov	lr, r3
 8006a06:	4770      	bx	lr

08006a08 <_fini>:
 8006a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0a:	bf00      	nop
 8006a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a0e:	bc08      	pop	{r3}
 8006a10:	469e      	mov	lr, r3
 8006a12:	4770      	bx	lr
