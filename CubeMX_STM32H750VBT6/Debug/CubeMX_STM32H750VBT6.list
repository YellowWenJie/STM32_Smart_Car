
CubeMX_STM32H750VBT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007650  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001208  080078e8  080078e8  000178e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008af0  08008af0  00018af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008af8  08008af8  00018af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008afc  08008afc  00018afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000001c  24000000  08008b00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000150  2400001c  08008b1c  0002001c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400016c  08008b1c  0002016c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001551b  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002c41  00000000  00000000  000355a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000e18  00000000  00000000  000381f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000ac2  00000000  00000000  00039008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00037a7e  00000000  00000000  00039aca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00016961  00000000  00000000  00071548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0015cf10  00000000  00000000  00087ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00003948  00000000  00000000  001e4dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006d  00000000  00000000  001e8704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400001c 	.word	0x2400001c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080078d0 	.word	0x080078d0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000020 	.word	0x24000020
 80002d4:	080078d0 	.word	0x080078d0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	; 0x28
 80005d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	f107 0314 	add.w	r3, r7, #20
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ea:	4b47      	ldr	r3, [pc, #284]	; (8000708 <MX_GPIO_Init+0x134>)
 80005ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005f0:	4a45      	ldr	r2, [pc, #276]	; (8000708 <MX_GPIO_Init+0x134>)
 80005f2:	f043 0304 	orr.w	r3, r3, #4
 80005f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005fa:	4b43      	ldr	r3, [pc, #268]	; (8000708 <MX_GPIO_Init+0x134>)
 80005fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000600:	f003 0304 	and.w	r3, r3, #4
 8000604:	613b      	str	r3, [r7, #16]
 8000606:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000608:	4b3f      	ldr	r3, [pc, #252]	; (8000708 <MX_GPIO_Init+0x134>)
 800060a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800060e:	4a3e      	ldr	r2, [pc, #248]	; (8000708 <MX_GPIO_Init+0x134>)
 8000610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000614:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000618:	4b3b      	ldr	r3, [pc, #236]	; (8000708 <MX_GPIO_Init+0x134>)
 800061a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800061e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000626:	4b38      	ldr	r3, [pc, #224]	; (8000708 <MX_GPIO_Init+0x134>)
 8000628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800062c:	4a36      	ldr	r2, [pc, #216]	; (8000708 <MX_GPIO_Init+0x134>)
 800062e:	f043 0310 	orr.w	r3, r3, #16
 8000632:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000636:	4b34      	ldr	r3, [pc, #208]	; (8000708 <MX_GPIO_Init+0x134>)
 8000638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800063c:	f003 0310 	and.w	r3, r3, #16
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000644:	4b30      	ldr	r3, [pc, #192]	; (8000708 <MX_GPIO_Init+0x134>)
 8000646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800064a:	4a2f      	ldr	r2, [pc, #188]	; (8000708 <MX_GPIO_Init+0x134>)
 800064c:	f043 0308 	orr.w	r3, r3, #8
 8000650:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000654:	4b2c      	ldr	r3, [pc, #176]	; (8000708 <MX_GPIO_Init+0x134>)
 8000656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800065a:	f003 0308 	and.w	r3, r3, #8
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b29      	ldr	r3, [pc, #164]	; (8000708 <MX_GPIO_Init+0x134>)
 8000664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000668:	4a27      	ldr	r2, [pc, #156]	; (8000708 <MX_GPIO_Init+0x134>)
 800066a:	f043 0301 	orr.w	r3, r3, #1
 800066e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000672:	4b25      	ldr	r3, [pc, #148]	; (8000708 <MX_GPIO_Init+0x134>)
 8000674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000678:	f003 0301 	and.w	r3, r3, #1
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000686:	4821      	ldr	r0, [pc, #132]	; (800070c <MX_GPIO_Init+0x138>)
 8000688:	f001 fcf2 	bl	8002070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000692:	481f      	ldr	r0, [pc, #124]	; (8000710 <MX_GPIO_Init+0x13c>)
 8000694:	f001 fcec 	bl	8002070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_Backlight_GPIO_Port, LCD_Backlight_Pin, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800069e:	481d      	ldr	r0, [pc, #116]	; (8000714 <MX_GPIO_Init+0x140>)
 80006a0:	f001 fce6 	bl	8002070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80006a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006aa:	2301      	movs	r3, #1
 80006ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b2:	2300      	movs	r3, #0
 80006b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	4619      	mov	r1, r3
 80006bc:	4813      	ldr	r0, [pc, #76]	; (800070c <MX_GPIO_Init+0x138>)
 80006be:	f001 fb27 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 80006c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c8:	2301      	movs	r3, #1
 80006ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d0:	2300      	movs	r3, #0
 80006d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	4619      	mov	r1, r3
 80006da:	480d      	ldr	r0, [pc, #52]	; (8000710 <MX_GPIO_Init+0x13c>)
 80006dc:	f001 fb18 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_Backlight_Pin;
 80006e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e6:	2301      	movs	r3, #1
 80006e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ee:	2300      	movs	r3, #0
 80006f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_Backlight_GPIO_Port, &GPIO_InitStruct);
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4619      	mov	r1, r3
 80006f8:	4806      	ldr	r0, [pc, #24]	; (8000714 <MX_GPIO_Init+0x140>)
 80006fa:	f001 fb09 	bl	8001d10 <HAL_GPIO_Init>

}
 80006fe:	bf00      	nop
 8000700:	3728      	adds	r7, #40	; 0x28
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	58024400 	.word	0x58024400
 800070c:	58020800 	.word	0x58020800
 8000710:	58021000 	.word	0x58021000
 8000714:	58020c00 	.word	0x58020c00

08000718 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800071e:	4b39      	ldr	r3, [pc, #228]	; (8000804 <main+0xec>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000726:	2b00      	cmp	r3, #0
 8000728:	d11b      	bne.n	8000762 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800072a:	f3bf 8f4f 	dsb	sy
}
 800072e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000730:	f3bf 8f6f 	isb	sy
}
 8000734:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000736:	4b33      	ldr	r3, [pc, #204]	; (8000804 <main+0xec>)
 8000738:	2200      	movs	r2, #0
 800073a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800073e:	f3bf 8f4f 	dsb	sy
}
 8000742:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000744:	f3bf 8f6f 	isb	sy
}
 8000748:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800074a:	4b2e      	ldr	r3, [pc, #184]	; (8000804 <main+0xec>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	4a2d      	ldr	r2, [pc, #180]	; (8000804 <main+0xec>)
 8000750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000754:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000756:	f3bf 8f4f 	dsb	sy
}
 800075a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800075c:	f3bf 8f6f 	isb	sy
}
 8000760:	e000      	b.n	8000764 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000762:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000764:	4b27      	ldr	r3, [pc, #156]	; (8000804 <main+0xec>)
 8000766:	695b      	ldr	r3, [r3, #20]
 8000768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800076c:	2b00      	cmp	r3, #0
 800076e:	d138      	bne.n	80007e2 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000770:	4b24      	ldr	r3, [pc, #144]	; (8000804 <main+0xec>)
 8000772:	2200      	movs	r2, #0
 8000774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000778:	f3bf 8f4f 	dsb	sy
}
 800077c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800077e:	4b21      	ldr	r3, [pc, #132]	; (8000804 <main+0xec>)
 8000780:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000784:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	0b5b      	lsrs	r3, r3, #13
 800078a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800078e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	08db      	lsrs	r3, r3, #3
 8000794:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000798:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	015a      	lsls	r2, r3, #5
 800079e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80007a2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007a8:	4916      	ldr	r1, [pc, #88]	; (8000804 <main+0xec>)
 80007aa:	4313      	orrs	r3, r2
 80007ac:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	1e5a      	subs	r2, r3, #1
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d1ef      	bne.n	800079a <main+0x82>
    } while(sets-- != 0U);
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	1e5a      	subs	r2, r3, #1
 80007be:	60ba      	str	r2, [r7, #8]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d1e5      	bne.n	8000790 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80007c4:	f3bf 8f4f 	dsb	sy
}
 80007c8:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <main+0xec>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	4a0d      	ldr	r2, [pc, #52]	; (8000804 <main+0xec>)
 80007d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007d4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007d6:	f3bf 8f4f 	dsb	sy
}
 80007da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007dc:	f3bf 8f6f 	isb	sy
}
 80007e0:	e000      	b.n	80007e4 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007e2:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e4:	f000 fb5e 	bl	8000ea4 <HAL_Init>

  /* USER CODE BEGIN Init */
  LED_Init();
 80007e8:	f007 f83a 	bl	8007860 <LED_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ec:	f000 f80c 	bl	8000808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f0:	f7ff fef0 	bl	80005d4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80007f4:	f000 fa6e 	bl	8000cd4 <MX_LPUART1_UART_Init>
  MX_SPI4_Init();
 80007f8:	f000 f8ba 	bl	8000970 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init(); // 液晶屏初始化必须要在spi之后初始化
 80007fc:	f006 fc0e 	bl	800701c <LCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000800:	e7fe      	b.n	8000800 <main+0xe8>
 8000802:	bf00      	nop
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b09e      	sub	sp, #120	; 0x78
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000812:	224c      	movs	r2, #76	; 0x4c
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f007 f82e 	bl	8007878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	2220      	movs	r2, #32
 8000822:	2100      	movs	r1, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f007 f827 	bl	8007878 <memset>

  /** Supply configuration update enable
   */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800082a:	2002      	movs	r0, #2
 800082c:	f001 fc3a 	bl	80020a4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000830:	2300      	movs	r3, #0
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	4b48      	ldr	r3, [pc, #288]	; (8000958 <SystemClock_Config+0x150>)
 8000836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000838:	4a47      	ldr	r2, [pc, #284]	; (8000958 <SystemClock_Config+0x150>)
 800083a:	f023 0301 	bic.w	r3, r3, #1
 800083e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000840:	4b45      	ldr	r3, [pc, #276]	; (8000958 <SystemClock_Config+0x150>)
 8000842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b44      	ldr	r3, [pc, #272]	; (800095c <SystemClock_Config+0x154>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	4a43      	ldr	r2, [pc, #268]	; (800095c <SystemClock_Config+0x154>)
 8000850:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000854:	6193      	str	r3, [r2, #24]
 8000856:	4b41      	ldr	r3, [pc, #260]	; (800095c <SystemClock_Config+0x154>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000862:	bf00      	nop
 8000864:	4b3d      	ldr	r3, [pc, #244]	; (800095c <SystemClock_Config+0x154>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800086c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000870:	d1f8      	bne.n	8000864 <SystemClock_Config+0x5c>
  {
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000872:	4b3b      	ldr	r3, [pc, #236]	; (8000960 <SystemClock_Config+0x158>)
 8000874:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000878:	4a39      	ldr	r2, [pc, #228]	; (8000960 <SystemClock_Config+0x158>)
 800087a:	f043 0302 	orr.w	r3, r3, #2
 800087e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000882:	4b37      	ldr	r3, [pc, #220]	; (8000960 <SystemClock_Config+0x158>)
 8000884:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000888:	f003 0302 	and.w	r3, r3, #2
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000890:	2300      	movs	r3, #0
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	4b31      	ldr	r3, [pc, #196]	; (800095c <SystemClock_Config+0x154>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	4a30      	ldr	r2, [pc, #192]	; (800095c <SystemClock_Config+0x154>)
 800089a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800089e:	6193      	str	r3, [r2, #24]
 80008a0:	4b2e      	ldr	r3, [pc, #184]	; (800095c <SystemClock_Config+0x154>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008a8:	603b      	str	r3, [r7, #0]
 80008aa:	4b2b      	ldr	r3, [pc, #172]	; (8000958 <SystemClock_Config+0x150>)
 80008ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ae:	4a2a      	ldr	r2, [pc, #168]	; (8000958 <SystemClock_Config+0x150>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008b6:	4b28      	ldr	r3, [pc, #160]	; (8000958 <SystemClock_Config+0x150>)
 80008b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 80008c2:	bf00      	nop
 80008c4:	4b25      	ldr	r3, [pc, #148]	; (800095c <SystemClock_Config+0x154>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008d0:	d1f8      	bne.n	80008c4 <SystemClock_Config+0xbc>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d2:	2301      	movs	r3, #1
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008dc:	2302      	movs	r3, #2
 80008de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e0:	2302      	movs	r3, #2
 80008e2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 80008e4:	2305      	movs	r3, #5
 80008e6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80008e8:	23c0      	movs	r3, #192	; 0xc0
 80008ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008ec:	2302      	movs	r3, #2
 80008ee:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008f0:	2302      	movs	r3, #2
 80008f2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008f4:	2302      	movs	r3, #2
 80008f6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008f8:	2308      	movs	r3, #8
 80008fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000904:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000908:	4618      	mov	r0, r3
 800090a:	f001 fc05 	bl	8002118 <HAL_RCC_OscConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000914:	f000 f826 	bl	8000964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8000918:	233f      	movs	r3, #63	; 0x3f
 800091a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091c:	2303      	movs	r3, #3
 800091e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000924:	2308      	movs	r3, #8
 8000926:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000928:	2340      	movs	r3, #64	; 0x40
 800092a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800092c:	2340      	movs	r3, #64	; 0x40
 800092e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000936:	2340      	movs	r3, #64	; 0x40
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	2104      	movs	r1, #4
 8000940:	4618      	mov	r0, r3
 8000942:	f002 f843 	bl	80029cc <HAL_RCC_ClockConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0x148>
  {
    Error_Handler();
 800094c:	f000 f80a 	bl	8000964 <Error_Handler>
  }
}
 8000950:	bf00      	nop
 8000952:	3778      	adds	r7, #120	; 0x78
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	58000400 	.word	0x58000400
 800095c:	58024800 	.word	0x58024800
 8000960:	58024400 	.word	0x58024400

08000964 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
}
 800096a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096c:	e7fe      	b.n	800096c <Error_Handler+0x8>
	...

08000970 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8000974:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <MX_SPI4_Init+0xa4>)
 8000976:	4a28      	ldr	r2, [pc, #160]	; (8000a18 <MX_SPI4_Init+0xa8>)
 8000978:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800097a:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <MX_SPI4_Init+0xa4>)
 800097c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000980:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8000982:	4b24      	ldr	r3, [pc, #144]	; (8000a14 <MX_SPI4_Init+0xa4>)
 8000984:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000988:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800098a:	4b22      	ldr	r3, [pc, #136]	; (8000a14 <MX_SPI4_Init+0xa4>)
 800098c:	2207      	movs	r2, #7
 800098e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000990:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <MX_SPI4_Init+0xa4>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000996:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <MX_SPI4_Init+0xa4>)
 8000998:	2200      	movs	r2, #0
 800099a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800099c:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <MX_SPI4_Init+0xa4>)
 800099e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80009a2:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009a4:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <MX_SPI4_Init+0xa4>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009aa:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <MX_SPI4_Init+0xa4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b0:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <MX_SPI4_Init+0xa4>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b6:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <MX_SPI4_Init+0xa4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80009bc:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <MX_SPI4_Init+0xa4>)
 80009be:	2200      	movs	r2, #0
 80009c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009c2:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <MX_SPI4_Init+0xa4>)
 80009c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009c8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009ca:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <MX_SPI4_Init+0xa4>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_02DATA;
 80009d0:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <MX_SPI4_Init+0xa4>)
 80009d2:	2220      	movs	r2, #32
 80009d4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_SPI4_Init+0xa4>)
 80009d8:	2200      	movs	r2, #0
 80009da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009dc:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <MX_SPI4_Init+0xa4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_SPI4_Init+0xa4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009e8:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <MX_SPI4_Init+0xa4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_SPI4_Init+0xa4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <MX_SPI4_Init+0xa4>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_SPI4_Init+0xa4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <MX_SPI4_Init+0xa4>)
 8000a02:	f004 f99b 	bl	8004d3c <HAL_SPI_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000a0c:	f7ff ffaa 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	24000038 	.word	0x24000038
 8000a18:	40013400 	.word	0x40013400

08000a1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b0bc      	sub	sp, #240	; 0xf0
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a34:	f107 0318 	add.w	r3, r7, #24
 8000a38:	22c0      	movs	r2, #192	; 0xc0
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f006 ff1b 	bl	8007878 <memset>
  if(spiHandle->Instance==SPI4)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a35      	ldr	r2, [pc, #212]	; (8000b1c <HAL_SPI_MspInit+0x100>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d163      	bne.n	8000b14 <HAL_SPI_MspInit+0xf8>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

    GPIO_LDC_Backlight_CLK_ENABLE; // 使能 背光        引脚时钟
 8000a4c:	4b34      	ldr	r3, [pc, #208]	; (8000b20 <HAL_SPI_MspInit+0x104>)
 8000a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a52:	4a33      	ldr	r2, [pc, #204]	; (8000b20 <HAL_SPI_MspInit+0x104>)
 8000a54:	f043 0308 	orr.w	r3, r3, #8
 8000a58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a5c:	4b30      	ldr	r3, [pc, #192]	; (8000b20 <HAL_SPI_MspInit+0x104>)
 8000a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a62:	f003 0308 	and.w	r3, r3, #8
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697b      	ldr	r3, [r7, #20]
    GPIO_LDC_DC_CLK_ENABLE;        // 使能 数据指令选择 引脚时钟
 8000a6a:	4b2d      	ldr	r3, [pc, #180]	; (8000b20 <HAL_SPI_MspInit+0x104>)
 8000a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a70:	4a2b      	ldr	r2, [pc, #172]	; (8000b20 <HAL_SPI_MspInit+0x104>)
 8000a72:	f043 0310 	orr.w	r3, r3, #16
 8000a76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a7a:	4b29      	ldr	r3, [pc, #164]	; (8000b20 <HAL_SPI_MspInit+0x104>)
 8000a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a80:	f003 0310 	and.w	r3, r3, #16
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	693b      	ldr	r3, [r7, #16]

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8000a88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a8c:	f04f 0300 	mov.w	r3, #0
 8000a90:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000a94:	2300      	movs	r3, #0
 8000a96:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a98:	f107 0318 	add.w	r3, r7, #24
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f002 fb21 	bl	80030e4 <HAL_RCCEx_PeriphCLKConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <HAL_SPI_MspInit+0x90>
    {
      Error_Handler();
 8000aa8:	f7ff ff5c 	bl	8000964 <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000aac:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <HAL_SPI_MspInit+0x104>)
 8000aae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ab2:	4a1b      	ldr	r2, [pc, #108]	; (8000b20 <HAL_SPI_MspInit+0x104>)
 8000ab4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ab8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000abc:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <HAL_SPI_MspInit+0x104>)
 8000abe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ac2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <HAL_SPI_MspInit+0x104>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	4a13      	ldr	r2, [pc, #76]	; (8000b20 <HAL_SPI_MspInit+0x104>)
 8000ad2:	f043 0310 	orr.w	r3, r3, #16
 8000ad6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <HAL_SPI_MspInit+0x104>)
 8000adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae0:	f003 0310 	and.w	r3, r3, #16
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE11     ------> SPI4_NSS
    PE12     ------> SPI4_SCK
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
 8000ae8:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8000aec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afc:	2303      	movs	r3, #3
 8000afe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000b02:	2305      	movs	r3, #5
 8000b04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b08:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <HAL_SPI_MspInit+0x108>)
 8000b10:	f001 f8fe 	bl	8001d10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8000b14:	bf00      	nop
 8000b16:	37f0      	adds	r7, #240	; 0xf0
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40013400 	.word	0x40013400
 8000b20:	58024400 	.word	0x58024400
 8000b24:	58021000 	.word	0x58021000

08000b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <HAL_MspInit+0x30>)
 8000b30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b34:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <HAL_MspInit+0x30>)
 8000b36:	f043 0302 	orr.w	r3, r3, #2
 8000b3a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_MspInit+0x30>)
 8000b40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b44:	f003 0302 	and.w	r3, r3, #2
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	58024400 	.word	0x58024400

08000b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b60:	e7fe      	b.n	8000b60 <NMI_Handler+0x4>

08000b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <HardFault_Handler+0x4>

08000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <MemManage_Handler+0x4>

08000b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <BusFault_Handler+0x4>

08000b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <UsageFault_Handler+0x4>

08000b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba8:	f000 f9ee 	bl	8000f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000bb4:	4802      	ldr	r0, [pc, #8]	; (8000bc0 <LPUART1_IRQHandler+0x10>)
 8000bb6:	f004 fd1b 	bl	80055f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	240000c0 	.word	0x240000c0

08000bc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bc8:	4b37      	ldr	r3, [pc, #220]	; (8000ca8 <SystemInit+0xe4>)
 8000bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bce:	4a36      	ldr	r2, [pc, #216]	; (8000ca8 <SystemInit+0xe4>)
 8000bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bd8:	4b34      	ldr	r3, [pc, #208]	; (8000cac <SystemInit+0xe8>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f003 030f 	and.w	r3, r3, #15
 8000be0:	2b06      	cmp	r3, #6
 8000be2:	d807      	bhi.n	8000bf4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000be4:	4b31      	ldr	r3, [pc, #196]	; (8000cac <SystemInit+0xe8>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f023 030f 	bic.w	r3, r3, #15
 8000bec:	4a2f      	ldr	r2, [pc, #188]	; (8000cac <SystemInit+0xe8>)
 8000bee:	f043 0307 	orr.w	r3, r3, #7
 8000bf2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bf4:	4b2e      	ldr	r3, [pc, #184]	; (8000cb0 <SystemInit+0xec>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a2d      	ldr	r2, [pc, #180]	; (8000cb0 <SystemInit+0xec>)
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c00:	4b2b      	ldr	r3, [pc, #172]	; (8000cb0 <SystemInit+0xec>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c06:	4b2a      	ldr	r3, [pc, #168]	; (8000cb0 <SystemInit+0xec>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	4929      	ldr	r1, [pc, #164]	; (8000cb0 <SystemInit+0xec>)
 8000c0c:	4b29      	ldr	r3, [pc, #164]	; (8000cb4 <SystemInit+0xf0>)
 8000c0e:	4013      	ands	r3, r2
 8000c10:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c12:	4b26      	ldr	r3, [pc, #152]	; (8000cac <SystemInit+0xe8>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d007      	beq.n	8000c2e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c1e:	4b23      	ldr	r3, [pc, #140]	; (8000cac <SystemInit+0xe8>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f023 030f 	bic.w	r3, r3, #15
 8000c26:	4a21      	ldr	r2, [pc, #132]	; (8000cac <SystemInit+0xe8>)
 8000c28:	f043 0307 	orr.w	r3, r3, #7
 8000c2c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c2e:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <SystemInit+0xec>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c34:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <SystemInit+0xec>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c3a:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <SystemInit+0xec>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c40:	4b1b      	ldr	r3, [pc, #108]	; (8000cb0 <SystemInit+0xec>)
 8000c42:	4a1d      	ldr	r2, [pc, #116]	; (8000cb8 <SystemInit+0xf4>)
 8000c44:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c46:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <SystemInit+0xec>)
 8000c48:	4a1c      	ldr	r2, [pc, #112]	; (8000cbc <SystemInit+0xf8>)
 8000c4a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c4c:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <SystemInit+0xec>)
 8000c4e:	4a1c      	ldr	r2, [pc, #112]	; (8000cc0 <SystemInit+0xfc>)
 8000c50:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c52:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <SystemInit+0xec>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c58:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <SystemInit+0xec>)
 8000c5a:	4a19      	ldr	r2, [pc, #100]	; (8000cc0 <SystemInit+0xfc>)
 8000c5c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c5e:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <SystemInit+0xec>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <SystemInit+0xec>)
 8000c66:	4a16      	ldr	r2, [pc, #88]	; (8000cc0 <SystemInit+0xfc>)
 8000c68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <SystemInit+0xec>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <SystemInit+0xec>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0e      	ldr	r2, [pc, #56]	; (8000cb0 <SystemInit+0xec>)
 8000c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <SystemInit+0xec>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <SystemInit+0x100>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <SystemInit+0x104>)
 8000c88:	4013      	ands	r3, r2
 8000c8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c8e:	d202      	bcs.n	8000c96 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <SystemInit+0x108>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <SystemInit+0x10c>)
 8000c98:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c9c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00
 8000cac:	52002000 	.word	0x52002000
 8000cb0:	58024400 	.word	0x58024400
 8000cb4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cb8:	02020200 	.word	0x02020200
 8000cbc:	01ff0000 	.word	0x01ff0000
 8000cc0:	01010280 	.word	0x01010280
 8000cc4:	5c001000 	.word	0x5c001000
 8000cc8:	ffff0000 	.word	0xffff0000
 8000ccc:	51008108 	.word	0x51008108
 8000cd0:	52004000 	.word	0x52004000

08000cd4 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000cd8:	4b22      	ldr	r3, [pc, #136]	; (8000d64 <MX_LPUART1_UART_Init+0x90>)
 8000cda:	4a23      	ldr	r2, [pc, #140]	; (8000d68 <MX_LPUART1_UART_Init+0x94>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000cde:	4b21      	ldr	r3, [pc, #132]	; (8000d64 <MX_LPUART1_UART_Init+0x90>)
 8000ce0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ce4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce6:	4b1f      	ldr	r3, [pc, #124]	; (8000d64 <MX_LPUART1_UART_Init+0x90>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000cec:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <MX_LPUART1_UART_Init+0x90>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <MX_LPUART1_UART_Init+0x90>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <MX_LPUART1_UART_Init+0x90>)
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <MX_LPUART1_UART_Init+0x90>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d04:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <MX_LPUART1_UART_Init+0x90>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d0a:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <MX_LPUART1_UART_Init+0x90>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d10:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <MX_LPUART1_UART_Init+0x90>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000d16:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <MX_LPUART1_UART_Init+0x90>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000d1c:	4811      	ldr	r0, [pc, #68]	; (8000d64 <MX_LPUART1_UART_Init+0x90>)
 8000d1e:	f004 fc16 	bl	800554e <HAL_UART_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d28:	f7ff fe1c 	bl	8000964 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	480d      	ldr	r0, [pc, #52]	; (8000d64 <MX_LPUART1_UART_Init+0x90>)
 8000d30:	f006 f852 	bl	8006dd8 <HAL_UARTEx_SetTxFifoThreshold>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d3a:	f7ff fe13 	bl	8000964 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4808      	ldr	r0, [pc, #32]	; (8000d64 <MX_LPUART1_UART_Init+0x90>)
 8000d42:	f006 f887 	bl	8006e54 <HAL_UARTEx_SetRxFifoThreshold>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d4c:	f7ff fe0a 	bl	8000964 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000d50:	4804      	ldr	r0, [pc, #16]	; (8000d64 <MX_LPUART1_UART_Init+0x90>)
 8000d52:	f006 f808 	bl	8006d66 <HAL_UARTEx_DisableFifoMode>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d5c:	f7ff fe02 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	240000c0 	.word	0x240000c0
 8000d68:	58000c00 	.word	0x58000c00

08000d6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b0ba      	sub	sp, #232	; 0xe8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d84:	f107 0310 	add.w	r3, r7, #16
 8000d88:	22c0      	movs	r2, #192	; 0xc0
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f006 fd73 	bl	8007878 <memset>
  if(uartHandle->Instance==LPUART1)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a2b      	ldr	r2, [pc, #172]	; (8000e44 <HAL_UART_MspInit+0xd8>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d14e      	bne.n	8000e3a <HAL_UART_MspInit+0xce>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d9c:	f04f 0204 	mov.w	r2, #4
 8000da0:	f04f 0300 	mov.w	r3, #0
 8000da4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dae:	f107 0310 	add.w	r3, r7, #16
 8000db2:	4618      	mov	r0, r3
 8000db4:	f002 f996 	bl	80030e4 <HAL_RCCEx_PeriphCLKConfig>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000dbe:	f7ff fdd1 	bl	8000964 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000dc2:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <HAL_UART_MspInit+0xdc>)
 8000dc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dc8:	4a1f      	ldr	r2, [pc, #124]	; (8000e48 <HAL_UART_MspInit+0xdc>)
 8000dca:	f043 0308 	orr.w	r3, r3, #8
 8000dce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000dd2:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <HAL_UART_MspInit+0xdc>)
 8000dd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dd8:	f003 0308 	and.w	r3, r3, #8
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de0:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <HAL_UART_MspInit+0xdc>)
 8000de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de6:	4a18      	ldr	r2, [pc, #96]	; (8000e48 <HAL_UART_MspInit+0xdc>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df0:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <HAL_UART_MspInit+0xdc>)
 8000df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dfe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e22:	4619      	mov	r1, r3
 8000e24:	4809      	ldr	r0, [pc, #36]	; (8000e4c <HAL_UART_MspInit+0xe0>)
 8000e26:	f000 ff73 	bl	8001d10 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	208e      	movs	r0, #142	; 0x8e
 8000e30:	f000 f9d5 	bl	80011de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000e34:	208e      	movs	r0, #142	; 0x8e
 8000e36:	f000 f9ec 	bl	8001212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	37e8      	adds	r7, #232	; 0xe8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	58000c00 	.word	0x58000c00
 8000e48:	58024400 	.word	0x58024400
 8000e4c:	58020000 	.word	0x58020000

08000e50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e54:	f7ff feb6 	bl	8000bc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e58:	480c      	ldr	r0, [pc, #48]	; (8000e8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e5a:	490d      	ldr	r1, [pc, #52]	; (8000e90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e5c:	4a0d      	ldr	r2, [pc, #52]	; (8000e94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e60:	e002      	b.n	8000e68 <LoopCopyDataInit>

08000e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e66:	3304      	adds	r3, #4

08000e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e6c:	d3f9      	bcc.n	8000e62 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e70:	4c0a      	ldr	r4, [pc, #40]	; (8000e9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e74:	e001      	b.n	8000e7a <LoopFillZerobss>

08000e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e78:	3204      	adds	r2, #4

08000e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e7c:	d3fb      	bcc.n	8000e76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e7e:	f006 fd03 	bl	8007888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e82:	f7ff fc49 	bl	8000718 <main>
  bx  lr
 8000e86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e88:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000e8c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e90:	2400001c 	.word	0x2400001c
  ldr r2, =_sidata
 8000e94:	08008b00 	.word	0x08008b00
  ldr r2, =_sbss
 8000e98:	2400001c 	.word	0x2400001c
  ldr r4, =_ebss
 8000e9c:	2400016c 	.word	0x2400016c

08000ea0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea0:	e7fe      	b.n	8000ea0 <ADC3_IRQHandler>
	...

08000ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eaa:	2003      	movs	r0, #3
 8000eac:	f000 f98c 	bl	80011c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000eb0:	f001 ff42 	bl	8002d38 <HAL_RCC_GetSysClockFreq>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <HAL_Init+0x68>)
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	0a1b      	lsrs	r3, r3, #8
 8000ebc:	f003 030f 	and.w	r3, r3, #15
 8000ec0:	4913      	ldr	r1, [pc, #76]	; (8000f10 <HAL_Init+0x6c>)
 8000ec2:	5ccb      	ldrb	r3, [r1, r3]
 8000ec4:	f003 031f 	and.w	r3, r3, #31
 8000ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ecc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <HAL_Init+0x68>)
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	f003 030f 	and.w	r3, r3, #15
 8000ed6:	4a0e      	ldr	r2, [pc, #56]	; (8000f10 <HAL_Init+0x6c>)
 8000ed8:	5cd3      	ldrb	r3, [r2, r3]
 8000eda:	f003 031f 	and.w	r3, r3, #31
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee4:	4a0b      	ldr	r2, [pc, #44]	; (8000f14 <HAL_Init+0x70>)
 8000ee6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ee8:	4a0b      	ldr	r2, [pc, #44]	; (8000f18 <HAL_Init+0x74>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eee:	200f      	movs	r0, #15
 8000ef0:	f000 f814 	bl	8000f1c <HAL_InitTick>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e002      	b.n	8000f04 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000efe:	f7ff fe13 	bl	8000b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	58024400 	.word	0x58024400
 8000f10:	080078e8 	.word	0x080078e8
 8000f14:	24000004 	.word	0x24000004
 8000f18:	24000000 	.word	0x24000000

08000f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <HAL_InitTick+0x60>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d101      	bne.n	8000f30 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e021      	b.n	8000f74 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f30:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <HAL_InitTick+0x64>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <HAL_InitTick+0x60>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f971 	bl	800122e <HAL_SYSTICK_Config>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e00e      	b.n	8000f74 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b0f      	cmp	r3, #15
 8000f5a:	d80a      	bhi.n	8000f72 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295
 8000f64:	f000 f93b 	bl	80011de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f68:	4a06      	ldr	r2, [pc, #24]	; (8000f84 <HAL_InitTick+0x68>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e000      	b.n	8000f74 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	2400000c 	.word	0x2400000c
 8000f80:	24000000 	.word	0x24000000
 8000f84:	24000008 	.word	0x24000008

08000f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x20>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x24>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	4a04      	ldr	r2, [pc, #16]	; (8000fac <HAL_IncTick+0x24>)
 8000f9a:	6013      	str	r3, [r2, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	2400000c 	.word	0x2400000c
 8000fac:	24000154 	.word	0x24000154

08000fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <HAL_GetTick+0x14>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	24000154 	.word	0x24000154

08000fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd0:	f7ff ffee 	bl	8000fb0 <HAL_GetTick>
 8000fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe0:	d005      	beq.n	8000fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <HAL_Delay+0x44>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4413      	add	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fee:	bf00      	nop
 8000ff0:	f7ff ffde 	bl	8000fb0 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d8f7      	bhi.n	8000ff0 <HAL_Delay+0x28>
  {
  }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	2400000c 	.word	0x2400000c

08001010 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_GetREVID+0x14>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	0c1b      	lsrs	r3, r3, #16
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	5c001000 	.word	0x5c001000

08001028 <__NVIC_SetPriorityGrouping>:
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001038:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <__NVIC_SetPriorityGrouping+0x40>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001044:	4013      	ands	r3, r2
 8001046:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 8001052:	4313      	orrs	r3, r2
 8001054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001056:	4a04      	ldr	r2, [pc, #16]	; (8001068 <__NVIC_SetPriorityGrouping+0x40>)
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	60d3      	str	r3, [r2, #12]
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00
 800106c:	05fa0000 	.word	0x05fa0000

08001070 <__NVIC_GetPriorityGrouping>:
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <__NVIC_GetPriorityGrouping+0x18>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	0a1b      	lsrs	r3, r3, #8
 800107a:	f003 0307 	and.w	r3, r3, #7
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_EnableIRQ>:
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001096:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800109a:	2b00      	cmp	r3, #0
 800109c:	db0b      	blt.n	80010b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109e:	88fb      	ldrh	r3, [r7, #6]
 80010a0:	f003 021f 	and.w	r2, r3, #31
 80010a4:	4907      	ldr	r1, [pc, #28]	; (80010c4 <__NVIC_EnableIRQ+0x38>)
 80010a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010aa:	095b      	lsrs	r3, r3, #5
 80010ac:	2001      	movs	r0, #1
 80010ae:	fa00 f202 	lsl.w	r2, r0, r2
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000e100 	.word	0xe000e100

080010c8 <__NVIC_SetPriority>:
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	db0a      	blt.n	80010f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	490c      	ldr	r1, [pc, #48]	; (8001114 <__NVIC_SetPriority+0x4c>)
 80010e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010e6:	0112      	lsls	r2, r2, #4
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	440b      	add	r3, r1
 80010ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80010f0:	e00a      	b.n	8001108 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4908      	ldr	r1, [pc, #32]	; (8001118 <__NVIC_SetPriority+0x50>)
 80010f8:	88fb      	ldrh	r3, [r7, #6]
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	3b04      	subs	r3, #4
 8001100:	0112      	lsls	r2, r2, #4
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	440b      	add	r3, r1
 8001106:	761a      	strb	r2, [r3, #24]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000e100 	.word	0xe000e100
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <NVIC_EncodePriority>:
{
 800111c:	b480      	push	{r7}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f1c3 0307 	rsb	r3, r3, #7
 8001136:	2b04      	cmp	r3, #4
 8001138:	bf28      	it	cs
 800113a:	2304      	movcs	r3, #4
 800113c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3304      	adds	r3, #4
 8001142:	2b06      	cmp	r3, #6
 8001144:	d902      	bls.n	800114c <NVIC_EncodePriority+0x30>
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3b03      	subs	r3, #3
 800114a:	e000      	b.n	800114e <NVIC_EncodePriority+0x32>
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001150:	f04f 32ff 	mov.w	r2, #4294967295
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43da      	mvns	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	401a      	ands	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001164:	f04f 31ff 	mov.w	r1, #4294967295
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	43d9      	mvns	r1, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	4313      	orrs	r3, r2
}
 8001176:	4618      	mov	r0, r3
 8001178:	3724      	adds	r7, #36	; 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001194:	d301      	bcc.n	800119a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001196:	2301      	movs	r3, #1
 8001198:	e00f      	b.n	80011ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119a:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <SysTick_Config+0x40>)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a2:	210f      	movs	r1, #15
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f7ff ff8e 	bl	80010c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <SysTick_Config+0x40>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b2:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <SysTick_Config+0x40>)
 80011b4:	2207      	movs	r2, #7
 80011b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	e000e010 	.word	0xe000e010

080011c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ff29 	bl	8001028 <__NVIC_SetPriorityGrouping>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b086      	sub	sp, #24
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
 80011ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011ec:	f7ff ff40 	bl	8001070 <__NVIC_GetPriorityGrouping>
 80011f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	6978      	ldr	r0, [r7, #20]
 80011f8:	f7ff ff90 	bl	800111c <NVIC_EncodePriority>
 80011fc:	4602      	mov	r2, r0
 80011fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001202:	4611      	mov	r1, r2
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff5f 	bl	80010c8 <__NVIC_SetPriority>
}
 800120a:	bf00      	nop
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	4603      	mov	r3, r0
 800121a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800121c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff33 	bl	800108c <__NVIC_EnableIRQ>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ffa4 	bl	8001184 <SysTick_Config>
 800123c:	4603      	mov	r3, r0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001250:	f7ff feae 	bl	8000fb0 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d101      	bne.n	8001260 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e2dc      	b.n	800181a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d008      	beq.n	800127e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2280      	movs	r2, #128	; 0x80
 8001270:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e2cd      	b.n	800181a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a76      	ldr	r2, [pc, #472]	; (800145c <HAL_DMA_Abort+0x214>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d04a      	beq.n	800131e <HAL_DMA_Abort+0xd6>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a74      	ldr	r2, [pc, #464]	; (8001460 <HAL_DMA_Abort+0x218>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d045      	beq.n	800131e <HAL_DMA_Abort+0xd6>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a73      	ldr	r2, [pc, #460]	; (8001464 <HAL_DMA_Abort+0x21c>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d040      	beq.n	800131e <HAL_DMA_Abort+0xd6>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a71      	ldr	r2, [pc, #452]	; (8001468 <HAL_DMA_Abort+0x220>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d03b      	beq.n	800131e <HAL_DMA_Abort+0xd6>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a70      	ldr	r2, [pc, #448]	; (800146c <HAL_DMA_Abort+0x224>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d036      	beq.n	800131e <HAL_DMA_Abort+0xd6>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a6e      	ldr	r2, [pc, #440]	; (8001470 <HAL_DMA_Abort+0x228>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d031      	beq.n	800131e <HAL_DMA_Abort+0xd6>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a6d      	ldr	r2, [pc, #436]	; (8001474 <HAL_DMA_Abort+0x22c>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d02c      	beq.n	800131e <HAL_DMA_Abort+0xd6>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a6b      	ldr	r2, [pc, #428]	; (8001478 <HAL_DMA_Abort+0x230>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d027      	beq.n	800131e <HAL_DMA_Abort+0xd6>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a6a      	ldr	r2, [pc, #424]	; (800147c <HAL_DMA_Abort+0x234>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d022      	beq.n	800131e <HAL_DMA_Abort+0xd6>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a68      	ldr	r2, [pc, #416]	; (8001480 <HAL_DMA_Abort+0x238>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d01d      	beq.n	800131e <HAL_DMA_Abort+0xd6>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a67      	ldr	r2, [pc, #412]	; (8001484 <HAL_DMA_Abort+0x23c>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d018      	beq.n	800131e <HAL_DMA_Abort+0xd6>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a65      	ldr	r2, [pc, #404]	; (8001488 <HAL_DMA_Abort+0x240>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d013      	beq.n	800131e <HAL_DMA_Abort+0xd6>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a64      	ldr	r2, [pc, #400]	; (800148c <HAL_DMA_Abort+0x244>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d00e      	beq.n	800131e <HAL_DMA_Abort+0xd6>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a62      	ldr	r2, [pc, #392]	; (8001490 <HAL_DMA_Abort+0x248>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d009      	beq.n	800131e <HAL_DMA_Abort+0xd6>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a61      	ldr	r2, [pc, #388]	; (8001494 <HAL_DMA_Abort+0x24c>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d004      	beq.n	800131e <HAL_DMA_Abort+0xd6>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a5f      	ldr	r2, [pc, #380]	; (8001498 <HAL_DMA_Abort+0x250>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d101      	bne.n	8001322 <HAL_DMA_Abort+0xda>
 800131e:	2301      	movs	r3, #1
 8001320:	e000      	b.n	8001324 <HAL_DMA_Abort+0xdc>
 8001322:	2300      	movs	r3, #0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d013      	beq.n	8001350 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 021e 	bic.w	r2, r2, #30
 8001336:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	695a      	ldr	r2, [r3, #20]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001346:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	e00a      	b.n	8001366 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 020e 	bic.w	r2, r2, #14
 800135e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a3c      	ldr	r2, [pc, #240]	; (800145c <HAL_DMA_Abort+0x214>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d072      	beq.n	8001456 <HAL_DMA_Abort+0x20e>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a3a      	ldr	r2, [pc, #232]	; (8001460 <HAL_DMA_Abort+0x218>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d06d      	beq.n	8001456 <HAL_DMA_Abort+0x20e>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a39      	ldr	r2, [pc, #228]	; (8001464 <HAL_DMA_Abort+0x21c>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d068      	beq.n	8001456 <HAL_DMA_Abort+0x20e>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a37      	ldr	r2, [pc, #220]	; (8001468 <HAL_DMA_Abort+0x220>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d063      	beq.n	8001456 <HAL_DMA_Abort+0x20e>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a36      	ldr	r2, [pc, #216]	; (800146c <HAL_DMA_Abort+0x224>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d05e      	beq.n	8001456 <HAL_DMA_Abort+0x20e>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a34      	ldr	r2, [pc, #208]	; (8001470 <HAL_DMA_Abort+0x228>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d059      	beq.n	8001456 <HAL_DMA_Abort+0x20e>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a33      	ldr	r2, [pc, #204]	; (8001474 <HAL_DMA_Abort+0x22c>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d054      	beq.n	8001456 <HAL_DMA_Abort+0x20e>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a31      	ldr	r2, [pc, #196]	; (8001478 <HAL_DMA_Abort+0x230>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d04f      	beq.n	8001456 <HAL_DMA_Abort+0x20e>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a30      	ldr	r2, [pc, #192]	; (800147c <HAL_DMA_Abort+0x234>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d04a      	beq.n	8001456 <HAL_DMA_Abort+0x20e>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a2e      	ldr	r2, [pc, #184]	; (8001480 <HAL_DMA_Abort+0x238>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d045      	beq.n	8001456 <HAL_DMA_Abort+0x20e>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a2d      	ldr	r2, [pc, #180]	; (8001484 <HAL_DMA_Abort+0x23c>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d040      	beq.n	8001456 <HAL_DMA_Abort+0x20e>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a2b      	ldr	r2, [pc, #172]	; (8001488 <HAL_DMA_Abort+0x240>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d03b      	beq.n	8001456 <HAL_DMA_Abort+0x20e>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a2a      	ldr	r2, [pc, #168]	; (800148c <HAL_DMA_Abort+0x244>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d036      	beq.n	8001456 <HAL_DMA_Abort+0x20e>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a28      	ldr	r2, [pc, #160]	; (8001490 <HAL_DMA_Abort+0x248>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d031      	beq.n	8001456 <HAL_DMA_Abort+0x20e>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a27      	ldr	r2, [pc, #156]	; (8001494 <HAL_DMA_Abort+0x24c>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d02c      	beq.n	8001456 <HAL_DMA_Abort+0x20e>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a25      	ldr	r2, [pc, #148]	; (8001498 <HAL_DMA_Abort+0x250>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d027      	beq.n	8001456 <HAL_DMA_Abort+0x20e>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a24      	ldr	r2, [pc, #144]	; (800149c <HAL_DMA_Abort+0x254>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d022      	beq.n	8001456 <HAL_DMA_Abort+0x20e>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a22      	ldr	r2, [pc, #136]	; (80014a0 <HAL_DMA_Abort+0x258>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d01d      	beq.n	8001456 <HAL_DMA_Abort+0x20e>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a21      	ldr	r2, [pc, #132]	; (80014a4 <HAL_DMA_Abort+0x25c>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d018      	beq.n	8001456 <HAL_DMA_Abort+0x20e>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a1f      	ldr	r2, [pc, #124]	; (80014a8 <HAL_DMA_Abort+0x260>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d013      	beq.n	8001456 <HAL_DMA_Abort+0x20e>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a1e      	ldr	r2, [pc, #120]	; (80014ac <HAL_DMA_Abort+0x264>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d00e      	beq.n	8001456 <HAL_DMA_Abort+0x20e>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a1c      	ldr	r2, [pc, #112]	; (80014b0 <HAL_DMA_Abort+0x268>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d009      	beq.n	8001456 <HAL_DMA_Abort+0x20e>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a1b      	ldr	r2, [pc, #108]	; (80014b4 <HAL_DMA_Abort+0x26c>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d004      	beq.n	8001456 <HAL_DMA_Abort+0x20e>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a19      	ldr	r2, [pc, #100]	; (80014b8 <HAL_DMA_Abort+0x270>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d132      	bne.n	80014bc <HAL_DMA_Abort+0x274>
 8001456:	2301      	movs	r3, #1
 8001458:	e031      	b.n	80014be <HAL_DMA_Abort+0x276>
 800145a:	bf00      	nop
 800145c:	40020010 	.word	0x40020010
 8001460:	40020028 	.word	0x40020028
 8001464:	40020040 	.word	0x40020040
 8001468:	40020058 	.word	0x40020058
 800146c:	40020070 	.word	0x40020070
 8001470:	40020088 	.word	0x40020088
 8001474:	400200a0 	.word	0x400200a0
 8001478:	400200b8 	.word	0x400200b8
 800147c:	40020410 	.word	0x40020410
 8001480:	40020428 	.word	0x40020428
 8001484:	40020440 	.word	0x40020440
 8001488:	40020458 	.word	0x40020458
 800148c:	40020470 	.word	0x40020470
 8001490:	40020488 	.word	0x40020488
 8001494:	400204a0 	.word	0x400204a0
 8001498:	400204b8 	.word	0x400204b8
 800149c:	58025408 	.word	0x58025408
 80014a0:	5802541c 	.word	0x5802541c
 80014a4:	58025430 	.word	0x58025430
 80014a8:	58025444 	.word	0x58025444
 80014ac:	58025458 	.word	0x58025458
 80014b0:	5802546c 	.word	0x5802546c
 80014b4:	58025480 	.word	0x58025480
 80014b8:	58025494 	.word	0x58025494
 80014bc:	2300      	movs	r3, #0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d007      	beq.n	80014d2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a6d      	ldr	r2, [pc, #436]	; (800168c <HAL_DMA_Abort+0x444>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d04a      	beq.n	8001572 <HAL_DMA_Abort+0x32a>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a6b      	ldr	r2, [pc, #428]	; (8001690 <HAL_DMA_Abort+0x448>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d045      	beq.n	8001572 <HAL_DMA_Abort+0x32a>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a6a      	ldr	r2, [pc, #424]	; (8001694 <HAL_DMA_Abort+0x44c>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d040      	beq.n	8001572 <HAL_DMA_Abort+0x32a>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a68      	ldr	r2, [pc, #416]	; (8001698 <HAL_DMA_Abort+0x450>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d03b      	beq.n	8001572 <HAL_DMA_Abort+0x32a>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a67      	ldr	r2, [pc, #412]	; (800169c <HAL_DMA_Abort+0x454>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d036      	beq.n	8001572 <HAL_DMA_Abort+0x32a>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a65      	ldr	r2, [pc, #404]	; (80016a0 <HAL_DMA_Abort+0x458>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d031      	beq.n	8001572 <HAL_DMA_Abort+0x32a>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a64      	ldr	r2, [pc, #400]	; (80016a4 <HAL_DMA_Abort+0x45c>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d02c      	beq.n	8001572 <HAL_DMA_Abort+0x32a>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a62      	ldr	r2, [pc, #392]	; (80016a8 <HAL_DMA_Abort+0x460>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d027      	beq.n	8001572 <HAL_DMA_Abort+0x32a>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a61      	ldr	r2, [pc, #388]	; (80016ac <HAL_DMA_Abort+0x464>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d022      	beq.n	8001572 <HAL_DMA_Abort+0x32a>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a5f      	ldr	r2, [pc, #380]	; (80016b0 <HAL_DMA_Abort+0x468>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d01d      	beq.n	8001572 <HAL_DMA_Abort+0x32a>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a5e      	ldr	r2, [pc, #376]	; (80016b4 <HAL_DMA_Abort+0x46c>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d018      	beq.n	8001572 <HAL_DMA_Abort+0x32a>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a5c      	ldr	r2, [pc, #368]	; (80016b8 <HAL_DMA_Abort+0x470>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d013      	beq.n	8001572 <HAL_DMA_Abort+0x32a>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a5b      	ldr	r2, [pc, #364]	; (80016bc <HAL_DMA_Abort+0x474>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d00e      	beq.n	8001572 <HAL_DMA_Abort+0x32a>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a59      	ldr	r2, [pc, #356]	; (80016c0 <HAL_DMA_Abort+0x478>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d009      	beq.n	8001572 <HAL_DMA_Abort+0x32a>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a58      	ldr	r2, [pc, #352]	; (80016c4 <HAL_DMA_Abort+0x47c>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d004      	beq.n	8001572 <HAL_DMA_Abort+0x32a>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a56      	ldr	r2, [pc, #344]	; (80016c8 <HAL_DMA_Abort+0x480>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d108      	bne.n	8001584 <HAL_DMA_Abort+0x33c>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 0201 	bic.w	r2, r2, #1
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	e007      	b.n	8001594 <HAL_DMA_Abort+0x34c>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 0201 	bic.w	r2, r2, #1
 8001592:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001594:	e013      	b.n	80015be <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001596:	f7ff fd0b 	bl	8000fb0 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b05      	cmp	r3, #5
 80015a2:	d90c      	bls.n	80015be <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2220      	movs	r2, #32
 80015a8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2203      	movs	r2, #3
 80015ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e12d      	b.n	800181a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1e5      	bne.n	8001596 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a2f      	ldr	r2, [pc, #188]	; (800168c <HAL_DMA_Abort+0x444>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d04a      	beq.n	800166a <HAL_DMA_Abort+0x422>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a2d      	ldr	r2, [pc, #180]	; (8001690 <HAL_DMA_Abort+0x448>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d045      	beq.n	800166a <HAL_DMA_Abort+0x422>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a2c      	ldr	r2, [pc, #176]	; (8001694 <HAL_DMA_Abort+0x44c>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d040      	beq.n	800166a <HAL_DMA_Abort+0x422>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a2a      	ldr	r2, [pc, #168]	; (8001698 <HAL_DMA_Abort+0x450>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d03b      	beq.n	800166a <HAL_DMA_Abort+0x422>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a29      	ldr	r2, [pc, #164]	; (800169c <HAL_DMA_Abort+0x454>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d036      	beq.n	800166a <HAL_DMA_Abort+0x422>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a27      	ldr	r2, [pc, #156]	; (80016a0 <HAL_DMA_Abort+0x458>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d031      	beq.n	800166a <HAL_DMA_Abort+0x422>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a26      	ldr	r2, [pc, #152]	; (80016a4 <HAL_DMA_Abort+0x45c>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d02c      	beq.n	800166a <HAL_DMA_Abort+0x422>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a24      	ldr	r2, [pc, #144]	; (80016a8 <HAL_DMA_Abort+0x460>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d027      	beq.n	800166a <HAL_DMA_Abort+0x422>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a23      	ldr	r2, [pc, #140]	; (80016ac <HAL_DMA_Abort+0x464>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d022      	beq.n	800166a <HAL_DMA_Abort+0x422>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a21      	ldr	r2, [pc, #132]	; (80016b0 <HAL_DMA_Abort+0x468>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d01d      	beq.n	800166a <HAL_DMA_Abort+0x422>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a20      	ldr	r2, [pc, #128]	; (80016b4 <HAL_DMA_Abort+0x46c>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d018      	beq.n	800166a <HAL_DMA_Abort+0x422>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a1e      	ldr	r2, [pc, #120]	; (80016b8 <HAL_DMA_Abort+0x470>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d013      	beq.n	800166a <HAL_DMA_Abort+0x422>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a1d      	ldr	r2, [pc, #116]	; (80016bc <HAL_DMA_Abort+0x474>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d00e      	beq.n	800166a <HAL_DMA_Abort+0x422>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a1b      	ldr	r2, [pc, #108]	; (80016c0 <HAL_DMA_Abort+0x478>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d009      	beq.n	800166a <HAL_DMA_Abort+0x422>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a1a      	ldr	r2, [pc, #104]	; (80016c4 <HAL_DMA_Abort+0x47c>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d004      	beq.n	800166a <HAL_DMA_Abort+0x422>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a18      	ldr	r2, [pc, #96]	; (80016c8 <HAL_DMA_Abort+0x480>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d101      	bne.n	800166e <HAL_DMA_Abort+0x426>
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <HAL_DMA_Abort+0x428>
 800166e:	2300      	movs	r3, #0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d02b      	beq.n	80016cc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001678:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167e:	f003 031f 	and.w	r3, r3, #31
 8001682:	223f      	movs	r2, #63	; 0x3f
 8001684:	409a      	lsls	r2, r3
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	e02a      	b.n	80016e2 <HAL_DMA_Abort+0x49a>
 800168c:	40020010 	.word	0x40020010
 8001690:	40020028 	.word	0x40020028
 8001694:	40020040 	.word	0x40020040
 8001698:	40020058 	.word	0x40020058
 800169c:	40020070 	.word	0x40020070
 80016a0:	40020088 	.word	0x40020088
 80016a4:	400200a0 	.word	0x400200a0
 80016a8:	400200b8 	.word	0x400200b8
 80016ac:	40020410 	.word	0x40020410
 80016b0:	40020428 	.word	0x40020428
 80016b4:	40020440 	.word	0x40020440
 80016b8:	40020458 	.word	0x40020458
 80016bc:	40020470 	.word	0x40020470
 80016c0:	40020488 	.word	0x40020488
 80016c4:	400204a0 	.word	0x400204a0
 80016c8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d6:	f003 031f 	and.w	r3, r3, #31
 80016da:	2201      	movs	r2, #1
 80016dc:	409a      	lsls	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a4f      	ldr	r2, [pc, #316]	; (8001824 <HAL_DMA_Abort+0x5dc>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d072      	beq.n	80017d2 <HAL_DMA_Abort+0x58a>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a4d      	ldr	r2, [pc, #308]	; (8001828 <HAL_DMA_Abort+0x5e0>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d06d      	beq.n	80017d2 <HAL_DMA_Abort+0x58a>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a4c      	ldr	r2, [pc, #304]	; (800182c <HAL_DMA_Abort+0x5e4>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d068      	beq.n	80017d2 <HAL_DMA_Abort+0x58a>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a4a      	ldr	r2, [pc, #296]	; (8001830 <HAL_DMA_Abort+0x5e8>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d063      	beq.n	80017d2 <HAL_DMA_Abort+0x58a>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a49      	ldr	r2, [pc, #292]	; (8001834 <HAL_DMA_Abort+0x5ec>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d05e      	beq.n	80017d2 <HAL_DMA_Abort+0x58a>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a47      	ldr	r2, [pc, #284]	; (8001838 <HAL_DMA_Abort+0x5f0>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d059      	beq.n	80017d2 <HAL_DMA_Abort+0x58a>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a46      	ldr	r2, [pc, #280]	; (800183c <HAL_DMA_Abort+0x5f4>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d054      	beq.n	80017d2 <HAL_DMA_Abort+0x58a>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a44      	ldr	r2, [pc, #272]	; (8001840 <HAL_DMA_Abort+0x5f8>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d04f      	beq.n	80017d2 <HAL_DMA_Abort+0x58a>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a43      	ldr	r2, [pc, #268]	; (8001844 <HAL_DMA_Abort+0x5fc>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d04a      	beq.n	80017d2 <HAL_DMA_Abort+0x58a>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a41      	ldr	r2, [pc, #260]	; (8001848 <HAL_DMA_Abort+0x600>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d045      	beq.n	80017d2 <HAL_DMA_Abort+0x58a>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a40      	ldr	r2, [pc, #256]	; (800184c <HAL_DMA_Abort+0x604>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d040      	beq.n	80017d2 <HAL_DMA_Abort+0x58a>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a3e      	ldr	r2, [pc, #248]	; (8001850 <HAL_DMA_Abort+0x608>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d03b      	beq.n	80017d2 <HAL_DMA_Abort+0x58a>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a3d      	ldr	r2, [pc, #244]	; (8001854 <HAL_DMA_Abort+0x60c>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d036      	beq.n	80017d2 <HAL_DMA_Abort+0x58a>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a3b      	ldr	r2, [pc, #236]	; (8001858 <HAL_DMA_Abort+0x610>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d031      	beq.n	80017d2 <HAL_DMA_Abort+0x58a>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a3a      	ldr	r2, [pc, #232]	; (800185c <HAL_DMA_Abort+0x614>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d02c      	beq.n	80017d2 <HAL_DMA_Abort+0x58a>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a38      	ldr	r2, [pc, #224]	; (8001860 <HAL_DMA_Abort+0x618>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d027      	beq.n	80017d2 <HAL_DMA_Abort+0x58a>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a37      	ldr	r2, [pc, #220]	; (8001864 <HAL_DMA_Abort+0x61c>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d022      	beq.n	80017d2 <HAL_DMA_Abort+0x58a>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a35      	ldr	r2, [pc, #212]	; (8001868 <HAL_DMA_Abort+0x620>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d01d      	beq.n	80017d2 <HAL_DMA_Abort+0x58a>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a34      	ldr	r2, [pc, #208]	; (800186c <HAL_DMA_Abort+0x624>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d018      	beq.n	80017d2 <HAL_DMA_Abort+0x58a>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a32      	ldr	r2, [pc, #200]	; (8001870 <HAL_DMA_Abort+0x628>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d013      	beq.n	80017d2 <HAL_DMA_Abort+0x58a>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a31      	ldr	r2, [pc, #196]	; (8001874 <HAL_DMA_Abort+0x62c>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d00e      	beq.n	80017d2 <HAL_DMA_Abort+0x58a>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a2f      	ldr	r2, [pc, #188]	; (8001878 <HAL_DMA_Abort+0x630>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d009      	beq.n	80017d2 <HAL_DMA_Abort+0x58a>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a2e      	ldr	r2, [pc, #184]	; (800187c <HAL_DMA_Abort+0x634>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d004      	beq.n	80017d2 <HAL_DMA_Abort+0x58a>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a2c      	ldr	r2, [pc, #176]	; (8001880 <HAL_DMA_Abort+0x638>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d101      	bne.n	80017d6 <HAL_DMA_Abort+0x58e>
 80017d2:	2301      	movs	r3, #1
 80017d4:	e000      	b.n	80017d8 <HAL_DMA_Abort+0x590>
 80017d6:	2300      	movs	r3, #0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d015      	beq.n	8001808 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80017e4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00c      	beq.n	8001808 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017fc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001806:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40020010 	.word	0x40020010
 8001828:	40020028 	.word	0x40020028
 800182c:	40020040 	.word	0x40020040
 8001830:	40020058 	.word	0x40020058
 8001834:	40020070 	.word	0x40020070
 8001838:	40020088 	.word	0x40020088
 800183c:	400200a0 	.word	0x400200a0
 8001840:	400200b8 	.word	0x400200b8
 8001844:	40020410 	.word	0x40020410
 8001848:	40020428 	.word	0x40020428
 800184c:	40020440 	.word	0x40020440
 8001850:	40020458 	.word	0x40020458
 8001854:	40020470 	.word	0x40020470
 8001858:	40020488 	.word	0x40020488
 800185c:	400204a0 	.word	0x400204a0
 8001860:	400204b8 	.word	0x400204b8
 8001864:	58025408 	.word	0x58025408
 8001868:	5802541c 	.word	0x5802541c
 800186c:	58025430 	.word	0x58025430
 8001870:	58025444 	.word	0x58025444
 8001874:	58025458 	.word	0x58025458
 8001878:	5802546c 	.word	0x5802546c
 800187c:	58025480 	.word	0x58025480
 8001880:	58025494 	.word	0x58025494

08001884 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e237      	b.n	8001d06 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d004      	beq.n	80018ac <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2280      	movs	r2, #128	; 0x80
 80018a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e22c      	b.n	8001d06 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a5c      	ldr	r2, [pc, #368]	; (8001a24 <HAL_DMA_Abort_IT+0x1a0>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d04a      	beq.n	800194c <HAL_DMA_Abort_IT+0xc8>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a5b      	ldr	r2, [pc, #364]	; (8001a28 <HAL_DMA_Abort_IT+0x1a4>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d045      	beq.n	800194c <HAL_DMA_Abort_IT+0xc8>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a59      	ldr	r2, [pc, #356]	; (8001a2c <HAL_DMA_Abort_IT+0x1a8>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d040      	beq.n	800194c <HAL_DMA_Abort_IT+0xc8>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a58      	ldr	r2, [pc, #352]	; (8001a30 <HAL_DMA_Abort_IT+0x1ac>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d03b      	beq.n	800194c <HAL_DMA_Abort_IT+0xc8>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a56      	ldr	r2, [pc, #344]	; (8001a34 <HAL_DMA_Abort_IT+0x1b0>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d036      	beq.n	800194c <HAL_DMA_Abort_IT+0xc8>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a55      	ldr	r2, [pc, #340]	; (8001a38 <HAL_DMA_Abort_IT+0x1b4>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d031      	beq.n	800194c <HAL_DMA_Abort_IT+0xc8>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a53      	ldr	r2, [pc, #332]	; (8001a3c <HAL_DMA_Abort_IT+0x1b8>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d02c      	beq.n	800194c <HAL_DMA_Abort_IT+0xc8>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a52      	ldr	r2, [pc, #328]	; (8001a40 <HAL_DMA_Abort_IT+0x1bc>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d027      	beq.n	800194c <HAL_DMA_Abort_IT+0xc8>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a50      	ldr	r2, [pc, #320]	; (8001a44 <HAL_DMA_Abort_IT+0x1c0>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d022      	beq.n	800194c <HAL_DMA_Abort_IT+0xc8>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a4f      	ldr	r2, [pc, #316]	; (8001a48 <HAL_DMA_Abort_IT+0x1c4>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d01d      	beq.n	800194c <HAL_DMA_Abort_IT+0xc8>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a4d      	ldr	r2, [pc, #308]	; (8001a4c <HAL_DMA_Abort_IT+0x1c8>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d018      	beq.n	800194c <HAL_DMA_Abort_IT+0xc8>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a4c      	ldr	r2, [pc, #304]	; (8001a50 <HAL_DMA_Abort_IT+0x1cc>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d013      	beq.n	800194c <HAL_DMA_Abort_IT+0xc8>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a4a      	ldr	r2, [pc, #296]	; (8001a54 <HAL_DMA_Abort_IT+0x1d0>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d00e      	beq.n	800194c <HAL_DMA_Abort_IT+0xc8>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a49      	ldr	r2, [pc, #292]	; (8001a58 <HAL_DMA_Abort_IT+0x1d4>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d009      	beq.n	800194c <HAL_DMA_Abort_IT+0xc8>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a47      	ldr	r2, [pc, #284]	; (8001a5c <HAL_DMA_Abort_IT+0x1d8>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d004      	beq.n	800194c <HAL_DMA_Abort_IT+0xc8>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a46      	ldr	r2, [pc, #280]	; (8001a60 <HAL_DMA_Abort_IT+0x1dc>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d101      	bne.n	8001950 <HAL_DMA_Abort_IT+0xcc>
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <HAL_DMA_Abort_IT+0xce>
 8001950:	2300      	movs	r3, #0
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 8086 	beq.w	8001a64 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2204      	movs	r2, #4
 800195c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a2f      	ldr	r2, [pc, #188]	; (8001a24 <HAL_DMA_Abort_IT+0x1a0>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d04a      	beq.n	8001a00 <HAL_DMA_Abort_IT+0x17c>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a2e      	ldr	r2, [pc, #184]	; (8001a28 <HAL_DMA_Abort_IT+0x1a4>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d045      	beq.n	8001a00 <HAL_DMA_Abort_IT+0x17c>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a2c      	ldr	r2, [pc, #176]	; (8001a2c <HAL_DMA_Abort_IT+0x1a8>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d040      	beq.n	8001a00 <HAL_DMA_Abort_IT+0x17c>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a2b      	ldr	r2, [pc, #172]	; (8001a30 <HAL_DMA_Abort_IT+0x1ac>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d03b      	beq.n	8001a00 <HAL_DMA_Abort_IT+0x17c>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a29      	ldr	r2, [pc, #164]	; (8001a34 <HAL_DMA_Abort_IT+0x1b0>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d036      	beq.n	8001a00 <HAL_DMA_Abort_IT+0x17c>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a28      	ldr	r2, [pc, #160]	; (8001a38 <HAL_DMA_Abort_IT+0x1b4>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d031      	beq.n	8001a00 <HAL_DMA_Abort_IT+0x17c>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a26      	ldr	r2, [pc, #152]	; (8001a3c <HAL_DMA_Abort_IT+0x1b8>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d02c      	beq.n	8001a00 <HAL_DMA_Abort_IT+0x17c>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a25      	ldr	r2, [pc, #148]	; (8001a40 <HAL_DMA_Abort_IT+0x1bc>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d027      	beq.n	8001a00 <HAL_DMA_Abort_IT+0x17c>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a23      	ldr	r2, [pc, #140]	; (8001a44 <HAL_DMA_Abort_IT+0x1c0>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d022      	beq.n	8001a00 <HAL_DMA_Abort_IT+0x17c>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a22      	ldr	r2, [pc, #136]	; (8001a48 <HAL_DMA_Abort_IT+0x1c4>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d01d      	beq.n	8001a00 <HAL_DMA_Abort_IT+0x17c>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a20      	ldr	r2, [pc, #128]	; (8001a4c <HAL_DMA_Abort_IT+0x1c8>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d018      	beq.n	8001a00 <HAL_DMA_Abort_IT+0x17c>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a1f      	ldr	r2, [pc, #124]	; (8001a50 <HAL_DMA_Abort_IT+0x1cc>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d013      	beq.n	8001a00 <HAL_DMA_Abort_IT+0x17c>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a1d      	ldr	r2, [pc, #116]	; (8001a54 <HAL_DMA_Abort_IT+0x1d0>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d00e      	beq.n	8001a00 <HAL_DMA_Abort_IT+0x17c>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a1c      	ldr	r2, [pc, #112]	; (8001a58 <HAL_DMA_Abort_IT+0x1d4>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d009      	beq.n	8001a00 <HAL_DMA_Abort_IT+0x17c>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a1a      	ldr	r2, [pc, #104]	; (8001a5c <HAL_DMA_Abort_IT+0x1d8>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d004      	beq.n	8001a00 <HAL_DMA_Abort_IT+0x17c>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a19      	ldr	r2, [pc, #100]	; (8001a60 <HAL_DMA_Abort_IT+0x1dc>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d108      	bne.n	8001a12 <HAL_DMA_Abort_IT+0x18e>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0201 	bic.w	r2, r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	e178      	b.n	8001d04 <HAL_DMA_Abort_IT+0x480>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0201 	bic.w	r2, r2, #1
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	e16f      	b.n	8001d04 <HAL_DMA_Abort_IT+0x480>
 8001a24:	40020010 	.word	0x40020010
 8001a28:	40020028 	.word	0x40020028
 8001a2c:	40020040 	.word	0x40020040
 8001a30:	40020058 	.word	0x40020058
 8001a34:	40020070 	.word	0x40020070
 8001a38:	40020088 	.word	0x40020088
 8001a3c:	400200a0 	.word	0x400200a0
 8001a40:	400200b8 	.word	0x400200b8
 8001a44:	40020410 	.word	0x40020410
 8001a48:	40020428 	.word	0x40020428
 8001a4c:	40020440 	.word	0x40020440
 8001a50:	40020458 	.word	0x40020458
 8001a54:	40020470 	.word	0x40020470
 8001a58:	40020488 	.word	0x40020488
 8001a5c:	400204a0 	.word	0x400204a0
 8001a60:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 020e 	bic.w	r2, r2, #14
 8001a72:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a6c      	ldr	r2, [pc, #432]	; (8001c2c <HAL_DMA_Abort_IT+0x3a8>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d04a      	beq.n	8001b14 <HAL_DMA_Abort_IT+0x290>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a6b      	ldr	r2, [pc, #428]	; (8001c30 <HAL_DMA_Abort_IT+0x3ac>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d045      	beq.n	8001b14 <HAL_DMA_Abort_IT+0x290>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a69      	ldr	r2, [pc, #420]	; (8001c34 <HAL_DMA_Abort_IT+0x3b0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d040      	beq.n	8001b14 <HAL_DMA_Abort_IT+0x290>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a68      	ldr	r2, [pc, #416]	; (8001c38 <HAL_DMA_Abort_IT+0x3b4>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d03b      	beq.n	8001b14 <HAL_DMA_Abort_IT+0x290>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a66      	ldr	r2, [pc, #408]	; (8001c3c <HAL_DMA_Abort_IT+0x3b8>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d036      	beq.n	8001b14 <HAL_DMA_Abort_IT+0x290>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a65      	ldr	r2, [pc, #404]	; (8001c40 <HAL_DMA_Abort_IT+0x3bc>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d031      	beq.n	8001b14 <HAL_DMA_Abort_IT+0x290>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a63      	ldr	r2, [pc, #396]	; (8001c44 <HAL_DMA_Abort_IT+0x3c0>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d02c      	beq.n	8001b14 <HAL_DMA_Abort_IT+0x290>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a62      	ldr	r2, [pc, #392]	; (8001c48 <HAL_DMA_Abort_IT+0x3c4>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d027      	beq.n	8001b14 <HAL_DMA_Abort_IT+0x290>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a60      	ldr	r2, [pc, #384]	; (8001c4c <HAL_DMA_Abort_IT+0x3c8>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d022      	beq.n	8001b14 <HAL_DMA_Abort_IT+0x290>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a5f      	ldr	r2, [pc, #380]	; (8001c50 <HAL_DMA_Abort_IT+0x3cc>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d01d      	beq.n	8001b14 <HAL_DMA_Abort_IT+0x290>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a5d      	ldr	r2, [pc, #372]	; (8001c54 <HAL_DMA_Abort_IT+0x3d0>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d018      	beq.n	8001b14 <HAL_DMA_Abort_IT+0x290>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a5c      	ldr	r2, [pc, #368]	; (8001c58 <HAL_DMA_Abort_IT+0x3d4>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d013      	beq.n	8001b14 <HAL_DMA_Abort_IT+0x290>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a5a      	ldr	r2, [pc, #360]	; (8001c5c <HAL_DMA_Abort_IT+0x3d8>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d00e      	beq.n	8001b14 <HAL_DMA_Abort_IT+0x290>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a59      	ldr	r2, [pc, #356]	; (8001c60 <HAL_DMA_Abort_IT+0x3dc>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d009      	beq.n	8001b14 <HAL_DMA_Abort_IT+0x290>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a57      	ldr	r2, [pc, #348]	; (8001c64 <HAL_DMA_Abort_IT+0x3e0>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d004      	beq.n	8001b14 <HAL_DMA_Abort_IT+0x290>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a56      	ldr	r2, [pc, #344]	; (8001c68 <HAL_DMA_Abort_IT+0x3e4>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d108      	bne.n	8001b26 <HAL_DMA_Abort_IT+0x2a2>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0201 	bic.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	e007      	b.n	8001b36 <HAL_DMA_Abort_IT+0x2b2>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0201 	bic.w	r2, r2, #1
 8001b34:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a3c      	ldr	r2, [pc, #240]	; (8001c2c <HAL_DMA_Abort_IT+0x3a8>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d072      	beq.n	8001c26 <HAL_DMA_Abort_IT+0x3a2>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a3a      	ldr	r2, [pc, #232]	; (8001c30 <HAL_DMA_Abort_IT+0x3ac>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d06d      	beq.n	8001c26 <HAL_DMA_Abort_IT+0x3a2>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a39      	ldr	r2, [pc, #228]	; (8001c34 <HAL_DMA_Abort_IT+0x3b0>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d068      	beq.n	8001c26 <HAL_DMA_Abort_IT+0x3a2>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a37      	ldr	r2, [pc, #220]	; (8001c38 <HAL_DMA_Abort_IT+0x3b4>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d063      	beq.n	8001c26 <HAL_DMA_Abort_IT+0x3a2>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a36      	ldr	r2, [pc, #216]	; (8001c3c <HAL_DMA_Abort_IT+0x3b8>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d05e      	beq.n	8001c26 <HAL_DMA_Abort_IT+0x3a2>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a34      	ldr	r2, [pc, #208]	; (8001c40 <HAL_DMA_Abort_IT+0x3bc>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d059      	beq.n	8001c26 <HAL_DMA_Abort_IT+0x3a2>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a33      	ldr	r2, [pc, #204]	; (8001c44 <HAL_DMA_Abort_IT+0x3c0>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d054      	beq.n	8001c26 <HAL_DMA_Abort_IT+0x3a2>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a31      	ldr	r2, [pc, #196]	; (8001c48 <HAL_DMA_Abort_IT+0x3c4>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d04f      	beq.n	8001c26 <HAL_DMA_Abort_IT+0x3a2>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a30      	ldr	r2, [pc, #192]	; (8001c4c <HAL_DMA_Abort_IT+0x3c8>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d04a      	beq.n	8001c26 <HAL_DMA_Abort_IT+0x3a2>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a2e      	ldr	r2, [pc, #184]	; (8001c50 <HAL_DMA_Abort_IT+0x3cc>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d045      	beq.n	8001c26 <HAL_DMA_Abort_IT+0x3a2>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a2d      	ldr	r2, [pc, #180]	; (8001c54 <HAL_DMA_Abort_IT+0x3d0>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d040      	beq.n	8001c26 <HAL_DMA_Abort_IT+0x3a2>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a2b      	ldr	r2, [pc, #172]	; (8001c58 <HAL_DMA_Abort_IT+0x3d4>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d03b      	beq.n	8001c26 <HAL_DMA_Abort_IT+0x3a2>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a2a      	ldr	r2, [pc, #168]	; (8001c5c <HAL_DMA_Abort_IT+0x3d8>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d036      	beq.n	8001c26 <HAL_DMA_Abort_IT+0x3a2>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a28      	ldr	r2, [pc, #160]	; (8001c60 <HAL_DMA_Abort_IT+0x3dc>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d031      	beq.n	8001c26 <HAL_DMA_Abort_IT+0x3a2>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a27      	ldr	r2, [pc, #156]	; (8001c64 <HAL_DMA_Abort_IT+0x3e0>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d02c      	beq.n	8001c26 <HAL_DMA_Abort_IT+0x3a2>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a25      	ldr	r2, [pc, #148]	; (8001c68 <HAL_DMA_Abort_IT+0x3e4>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d027      	beq.n	8001c26 <HAL_DMA_Abort_IT+0x3a2>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a24      	ldr	r2, [pc, #144]	; (8001c6c <HAL_DMA_Abort_IT+0x3e8>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d022      	beq.n	8001c26 <HAL_DMA_Abort_IT+0x3a2>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a22      	ldr	r2, [pc, #136]	; (8001c70 <HAL_DMA_Abort_IT+0x3ec>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d01d      	beq.n	8001c26 <HAL_DMA_Abort_IT+0x3a2>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a21      	ldr	r2, [pc, #132]	; (8001c74 <HAL_DMA_Abort_IT+0x3f0>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d018      	beq.n	8001c26 <HAL_DMA_Abort_IT+0x3a2>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a1f      	ldr	r2, [pc, #124]	; (8001c78 <HAL_DMA_Abort_IT+0x3f4>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d013      	beq.n	8001c26 <HAL_DMA_Abort_IT+0x3a2>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a1e      	ldr	r2, [pc, #120]	; (8001c7c <HAL_DMA_Abort_IT+0x3f8>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d00e      	beq.n	8001c26 <HAL_DMA_Abort_IT+0x3a2>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a1c      	ldr	r2, [pc, #112]	; (8001c80 <HAL_DMA_Abort_IT+0x3fc>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d009      	beq.n	8001c26 <HAL_DMA_Abort_IT+0x3a2>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a1b      	ldr	r2, [pc, #108]	; (8001c84 <HAL_DMA_Abort_IT+0x400>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d004      	beq.n	8001c26 <HAL_DMA_Abort_IT+0x3a2>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a19      	ldr	r2, [pc, #100]	; (8001c88 <HAL_DMA_Abort_IT+0x404>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d132      	bne.n	8001c8c <HAL_DMA_Abort_IT+0x408>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e031      	b.n	8001c8e <HAL_DMA_Abort_IT+0x40a>
 8001c2a:	bf00      	nop
 8001c2c:	40020010 	.word	0x40020010
 8001c30:	40020028 	.word	0x40020028
 8001c34:	40020040 	.word	0x40020040
 8001c38:	40020058 	.word	0x40020058
 8001c3c:	40020070 	.word	0x40020070
 8001c40:	40020088 	.word	0x40020088
 8001c44:	400200a0 	.word	0x400200a0
 8001c48:	400200b8 	.word	0x400200b8
 8001c4c:	40020410 	.word	0x40020410
 8001c50:	40020428 	.word	0x40020428
 8001c54:	40020440 	.word	0x40020440
 8001c58:	40020458 	.word	0x40020458
 8001c5c:	40020470 	.word	0x40020470
 8001c60:	40020488 	.word	0x40020488
 8001c64:	400204a0 	.word	0x400204a0
 8001c68:	400204b8 	.word	0x400204b8
 8001c6c:	58025408 	.word	0x58025408
 8001c70:	5802541c 	.word	0x5802541c
 8001c74:	58025430 	.word	0x58025430
 8001c78:	58025444 	.word	0x58025444
 8001c7c:	58025458 	.word	0x58025458
 8001c80:	5802546c 	.word	0x5802546c
 8001c84:	58025480 	.word	0x58025480
 8001c88:	58025494 	.word	0x58025494
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d028      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ca0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cac:	f003 031f 	and.w	r3, r3, #31
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	409a      	lsls	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001cc0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00c      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cd8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001ce2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop

08001d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b089      	sub	sp, #36	; 0x24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d1e:	4b89      	ldr	r3, [pc, #548]	; (8001f44 <HAL_GPIO_Init+0x234>)
 8001d20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d22:	e194      	b.n	800204e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	2101      	movs	r1, #1
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d30:	4013      	ands	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 8186 	beq.w	8002048 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 0303 	and.w	r3, r3, #3
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d005      	beq.n	8001d54 <HAL_GPIO_Init+0x44>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d130      	bne.n	8001db6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	2203      	movs	r2, #3
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	091b      	lsrs	r3, r3, #4
 8001da0:	f003 0201 	and.w	r2, r3, #1
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	d017      	beq.n	8001df2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	2203      	movs	r2, #3
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d123      	bne.n	8001e46 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	08da      	lsrs	r2, r3, #3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3208      	adds	r2, #8
 8001e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	220f      	movs	r2, #15
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	691a      	ldr	r2, [r3, #16]
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	08da      	lsrs	r2, r3, #3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3208      	adds	r2, #8
 8001e40:	69b9      	ldr	r1, [r7, #24]
 8001e42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	2203      	movs	r2, #3
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 0203 	and.w	r2, r3, #3
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 80e0 	beq.w	8002048 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e88:	4b2f      	ldr	r3, [pc, #188]	; (8001f48 <HAL_GPIO_Init+0x238>)
 8001e8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e8e:	4a2e      	ldr	r2, [pc, #184]	; (8001f48 <HAL_GPIO_Init+0x238>)
 8001e90:	f043 0302 	orr.w	r3, r3, #2
 8001e94:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e98:	4b2b      	ldr	r3, [pc, #172]	; (8001f48 <HAL_GPIO_Init+0x238>)
 8001e9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ea6:	4a29      	ldr	r2, [pc, #164]	; (8001f4c <HAL_GPIO_Init+0x23c>)
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	089b      	lsrs	r3, r3, #2
 8001eac:	3302      	adds	r3, #2
 8001eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	220f      	movs	r2, #15
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a20      	ldr	r2, [pc, #128]	; (8001f50 <HAL_GPIO_Init+0x240>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d052      	beq.n	8001f78 <HAL_GPIO_Init+0x268>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a1f      	ldr	r2, [pc, #124]	; (8001f54 <HAL_GPIO_Init+0x244>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d031      	beq.n	8001f3e <HAL_GPIO_Init+0x22e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a1e      	ldr	r2, [pc, #120]	; (8001f58 <HAL_GPIO_Init+0x248>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d02b      	beq.n	8001f3a <HAL_GPIO_Init+0x22a>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a1d      	ldr	r2, [pc, #116]	; (8001f5c <HAL_GPIO_Init+0x24c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d025      	beq.n	8001f36 <HAL_GPIO_Init+0x226>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a1c      	ldr	r2, [pc, #112]	; (8001f60 <HAL_GPIO_Init+0x250>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d01f      	beq.n	8001f32 <HAL_GPIO_Init+0x222>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a1b      	ldr	r2, [pc, #108]	; (8001f64 <HAL_GPIO_Init+0x254>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d019      	beq.n	8001f2e <HAL_GPIO_Init+0x21e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a1a      	ldr	r2, [pc, #104]	; (8001f68 <HAL_GPIO_Init+0x258>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d013      	beq.n	8001f2a <HAL_GPIO_Init+0x21a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a19      	ldr	r2, [pc, #100]	; (8001f6c <HAL_GPIO_Init+0x25c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d00d      	beq.n	8001f26 <HAL_GPIO_Init+0x216>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a18      	ldr	r2, [pc, #96]	; (8001f70 <HAL_GPIO_Init+0x260>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d007      	beq.n	8001f22 <HAL_GPIO_Init+0x212>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a17      	ldr	r2, [pc, #92]	; (8001f74 <HAL_GPIO_Init+0x264>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d101      	bne.n	8001f1e <HAL_GPIO_Init+0x20e>
 8001f1a:	2309      	movs	r3, #9
 8001f1c:	e02d      	b.n	8001f7a <HAL_GPIO_Init+0x26a>
 8001f1e:	230a      	movs	r3, #10
 8001f20:	e02b      	b.n	8001f7a <HAL_GPIO_Init+0x26a>
 8001f22:	2308      	movs	r3, #8
 8001f24:	e029      	b.n	8001f7a <HAL_GPIO_Init+0x26a>
 8001f26:	2307      	movs	r3, #7
 8001f28:	e027      	b.n	8001f7a <HAL_GPIO_Init+0x26a>
 8001f2a:	2306      	movs	r3, #6
 8001f2c:	e025      	b.n	8001f7a <HAL_GPIO_Init+0x26a>
 8001f2e:	2305      	movs	r3, #5
 8001f30:	e023      	b.n	8001f7a <HAL_GPIO_Init+0x26a>
 8001f32:	2304      	movs	r3, #4
 8001f34:	e021      	b.n	8001f7a <HAL_GPIO_Init+0x26a>
 8001f36:	2303      	movs	r3, #3
 8001f38:	e01f      	b.n	8001f7a <HAL_GPIO_Init+0x26a>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e01d      	b.n	8001f7a <HAL_GPIO_Init+0x26a>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e01b      	b.n	8001f7a <HAL_GPIO_Init+0x26a>
 8001f42:	bf00      	nop
 8001f44:	58000080 	.word	0x58000080
 8001f48:	58024400 	.word	0x58024400
 8001f4c:	58000400 	.word	0x58000400
 8001f50:	58020000 	.word	0x58020000
 8001f54:	58020400 	.word	0x58020400
 8001f58:	58020800 	.word	0x58020800
 8001f5c:	58020c00 	.word	0x58020c00
 8001f60:	58021000 	.word	0x58021000
 8001f64:	58021400 	.word	0x58021400
 8001f68:	58021800 	.word	0x58021800
 8001f6c:	58021c00 	.word	0x58021c00
 8001f70:	58022000 	.word	0x58022000
 8001f74:	58022400 	.word	0x58022400
 8001f78:	2300      	movs	r3, #0
 8001f7a:	69fa      	ldr	r2, [r7, #28]
 8001f7c:	f002 0203 	and.w	r2, r2, #3
 8001f80:	0092      	lsls	r2, r2, #2
 8001f82:	4093      	lsls	r3, r2
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f8a:	4938      	ldr	r1, [pc, #224]	; (800206c <HAL_GPIO_Init+0x35c>)
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	089b      	lsrs	r3, r3, #2
 8001f90:	3302      	adds	r3, #2
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001fbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001fec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	43db      	mvns	r3, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4013      	ands	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	3301      	adds	r3, #1
 800204c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	fa22 f303 	lsr.w	r3, r2, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	f47f ae63 	bne.w	8001d24 <HAL_GPIO_Init+0x14>
  }
}
 800205e:	bf00      	nop
 8002060:	bf00      	nop
 8002062:	3724      	adds	r7, #36	; 0x24
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	58000400 	.word	0x58000400

08002070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	807b      	strh	r3, [r7, #2]
 800207c:	4613      	mov	r3, r2
 800207e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002080:	787b      	ldrb	r3, [r7, #1]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002086:	887a      	ldrh	r2, [r7, #2]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800208c:	e003      	b.n	8002096 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800208e:	887b      	ldrh	r3, [r7, #2]
 8002090:	041a      	lsls	r2, r3, #16
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	619a      	str	r2, [r3, #24]
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
	...

080020a4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80020ac:	4b19      	ldr	r3, [pc, #100]	; (8002114 <HAL_PWREx_ConfigSupply+0x70>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	d00a      	beq.n	80020ce <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80020b8:	4b16      	ldr	r3, [pc, #88]	; (8002114 <HAL_PWREx_ConfigSupply+0x70>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d001      	beq.n	80020ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e01f      	b.n	800210a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80020ca:	2300      	movs	r3, #0
 80020cc:	e01d      	b.n	800210a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80020ce:	4b11      	ldr	r3, [pc, #68]	; (8002114 <HAL_PWREx_ConfigSupply+0x70>)
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	f023 0207 	bic.w	r2, r3, #7
 80020d6:	490f      	ldr	r1, [pc, #60]	; (8002114 <HAL_PWREx_ConfigSupply+0x70>)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4313      	orrs	r3, r2
 80020dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80020de:	f7fe ff67 	bl	8000fb0 <HAL_GetTick>
 80020e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80020e4:	e009      	b.n	80020fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80020e6:	f7fe ff63 	bl	8000fb0 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020f4:	d901      	bls.n	80020fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e007      	b.n	800210a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_PWREx_ConfigSupply+0x70>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002102:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002106:	d1ee      	bne.n	80020e6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	58024800 	.word	0x58024800

08002118 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b08c      	sub	sp, #48	; 0x30
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d102      	bne.n	800212c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	f000 bc48 	b.w	80029bc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 8088 	beq.w	800224a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800213a:	4b99      	ldr	r3, [pc, #612]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002142:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002144:	4b96      	ldr	r3, [pc, #600]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 8002146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002148:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800214a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214c:	2b10      	cmp	r3, #16
 800214e:	d007      	beq.n	8002160 <HAL_RCC_OscConfig+0x48>
 8002150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002152:	2b18      	cmp	r3, #24
 8002154:	d111      	bne.n	800217a <HAL_RCC_OscConfig+0x62>
 8002156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002158:	f003 0303 	and.w	r3, r3, #3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d10c      	bne.n	800217a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002160:	4b8f      	ldr	r3, [pc, #572]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d06d      	beq.n	8002248 <HAL_RCC_OscConfig+0x130>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d169      	bne.n	8002248 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	f000 bc21 	b.w	80029bc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002182:	d106      	bne.n	8002192 <HAL_RCC_OscConfig+0x7a>
 8002184:	4b86      	ldr	r3, [pc, #536]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a85      	ldr	r2, [pc, #532]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 800218a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	e02e      	b.n	80021f0 <HAL_RCC_OscConfig+0xd8>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x9c>
 800219a:	4b81      	ldr	r3, [pc, #516]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a80      	ldr	r2, [pc, #512]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 80021a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	4b7e      	ldr	r3, [pc, #504]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a7d      	ldr	r2, [pc, #500]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 80021ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	e01d      	b.n	80021f0 <HAL_RCC_OscConfig+0xd8>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021bc:	d10c      	bne.n	80021d8 <HAL_RCC_OscConfig+0xc0>
 80021be:	4b78      	ldr	r3, [pc, #480]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a77      	ldr	r2, [pc, #476]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 80021c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b75      	ldr	r3, [pc, #468]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a74      	ldr	r2, [pc, #464]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 80021d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e00b      	b.n	80021f0 <HAL_RCC_OscConfig+0xd8>
 80021d8:	4b71      	ldr	r3, [pc, #452]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a70      	ldr	r2, [pc, #448]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 80021de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	4b6e      	ldr	r3, [pc, #440]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a6d      	ldr	r2, [pc, #436]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 80021ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d013      	beq.n	8002220 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f8:	f7fe feda 	bl	8000fb0 <HAL_GetTick>
 80021fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002200:	f7fe fed6 	bl	8000fb0 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	; 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e3d4      	b.n	80029bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002212:	4b63      	ldr	r3, [pc, #396]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0xe8>
 800221e:	e014      	b.n	800224a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002220:	f7fe fec6 	bl	8000fb0 <HAL_GetTick>
 8002224:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002228:	f7fe fec2 	bl	8000fb0 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b64      	cmp	r3, #100	; 0x64
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e3c0      	b.n	80029bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800223a:	4b59      	ldr	r3, [pc, #356]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x110>
 8002246:	e000      	b.n	800224a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 80ca 	beq.w	80023ec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002258:	4b51      	ldr	r3, [pc, #324]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002260:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002262:	4b4f      	ldr	r3, [pc, #316]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 8002264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002266:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002268:	6a3b      	ldr	r3, [r7, #32]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d007      	beq.n	800227e <HAL_RCC_OscConfig+0x166>
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	2b18      	cmp	r3, #24
 8002272:	d156      	bne.n	8002322 <HAL_RCC_OscConfig+0x20a>
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d151      	bne.n	8002322 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800227e:	4b48      	ldr	r3, [pc, #288]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b00      	cmp	r3, #0
 8002288:	d005      	beq.n	8002296 <HAL_RCC_OscConfig+0x17e>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e392      	b.n	80029bc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002296:	4b42      	ldr	r3, [pc, #264]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f023 0219 	bic.w	r2, r3, #25
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	493f      	ldr	r1, [pc, #252]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a8:	f7fe fe82 	bl	8000fb0 <HAL_GetTick>
 80022ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b0:	f7fe fe7e 	bl	8000fb0 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e37c      	b.n	80029bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022c2:	4b37      	ldr	r3, [pc, #220]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0304 	and.w	r3, r3, #4
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ce:	f7fe fe9f 	bl	8001010 <HAL_GetREVID>
 80022d2:	4603      	mov	r3, r0
 80022d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80022d8:	4293      	cmp	r3, r2
 80022da:	d817      	bhi.n	800230c <HAL_RCC_OscConfig+0x1f4>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	2b40      	cmp	r3, #64	; 0x40
 80022e2:	d108      	bne.n	80022f6 <HAL_RCC_OscConfig+0x1de>
 80022e4:	4b2e      	ldr	r3, [pc, #184]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80022ec:	4a2c      	ldr	r2, [pc, #176]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 80022ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022f4:	e07a      	b.n	80023ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f6:	4b2a      	ldr	r3, [pc, #168]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	031b      	lsls	r3, r3, #12
 8002304:	4926      	ldr	r1, [pc, #152]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 8002306:	4313      	orrs	r3, r2
 8002308:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800230a:	e06f      	b.n	80023ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230c:	4b24      	ldr	r3, [pc, #144]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	061b      	lsls	r3, r3, #24
 800231a:	4921      	ldr	r1, [pc, #132]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 800231c:	4313      	orrs	r3, r2
 800231e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002320:	e064      	b.n	80023ec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d047      	beq.n	80023ba <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800232a:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f023 0219 	bic.w	r2, r3, #25
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	491a      	ldr	r1, [pc, #104]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 8002338:	4313      	orrs	r3, r2
 800233a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233c:	f7fe fe38 	bl	8000fb0 <HAL_GetTick>
 8002340:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002344:	f7fe fe34 	bl	8000fb0 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e332      	b.n	80029bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002356:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0304 	and.w	r3, r3, #4
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0f0      	beq.n	8002344 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002362:	f7fe fe55 	bl	8001010 <HAL_GetREVID>
 8002366:	4603      	mov	r3, r0
 8002368:	f241 0203 	movw	r2, #4099	; 0x1003
 800236c:	4293      	cmp	r3, r2
 800236e:	d819      	bhi.n	80023a4 <HAL_RCC_OscConfig+0x28c>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	2b40      	cmp	r3, #64	; 0x40
 8002376:	d108      	bne.n	800238a <HAL_RCC_OscConfig+0x272>
 8002378:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002380:	4a07      	ldr	r2, [pc, #28]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 8002382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002386:	6053      	str	r3, [r2, #4]
 8002388:	e030      	b.n	80023ec <HAL_RCC_OscConfig+0x2d4>
 800238a:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	031b      	lsls	r3, r3, #12
 8002398:	4901      	ldr	r1, [pc, #4]	; (80023a0 <HAL_RCC_OscConfig+0x288>)
 800239a:	4313      	orrs	r3, r2
 800239c:	604b      	str	r3, [r1, #4]
 800239e:	e025      	b.n	80023ec <HAL_RCC_OscConfig+0x2d4>
 80023a0:	58024400 	.word	0x58024400
 80023a4:	4b9a      	ldr	r3, [pc, #616]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	061b      	lsls	r3, r3, #24
 80023b2:	4997      	ldr	r1, [pc, #604]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]
 80023b8:	e018      	b.n	80023ec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ba:	4b95      	ldr	r3, [pc, #596]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a94      	ldr	r2, [pc, #592]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 80023c0:	f023 0301 	bic.w	r3, r3, #1
 80023c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c6:	f7fe fdf3 	bl	8000fb0 <HAL_GetTick>
 80023ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ce:	f7fe fdef 	bl	8000fb0 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e2ed      	b.n	80029bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023e0:	4b8b      	ldr	r3, [pc, #556]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1f0      	bne.n	80023ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 80a9 	beq.w	800254c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023fa:	4b85      	ldr	r3, [pc, #532]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002402:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002404:	4b82      	ldr	r3, [pc, #520]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 8002406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002408:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	2b08      	cmp	r3, #8
 800240e:	d007      	beq.n	8002420 <HAL_RCC_OscConfig+0x308>
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	2b18      	cmp	r3, #24
 8002414:	d13a      	bne.n	800248c <HAL_RCC_OscConfig+0x374>
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	2b01      	cmp	r3, #1
 800241e:	d135      	bne.n	800248c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002420:	4b7b      	ldr	r3, [pc, #492]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_RCC_OscConfig+0x320>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	2b80      	cmp	r3, #128	; 0x80
 8002432:	d001      	beq.n	8002438 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e2c1      	b.n	80029bc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002438:	f7fe fdea 	bl	8001010 <HAL_GetREVID>
 800243c:	4603      	mov	r3, r0
 800243e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002442:	4293      	cmp	r3, r2
 8002444:	d817      	bhi.n	8002476 <HAL_RCC_OscConfig+0x35e>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	2b20      	cmp	r3, #32
 800244c:	d108      	bne.n	8002460 <HAL_RCC_OscConfig+0x348>
 800244e:	4b70      	ldr	r3, [pc, #448]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002456:	4a6e      	ldr	r2, [pc, #440]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 8002458:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800245c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800245e:	e075      	b.n	800254c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002460:	4b6b      	ldr	r3, [pc, #428]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	069b      	lsls	r3, r3, #26
 800246e:	4968      	ldr	r1, [pc, #416]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 8002470:	4313      	orrs	r3, r2
 8002472:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002474:	e06a      	b.n	800254c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002476:	4b66      	ldr	r3, [pc, #408]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	061b      	lsls	r3, r3, #24
 8002484:	4962      	ldr	r1, [pc, #392]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 8002486:	4313      	orrs	r3, r2
 8002488:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800248a:	e05f      	b.n	800254c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d042      	beq.n	800251a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002494:	4b5e      	ldr	r3, [pc, #376]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a5d      	ldr	r2, [pc, #372]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 800249a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800249e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a0:	f7fe fd86 	bl	8000fb0 <HAL_GetTick>
 80024a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80024a8:	f7fe fd82 	bl	8000fb0 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e280      	b.n	80029bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024ba:	4b55      	ldr	r3, [pc, #340]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024c6:	f7fe fda3 	bl	8001010 <HAL_GetREVID>
 80024ca:	4603      	mov	r3, r0
 80024cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d817      	bhi.n	8002504 <HAL_RCC_OscConfig+0x3ec>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	2b20      	cmp	r3, #32
 80024da:	d108      	bne.n	80024ee <HAL_RCC_OscConfig+0x3d6>
 80024dc:	4b4c      	ldr	r3, [pc, #304]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80024e4:	4a4a      	ldr	r2, [pc, #296]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 80024e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80024ea:	6053      	str	r3, [r2, #4]
 80024ec:	e02e      	b.n	800254c <HAL_RCC_OscConfig+0x434>
 80024ee:	4b48      	ldr	r3, [pc, #288]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	069b      	lsls	r3, r3, #26
 80024fc:	4944      	ldr	r1, [pc, #272]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	604b      	str	r3, [r1, #4]
 8002502:	e023      	b.n	800254c <HAL_RCC_OscConfig+0x434>
 8002504:	4b42      	ldr	r3, [pc, #264]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	061b      	lsls	r3, r3, #24
 8002512:	493f      	ldr	r1, [pc, #252]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 8002514:	4313      	orrs	r3, r2
 8002516:	60cb      	str	r3, [r1, #12]
 8002518:	e018      	b.n	800254c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800251a:	4b3d      	ldr	r3, [pc, #244]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a3c      	ldr	r2, [pc, #240]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 8002520:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002526:	f7fe fd43 	bl	8000fb0 <HAL_GetTick>
 800252a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800252e:	f7fe fd3f 	bl	8000fb0 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e23d      	b.n	80029bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002540:	4b33      	ldr	r3, [pc, #204]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1f0      	bne.n	800252e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	2b00      	cmp	r3, #0
 8002556:	d036      	beq.n	80025c6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d019      	beq.n	8002594 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002560:	4b2b      	ldr	r3, [pc, #172]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 8002562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002564:	4a2a      	ldr	r2, [pc, #168]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 8002566:	f043 0301 	orr.w	r3, r3, #1
 800256a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256c:	f7fe fd20 	bl	8000fb0 <HAL_GetTick>
 8002570:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002574:	f7fe fd1c 	bl	8000fb0 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e21a      	b.n	80029bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002586:	4b22      	ldr	r3, [pc, #136]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 8002588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0x45c>
 8002592:	e018      	b.n	80025c6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002594:	4b1e      	ldr	r3, [pc, #120]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 8002596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002598:	4a1d      	ldr	r2, [pc, #116]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 800259a:	f023 0301 	bic.w	r3, r3, #1
 800259e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a0:	f7fe fd06 	bl	8000fb0 <HAL_GetTick>
 80025a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025a8:	f7fe fd02 	bl	8000fb0 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e200      	b.n	80029bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025ba:	4b15      	ldr	r3, [pc, #84]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 80025bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0320 	and.w	r3, r3, #32
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d039      	beq.n	8002646 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d01c      	beq.n	8002614 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025da:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a0c      	ldr	r2, [pc, #48]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 80025e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80025e6:	f7fe fce3 	bl	8000fb0 <HAL_GetTick>
 80025ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025ee:	f7fe fcdf 	bl	8000fb0 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e1dd      	b.n	80029bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002600:	4b03      	ldr	r3, [pc, #12]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x4d6>
 800260c:	e01b      	b.n	8002646 <HAL_RCC_OscConfig+0x52e>
 800260e:	bf00      	nop
 8002610:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002614:	4b9b      	ldr	r3, [pc, #620]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a9a      	ldr	r2, [pc, #616]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 800261a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800261e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002620:	f7fe fcc6 	bl	8000fb0 <HAL_GetTick>
 8002624:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002628:	f7fe fcc2 	bl	8000fb0 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e1c0      	b.n	80029bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800263a:	4b92      	ldr	r3, [pc, #584]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 8081 	beq.w	8002756 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002654:	4b8c      	ldr	r3, [pc, #560]	; (8002888 <HAL_RCC_OscConfig+0x770>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a8b      	ldr	r2, [pc, #556]	; (8002888 <HAL_RCC_OscConfig+0x770>)
 800265a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800265e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002660:	f7fe fca6 	bl	8000fb0 <HAL_GetTick>
 8002664:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002668:	f7fe fca2 	bl	8000fb0 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b64      	cmp	r3, #100	; 0x64
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e1a0      	b.n	80029bc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800267a:	4b83      	ldr	r3, [pc, #524]	; (8002888 <HAL_RCC_OscConfig+0x770>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f0      	beq.n	8002668 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d106      	bne.n	800269c <HAL_RCC_OscConfig+0x584>
 800268e:	4b7d      	ldr	r3, [pc, #500]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 8002690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002692:	4a7c      	ldr	r2, [pc, #496]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	6713      	str	r3, [r2, #112]	; 0x70
 800269a:	e02d      	b.n	80026f8 <HAL_RCC_OscConfig+0x5e0>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10c      	bne.n	80026be <HAL_RCC_OscConfig+0x5a6>
 80026a4:	4b77      	ldr	r3, [pc, #476]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 80026a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a8:	4a76      	ldr	r2, [pc, #472]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 80026aa:	f023 0301 	bic.w	r3, r3, #1
 80026ae:	6713      	str	r3, [r2, #112]	; 0x70
 80026b0:	4b74      	ldr	r3, [pc, #464]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 80026b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b4:	4a73      	ldr	r2, [pc, #460]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 80026b6:	f023 0304 	bic.w	r3, r3, #4
 80026ba:	6713      	str	r3, [r2, #112]	; 0x70
 80026bc:	e01c      	b.n	80026f8 <HAL_RCC_OscConfig+0x5e0>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2b05      	cmp	r3, #5
 80026c4:	d10c      	bne.n	80026e0 <HAL_RCC_OscConfig+0x5c8>
 80026c6:	4b6f      	ldr	r3, [pc, #444]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 80026c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ca:	4a6e      	ldr	r2, [pc, #440]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 80026cc:	f043 0304 	orr.w	r3, r3, #4
 80026d0:	6713      	str	r3, [r2, #112]	; 0x70
 80026d2:	4b6c      	ldr	r3, [pc, #432]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 80026d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d6:	4a6b      	ldr	r2, [pc, #428]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	6713      	str	r3, [r2, #112]	; 0x70
 80026de:	e00b      	b.n	80026f8 <HAL_RCC_OscConfig+0x5e0>
 80026e0:	4b68      	ldr	r3, [pc, #416]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 80026e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e4:	4a67      	ldr	r2, [pc, #412]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 80026e6:	f023 0301 	bic.w	r3, r3, #1
 80026ea:	6713      	str	r3, [r2, #112]	; 0x70
 80026ec:	4b65      	ldr	r3, [pc, #404]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 80026ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f0:	4a64      	ldr	r2, [pc, #400]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 80026f2:	f023 0304 	bic.w	r3, r3, #4
 80026f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d015      	beq.n	800272c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002700:	f7fe fc56 	bl	8000fb0 <HAL_GetTick>
 8002704:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002706:	e00a      	b.n	800271e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002708:	f7fe fc52 	bl	8000fb0 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	f241 3288 	movw	r2, #5000	; 0x1388
 8002716:	4293      	cmp	r3, r2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e14e      	b.n	80029bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800271e:	4b59      	ldr	r3, [pc, #356]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 8002720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0ee      	beq.n	8002708 <HAL_RCC_OscConfig+0x5f0>
 800272a:	e014      	b.n	8002756 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272c:	f7fe fc40 	bl	8000fb0 <HAL_GetTick>
 8002730:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002732:	e00a      	b.n	800274a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002734:	f7fe fc3c 	bl	8000fb0 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002742:	4293      	cmp	r3, r2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e138      	b.n	80029bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800274a:	4b4e      	ldr	r3, [pc, #312]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 800274c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1ee      	bne.n	8002734 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 812d 	beq.w	80029ba <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002760:	4b48      	ldr	r3, [pc, #288]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002768:	2b18      	cmp	r3, #24
 800276a:	f000 80bd 	beq.w	80028e8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	2b02      	cmp	r3, #2
 8002774:	f040 809e 	bne.w	80028b4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002778:	4b42      	ldr	r3, [pc, #264]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a41      	ldr	r2, [pc, #260]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 800277e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002784:	f7fe fc14 	bl	8000fb0 <HAL_GetTick>
 8002788:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800278c:	f7fe fc10 	bl	8000fb0 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e10e      	b.n	80029bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800279e:	4b39      	ldr	r3, [pc, #228]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027aa:	4b36      	ldr	r3, [pc, #216]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 80027ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027ae:	4b37      	ldr	r3, [pc, #220]	; (800288c <HAL_RCC_OscConfig+0x774>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80027ba:	0112      	lsls	r2, r2, #4
 80027bc:	430a      	orrs	r2, r1
 80027be:	4931      	ldr	r1, [pc, #196]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	628b      	str	r3, [r1, #40]	; 0x28
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	3b01      	subs	r3, #1
 80027ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d2:	3b01      	subs	r3, #1
 80027d4:	025b      	lsls	r3, r3, #9
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	431a      	orrs	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027de:	3b01      	subs	r3, #1
 80027e0:	041b      	lsls	r3, r3, #16
 80027e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ec:	3b01      	subs	r3, #1
 80027ee:	061b      	lsls	r3, r3, #24
 80027f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80027f4:	4923      	ldr	r1, [pc, #140]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80027fa:	4b22      	ldr	r3, [pc, #136]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 80027fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fe:	4a21      	ldr	r2, [pc, #132]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 8002800:	f023 0301 	bic.w	r3, r3, #1
 8002804:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002806:	4b1f      	ldr	r3, [pc, #124]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 8002808:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800280a:	4b21      	ldr	r3, [pc, #132]	; (8002890 <HAL_RCC_OscConfig+0x778>)
 800280c:	4013      	ands	r3, r2
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002812:	00d2      	lsls	r2, r2, #3
 8002814:	491b      	ldr	r1, [pc, #108]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 8002816:	4313      	orrs	r3, r2
 8002818:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800281a:	4b1a      	ldr	r3, [pc, #104]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 800281c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281e:	f023 020c 	bic.w	r2, r3, #12
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	4917      	ldr	r1, [pc, #92]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 8002828:	4313      	orrs	r3, r2
 800282a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800282c:	4b15      	ldr	r3, [pc, #84]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 800282e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002830:	f023 0202 	bic.w	r2, r3, #2
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002838:	4912      	ldr	r1, [pc, #72]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 800283a:	4313      	orrs	r3, r2
 800283c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800283e:	4b11      	ldr	r3, [pc, #68]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 8002840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002842:	4a10      	ldr	r2, [pc, #64]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 8002844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002848:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800284a:	4b0e      	ldr	r3, [pc, #56]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 800284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284e:	4a0d      	ldr	r2, [pc, #52]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 8002850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002854:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002856:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 8002858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285a:	4a0a      	ldr	r2, [pc, #40]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 800285c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002860:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002862:	4b08      	ldr	r3, [pc, #32]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 8002864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002866:	4a07      	ldr	r2, [pc, #28]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800286e:	4b05      	ldr	r3, [pc, #20]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a04      	ldr	r2, [pc, #16]	; (8002884 <HAL_RCC_OscConfig+0x76c>)
 8002874:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287a:	f7fe fb99 	bl	8000fb0 <HAL_GetTick>
 800287e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002880:	e011      	b.n	80028a6 <HAL_RCC_OscConfig+0x78e>
 8002882:	bf00      	nop
 8002884:	58024400 	.word	0x58024400
 8002888:	58024800 	.word	0x58024800
 800288c:	fffffc0c 	.word	0xfffffc0c
 8002890:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002894:	f7fe fb8c 	bl	8000fb0 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e08a      	b.n	80029bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028a6:	4b47      	ldr	r3, [pc, #284]	; (80029c4 <HAL_RCC_OscConfig+0x8ac>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f0      	beq.n	8002894 <HAL_RCC_OscConfig+0x77c>
 80028b2:	e082      	b.n	80029ba <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b4:	4b43      	ldr	r3, [pc, #268]	; (80029c4 <HAL_RCC_OscConfig+0x8ac>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a42      	ldr	r2, [pc, #264]	; (80029c4 <HAL_RCC_OscConfig+0x8ac>)
 80028ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c0:	f7fe fb76 	bl	8000fb0 <HAL_GetTick>
 80028c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c8:	f7fe fb72 	bl	8000fb0 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e070      	b.n	80029bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028da:	4b3a      	ldr	r3, [pc, #232]	; (80029c4 <HAL_RCC_OscConfig+0x8ac>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f0      	bne.n	80028c8 <HAL_RCC_OscConfig+0x7b0>
 80028e6:	e068      	b.n	80029ba <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80028e8:	4b36      	ldr	r3, [pc, #216]	; (80029c4 <HAL_RCC_OscConfig+0x8ac>)
 80028ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80028ee:	4b35      	ldr	r3, [pc, #212]	; (80029c4 <HAL_RCC_OscConfig+0x8ac>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d031      	beq.n	8002960 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	f003 0203 	and.w	r2, r3, #3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002906:	429a      	cmp	r2, r3
 8002908:	d12a      	bne.n	8002960 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	091b      	lsrs	r3, r3, #4
 800290e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002916:	429a      	cmp	r2, r3
 8002918:	d122      	bne.n	8002960 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002926:	429a      	cmp	r2, r3
 8002928:	d11a      	bne.n	8002960 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	0a5b      	lsrs	r3, r3, #9
 800292e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002936:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002938:	429a      	cmp	r2, r3
 800293a:	d111      	bne.n	8002960 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	0c1b      	lsrs	r3, r3, #16
 8002940:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002948:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800294a:	429a      	cmp	r2, r3
 800294c:	d108      	bne.n	8002960 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	0e1b      	lsrs	r3, r3, #24
 8002952:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800295c:	429a      	cmp	r2, r3
 800295e:	d001      	beq.n	8002964 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e02b      	b.n	80029bc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002964:	4b17      	ldr	r3, [pc, #92]	; (80029c4 <HAL_RCC_OscConfig+0x8ac>)
 8002966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002968:	08db      	lsrs	r3, r3, #3
 800296a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800296e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	429a      	cmp	r2, r3
 8002978:	d01f      	beq.n	80029ba <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800297a:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <HAL_RCC_OscConfig+0x8ac>)
 800297c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297e:	4a11      	ldr	r2, [pc, #68]	; (80029c4 <HAL_RCC_OscConfig+0x8ac>)
 8002980:	f023 0301 	bic.w	r3, r3, #1
 8002984:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002986:	f7fe fb13 	bl	8000fb0 <HAL_GetTick>
 800298a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800298c:	bf00      	nop
 800298e:	f7fe fb0f 	bl	8000fb0 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	4293      	cmp	r3, r2
 8002998:	d0f9      	beq.n	800298e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800299a:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <HAL_RCC_OscConfig+0x8ac>)
 800299c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800299e:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <HAL_RCC_OscConfig+0x8b0>)
 80029a0:	4013      	ands	r3, r2
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029a6:	00d2      	lsls	r2, r2, #3
 80029a8:	4906      	ldr	r1, [pc, #24]	; (80029c4 <HAL_RCC_OscConfig+0x8ac>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80029ae:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <HAL_RCC_OscConfig+0x8ac>)
 80029b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b2:	4a04      	ldr	r2, [pc, #16]	; (80029c4 <HAL_RCC_OscConfig+0x8ac>)
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3730      	adds	r7, #48	; 0x30
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	58024400 	.word	0x58024400
 80029c8:	ffff0007 	.word	0xffff0007

080029cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e19c      	b.n	8002d1a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029e0:	4b8a      	ldr	r3, [pc, #552]	; (8002c0c <HAL_RCC_ClockConfig+0x240>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 030f 	and.w	r3, r3, #15
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d910      	bls.n	8002a10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ee:	4b87      	ldr	r3, [pc, #540]	; (8002c0c <HAL_RCC_ClockConfig+0x240>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 020f 	bic.w	r2, r3, #15
 80029f6:	4985      	ldr	r1, [pc, #532]	; (8002c0c <HAL_RCC_ClockConfig+0x240>)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fe:	4b83      	ldr	r3, [pc, #524]	; (8002c0c <HAL_RCC_ClockConfig+0x240>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d001      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e184      	b.n	8002d1a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d010      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	4b7b      	ldr	r3, [pc, #492]	; (8002c10 <HAL_RCC_ClockConfig+0x244>)
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d908      	bls.n	8002a3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a2c:	4b78      	ldr	r3, [pc, #480]	; (8002c10 <HAL_RCC_ClockConfig+0x244>)
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	4975      	ldr	r1, [pc, #468]	; (8002c10 <HAL_RCC_ClockConfig+0x244>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d010      	beq.n	8002a6c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	695a      	ldr	r2, [r3, #20]
 8002a4e:	4b70      	ldr	r3, [pc, #448]	; (8002c10 <HAL_RCC_ClockConfig+0x244>)
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d908      	bls.n	8002a6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a5a:	4b6d      	ldr	r3, [pc, #436]	; (8002c10 <HAL_RCC_ClockConfig+0x244>)
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	496a      	ldr	r1, [pc, #424]	; (8002c10 <HAL_RCC_ClockConfig+0x244>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0310 	and.w	r3, r3, #16
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d010      	beq.n	8002a9a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	699a      	ldr	r2, [r3, #24]
 8002a7c:	4b64      	ldr	r3, [pc, #400]	; (8002c10 <HAL_RCC_ClockConfig+0x244>)
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d908      	bls.n	8002a9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a88:	4b61      	ldr	r3, [pc, #388]	; (8002c10 <HAL_RCC_ClockConfig+0x244>)
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	495e      	ldr	r1, [pc, #376]	; (8002c10 <HAL_RCC_ClockConfig+0x244>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d010      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69da      	ldr	r2, [r3, #28]
 8002aaa:	4b59      	ldr	r3, [pc, #356]	; (8002c10 <HAL_RCC_ClockConfig+0x244>)
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d908      	bls.n	8002ac8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ab6:	4b56      	ldr	r3, [pc, #344]	; (8002c10 <HAL_RCC_ClockConfig+0x244>)
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	4953      	ldr	r1, [pc, #332]	; (8002c10 <HAL_RCC_ClockConfig+0x244>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d010      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	4b4d      	ldr	r3, [pc, #308]	; (8002c10 <HAL_RCC_ClockConfig+0x244>)
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d908      	bls.n	8002af6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae4:	4b4a      	ldr	r3, [pc, #296]	; (8002c10 <HAL_RCC_ClockConfig+0x244>)
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	f023 020f 	bic.w	r2, r3, #15
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4947      	ldr	r1, [pc, #284]	; (8002c10 <HAL_RCC_ClockConfig+0x244>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d055      	beq.n	8002bae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002b02:	4b43      	ldr	r3, [pc, #268]	; (8002c10 <HAL_RCC_ClockConfig+0x244>)
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	4940      	ldr	r1, [pc, #256]	; (8002c10 <HAL_RCC_ClockConfig+0x244>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d107      	bne.n	8002b2c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b1c:	4b3c      	ldr	r3, [pc, #240]	; (8002c10 <HAL_RCC_ClockConfig+0x244>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d121      	bne.n	8002b6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e0f6      	b.n	8002d1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d107      	bne.n	8002b44 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b34:	4b36      	ldr	r3, [pc, #216]	; (8002c10 <HAL_RCC_ClockConfig+0x244>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d115      	bne.n	8002b6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e0ea      	b.n	8002d1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d107      	bne.n	8002b5c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b4c:	4b30      	ldr	r3, [pc, #192]	; (8002c10 <HAL_RCC_ClockConfig+0x244>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d109      	bne.n	8002b6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e0de      	b.n	8002d1a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b5c:	4b2c      	ldr	r3, [pc, #176]	; (8002c10 <HAL_RCC_ClockConfig+0x244>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e0d6      	b.n	8002d1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b6c:	4b28      	ldr	r3, [pc, #160]	; (8002c10 <HAL_RCC_ClockConfig+0x244>)
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	f023 0207 	bic.w	r2, r3, #7
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	4925      	ldr	r1, [pc, #148]	; (8002c10 <HAL_RCC_ClockConfig+0x244>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b7e:	f7fe fa17 	bl	8000fb0 <HAL_GetTick>
 8002b82:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b84:	e00a      	b.n	8002b9c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b86:	f7fe fa13 	bl	8000fb0 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e0be      	b.n	8002d1a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9c:	4b1c      	ldr	r3, [pc, #112]	; (8002c10 <HAL_RCC_ClockConfig+0x244>)
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d1eb      	bne.n	8002b86 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d010      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	4b14      	ldr	r3, [pc, #80]	; (8002c10 <HAL_RCC_ClockConfig+0x244>)
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d208      	bcs.n	8002bdc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bca:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <HAL_RCC_ClockConfig+0x244>)
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	f023 020f 	bic.w	r2, r3, #15
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	490e      	ldr	r1, [pc, #56]	; (8002c10 <HAL_RCC_ClockConfig+0x244>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <HAL_RCC_ClockConfig+0x240>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 030f 	and.w	r3, r3, #15
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d214      	bcs.n	8002c14 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bea:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <HAL_RCC_ClockConfig+0x240>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f023 020f 	bic.w	r2, r3, #15
 8002bf2:	4906      	ldr	r1, [pc, #24]	; (8002c0c <HAL_RCC_ClockConfig+0x240>)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfa:	4b04      	ldr	r3, [pc, #16]	; (8002c0c <HAL_RCC_ClockConfig+0x240>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d005      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e086      	b.n	8002d1a <HAL_RCC_ClockConfig+0x34e>
 8002c0c:	52002000 	.word	0x52002000
 8002c10:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d010      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	4b3f      	ldr	r3, [pc, #252]	; (8002d24 <HAL_RCC_ClockConfig+0x358>)
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d208      	bcs.n	8002c42 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c30:	4b3c      	ldr	r3, [pc, #240]	; (8002d24 <HAL_RCC_ClockConfig+0x358>)
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	4939      	ldr	r1, [pc, #228]	; (8002d24 <HAL_RCC_ClockConfig+0x358>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d010      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	4b34      	ldr	r3, [pc, #208]	; (8002d24 <HAL_RCC_ClockConfig+0x358>)
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d208      	bcs.n	8002c70 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c5e:	4b31      	ldr	r3, [pc, #196]	; (8002d24 <HAL_RCC_ClockConfig+0x358>)
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	492e      	ldr	r1, [pc, #184]	; (8002d24 <HAL_RCC_ClockConfig+0x358>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d010      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	699a      	ldr	r2, [r3, #24]
 8002c80:	4b28      	ldr	r3, [pc, #160]	; (8002d24 <HAL_RCC_ClockConfig+0x358>)
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d208      	bcs.n	8002c9e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c8c:	4b25      	ldr	r3, [pc, #148]	; (8002d24 <HAL_RCC_ClockConfig+0x358>)
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	4922      	ldr	r1, [pc, #136]	; (8002d24 <HAL_RCC_ClockConfig+0x358>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0320 	and.w	r3, r3, #32
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d010      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69da      	ldr	r2, [r3, #28]
 8002cae:	4b1d      	ldr	r3, [pc, #116]	; (8002d24 <HAL_RCC_ClockConfig+0x358>)
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d208      	bcs.n	8002ccc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002cba:	4b1a      	ldr	r3, [pc, #104]	; (8002d24 <HAL_RCC_ClockConfig+0x358>)
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	4917      	ldr	r1, [pc, #92]	; (8002d24 <HAL_RCC_ClockConfig+0x358>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ccc:	f000 f834 	bl	8002d38 <HAL_RCC_GetSysClockFreq>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	4b14      	ldr	r3, [pc, #80]	; (8002d24 <HAL_RCC_ClockConfig+0x358>)
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	0a1b      	lsrs	r3, r3, #8
 8002cd8:	f003 030f 	and.w	r3, r3, #15
 8002cdc:	4912      	ldr	r1, [pc, #72]	; (8002d28 <HAL_RCC_ClockConfig+0x35c>)
 8002cde:	5ccb      	ldrb	r3, [r1, r3]
 8002ce0:	f003 031f 	and.w	r3, r3, #31
 8002ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cea:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <HAL_RCC_ClockConfig+0x358>)
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	4a0d      	ldr	r2, [pc, #52]	; (8002d28 <HAL_RCC_ClockConfig+0x35c>)
 8002cf4:	5cd3      	ldrb	r3, [r2, r3]
 8002cf6:	f003 031f 	and.w	r3, r3, #31
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8002d00:	4a0a      	ldr	r2, [pc, #40]	; (8002d2c <HAL_RCC_ClockConfig+0x360>)
 8002d02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d04:	4a0a      	ldr	r2, [pc, #40]	; (8002d30 <HAL_RCC_ClockConfig+0x364>)
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002d0a:	4b0a      	ldr	r3, [pc, #40]	; (8002d34 <HAL_RCC_ClockConfig+0x368>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fe f904 	bl	8000f1c <HAL_InitTick>
 8002d14:	4603      	mov	r3, r0
 8002d16:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	58024400 	.word	0x58024400
 8002d28:	080078e8 	.word	0x080078e8
 8002d2c:	24000004 	.word	0x24000004
 8002d30:	24000000 	.word	0x24000000
 8002d34:	24000008 	.word	0x24000008

08002d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b089      	sub	sp, #36	; 0x24
 8002d3c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d3e:	4bb3      	ldr	r3, [pc, #716]	; (800300c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d46:	2b18      	cmp	r3, #24
 8002d48:	f200 8155 	bhi.w	8002ff6 <HAL_RCC_GetSysClockFreq+0x2be>
 8002d4c:	a201      	add	r2, pc, #4	; (adr r2, 8002d54 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d52:	bf00      	nop
 8002d54:	08002db9 	.word	0x08002db9
 8002d58:	08002ff7 	.word	0x08002ff7
 8002d5c:	08002ff7 	.word	0x08002ff7
 8002d60:	08002ff7 	.word	0x08002ff7
 8002d64:	08002ff7 	.word	0x08002ff7
 8002d68:	08002ff7 	.word	0x08002ff7
 8002d6c:	08002ff7 	.word	0x08002ff7
 8002d70:	08002ff7 	.word	0x08002ff7
 8002d74:	08002ddf 	.word	0x08002ddf
 8002d78:	08002ff7 	.word	0x08002ff7
 8002d7c:	08002ff7 	.word	0x08002ff7
 8002d80:	08002ff7 	.word	0x08002ff7
 8002d84:	08002ff7 	.word	0x08002ff7
 8002d88:	08002ff7 	.word	0x08002ff7
 8002d8c:	08002ff7 	.word	0x08002ff7
 8002d90:	08002ff7 	.word	0x08002ff7
 8002d94:	08002de5 	.word	0x08002de5
 8002d98:	08002ff7 	.word	0x08002ff7
 8002d9c:	08002ff7 	.word	0x08002ff7
 8002da0:	08002ff7 	.word	0x08002ff7
 8002da4:	08002ff7 	.word	0x08002ff7
 8002da8:	08002ff7 	.word	0x08002ff7
 8002dac:	08002ff7 	.word	0x08002ff7
 8002db0:	08002ff7 	.word	0x08002ff7
 8002db4:	08002deb 	.word	0x08002deb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002db8:	4b94      	ldr	r3, [pc, #592]	; (800300c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0320 	and.w	r3, r3, #32
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d009      	beq.n	8002dd8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002dc4:	4b91      	ldr	r3, [pc, #580]	; (800300c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	08db      	lsrs	r3, r3, #3
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	4a90      	ldr	r2, [pc, #576]	; (8003010 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002dd6:	e111      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002dd8:	4b8d      	ldr	r3, [pc, #564]	; (8003010 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002dda:	61bb      	str	r3, [r7, #24]
      break;
 8002ddc:	e10e      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002dde:	4b8d      	ldr	r3, [pc, #564]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002de0:	61bb      	str	r3, [r7, #24]
      break;
 8002de2:	e10b      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002de4:	4b8c      	ldr	r3, [pc, #560]	; (8003018 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002de6:	61bb      	str	r3, [r7, #24]
      break;
 8002de8:	e108      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002dea:	4b88      	ldr	r3, [pc, #544]	; (800300c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002df4:	4b85      	ldr	r3, [pc, #532]	; (800300c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df8:	091b      	lsrs	r3, r3, #4
 8002dfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dfe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002e00:	4b82      	ldr	r3, [pc, #520]	; (800300c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002e0a:	4b80      	ldr	r3, [pc, #512]	; (800300c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e0e:	08db      	lsrs	r3, r3, #3
 8002e10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	fb02 f303 	mul.w	r3, r2, r3
 8002e1a:	ee07 3a90 	vmov	s15, r3
 8002e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e22:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80e1 	beq.w	8002ff0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	f000 8083 	beq.w	8002f3c <HAL_RCC_GetSysClockFreq+0x204>
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	f200 80a1 	bhi.w	8002f80 <HAL_RCC_GetSysClockFreq+0x248>
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_RCC_GetSysClockFreq+0x114>
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d056      	beq.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002e4a:	e099      	b.n	8002f80 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e4c:	4b6f      	ldr	r3, [pc, #444]	; (800300c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0320 	and.w	r3, r3, #32
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d02d      	beq.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e58:	4b6c      	ldr	r3, [pc, #432]	; (800300c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	08db      	lsrs	r3, r3, #3
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	4a6b      	ldr	r2, [pc, #428]	; (8003010 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e64:	fa22 f303 	lsr.w	r3, r2, r3
 8002e68:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	ee07 3a90 	vmov	s15, r3
 8002e70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	ee07 3a90 	vmov	s15, r3
 8002e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e82:	4b62      	ldr	r3, [pc, #392]	; (800300c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e8a:	ee07 3a90 	vmov	s15, r3
 8002e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e92:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e96:	eddf 5a61 	vldr	s11, [pc, #388]	; 800301c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002eb2:	e087      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	ee07 3a90 	vmov	s15, r3
 8002eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ebe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003020 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ec6:	4b51      	ldr	r3, [pc, #324]	; (800300c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ece:	ee07 3a90 	vmov	s15, r3
 8002ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ed6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002eda:	eddf 5a50 	vldr	s11, [pc, #320]	; 800301c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ef2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ef6:	e065      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	ee07 3a90 	vmov	s15, r3
 8002efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f02:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003024 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f0a:	4b40      	ldr	r3, [pc, #256]	; (800300c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f12:	ee07 3a90 	vmov	s15, r3
 8002f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f1e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800301c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f3a:	e043      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	ee07 3a90 	vmov	s15, r3
 8002f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f46:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003028 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f4e:	4b2f      	ldr	r3, [pc, #188]	; (800300c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f56:	ee07 3a90 	vmov	s15, r3
 8002f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f62:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800301c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f7e:	e021      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	ee07 3a90 	vmov	s15, r3
 8002f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f8a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003024 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f92:	4b1e      	ldr	r3, [pc, #120]	; (800300c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f9a:	ee07 3a90 	vmov	s15, r3
 8002f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fa6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800301c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002fc2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002fc4:	4b11      	ldr	r3, [pc, #68]	; (800300c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	0a5b      	lsrs	r3, r3, #9
 8002fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fce:	3301      	adds	r3, #1
 8002fd0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	ee07 3a90 	vmov	s15, r3
 8002fd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8002fe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fe8:	ee17 3a90 	vmov	r3, s15
 8002fec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002fee:	e005      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	61bb      	str	r3, [r7, #24]
      break;
 8002ff4:	e002      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002ff6:	4b07      	ldr	r3, [pc, #28]	; (8003014 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ff8:	61bb      	str	r3, [r7, #24]
      break;
 8002ffa:	bf00      	nop
  }

  return sysclockfreq;
 8002ffc:	69bb      	ldr	r3, [r7, #24]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3724      	adds	r7, #36	; 0x24
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	58024400 	.word	0x58024400
 8003010:	03d09000 	.word	0x03d09000
 8003014:	003d0900 	.word	0x003d0900
 8003018:	017d7840 	.word	0x017d7840
 800301c:	46000000 	.word	0x46000000
 8003020:	4c742400 	.word	0x4c742400
 8003024:	4a742400 	.word	0x4a742400
 8003028:	4bbebc20 	.word	0x4bbebc20

0800302c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003032:	f7ff fe81 	bl	8002d38 <HAL_RCC_GetSysClockFreq>
 8003036:	4602      	mov	r2, r0
 8003038:	4b10      	ldr	r3, [pc, #64]	; (800307c <HAL_RCC_GetHCLKFreq+0x50>)
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	0a1b      	lsrs	r3, r3, #8
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	490f      	ldr	r1, [pc, #60]	; (8003080 <HAL_RCC_GetHCLKFreq+0x54>)
 8003044:	5ccb      	ldrb	r3, [r1, r3]
 8003046:	f003 031f 	and.w	r3, r3, #31
 800304a:	fa22 f303 	lsr.w	r3, r2, r3
 800304e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003050:	4b0a      	ldr	r3, [pc, #40]	; (800307c <HAL_RCC_GetHCLKFreq+0x50>)
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	f003 030f 	and.w	r3, r3, #15
 8003058:	4a09      	ldr	r2, [pc, #36]	; (8003080 <HAL_RCC_GetHCLKFreq+0x54>)
 800305a:	5cd3      	ldrb	r3, [r2, r3]
 800305c:	f003 031f 	and.w	r3, r3, #31
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	fa22 f303 	lsr.w	r3, r2, r3
 8003066:	4a07      	ldr	r2, [pc, #28]	; (8003084 <HAL_RCC_GetHCLKFreq+0x58>)
 8003068:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800306a:	4a07      	ldr	r2, [pc, #28]	; (8003088 <HAL_RCC_GetHCLKFreq+0x5c>)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003070:	4b04      	ldr	r3, [pc, #16]	; (8003084 <HAL_RCC_GetHCLKFreq+0x58>)
 8003072:	681b      	ldr	r3, [r3, #0]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	58024400 	.word	0x58024400
 8003080:	080078e8 	.word	0x080078e8
 8003084:	24000004 	.word	0x24000004
 8003088:	24000000 	.word	0x24000000

0800308c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003090:	f7ff ffcc 	bl	800302c <HAL_RCC_GetHCLKFreq>
 8003094:	4602      	mov	r2, r0
 8003096:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	091b      	lsrs	r3, r3, #4
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	4904      	ldr	r1, [pc, #16]	; (80030b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030a2:	5ccb      	ldrb	r3, [r1, r3]
 80030a4:	f003 031f 	and.w	r3, r3, #31
 80030a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	58024400 	.word	0x58024400
 80030b4:	080078e8 	.word	0x080078e8

080030b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80030bc:	f7ff ffb6 	bl	800302c <HAL_RCC_GetHCLKFreq>
 80030c0:	4602      	mov	r2, r0
 80030c2:	4b06      	ldr	r3, [pc, #24]	; (80030dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	0a1b      	lsrs	r3, r3, #8
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	4904      	ldr	r1, [pc, #16]	; (80030e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030ce:	5ccb      	ldrb	r3, [r1, r3]
 80030d0:	f003 031f 	and.w	r3, r3, #31
 80030d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80030d8:	4618      	mov	r0, r3
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	58024400 	.word	0x58024400
 80030e0:	080078e8 	.word	0x080078e8

080030e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030e8:	b0ca      	sub	sp, #296	; 0x128
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030f0:	2300      	movs	r3, #0
 80030f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030f6:	2300      	movs	r3, #0
 80030f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003104:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003108:	2500      	movs	r5, #0
 800310a:	ea54 0305 	orrs.w	r3, r4, r5
 800310e:	d049      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003114:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003116:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800311a:	d02f      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800311c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003120:	d828      	bhi.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003122:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003126:	d01a      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003128:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800312c:	d822      	bhi.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003132:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003136:	d007      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003138:	e01c      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800313a:	4bb8      	ldr	r3, [pc, #736]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800313c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313e:	4ab7      	ldr	r2, [pc, #732]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003144:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003146:	e01a      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800314c:	3308      	adds	r3, #8
 800314e:	2102      	movs	r1, #2
 8003150:	4618      	mov	r0, r3
 8003152:	f001 fc8f 	bl	8004a74 <RCCEx_PLL2_Config>
 8003156:	4603      	mov	r3, r0
 8003158:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800315c:	e00f      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800315e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003162:	3328      	adds	r3, #40	; 0x28
 8003164:	2102      	movs	r1, #2
 8003166:	4618      	mov	r0, r3
 8003168:	f001 fd36 	bl	8004bd8 <RCCEx_PLL3_Config>
 800316c:	4603      	mov	r3, r0
 800316e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003172:	e004      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800317a:	e000      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800317c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800317e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10a      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003186:	4ba5      	ldr	r3, [pc, #660]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800318a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800318e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003192:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003194:	4aa1      	ldr	r2, [pc, #644]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003196:	430b      	orrs	r3, r1
 8003198:	6513      	str	r3, [r2, #80]	; 0x50
 800319a:	e003      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800319c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80031a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ac:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80031b0:	f04f 0900 	mov.w	r9, #0
 80031b4:	ea58 0309 	orrs.w	r3, r8, r9
 80031b8:	d047      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80031ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d82a      	bhi.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80031c4:	a201      	add	r2, pc, #4	; (adr r2, 80031cc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80031c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ca:	bf00      	nop
 80031cc:	080031e1 	.word	0x080031e1
 80031d0:	080031ef 	.word	0x080031ef
 80031d4:	08003205 	.word	0x08003205
 80031d8:	08003223 	.word	0x08003223
 80031dc:	08003223 	.word	0x08003223
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031e0:	4b8e      	ldr	r3, [pc, #568]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	4a8d      	ldr	r2, [pc, #564]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031ec:	e01a      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031f2:	3308      	adds	r3, #8
 80031f4:	2100      	movs	r1, #0
 80031f6:	4618      	mov	r0, r3
 80031f8:	f001 fc3c 	bl	8004a74 <RCCEx_PLL2_Config>
 80031fc:	4603      	mov	r3, r0
 80031fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003202:	e00f      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003208:	3328      	adds	r3, #40	; 0x28
 800320a:	2100      	movs	r1, #0
 800320c:	4618      	mov	r0, r3
 800320e:	f001 fce3 	bl	8004bd8 <RCCEx_PLL3_Config>
 8003212:	4603      	mov	r3, r0
 8003214:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003218:	e004      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003220:	e000      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003222:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003224:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10a      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800322c:	4b7b      	ldr	r3, [pc, #492]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800322e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003230:	f023 0107 	bic.w	r1, r3, #7
 8003234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323a:	4a78      	ldr	r2, [pc, #480]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800323c:	430b      	orrs	r3, r1
 800323e:	6513      	str	r3, [r2, #80]	; 0x50
 8003240:	e003      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003242:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003246:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800324a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800324e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003252:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003256:	f04f 0b00 	mov.w	fp, #0
 800325a:	ea5a 030b 	orrs.w	r3, sl, fp
 800325e:	d04c      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003260:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800326a:	d030      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800326c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003270:	d829      	bhi.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003272:	2bc0      	cmp	r3, #192	; 0xc0
 8003274:	d02d      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003276:	2bc0      	cmp	r3, #192	; 0xc0
 8003278:	d825      	bhi.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800327a:	2b80      	cmp	r3, #128	; 0x80
 800327c:	d018      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800327e:	2b80      	cmp	r3, #128	; 0x80
 8003280:	d821      	bhi.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003282:	2b00      	cmp	r3, #0
 8003284:	d002      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003286:	2b40      	cmp	r3, #64	; 0x40
 8003288:	d007      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800328a:	e01c      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800328c:	4b63      	ldr	r3, [pc, #396]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	4a62      	ldr	r2, [pc, #392]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003296:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003298:	e01c      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800329a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800329e:	3308      	adds	r3, #8
 80032a0:	2100      	movs	r1, #0
 80032a2:	4618      	mov	r0, r3
 80032a4:	f001 fbe6 	bl	8004a74 <RCCEx_PLL2_Config>
 80032a8:	4603      	mov	r3, r0
 80032aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80032ae:	e011      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032b4:	3328      	adds	r3, #40	; 0x28
 80032b6:	2100      	movs	r1, #0
 80032b8:	4618      	mov	r0, r3
 80032ba:	f001 fc8d 	bl	8004bd8 <RCCEx_PLL3_Config>
 80032be:	4603      	mov	r3, r0
 80032c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80032c4:	e006      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80032cc:	e002      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80032ce:	bf00      	nop
 80032d0:	e000      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80032d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10a      	bne.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80032dc:	4b4f      	ldr	r3, [pc, #316]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80032e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ea:	4a4c      	ldr	r2, [pc, #304]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032ec:	430b      	orrs	r3, r1
 80032ee:	6513      	str	r3, [r2, #80]	; 0x50
 80032f0:	e003      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80032fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003302:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003306:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800330a:	2300      	movs	r3, #0
 800330c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003310:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003314:	460b      	mov	r3, r1
 8003316:	4313      	orrs	r3, r2
 8003318:	d053      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800331a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800331e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003322:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003326:	d035      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003328:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800332c:	d82e      	bhi.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800332e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003332:	d031      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003334:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003338:	d828      	bhi.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800333a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800333e:	d01a      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003340:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003344:	d822      	bhi.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800334a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800334e:	d007      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003350:	e01c      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003352:	4b32      	ldr	r3, [pc, #200]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	4a31      	ldr	r2, [pc, #196]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800335c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800335e:	e01c      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003364:	3308      	adds	r3, #8
 8003366:	2100      	movs	r1, #0
 8003368:	4618      	mov	r0, r3
 800336a:	f001 fb83 	bl	8004a74 <RCCEx_PLL2_Config>
 800336e:	4603      	mov	r3, r0
 8003370:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003374:	e011      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800337a:	3328      	adds	r3, #40	; 0x28
 800337c:	2100      	movs	r1, #0
 800337e:	4618      	mov	r0, r3
 8003380:	f001 fc2a 	bl	8004bd8 <RCCEx_PLL3_Config>
 8003384:	4603      	mov	r3, r0
 8003386:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800338a:	e006      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003392:	e002      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003394:	bf00      	nop
 8003396:	e000      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003398:	bf00      	nop
    }

    if (ret == HAL_OK)
 800339a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10b      	bne.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80033a2:	4b1e      	ldr	r3, [pc, #120]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80033aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80033b2:	4a1a      	ldr	r2, [pc, #104]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033b4:	430b      	orrs	r3, r1
 80033b6:	6593      	str	r3, [r2, #88]	; 0x58
 80033b8:	e003      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80033c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ca:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80033ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80033d2:	2300      	movs	r3, #0
 80033d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80033d8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80033dc:	460b      	mov	r3, r1
 80033de:	4313      	orrs	r3, r2
 80033e0:	d056      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80033e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80033ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033ee:	d038      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80033f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033f4:	d831      	bhi.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80033f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033fa:	d034      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80033fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003400:	d82b      	bhi.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003402:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003406:	d01d      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003408:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800340c:	d825      	bhi.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800340e:	2b00      	cmp	r3, #0
 8003410:	d006      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003412:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003416:	d00a      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003418:	e01f      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800341a:	bf00      	nop
 800341c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003420:	4ba2      	ldr	r3, [pc, #648]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	4aa1      	ldr	r2, [pc, #644]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003426:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800342a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800342c:	e01c      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800342e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003432:	3308      	adds	r3, #8
 8003434:	2100      	movs	r1, #0
 8003436:	4618      	mov	r0, r3
 8003438:	f001 fb1c 	bl	8004a74 <RCCEx_PLL2_Config>
 800343c:	4603      	mov	r3, r0
 800343e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003442:	e011      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003444:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003448:	3328      	adds	r3, #40	; 0x28
 800344a:	2100      	movs	r1, #0
 800344c:	4618      	mov	r0, r3
 800344e:	f001 fbc3 	bl	8004bd8 <RCCEx_PLL3_Config>
 8003452:	4603      	mov	r3, r0
 8003454:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003458:	e006      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003460:	e002      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003462:	bf00      	nop
 8003464:	e000      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003466:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003468:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10b      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003470:	4b8e      	ldr	r3, [pc, #568]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003474:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800347c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003480:	4a8a      	ldr	r2, [pc, #552]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003482:	430b      	orrs	r3, r1
 8003484:	6593      	str	r3, [r2, #88]	; 0x58
 8003486:	e003      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003488:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800348c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003498:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800349c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80034a0:	2300      	movs	r3, #0
 80034a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80034a6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80034aa:	460b      	mov	r3, r1
 80034ac:	4313      	orrs	r3, r2
 80034ae:	d03a      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80034b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b6:	2b30      	cmp	r3, #48	; 0x30
 80034b8:	d01f      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x416>
 80034ba:	2b30      	cmp	r3, #48	; 0x30
 80034bc:	d819      	bhi.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80034be:	2b20      	cmp	r3, #32
 80034c0:	d00c      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80034c2:	2b20      	cmp	r3, #32
 80034c4:	d815      	bhi.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d019      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80034ca:	2b10      	cmp	r3, #16
 80034cc:	d111      	bne.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034ce:	4b77      	ldr	r3, [pc, #476]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d2:	4a76      	ldr	r2, [pc, #472]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80034da:	e011      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034e0:	3308      	adds	r3, #8
 80034e2:	2102      	movs	r1, #2
 80034e4:	4618      	mov	r0, r3
 80034e6:	f001 fac5 	bl	8004a74 <RCCEx_PLL2_Config>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80034f0:	e006      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034f8:	e002      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80034fa:	bf00      	nop
 80034fc:	e000      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80034fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003500:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10a      	bne.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003508:	4b68      	ldr	r3, [pc, #416]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800350a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800350c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003516:	4a65      	ldr	r2, [pc, #404]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003518:	430b      	orrs	r3, r1
 800351a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800351c:	e003      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800351e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003522:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800352a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003532:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003536:	2300      	movs	r3, #0
 8003538:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800353c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003540:	460b      	mov	r3, r1
 8003542:	4313      	orrs	r3, r2
 8003544:	d051      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800354a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800354c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003550:	d035      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003552:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003556:	d82e      	bhi.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003558:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800355c:	d031      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800355e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003562:	d828      	bhi.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003568:	d01a      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800356a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800356e:	d822      	bhi.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003578:	d007      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800357a:	e01c      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800357c:	4b4b      	ldr	r3, [pc, #300]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003580:	4a4a      	ldr	r2, [pc, #296]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003586:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003588:	e01c      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800358a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800358e:	3308      	adds	r3, #8
 8003590:	2100      	movs	r1, #0
 8003592:	4618      	mov	r0, r3
 8003594:	f001 fa6e 	bl	8004a74 <RCCEx_PLL2_Config>
 8003598:	4603      	mov	r3, r0
 800359a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800359e:	e011      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035a4:	3328      	adds	r3, #40	; 0x28
 80035a6:	2100      	movs	r1, #0
 80035a8:	4618      	mov	r0, r3
 80035aa:	f001 fb15 	bl	8004bd8 <RCCEx_PLL3_Config>
 80035ae:	4603      	mov	r3, r0
 80035b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80035b4:	e006      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035bc:	e002      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80035be:	bf00      	nop
 80035c0:	e000      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80035c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10a      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80035cc:	4b37      	ldr	r3, [pc, #220]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80035d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035da:	4a34      	ldr	r2, [pc, #208]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035dc:	430b      	orrs	r3, r1
 80035de:	6513      	str	r3, [r2, #80]	; 0x50
 80035e0:	e003      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80035ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80035f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035fa:	2300      	movs	r3, #0
 80035fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003600:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003604:	460b      	mov	r3, r1
 8003606:	4313      	orrs	r3, r2
 8003608:	d056      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800360a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800360e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003610:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003614:	d033      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003616:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800361a:	d82c      	bhi.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800361c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003620:	d02f      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003622:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003626:	d826      	bhi.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003628:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800362c:	d02b      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800362e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003632:	d820      	bhi.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003634:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003638:	d012      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800363a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800363e:	d81a      	bhi.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003640:	2b00      	cmp	r3, #0
 8003642:	d022      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003648:	d115      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800364a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800364e:	3308      	adds	r3, #8
 8003650:	2101      	movs	r1, #1
 8003652:	4618      	mov	r0, r3
 8003654:	f001 fa0e 	bl	8004a74 <RCCEx_PLL2_Config>
 8003658:	4603      	mov	r3, r0
 800365a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800365e:	e015      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003664:	3328      	adds	r3, #40	; 0x28
 8003666:	2101      	movs	r1, #1
 8003668:	4618      	mov	r0, r3
 800366a:	f001 fab5 	bl	8004bd8 <RCCEx_PLL3_Config>
 800366e:	4603      	mov	r3, r0
 8003670:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003674:	e00a      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800367c:	e006      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800367e:	bf00      	nop
 8003680:	e004      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003682:	bf00      	nop
 8003684:	e002      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003686:	bf00      	nop
 8003688:	e000      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800368a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800368c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10d      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003694:	4b05      	ldr	r3, [pc, #20]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003698:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800369c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036a2:	4a02      	ldr	r2, [pc, #8]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036a4:	430b      	orrs	r3, r1
 80036a6:	6513      	str	r3, [r2, #80]	; 0x50
 80036a8:	e006      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80036aa:	bf00      	nop
 80036ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80036b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80036c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80036c8:	2300      	movs	r3, #0
 80036ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80036ce:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80036d2:	460b      	mov	r3, r1
 80036d4:	4313      	orrs	r3, r2
 80036d6:	d055      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80036d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80036e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036e4:	d033      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80036e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036ea:	d82c      	bhi.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80036ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f0:	d02f      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80036f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f6:	d826      	bhi.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80036f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036fc:	d02b      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80036fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003702:	d820      	bhi.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003704:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003708:	d012      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800370a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800370e:	d81a      	bhi.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003710:	2b00      	cmp	r3, #0
 8003712:	d022      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003714:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003718:	d115      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800371a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800371e:	3308      	adds	r3, #8
 8003720:	2101      	movs	r1, #1
 8003722:	4618      	mov	r0, r3
 8003724:	f001 f9a6 	bl	8004a74 <RCCEx_PLL2_Config>
 8003728:	4603      	mov	r3, r0
 800372a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800372e:	e015      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003734:	3328      	adds	r3, #40	; 0x28
 8003736:	2101      	movs	r1, #1
 8003738:	4618      	mov	r0, r3
 800373a:	f001 fa4d 	bl	8004bd8 <RCCEx_PLL3_Config>
 800373e:	4603      	mov	r3, r0
 8003740:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003744:	e00a      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800374c:	e006      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800374e:	bf00      	nop
 8003750:	e004      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003752:	bf00      	nop
 8003754:	e002      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003756:	bf00      	nop
 8003758:	e000      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800375a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800375c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10b      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003764:	4ba3      	ldr	r3, [pc, #652]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003768:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800376c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003770:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003774:	4a9f      	ldr	r2, [pc, #636]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003776:	430b      	orrs	r3, r1
 8003778:	6593      	str	r3, [r2, #88]	; 0x58
 800377a:	e003      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800377c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003780:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003790:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003794:	2300      	movs	r3, #0
 8003796:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800379a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800379e:	460b      	mov	r3, r1
 80037a0:	4313      	orrs	r3, r2
 80037a2:	d037      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80037a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037ae:	d00e      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80037b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037b4:	d816      	bhi.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d018      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x708>
 80037ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037be:	d111      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c0:	4b8c      	ldr	r3, [pc, #560]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	4a8b      	ldr	r2, [pc, #556]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80037cc:	e00f      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037d2:	3308      	adds	r3, #8
 80037d4:	2101      	movs	r1, #1
 80037d6:	4618      	mov	r0, r3
 80037d8:	f001 f94c 	bl	8004a74 <RCCEx_PLL2_Config>
 80037dc:	4603      	mov	r3, r0
 80037de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80037e2:	e004      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037ea:	e000      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80037ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10a      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80037f6:	4b7f      	ldr	r3, [pc, #508]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037fa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80037fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003804:	4a7b      	ldr	r2, [pc, #492]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003806:	430b      	orrs	r3, r1
 8003808:	6513      	str	r3, [r2, #80]	; 0x50
 800380a:	e003      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800380c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003810:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003820:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003824:	2300      	movs	r3, #0
 8003826:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800382a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800382e:	460b      	mov	r3, r1
 8003830:	4313      	orrs	r3, r2
 8003832:	d039      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003834:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800383a:	2b03      	cmp	r3, #3
 800383c:	d81c      	bhi.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800383e:	a201      	add	r2, pc, #4	; (adr r2, 8003844 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003844:	08003881 	.word	0x08003881
 8003848:	08003855 	.word	0x08003855
 800384c:	08003863 	.word	0x08003863
 8003850:	08003881 	.word	0x08003881
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003854:	4b67      	ldr	r3, [pc, #412]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003858:	4a66      	ldr	r2, [pc, #408]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800385a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800385e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003860:	e00f      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003866:	3308      	adds	r3, #8
 8003868:	2102      	movs	r1, #2
 800386a:	4618      	mov	r0, r3
 800386c:	f001 f902 	bl	8004a74 <RCCEx_PLL2_Config>
 8003870:	4603      	mov	r3, r0
 8003872:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003876:	e004      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800387e:	e000      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003880:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003882:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10a      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800388a:	4b5a      	ldr	r3, [pc, #360]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800388c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800388e:	f023 0103 	bic.w	r1, r3, #3
 8003892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003898:	4a56      	ldr	r2, [pc, #344]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800389a:	430b      	orrs	r3, r1
 800389c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800389e:	e003      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80038b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038b8:	2300      	movs	r3, #0
 80038ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80038be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80038c2:	460b      	mov	r3, r1
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f000 809f 	beq.w	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038ca:	4b4b      	ldr	r3, [pc, #300]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a4a      	ldr	r2, [pc, #296]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80038d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038d6:	f7fd fb6b 	bl	8000fb0 <HAL_GetTick>
 80038da:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038de:	e00b      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038e0:	f7fd fb66 	bl	8000fb0 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b64      	cmp	r3, #100	; 0x64
 80038ee:	d903      	bls.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80038f6:	e005      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038f8:	4b3f      	ldr	r3, [pc, #252]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0ed      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003904:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003908:	2b00      	cmp	r3, #0
 800390a:	d179      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800390c:	4b39      	ldr	r3, [pc, #228]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800390e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003914:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003918:	4053      	eors	r3, r2
 800391a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800391e:	2b00      	cmp	r3, #0
 8003920:	d015      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003922:	4b34      	ldr	r3, [pc, #208]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800392a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800392e:	4b31      	ldr	r3, [pc, #196]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003932:	4a30      	ldr	r2, [pc, #192]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003938:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800393a:	4b2e      	ldr	r3, [pc, #184]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800393c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393e:	4a2d      	ldr	r2, [pc, #180]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003940:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003944:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003946:	4a2b      	ldr	r2, [pc, #172]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003948:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800394c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800394e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003952:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800395a:	d118      	bne.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395c:	f7fd fb28 	bl	8000fb0 <HAL_GetTick>
 8003960:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003964:	e00d      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003966:	f7fd fb23 	bl	8000fb0 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003970:	1ad2      	subs	r2, r2, r3
 8003972:	f241 3388 	movw	r3, #5000	; 0x1388
 8003976:	429a      	cmp	r2, r3
 8003978:	d903      	bls.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003980:	e005      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003982:	4b1c      	ldr	r3, [pc, #112]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0eb      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800398e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003992:	2b00      	cmp	r3, #0
 8003994:	d129      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800399a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800399e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039a6:	d10e      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80039a8:	4b12      	ldr	r3, [pc, #72]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80039b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80039b8:	091a      	lsrs	r2, r3, #4
 80039ba:	4b10      	ldr	r3, [pc, #64]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80039bc:	4013      	ands	r3, r2
 80039be:	4a0d      	ldr	r2, [pc, #52]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039c0:	430b      	orrs	r3, r1
 80039c2:	6113      	str	r3, [r2, #16]
 80039c4:	e005      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80039c6:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	4a0a      	ldr	r2, [pc, #40]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80039d0:	6113      	str	r3, [r2, #16]
 80039d2:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039d4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80039d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80039de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e2:	4a04      	ldr	r2, [pc, #16]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039e4:	430b      	orrs	r3, r1
 80039e6:	6713      	str	r3, [r2, #112]	; 0x70
 80039e8:	e00e      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80039f2:	e009      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80039f4:	58024400 	.word	0x58024400
 80039f8:	58024800 	.word	0x58024800
 80039fc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a10:	f002 0301 	and.w	r3, r2, #1
 8003a14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a1e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a22:	460b      	mov	r3, r1
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f000 8089 	beq.w	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a30:	2b28      	cmp	r3, #40	; 0x28
 8003a32:	d86b      	bhi.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003a34:	a201      	add	r2, pc, #4	; (adr r2, 8003a3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3a:	bf00      	nop
 8003a3c:	08003b15 	.word	0x08003b15
 8003a40:	08003b0d 	.word	0x08003b0d
 8003a44:	08003b0d 	.word	0x08003b0d
 8003a48:	08003b0d 	.word	0x08003b0d
 8003a4c:	08003b0d 	.word	0x08003b0d
 8003a50:	08003b0d 	.word	0x08003b0d
 8003a54:	08003b0d 	.word	0x08003b0d
 8003a58:	08003b0d 	.word	0x08003b0d
 8003a5c:	08003ae1 	.word	0x08003ae1
 8003a60:	08003b0d 	.word	0x08003b0d
 8003a64:	08003b0d 	.word	0x08003b0d
 8003a68:	08003b0d 	.word	0x08003b0d
 8003a6c:	08003b0d 	.word	0x08003b0d
 8003a70:	08003b0d 	.word	0x08003b0d
 8003a74:	08003b0d 	.word	0x08003b0d
 8003a78:	08003b0d 	.word	0x08003b0d
 8003a7c:	08003af7 	.word	0x08003af7
 8003a80:	08003b0d 	.word	0x08003b0d
 8003a84:	08003b0d 	.word	0x08003b0d
 8003a88:	08003b0d 	.word	0x08003b0d
 8003a8c:	08003b0d 	.word	0x08003b0d
 8003a90:	08003b0d 	.word	0x08003b0d
 8003a94:	08003b0d 	.word	0x08003b0d
 8003a98:	08003b0d 	.word	0x08003b0d
 8003a9c:	08003b15 	.word	0x08003b15
 8003aa0:	08003b0d 	.word	0x08003b0d
 8003aa4:	08003b0d 	.word	0x08003b0d
 8003aa8:	08003b0d 	.word	0x08003b0d
 8003aac:	08003b0d 	.word	0x08003b0d
 8003ab0:	08003b0d 	.word	0x08003b0d
 8003ab4:	08003b0d 	.word	0x08003b0d
 8003ab8:	08003b0d 	.word	0x08003b0d
 8003abc:	08003b15 	.word	0x08003b15
 8003ac0:	08003b0d 	.word	0x08003b0d
 8003ac4:	08003b0d 	.word	0x08003b0d
 8003ac8:	08003b0d 	.word	0x08003b0d
 8003acc:	08003b0d 	.word	0x08003b0d
 8003ad0:	08003b0d 	.word	0x08003b0d
 8003ad4:	08003b0d 	.word	0x08003b0d
 8003ad8:	08003b0d 	.word	0x08003b0d
 8003adc:	08003b15 	.word	0x08003b15
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ae4:	3308      	adds	r3, #8
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 ffc3 	bl	8004a74 <RCCEx_PLL2_Config>
 8003aee:	4603      	mov	r3, r0
 8003af0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003af4:	e00f      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003afa:	3328      	adds	r3, #40	; 0x28
 8003afc:	2101      	movs	r1, #1
 8003afe:	4618      	mov	r0, r3
 8003b00:	f001 f86a 	bl	8004bd8 <RCCEx_PLL3_Config>
 8003b04:	4603      	mov	r3, r0
 8003b06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003b0a:	e004      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b12:	e000      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003b14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10a      	bne.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003b1e:	4bbf      	ldr	r3, [pc, #764]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b22:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b2c:	4abb      	ldr	r2, [pc, #748]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b2e:	430b      	orrs	r3, r1
 8003b30:	6553      	str	r3, [r2, #84]	; 0x54
 8003b32:	e003      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b44:	f002 0302 	and.w	r3, r2, #2
 8003b48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003b52:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003b56:	460b      	mov	r3, r1
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	d041      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b62:	2b05      	cmp	r3, #5
 8003b64:	d824      	bhi.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003b66:	a201      	add	r2, pc, #4	; (adr r2, 8003b6c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6c:	08003bb9 	.word	0x08003bb9
 8003b70:	08003b85 	.word	0x08003b85
 8003b74:	08003b9b 	.word	0x08003b9b
 8003b78:	08003bb9 	.word	0x08003bb9
 8003b7c:	08003bb9 	.word	0x08003bb9
 8003b80:	08003bb9 	.word	0x08003bb9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b88:	3308      	adds	r3, #8
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 ff71 	bl	8004a74 <RCCEx_PLL2_Config>
 8003b92:	4603      	mov	r3, r0
 8003b94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b98:	e00f      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b9e:	3328      	adds	r3, #40	; 0x28
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f001 f818 	bl	8004bd8 <RCCEx_PLL3_Config>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003bae:	e004      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003bb6:	e000      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003bb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10a      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003bc2:	4b96      	ldr	r3, [pc, #600]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc6:	f023 0107 	bic.w	r1, r3, #7
 8003bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bd0:	4a92      	ldr	r2, [pc, #584]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003bd2:	430b      	orrs	r3, r1
 8003bd4:	6553      	str	r3, [r2, #84]	; 0x54
 8003bd6:	e003      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bdc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be8:	f002 0304 	and.w	r3, r2, #4
 8003bec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bf6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	d044      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c08:	2b05      	cmp	r3, #5
 8003c0a:	d825      	bhi.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003c0c:	a201      	add	r2, pc, #4	; (adr r2, 8003c14 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c12:	bf00      	nop
 8003c14:	08003c61 	.word	0x08003c61
 8003c18:	08003c2d 	.word	0x08003c2d
 8003c1c:	08003c43 	.word	0x08003c43
 8003c20:	08003c61 	.word	0x08003c61
 8003c24:	08003c61 	.word	0x08003c61
 8003c28:	08003c61 	.word	0x08003c61
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c30:	3308      	adds	r3, #8
 8003c32:	2101      	movs	r1, #1
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 ff1d 	bl	8004a74 <RCCEx_PLL2_Config>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003c40:	e00f      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c46:	3328      	adds	r3, #40	; 0x28
 8003c48:	2101      	movs	r1, #1
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 ffc4 	bl	8004bd8 <RCCEx_PLL3_Config>
 8003c50:	4603      	mov	r3, r0
 8003c52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003c56:	e004      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c5e:	e000      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003c60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10b      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c6a:	4b6c      	ldr	r3, [pc, #432]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6e:	f023 0107 	bic.w	r1, r3, #7
 8003c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c7a:	4a68      	ldr	r2, [pc, #416]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c80:	e003      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c92:	f002 0320 	and.w	r3, r2, #32
 8003c96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ca0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	d055      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cb6:	d033      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003cb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cbc:	d82c      	bhi.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc2:	d02f      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc8:	d826      	bhi.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003cca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cce:	d02b      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003cd0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cd4:	d820      	bhi.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003cd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cda:	d012      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003cdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ce0:	d81a      	bhi.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d022      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003ce6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cea:	d115      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cf0:	3308      	adds	r3, #8
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 febd 	bl	8004a74 <RCCEx_PLL2_Config>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003d00:	e015      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d06:	3328      	adds	r3, #40	; 0x28
 8003d08:	2102      	movs	r1, #2
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 ff64 	bl	8004bd8 <RCCEx_PLL3_Config>
 8003d10:	4603      	mov	r3, r0
 8003d12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003d16:	e00a      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d1e:	e006      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003d20:	bf00      	nop
 8003d22:	e004      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003d24:	bf00      	nop
 8003d26:	e002      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003d28:	bf00      	nop
 8003d2a:	e000      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003d2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10b      	bne.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d36:	4b39      	ldr	r3, [pc, #228]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d46:	4a35      	ldr	r2, [pc, #212]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d48:	430b      	orrs	r3, r1
 8003d4a:	6553      	str	r3, [r2, #84]	; 0x54
 8003d4c:	e003      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003d62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d66:	2300      	movs	r3, #0
 8003d68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003d6c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003d70:	460b      	mov	r3, r1
 8003d72:	4313      	orrs	r3, r2
 8003d74:	d058      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d7e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003d82:	d033      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003d84:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003d88:	d82c      	bhi.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d8e:	d02f      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d94:	d826      	bhi.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003d96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d9a:	d02b      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003d9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003da0:	d820      	bhi.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003da2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003da6:	d012      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003da8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dac:	d81a      	bhi.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d022      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db6:	d115      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dbc:	3308      	adds	r3, #8
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 fe57 	bl	8004a74 <RCCEx_PLL2_Config>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003dcc:	e015      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dd2:	3328      	adds	r3, #40	; 0x28
 8003dd4:	2102      	movs	r1, #2
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 fefe 	bl	8004bd8 <RCCEx_PLL3_Config>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003de2:	e00a      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003dea:	e006      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003dec:	bf00      	nop
 8003dee:	e004      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003df0:	bf00      	nop
 8003df2:	e002      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003df4:	bf00      	nop
 8003df6:	e000      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003df8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10e      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e02:	4b06      	ldr	r3, [pc, #24]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e06:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e12:	4a02      	ldr	r2, [pc, #8]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e14:	430b      	orrs	r3, r1
 8003e16:	6593      	str	r3, [r2, #88]	; 0x58
 8003e18:	e006      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003e1a:	bf00      	nop
 8003e1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e30:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003e34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e38:	2300      	movs	r3, #0
 8003e3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e3e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003e42:	460b      	mov	r3, r1
 8003e44:	4313      	orrs	r3, r2
 8003e46:	d055      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e50:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e54:	d033      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003e56:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e5a:	d82c      	bhi.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e60:	d02f      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e66:	d826      	bhi.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e68:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e6c:	d02b      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003e6e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e72:	d820      	bhi.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e78:	d012      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003e7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e7e:	d81a      	bhi.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d022      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003e84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e88:	d115      	bne.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e8e:	3308      	adds	r3, #8
 8003e90:	2100      	movs	r1, #0
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 fdee 	bl	8004a74 <RCCEx_PLL2_Config>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e9e:	e015      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ea4:	3328      	adds	r3, #40	; 0x28
 8003ea6:	2102      	movs	r1, #2
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 fe95 	bl	8004bd8 <RCCEx_PLL3_Config>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003eb4:	e00a      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ebc:	e006      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003ebe:	bf00      	nop
 8003ec0:	e004      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003ec2:	bf00      	nop
 8003ec4:	e002      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003ec6:	bf00      	nop
 8003ec8:	e000      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003eca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ecc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10b      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003ed4:	4ba1      	ldr	r3, [pc, #644]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ee0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ee4:	4a9d      	ldr	r2, [pc, #628]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ee6:	430b      	orrs	r3, r1
 8003ee8:	6593      	str	r3, [r2, #88]	; 0x58
 8003eea:	e003      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ef0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efc:	f002 0308 	and.w	r3, r2, #8
 8003f00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f04:	2300      	movs	r3, #0
 8003f06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f0a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4313      	orrs	r3, r2
 8003f12:	d01e      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f20:	d10c      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f26:	3328      	adds	r3, #40	; 0x28
 8003f28:	2102      	movs	r1, #2
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 fe54 	bl	8004bd8 <RCCEx_PLL3_Config>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d002      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003f3c:	4b87      	ldr	r3, [pc, #540]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f40:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f4c:	4a83      	ldr	r2, [pc, #524]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f4e:	430b      	orrs	r3, r1
 8003f50:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5a:	f002 0310 	and.w	r3, r2, #16
 8003f5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f62:	2300      	movs	r3, #0
 8003f64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003f68:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	d01e      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f7e:	d10c      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f84:	3328      	adds	r3, #40	; 0x28
 8003f86:	2102      	movs	r1, #2
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 fe25 	bl	8004bd8 <RCCEx_PLL3_Config>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d002      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f9a:	4b70      	ldr	r3, [pc, #448]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003faa:	4a6c      	ldr	r2, [pc, #432]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fac:	430b      	orrs	r3, r1
 8003fae:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003fbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003fc6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	d03e      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003fd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fdc:	d022      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003fde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fe2:	d81b      	bhi.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fec:	d00b      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003fee:	e015      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ff4:	3308      	adds	r3, #8
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 fd3b 	bl	8004a74 <RCCEx_PLL2_Config>
 8003ffe:	4603      	mov	r3, r0
 8004000:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004004:	e00f      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800400a:	3328      	adds	r3, #40	; 0x28
 800400c:	2102      	movs	r1, #2
 800400e:	4618      	mov	r0, r3
 8004010:	f000 fde2 	bl	8004bd8 <RCCEx_PLL3_Config>
 8004014:	4603      	mov	r3, r0
 8004016:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800401a:	e004      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004022:	e000      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004024:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004026:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10b      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800402e:	4b4b      	ldr	r3, [pc, #300]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004032:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800403a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800403e:	4a47      	ldr	r2, [pc, #284]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004040:	430b      	orrs	r3, r1
 8004042:	6593      	str	r3, [r2, #88]	; 0x58
 8004044:	e003      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004046:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800404a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800404e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004056:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800405a:	67bb      	str	r3, [r7, #120]	; 0x78
 800405c:	2300      	movs	r3, #0
 800405e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004060:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004064:	460b      	mov	r3, r1
 8004066:	4313      	orrs	r3, r2
 8004068:	d03b      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800406a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800406e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004072:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004076:	d01f      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004078:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800407c:	d818      	bhi.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800407e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004082:	d003      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004084:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004088:	d007      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800408a:	e011      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800408c:	4b33      	ldr	r3, [pc, #204]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	4a32      	ldr	r2, [pc, #200]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004096:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004098:	e00f      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800409a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800409e:	3328      	adds	r3, #40	; 0x28
 80040a0:	2101      	movs	r1, #1
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 fd98 	bl	8004bd8 <RCCEx_PLL3_Config>
 80040a8:	4603      	mov	r3, r0
 80040aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80040ae:	e004      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040b6:	e000      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80040b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10b      	bne.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040c2:	4b26      	ldr	r3, [pc, #152]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80040ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d2:	4a22      	ldr	r2, [pc, #136]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040d4:	430b      	orrs	r3, r1
 80040d6:	6553      	str	r3, [r2, #84]	; 0x54
 80040d8:	e003      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80040e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ea:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80040ee:	673b      	str	r3, [r7, #112]	; 0x70
 80040f0:	2300      	movs	r3, #0
 80040f2:	677b      	str	r3, [r7, #116]	; 0x74
 80040f4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80040f8:	460b      	mov	r3, r1
 80040fa:	4313      	orrs	r3, r2
 80040fc:	d034      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80040fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800410c:	d007      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800410e:	e011      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004110:	4b12      	ldr	r3, [pc, #72]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004114:	4a11      	ldr	r2, [pc, #68]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004116:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800411a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800411c:	e00e      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800411e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004122:	3308      	adds	r3, #8
 8004124:	2102      	movs	r1, #2
 8004126:	4618      	mov	r0, r3
 8004128:	f000 fca4 	bl	8004a74 <RCCEx_PLL2_Config>
 800412c:	4603      	mov	r3, r0
 800412e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004132:	e003      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800413a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800413c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10d      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004144:	4b05      	ldr	r3, [pc, #20]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004148:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800414c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004152:	4a02      	ldr	r2, [pc, #8]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004154:	430b      	orrs	r3, r1
 8004156:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004158:	e006      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800415a:	bf00      	nop
 800415c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004160:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004164:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004168:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800416c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004170:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004174:	66bb      	str	r3, [r7, #104]	; 0x68
 8004176:	2300      	movs	r3, #0
 8004178:	66fb      	str	r3, [r7, #108]	; 0x6c
 800417a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800417e:	460b      	mov	r3, r1
 8004180:	4313      	orrs	r3, r2
 8004182:	d00c      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004188:	3328      	adds	r3, #40	; 0x28
 800418a:	2102      	movs	r1, #2
 800418c:	4618      	mov	r0, r3
 800418e:	f000 fd23 	bl	8004bd8 <RCCEx_PLL3_Config>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800419e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80041aa:	663b      	str	r3, [r7, #96]	; 0x60
 80041ac:	2300      	movs	r3, #0
 80041ae:	667b      	str	r3, [r7, #100]	; 0x64
 80041b0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80041b4:	460b      	mov	r3, r1
 80041b6:	4313      	orrs	r3, r2
 80041b8:	d038      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80041ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041c6:	d018      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80041c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041cc:	d811      	bhi.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80041ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d2:	d014      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80041d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d8:	d80b      	bhi.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d011      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80041de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041e2:	d106      	bne.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041e4:	4bc3      	ldr	r3, [pc, #780]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	4ac2      	ldr	r2, [pc, #776]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80041f0:	e008      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80041f8:	e004      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80041fa:	bf00      	nop
 80041fc:	e002      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80041fe:	bf00      	nop
 8004200:	e000      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004202:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004204:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10b      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800420c:	4bb9      	ldr	r3, [pc, #740]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800420e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004210:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004218:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800421c:	4ab5      	ldr	r2, [pc, #724]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800421e:	430b      	orrs	r3, r1
 8004220:	6553      	str	r3, [r2, #84]	; 0x54
 8004222:	e003      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004224:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004228:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800422c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004234:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004238:	65bb      	str	r3, [r7, #88]	; 0x58
 800423a:	2300      	movs	r3, #0
 800423c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800423e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004242:	460b      	mov	r3, r1
 8004244:	4313      	orrs	r3, r2
 8004246:	d009      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004248:	4baa      	ldr	r3, [pc, #680]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800424a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800424c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004250:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004256:	4aa7      	ldr	r2, [pc, #668]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004258:	430b      	orrs	r3, r1
 800425a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800425c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004264:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004268:	653b      	str	r3, [r7, #80]	; 0x50
 800426a:	2300      	movs	r3, #0
 800426c:	657b      	str	r3, [r7, #84]	; 0x54
 800426e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004272:	460b      	mov	r3, r1
 8004274:	4313      	orrs	r3, r2
 8004276:	d00a      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004278:	4b9e      	ldr	r3, [pc, #632]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004284:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004288:	4a9a      	ldr	r2, [pc, #616]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800428a:	430b      	orrs	r3, r1
 800428c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800428e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004296:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800429a:	64bb      	str	r3, [r7, #72]	; 0x48
 800429c:	2300      	movs	r3, #0
 800429e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042a0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80042a4:	460b      	mov	r3, r1
 80042a6:	4313      	orrs	r3, r2
 80042a8:	d009      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042aa:	4b92      	ldr	r3, [pc, #584]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ae:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80042b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042b8:	4a8e      	ldr	r2, [pc, #568]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042ba:	430b      	orrs	r3, r1
 80042bc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80042be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80042ca:	643b      	str	r3, [r7, #64]	; 0x40
 80042cc:	2300      	movs	r3, #0
 80042ce:	647b      	str	r3, [r7, #68]	; 0x44
 80042d0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80042d4:	460b      	mov	r3, r1
 80042d6:	4313      	orrs	r3, r2
 80042d8:	d00e      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042da:	4b86      	ldr	r3, [pc, #536]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	4a85      	ldr	r2, [pc, #532]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80042e4:	6113      	str	r3, [r2, #16]
 80042e6:	4b83      	ldr	r3, [pc, #524]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042e8:	6919      	ldr	r1, [r3, #16]
 80042ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80042f2:	4a80      	ldr	r2, [pc, #512]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042f4:	430b      	orrs	r3, r1
 80042f6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80042f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004300:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004304:	63bb      	str	r3, [r7, #56]	; 0x38
 8004306:	2300      	movs	r3, #0
 8004308:	63fb      	str	r3, [r7, #60]	; 0x3c
 800430a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800430e:	460b      	mov	r3, r1
 8004310:	4313      	orrs	r3, r2
 8004312:	d009      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004314:	4b77      	ldr	r3, [pc, #476]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004318:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800431c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004322:	4a74      	ldr	r2, [pc, #464]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004324:	430b      	orrs	r3, r1
 8004326:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800432c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004330:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004334:	633b      	str	r3, [r7, #48]	; 0x30
 8004336:	2300      	movs	r3, #0
 8004338:	637b      	str	r3, [r7, #52]	; 0x34
 800433a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800433e:	460b      	mov	r3, r1
 8004340:	4313      	orrs	r3, r2
 8004342:	d00a      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004344:	4b6b      	ldr	r3, [pc, #428]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004348:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800434c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004350:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004354:	4a67      	ldr	r2, [pc, #412]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004356:	430b      	orrs	r3, r1
 8004358:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800435a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800435e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004362:	2100      	movs	r1, #0
 8004364:	62b9      	str	r1, [r7, #40]	; 0x28
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800436c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004370:	460b      	mov	r3, r1
 8004372:	4313      	orrs	r3, r2
 8004374:	d011      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800437a:	3308      	adds	r3, #8
 800437c:	2100      	movs	r1, #0
 800437e:	4618      	mov	r0, r3
 8004380:	f000 fb78 	bl	8004a74 <RCCEx_PLL2_Config>
 8004384:	4603      	mov	r3, r0
 8004386:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800438a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004392:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004396:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800439a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800439e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a2:	2100      	movs	r1, #0
 80043a4:	6239      	str	r1, [r7, #32]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	627b      	str	r3, [r7, #36]	; 0x24
 80043ac:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80043b0:	460b      	mov	r3, r1
 80043b2:	4313      	orrs	r3, r2
 80043b4:	d011      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ba:	3308      	adds	r3, #8
 80043bc:	2101      	movs	r1, #1
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fb58 	bl	8004a74 <RCCEx_PLL2_Config>
 80043c4:	4603      	mov	r3, r0
 80043c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80043ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80043da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e2:	2100      	movs	r1, #0
 80043e4:	61b9      	str	r1, [r7, #24]
 80043e6:	f003 0304 	and.w	r3, r3, #4
 80043ea:	61fb      	str	r3, [r7, #28]
 80043ec:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80043f0:	460b      	mov	r3, r1
 80043f2:	4313      	orrs	r3, r2
 80043f4:	d011      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043fa:	3308      	adds	r3, #8
 80043fc:	2102      	movs	r1, #2
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 fb38 	bl	8004a74 <RCCEx_PLL2_Config>
 8004404:	4603      	mov	r3, r0
 8004406:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800440a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004412:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004416:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800441a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800441e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004422:	2100      	movs	r1, #0
 8004424:	6139      	str	r1, [r7, #16]
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004430:	460b      	mov	r3, r1
 8004432:	4313      	orrs	r3, r2
 8004434:	d011      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800443a:	3328      	adds	r3, #40	; 0x28
 800443c:	2100      	movs	r1, #0
 800443e:	4618      	mov	r0, r3
 8004440:	f000 fbca 	bl	8004bd8 <RCCEx_PLL3_Config>
 8004444:	4603      	mov	r3, r0
 8004446:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800444a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004452:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004456:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800445a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800445e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004462:	2100      	movs	r1, #0
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	f003 0310 	and.w	r3, r3, #16
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004470:	460b      	mov	r3, r1
 8004472:	4313      	orrs	r3, r2
 8004474:	d011      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800447a:	3328      	adds	r3, #40	; 0x28
 800447c:	2101      	movs	r1, #1
 800447e:	4618      	mov	r0, r3
 8004480:	f000 fbaa 	bl	8004bd8 <RCCEx_PLL3_Config>
 8004484:	4603      	mov	r3, r0
 8004486:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800448a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004492:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004496:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800449a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800449e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a2:	2100      	movs	r1, #0
 80044a4:	6039      	str	r1, [r7, #0]
 80044a6:	f003 0320 	and.w	r3, r3, #32
 80044aa:	607b      	str	r3, [r7, #4]
 80044ac:	e9d7 1200 	ldrd	r1, r2, [r7]
 80044b0:	460b      	mov	r3, r1
 80044b2:	4313      	orrs	r3, r2
 80044b4:	d011      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ba:	3328      	adds	r3, #40	; 0x28
 80044bc:	2102      	movs	r1, #2
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 fb8a 	bl	8004bd8 <RCCEx_PLL3_Config>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80044ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80044da:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	e000      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80044ee:	46bd      	mov	sp, r7
 80044f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044f4:	58024400 	.word	0x58024400

080044f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80044fc:	f7fe fd96 	bl	800302c <HAL_RCC_GetHCLKFreq>
 8004500:	4602      	mov	r2, r0
 8004502:	4b06      	ldr	r3, [pc, #24]	; (800451c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	091b      	lsrs	r3, r3, #4
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	4904      	ldr	r1, [pc, #16]	; (8004520 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800450e:	5ccb      	ldrb	r3, [r1, r3]
 8004510:	f003 031f 	and.w	r3, r3, #31
 8004514:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004518:	4618      	mov	r0, r3
 800451a:	bd80      	pop	{r7, pc}
 800451c:	58024400 	.word	0x58024400
 8004520:	080078e8 	.word	0x080078e8

08004524 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004524:	b480      	push	{r7}
 8004526:	b089      	sub	sp, #36	; 0x24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800452c:	4ba1      	ldr	r3, [pc, #644]	; (80047b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800452e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004530:	f003 0303 	and.w	r3, r3, #3
 8004534:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004536:	4b9f      	ldr	r3, [pc, #636]	; (80047b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453a:	0b1b      	lsrs	r3, r3, #12
 800453c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004540:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004542:	4b9c      	ldr	r3, [pc, #624]	; (80047b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004546:	091b      	lsrs	r3, r3, #4
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800454e:	4b99      	ldr	r3, [pc, #612]	; (80047b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004552:	08db      	lsrs	r3, r3, #3
 8004554:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	fb02 f303 	mul.w	r3, r2, r3
 800455e:	ee07 3a90 	vmov	s15, r3
 8004562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004566:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 8111 	beq.w	8004794 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	2b02      	cmp	r3, #2
 8004576:	f000 8083 	beq.w	8004680 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	2b02      	cmp	r3, #2
 800457e:	f200 80a1 	bhi.w	80046c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d056      	beq.n	800463c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800458e:	e099      	b.n	80046c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004590:	4b88      	ldr	r3, [pc, #544]	; (80047b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0320 	and.w	r3, r3, #32
 8004598:	2b00      	cmp	r3, #0
 800459a:	d02d      	beq.n	80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800459c:	4b85      	ldr	r3, [pc, #532]	; (80047b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	08db      	lsrs	r3, r3, #3
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	4a84      	ldr	r2, [pc, #528]	; (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80045a8:	fa22 f303 	lsr.w	r3, r2, r3
 80045ac:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	ee07 3a90 	vmov	s15, r3
 80045b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	ee07 3a90 	vmov	s15, r3
 80045be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045c6:	4b7b      	ldr	r3, [pc, #492]	; (80047b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ce:	ee07 3a90 	vmov	s15, r3
 80045d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80045da:	eddf 5a78 	vldr	s11, [pc, #480]	; 80047bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80045f6:	e087      	b.n	8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	ee07 3a90 	vmov	s15, r3
 80045fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004602:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80047c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800460a:	4b6a      	ldr	r3, [pc, #424]	; (80047b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800460c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004612:	ee07 3a90 	vmov	s15, r3
 8004616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800461a:	ed97 6a03 	vldr	s12, [r7, #12]
 800461e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80047bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800462a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800462e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004636:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800463a:	e065      	b.n	8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	ee07 3a90 	vmov	s15, r3
 8004642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004646:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80047c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800464a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800464e:	4b59      	ldr	r3, [pc, #356]	; (80047b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004656:	ee07 3a90 	vmov	s15, r3
 800465a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800465e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004662:	eddf 5a56 	vldr	s11, [pc, #344]	; 80047bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800466a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800466e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800467a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800467e:	e043      	b.n	8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	ee07 3a90 	vmov	s15, r3
 8004686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80047c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800468e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004692:	4b48      	ldr	r3, [pc, #288]	; (80047b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800469a:	ee07 3a90 	vmov	s15, r3
 800469e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80046a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80047bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046c2:	e021      	b.n	8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	ee07 3a90 	vmov	s15, r3
 80046ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80047c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80046d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046d6:	4b37      	ldr	r3, [pc, #220]	; (80047b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046de:	ee07 3a90 	vmov	s15, r3
 80046e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80046ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 80047bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004702:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004706:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004708:	4b2a      	ldr	r3, [pc, #168]	; (80047b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800470a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470c:	0a5b      	lsrs	r3, r3, #9
 800470e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004712:	ee07 3a90 	vmov	s15, r3
 8004716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800471a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800471e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004722:	edd7 6a07 	vldr	s13, [r7, #28]
 8004726:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800472a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800472e:	ee17 2a90 	vmov	r2, s15
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004736:	4b1f      	ldr	r3, [pc, #124]	; (80047b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473a:	0c1b      	lsrs	r3, r3, #16
 800473c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004740:	ee07 3a90 	vmov	s15, r3
 8004744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004748:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800474c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004750:	edd7 6a07 	vldr	s13, [r7, #28]
 8004754:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800475c:	ee17 2a90 	vmov	r2, s15
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004764:	4b13      	ldr	r3, [pc, #76]	; (80047b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004768:	0e1b      	lsrs	r3, r3, #24
 800476a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800476e:	ee07 3a90 	vmov	s15, r3
 8004772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004776:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800477a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800477e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004782:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004786:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800478a:	ee17 2a90 	vmov	r2, s15
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004792:	e008      	b.n	80047a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	609a      	str	r2, [r3, #8]
}
 80047a6:	bf00      	nop
 80047a8:	3724      	adds	r7, #36	; 0x24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	58024400 	.word	0x58024400
 80047b8:	03d09000 	.word	0x03d09000
 80047bc:	46000000 	.word	0x46000000
 80047c0:	4c742400 	.word	0x4c742400
 80047c4:	4a742400 	.word	0x4a742400
 80047c8:	4bbebc20 	.word	0x4bbebc20

080047cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b089      	sub	sp, #36	; 0x24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047d4:	4ba1      	ldr	r3, [pc, #644]	; (8004a5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d8:	f003 0303 	and.w	r3, r3, #3
 80047dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80047de:	4b9f      	ldr	r3, [pc, #636]	; (8004a5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e2:	0d1b      	lsrs	r3, r3, #20
 80047e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80047ea:	4b9c      	ldr	r3, [pc, #624]	; (8004a5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ee:	0a1b      	lsrs	r3, r3, #8
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80047f6:	4b99      	ldr	r3, [pc, #612]	; (8004a5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fa:	08db      	lsrs	r3, r3, #3
 80047fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	fb02 f303 	mul.w	r3, r2, r3
 8004806:	ee07 3a90 	vmov	s15, r3
 800480a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 8111 	beq.w	8004a3c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	2b02      	cmp	r3, #2
 800481e:	f000 8083 	beq.w	8004928 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	2b02      	cmp	r3, #2
 8004826:	f200 80a1 	bhi.w	800496c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d003      	beq.n	8004838 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d056      	beq.n	80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004836:	e099      	b.n	800496c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004838:	4b88      	ldr	r3, [pc, #544]	; (8004a5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0320 	and.w	r3, r3, #32
 8004840:	2b00      	cmp	r3, #0
 8004842:	d02d      	beq.n	80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004844:	4b85      	ldr	r3, [pc, #532]	; (8004a5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	08db      	lsrs	r3, r3, #3
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	4a84      	ldr	r2, [pc, #528]	; (8004a60 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004850:	fa22 f303 	lsr.w	r3, r2, r3
 8004854:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	ee07 3a90 	vmov	s15, r3
 800485c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	ee07 3a90 	vmov	s15, r3
 8004866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800486a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800486e:	4b7b      	ldr	r3, [pc, #492]	; (8004a5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004876:	ee07 3a90 	vmov	s15, r3
 800487a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800487e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004882:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004a64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800488a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800488e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800489e:	e087      	b.n	80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	ee07 3a90 	vmov	s15, r3
 80048a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004a68 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80048ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b2:	4b6a      	ldr	r3, [pc, #424]	; (8004a5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ba:	ee07 3a90 	vmov	s15, r3
 80048be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004a64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048e2:	e065      	b.n	80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	ee07 3a90 	vmov	s15, r3
 80048ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004a6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80048f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f6:	4b59      	ldr	r3, [pc, #356]	; (8004a5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fe:	ee07 3a90 	vmov	s15, r3
 8004902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004906:	ed97 6a03 	vldr	s12, [r7, #12]
 800490a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004a64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800490e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800491a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800491e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004926:	e043      	b.n	80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	ee07 3a90 	vmov	s15, r3
 800492e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004932:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004a70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800493a:	4b48      	ldr	r3, [pc, #288]	; (8004a5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004942:	ee07 3a90 	vmov	s15, r3
 8004946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800494a:	ed97 6a03 	vldr	s12, [r7, #12]
 800494e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004a64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800495a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800495e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004966:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800496a:	e021      	b.n	80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	ee07 3a90 	vmov	s15, r3
 8004972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004976:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004a6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800497a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800497e:	4b37      	ldr	r3, [pc, #220]	; (8004a5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004986:	ee07 3a90 	vmov	s15, r3
 800498a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800498e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004992:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004a64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800499a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800499e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80049b0:	4b2a      	ldr	r3, [pc, #168]	; (8004a5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b4:	0a5b      	lsrs	r3, r3, #9
 80049b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049ba:	ee07 3a90 	vmov	s15, r3
 80049be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80049ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049d6:	ee17 2a90 	vmov	r2, s15
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80049de:	4b1f      	ldr	r3, [pc, #124]	; (8004a5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	0c1b      	lsrs	r3, r3, #16
 80049e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049e8:	ee07 3a90 	vmov	s15, r3
 80049ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80049fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a04:	ee17 2a90 	vmov	r2, s15
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004a0c:	4b13      	ldr	r3, [pc, #76]	; (8004a5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a10:	0e1b      	lsrs	r3, r3, #24
 8004a12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a16:	ee07 3a90 	vmov	s15, r3
 8004a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a26:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a32:	ee17 2a90 	vmov	r2, s15
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004a3a:	e008      	b.n	8004a4e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	609a      	str	r2, [r3, #8]
}
 8004a4e:	bf00      	nop
 8004a50:	3724      	adds	r7, #36	; 0x24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	58024400 	.word	0x58024400
 8004a60:	03d09000 	.word	0x03d09000
 8004a64:	46000000 	.word	0x46000000
 8004a68:	4c742400 	.word	0x4c742400
 8004a6c:	4a742400 	.word	0x4a742400
 8004a70:	4bbebc20 	.word	0x4bbebc20

08004a74 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a82:	4b53      	ldr	r3, [pc, #332]	; (8004bd0 <RCCEx_PLL2_Config+0x15c>)
 8004a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a86:	f003 0303 	and.w	r3, r3, #3
 8004a8a:	2b03      	cmp	r3, #3
 8004a8c:	d101      	bne.n	8004a92 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e099      	b.n	8004bc6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004a92:	4b4f      	ldr	r3, [pc, #316]	; (8004bd0 <RCCEx_PLL2_Config+0x15c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a4e      	ldr	r2, [pc, #312]	; (8004bd0 <RCCEx_PLL2_Config+0x15c>)
 8004a98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a9e:	f7fc fa87 	bl	8000fb0 <HAL_GetTick>
 8004aa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004aa4:	e008      	b.n	8004ab8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004aa6:	f7fc fa83 	bl	8000fb0 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d901      	bls.n	8004ab8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e086      	b.n	8004bc6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ab8:	4b45      	ldr	r3, [pc, #276]	; (8004bd0 <RCCEx_PLL2_Config+0x15c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1f0      	bne.n	8004aa6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ac4:	4b42      	ldr	r3, [pc, #264]	; (8004bd0 <RCCEx_PLL2_Config+0x15c>)
 8004ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	031b      	lsls	r3, r3, #12
 8004ad2:	493f      	ldr	r1, [pc, #252]	; (8004bd0 <RCCEx_PLL2_Config+0x15c>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	628b      	str	r3, [r1, #40]	; 0x28
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	3b01      	subs	r3, #1
 8004ade:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	025b      	lsls	r3, r3, #9
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	431a      	orrs	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	3b01      	subs	r3, #1
 8004af4:	041b      	lsls	r3, r3, #16
 8004af6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	3b01      	subs	r3, #1
 8004b02:	061b      	lsls	r3, r3, #24
 8004b04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b08:	4931      	ldr	r1, [pc, #196]	; (8004bd0 <RCCEx_PLL2_Config+0x15c>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004b0e:	4b30      	ldr	r3, [pc, #192]	; (8004bd0 <RCCEx_PLL2_Config+0x15c>)
 8004b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	492d      	ldr	r1, [pc, #180]	; (8004bd0 <RCCEx_PLL2_Config+0x15c>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004b20:	4b2b      	ldr	r3, [pc, #172]	; (8004bd0 <RCCEx_PLL2_Config+0x15c>)
 8004b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b24:	f023 0220 	bic.w	r2, r3, #32
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	4928      	ldr	r1, [pc, #160]	; (8004bd0 <RCCEx_PLL2_Config+0x15c>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004b32:	4b27      	ldr	r3, [pc, #156]	; (8004bd0 <RCCEx_PLL2_Config+0x15c>)
 8004b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b36:	4a26      	ldr	r2, [pc, #152]	; (8004bd0 <RCCEx_PLL2_Config+0x15c>)
 8004b38:	f023 0310 	bic.w	r3, r3, #16
 8004b3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004b3e:	4b24      	ldr	r3, [pc, #144]	; (8004bd0 <RCCEx_PLL2_Config+0x15c>)
 8004b40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b42:	4b24      	ldr	r3, [pc, #144]	; (8004bd4 <RCCEx_PLL2_Config+0x160>)
 8004b44:	4013      	ands	r3, r2
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	69d2      	ldr	r2, [r2, #28]
 8004b4a:	00d2      	lsls	r2, r2, #3
 8004b4c:	4920      	ldr	r1, [pc, #128]	; (8004bd0 <RCCEx_PLL2_Config+0x15c>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004b52:	4b1f      	ldr	r3, [pc, #124]	; (8004bd0 <RCCEx_PLL2_Config+0x15c>)
 8004b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b56:	4a1e      	ldr	r2, [pc, #120]	; (8004bd0 <RCCEx_PLL2_Config+0x15c>)
 8004b58:	f043 0310 	orr.w	r3, r3, #16
 8004b5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d106      	bne.n	8004b72 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004b64:	4b1a      	ldr	r3, [pc, #104]	; (8004bd0 <RCCEx_PLL2_Config+0x15c>)
 8004b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b68:	4a19      	ldr	r2, [pc, #100]	; (8004bd0 <RCCEx_PLL2_Config+0x15c>)
 8004b6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b70:	e00f      	b.n	8004b92 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d106      	bne.n	8004b86 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004b78:	4b15      	ldr	r3, [pc, #84]	; (8004bd0 <RCCEx_PLL2_Config+0x15c>)
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	4a14      	ldr	r2, [pc, #80]	; (8004bd0 <RCCEx_PLL2_Config+0x15c>)
 8004b7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b84:	e005      	b.n	8004b92 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004b86:	4b12      	ldr	r3, [pc, #72]	; (8004bd0 <RCCEx_PLL2_Config+0x15c>)
 8004b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8a:	4a11      	ldr	r2, [pc, #68]	; (8004bd0 <RCCEx_PLL2_Config+0x15c>)
 8004b8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004b92:	4b0f      	ldr	r3, [pc, #60]	; (8004bd0 <RCCEx_PLL2_Config+0x15c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a0e      	ldr	r2, [pc, #56]	; (8004bd0 <RCCEx_PLL2_Config+0x15c>)
 8004b98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b9e:	f7fc fa07 	bl	8000fb0 <HAL_GetTick>
 8004ba2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ba4:	e008      	b.n	8004bb8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004ba6:	f7fc fa03 	bl	8000fb0 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d901      	bls.n	8004bb8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e006      	b.n	8004bc6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004bb8:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <RCCEx_PLL2_Config+0x15c>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0f0      	beq.n	8004ba6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	58024400 	.word	0x58024400
 8004bd4:	ffff0007 	.word	0xffff0007

08004bd8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004be2:	2300      	movs	r3, #0
 8004be4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004be6:	4b53      	ldr	r3, [pc, #332]	; (8004d34 <RCCEx_PLL3_Config+0x15c>)
 8004be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	2b03      	cmp	r3, #3
 8004bf0:	d101      	bne.n	8004bf6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e099      	b.n	8004d2a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004bf6:	4b4f      	ldr	r3, [pc, #316]	; (8004d34 <RCCEx_PLL3_Config+0x15c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a4e      	ldr	r2, [pc, #312]	; (8004d34 <RCCEx_PLL3_Config+0x15c>)
 8004bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c02:	f7fc f9d5 	bl	8000fb0 <HAL_GetTick>
 8004c06:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c08:	e008      	b.n	8004c1c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c0a:	f7fc f9d1 	bl	8000fb0 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d901      	bls.n	8004c1c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e086      	b.n	8004d2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c1c:	4b45      	ldr	r3, [pc, #276]	; (8004d34 <RCCEx_PLL3_Config+0x15c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1f0      	bne.n	8004c0a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004c28:	4b42      	ldr	r3, [pc, #264]	; (8004d34 <RCCEx_PLL3_Config+0x15c>)
 8004c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	051b      	lsls	r3, r3, #20
 8004c36:	493f      	ldr	r1, [pc, #252]	; (8004d34 <RCCEx_PLL3_Config+0x15c>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	628b      	str	r3, [r1, #40]	; 0x28
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	3b01      	subs	r3, #1
 8004c42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	025b      	lsls	r3, r3, #9
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	431a      	orrs	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	041b      	lsls	r3, r3, #16
 8004c5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	3b01      	subs	r3, #1
 8004c66:	061b      	lsls	r3, r3, #24
 8004c68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c6c:	4931      	ldr	r1, [pc, #196]	; (8004d34 <RCCEx_PLL3_Config+0x15c>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004c72:	4b30      	ldr	r3, [pc, #192]	; (8004d34 <RCCEx_PLL3_Config+0x15c>)
 8004c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	492d      	ldr	r1, [pc, #180]	; (8004d34 <RCCEx_PLL3_Config+0x15c>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004c84:	4b2b      	ldr	r3, [pc, #172]	; (8004d34 <RCCEx_PLL3_Config+0x15c>)
 8004c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c88:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	4928      	ldr	r1, [pc, #160]	; (8004d34 <RCCEx_PLL3_Config+0x15c>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004c96:	4b27      	ldr	r3, [pc, #156]	; (8004d34 <RCCEx_PLL3_Config+0x15c>)
 8004c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9a:	4a26      	ldr	r2, [pc, #152]	; (8004d34 <RCCEx_PLL3_Config+0x15c>)
 8004c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ca0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004ca2:	4b24      	ldr	r3, [pc, #144]	; (8004d34 <RCCEx_PLL3_Config+0x15c>)
 8004ca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ca6:	4b24      	ldr	r3, [pc, #144]	; (8004d38 <RCCEx_PLL3_Config+0x160>)
 8004ca8:	4013      	ands	r3, r2
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	69d2      	ldr	r2, [r2, #28]
 8004cae:	00d2      	lsls	r2, r2, #3
 8004cb0:	4920      	ldr	r1, [pc, #128]	; (8004d34 <RCCEx_PLL3_Config+0x15c>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004cb6:	4b1f      	ldr	r3, [pc, #124]	; (8004d34 <RCCEx_PLL3_Config+0x15c>)
 8004cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cba:	4a1e      	ldr	r2, [pc, #120]	; (8004d34 <RCCEx_PLL3_Config+0x15c>)
 8004cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d106      	bne.n	8004cd6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004cc8:	4b1a      	ldr	r3, [pc, #104]	; (8004d34 <RCCEx_PLL3_Config+0x15c>)
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ccc:	4a19      	ldr	r2, [pc, #100]	; (8004d34 <RCCEx_PLL3_Config+0x15c>)
 8004cce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004cd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cd4:	e00f      	b.n	8004cf6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d106      	bne.n	8004cea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004cdc:	4b15      	ldr	r3, [pc, #84]	; (8004d34 <RCCEx_PLL3_Config+0x15c>)
 8004cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce0:	4a14      	ldr	r2, [pc, #80]	; (8004d34 <RCCEx_PLL3_Config+0x15c>)
 8004ce2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ce6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ce8:	e005      	b.n	8004cf6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004cea:	4b12      	ldr	r3, [pc, #72]	; (8004d34 <RCCEx_PLL3_Config+0x15c>)
 8004cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cee:	4a11      	ldr	r2, [pc, #68]	; (8004d34 <RCCEx_PLL3_Config+0x15c>)
 8004cf0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cf4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004cf6:	4b0f      	ldr	r3, [pc, #60]	; (8004d34 <RCCEx_PLL3_Config+0x15c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a0e      	ldr	r2, [pc, #56]	; (8004d34 <RCCEx_PLL3_Config+0x15c>)
 8004cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d02:	f7fc f955 	bl	8000fb0 <HAL_GetTick>
 8004d06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d08:	e008      	b.n	8004d1c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d0a:	f7fc f951 	bl	8000fb0 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d901      	bls.n	8004d1c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e006      	b.n	8004d2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d1c:	4b05      	ldr	r3, [pc, #20]	; (8004d34 <RCCEx_PLL3_Config+0x15c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d0f0      	beq.n	8004d0a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	58024400 	.word	0x58024400
 8004d38:	ffff0007 	.word	0xffff0007

08004d3c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e10f      	b.n	8004f6e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a87      	ldr	r2, [pc, #540]	; (8004f78 <HAL_SPI_Init+0x23c>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d00f      	beq.n	8004d7e <HAL_SPI_Init+0x42>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a86      	ldr	r2, [pc, #536]	; (8004f7c <HAL_SPI_Init+0x240>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d00a      	beq.n	8004d7e <HAL_SPI_Init+0x42>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a84      	ldr	r2, [pc, #528]	; (8004f80 <HAL_SPI_Init+0x244>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d005      	beq.n	8004d7e <HAL_SPI_Init+0x42>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	2b0f      	cmp	r3, #15
 8004d78:	d901      	bls.n	8004d7e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e0f7      	b.n	8004f6e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 fbca 	bl	8005518 <SPI_GetPacketSize>
 8004d84:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a7b      	ldr	r2, [pc, #492]	; (8004f78 <HAL_SPI_Init+0x23c>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d00c      	beq.n	8004daa <HAL_SPI_Init+0x6e>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a79      	ldr	r2, [pc, #484]	; (8004f7c <HAL_SPI_Init+0x240>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d007      	beq.n	8004daa <HAL_SPI_Init+0x6e>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a78      	ldr	r2, [pc, #480]	; (8004f80 <HAL_SPI_Init+0x244>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d002      	beq.n	8004daa <HAL_SPI_Init+0x6e>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b08      	cmp	r3, #8
 8004da8:	d811      	bhi.n	8004dce <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004dae:	4a72      	ldr	r2, [pc, #456]	; (8004f78 <HAL_SPI_Init+0x23c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d009      	beq.n	8004dc8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a70      	ldr	r2, [pc, #448]	; (8004f7c <HAL_SPI_Init+0x240>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d004      	beq.n	8004dc8 <HAL_SPI_Init+0x8c>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a6f      	ldr	r2, [pc, #444]	; (8004f80 <HAL_SPI_Init+0x244>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d104      	bne.n	8004dd2 <HAL_SPI_Init+0x96>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2b10      	cmp	r3, #16
 8004dcc:	d901      	bls.n	8004dd2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e0cd      	b.n	8004f6e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d106      	bne.n	8004dec <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7fb fe18 	bl	8000a1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0201 	bic.w	r2, r2, #1
 8004e02:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004e0e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e18:	d119      	bne.n	8004e4e <HAL_SPI_Init+0x112>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e22:	d103      	bne.n	8004e2c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d008      	beq.n	8004e3e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10c      	bne.n	8004e4e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004e38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e3c:	d107      	bne.n	8004e4e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e4c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00f      	beq.n	8004e7a <HAL_SPI_Init+0x13e>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	2b06      	cmp	r3, #6
 8004e60:	d90b      	bls.n	8004e7a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	e007      	b.n	8004e8a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e88:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	69da      	ldr	r2, [r3, #28]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e92:	431a      	orrs	r2, r3
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e9c:	ea42 0103 	orr.w	r1, r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68da      	ldr	r2, [r3, #12]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	431a      	orrs	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eea:	ea42 0103 	orr.w	r1, r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d113      	bne.n	8004f2a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f14:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f28:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 0201 	bic.w	r2, r2, #1
 8004f38:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00a      	beq.n	8004f5c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	40013000 	.word	0x40013000
 8004f7c:	40003800 	.word	0x40003800
 8004f80:	40003c00 	.word	0x40003c00

08004f84 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b08a      	sub	sp, #40	; 0x28
 8004f88:	af02      	add	r7, sp, #8
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	603b      	str	r3, [r7, #0]
 8004f90:	4613      	mov	r3, r2
 8004f92:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	3320      	adds	r3, #32
 8004f9a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d101      	bne.n	8004fae <HAL_SPI_Transmit+0x2a>
 8004faa:	2302      	movs	r3, #2
 8004fac:	e1e1      	b.n	8005372 <HAL_SPI_Transmit+0x3ee>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fb6:	f7fb fffb 	bl	8000fb0 <HAL_GetTick>
 8004fba:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d007      	beq.n	8004fd8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8004fc8:	2302      	movs	r3, #2
 8004fca:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004fd4:	7efb      	ldrb	r3, [r7, #27]
 8004fd6:	e1cc      	b.n	8005372 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d002      	beq.n	8004fe4 <HAL_SPI_Transmit+0x60>
 8004fde:	88fb      	ldrh	r3, [r7, #6]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d107      	bne.n	8004ff4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004ff0:	7efb      	ldrb	r3, [r7, #27]
 8004ff2:	e1be      	b.n	8005372 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2203      	movs	r2, #3
 8004ff8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	88fa      	ldrh	r2, [r7, #6]
 800500e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	88fa      	ldrh	r2, [r7, #6]
 8005016:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005044:	d108      	bne.n	8005058 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	e009      	b.n	800506c <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800506a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	4b96      	ldr	r3, [pc, #600]	; (80052cc <HAL_SPI_Transmit+0x348>)
 8005074:	4013      	ands	r3, r2
 8005076:	88f9      	ldrh	r1, [r7, #6]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	6812      	ldr	r2, [r2, #0]
 800507c:	430b      	orrs	r3, r1
 800507e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f042 0201 	orr.w	r2, r2, #1
 800508e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005098:	d107      	bne.n	80050aa <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	2b0f      	cmp	r3, #15
 80050b0:	d947      	bls.n	8005142 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80050b2:	e03f      	b.n	8005134 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d114      	bne.n	80050ec <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6812      	ldr	r2, [r2, #0]
 80050cc:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d2:	1d1a      	adds	r2, r3, #4
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80050de:	b29b      	uxth	r3, r3
 80050e0:	3b01      	subs	r3, #1
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80050ea:	e023      	b.n	8005134 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050ec:	f7fb ff60 	bl	8000fb0 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d803      	bhi.n	8005104 <HAL_SPI_Transmit+0x180>
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005102:	d102      	bne.n	800510a <HAL_SPI_Transmit+0x186>
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d114      	bne.n	8005134 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 f936 	bl	800537c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800511e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e11e      	b.n	8005372 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800513a:	b29b      	uxth	r3, r3
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1b9      	bne.n	80050b4 <HAL_SPI_Transmit+0x130>
 8005140:	e0f1      	b.n	8005326 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	2b07      	cmp	r3, #7
 8005148:	f240 80e6 	bls.w	8005318 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800514c:	e05d      	b.n	800520a <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b02      	cmp	r3, #2
 800515a:	d132      	bne.n	80051c2 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005162:	b29b      	uxth	r3, r3
 8005164:	2b01      	cmp	r3, #1
 8005166:	d918      	bls.n	800519a <HAL_SPI_Transmit+0x216>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516c:	2b00      	cmp	r3, #0
 800516e:	d014      	beq.n	800519a <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6812      	ldr	r2, [r2, #0]
 800517a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005180:	1d1a      	adds	r2, r3, #4
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800518c:	b29b      	uxth	r3, r3
 800518e:	3b02      	subs	r3, #2
 8005190:	b29a      	uxth	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005198:	e037      	b.n	800520a <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800519e:	881a      	ldrh	r2, [r3, #0]
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a8:	1c9a      	adds	r2, r3, #2
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80051c0:	e023      	b.n	800520a <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051c2:	f7fb fef5 	bl	8000fb0 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d803      	bhi.n	80051da <HAL_SPI_Transmit+0x256>
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d8:	d102      	bne.n	80051e0 <HAL_SPI_Transmit+0x25c>
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d114      	bne.n	800520a <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f000 f8cb 	bl	800537c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e0b3      	b.n	8005372 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005210:	b29b      	uxth	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d19b      	bne.n	800514e <HAL_SPI_Transmit+0x1ca>
 8005216:	e086      	b.n	8005326 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b02      	cmp	r3, #2
 8005224:	d154      	bne.n	80052d0 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800522c:	b29b      	uxth	r3, r3
 800522e:	2b03      	cmp	r3, #3
 8005230:	d918      	bls.n	8005264 <HAL_SPI_Transmit+0x2e0>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005236:	2b40      	cmp	r3, #64	; 0x40
 8005238:	d914      	bls.n	8005264 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6812      	ldr	r2, [r2, #0]
 8005244:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800524a:	1d1a      	adds	r2, r3, #4
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005256:	b29b      	uxth	r3, r3
 8005258:	3b04      	subs	r3, #4
 800525a:	b29a      	uxth	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005262:	e059      	b.n	8005318 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800526a:	b29b      	uxth	r3, r3
 800526c:	2b01      	cmp	r3, #1
 800526e:	d917      	bls.n	80052a0 <HAL_SPI_Transmit+0x31c>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005274:	2b00      	cmp	r3, #0
 8005276:	d013      	beq.n	80052a0 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800527c:	881a      	ldrh	r2, [r3, #0]
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005286:	1c9a      	adds	r2, r3, #2
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005292:	b29b      	uxth	r3, r3
 8005294:	3b02      	subs	r3, #2
 8005296:	b29a      	uxth	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800529e:	e03b      	b.n	8005318 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3320      	adds	r3, #32
 80052aa:	7812      	ldrb	r2, [r2, #0]
 80052ac:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b2:	1c5a      	adds	r2, r3, #1
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80052be:	b29b      	uxth	r3, r3
 80052c0:	3b01      	subs	r3, #1
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80052ca:	e025      	b.n	8005318 <HAL_SPI_Transmit+0x394>
 80052cc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052d0:	f7fb fe6e 	bl	8000fb0 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d803      	bhi.n	80052e8 <HAL_SPI_Transmit+0x364>
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e6:	d102      	bne.n	80052ee <HAL_SPI_Transmit+0x36a>
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d114      	bne.n	8005318 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 f844 	bl	800537c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005302:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e02c      	b.n	8005372 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800531e:	b29b      	uxth	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	f47f af79 	bne.w	8005218 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2200      	movs	r2, #0
 800532e:	2108      	movs	r1, #8
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 f8c3 	bl	80054bc <SPI_WaitOnFlagUntilTimeout>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d007      	beq.n	800534c <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005342:	f043 0220 	orr.w	r2, r3, #32
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f000 f815 	bl	800537c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e000      	b.n	8005372 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8005370:	7efb      	ldrb	r3, [r7, #27]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3720      	adds	r7, #32
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop

0800537c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699a      	ldr	r2, [r3, #24]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0208 	orr.w	r2, r2, #8
 800539a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699a      	ldr	r2, [r3, #24]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0210 	orr.w	r2, r2, #16
 80053aa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 0201 	bic.w	r2, r2, #1
 80053ba:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6919      	ldr	r1, [r3, #16]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	4b3c      	ldr	r3, [pc, #240]	; (80054b8 <SPI_CloseTransfer+0x13c>)
 80053c8:	400b      	ands	r3, r1
 80053ca:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689a      	ldr	r2, [r3, #8]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80053da:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b04      	cmp	r3, #4
 80053e6:	d014      	beq.n	8005412 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f003 0320 	and.w	r3, r3, #32
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00f      	beq.n	8005412 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	699a      	ldr	r2, [r3, #24]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f042 0220 	orr.w	r2, r2, #32
 8005410:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b03      	cmp	r3, #3
 800541c:	d014      	beq.n	8005448 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00f      	beq.n	8005448 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800542e:	f043 0204 	orr.w	r2, r3, #4
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	699a      	ldr	r2, [r3, #24]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005446:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00f      	beq.n	8005472 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005458:	f043 0201 	orr.w	r2, r3, #1
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	699a      	ldr	r2, [r3, #24]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005470:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00f      	beq.n	800549c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005482:	f043 0208 	orr.w	r2, r3, #8
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	699a      	ldr	r2, [r3, #24]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800549a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80054ac:	bf00      	nop
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr
 80054b8:	fffffc90 	.word	0xfffffc90

080054bc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	603b      	str	r3, [r7, #0]
 80054c8:	4613      	mov	r3, r2
 80054ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80054cc:	e010      	b.n	80054f0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054ce:	f7fb fd6f 	bl	8000fb0 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	683a      	ldr	r2, [r7, #0]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d803      	bhi.n	80054e6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e4:	d102      	bne.n	80054ec <SPI_WaitOnFlagUntilTimeout+0x30>
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e00f      	b.n	8005510 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	695a      	ldr	r2, [r3, #20]
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	4013      	ands	r3, r2
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	bf0c      	ite	eq
 8005500:	2301      	moveq	r3, #1
 8005502:	2300      	movne	r3, #0
 8005504:	b2db      	uxtb	r3, r3
 8005506:	461a      	mov	r2, r3
 8005508:	79fb      	ldrb	r3, [r7, #7]
 800550a:	429a      	cmp	r2, r3
 800550c:	d0df      	beq.n	80054ce <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3710      	adds	r7, #16
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005524:	095b      	lsrs	r3, r3, #5
 8005526:	3301      	adds	r3, #1
 8005528:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	3301      	adds	r3, #1
 8005530:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	3307      	adds	r3, #7
 8005536:	08db      	lsrs	r3, r3, #3
 8005538:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	fb02 f303 	mul.w	r3, r2, r3
}
 8005542:	4618      	mov	r0, r3
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b082      	sub	sp, #8
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d101      	bne.n	8005560 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e042      	b.n	80055e6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005566:	2b00      	cmp	r3, #0
 8005568:	d106      	bne.n	8005578 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7fb fbfa 	bl	8000d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2224      	movs	r2, #36	; 0x24
 800557c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 0201 	bic.w	r2, r2, #1
 800558e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 fc07 	bl	8005da4 <UART_SetConfig>
 8005596:	4603      	mov	r3, r0
 8005598:	2b01      	cmp	r3, #1
 800559a:	d101      	bne.n	80055a0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e022      	b.n	80055e6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d002      	beq.n	80055ae <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f001 f963 	bl	8006874 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f042 0201 	orr.w	r2, r2, #1
 80055dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f001 f9ea 	bl	80069b8 <UART_CheckIdleState>
 80055e4:	4603      	mov	r3, r0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
	...

080055f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b0ba      	sub	sp, #232	; 0xe8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005616:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800561a:	f640 030f 	movw	r3, #2063	; 0x80f
 800561e:	4013      	ands	r3, r2
 8005620:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005624:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005628:	2b00      	cmp	r3, #0
 800562a:	d11b      	bne.n	8005664 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800562c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005630:	f003 0320 	and.w	r3, r3, #32
 8005634:	2b00      	cmp	r3, #0
 8005636:	d015      	beq.n	8005664 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800563c:	f003 0320 	and.w	r3, r3, #32
 8005640:	2b00      	cmp	r3, #0
 8005642:	d105      	bne.n	8005650 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d009      	beq.n	8005664 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 8377 	beq.w	8005d48 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	4798      	blx	r3
      }
      return;
 8005662:	e371      	b.n	8005d48 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005664:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 8123 	beq.w	80058b4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800566e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005672:	4b8d      	ldr	r3, [pc, #564]	; (80058a8 <HAL_UART_IRQHandler+0x2b8>)
 8005674:	4013      	ands	r3, r2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d106      	bne.n	8005688 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800567a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800567e:	4b8b      	ldr	r3, [pc, #556]	; (80058ac <HAL_UART_IRQHandler+0x2bc>)
 8005680:	4013      	ands	r3, r2
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 8116 	beq.w	80058b4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	d011      	beq.n	80056b8 <HAL_UART_IRQHandler+0xc8>
 8005694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00b      	beq.n	80056b8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2201      	movs	r2, #1
 80056a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ae:	f043 0201 	orr.w	r2, r3, #1
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d011      	beq.n	80056e8 <HAL_UART_IRQHandler+0xf8>
 80056c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00b      	beq.n	80056e8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2202      	movs	r2, #2
 80056d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056de:	f043 0204 	orr.w	r2, r3, #4
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ec:	f003 0304 	and.w	r3, r3, #4
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d011      	beq.n	8005718 <HAL_UART_IRQHandler+0x128>
 80056f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00b      	beq.n	8005718 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2204      	movs	r2, #4
 8005706:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800570e:	f043 0202 	orr.w	r2, r3, #2
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800571c:	f003 0308 	and.w	r3, r3, #8
 8005720:	2b00      	cmp	r3, #0
 8005722:	d017      	beq.n	8005754 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005728:	f003 0320 	and.w	r3, r3, #32
 800572c:	2b00      	cmp	r3, #0
 800572e:	d105      	bne.n	800573c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005730:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005734:	4b5c      	ldr	r3, [pc, #368]	; (80058a8 <HAL_UART_IRQHandler+0x2b8>)
 8005736:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00b      	beq.n	8005754 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2208      	movs	r2, #8
 8005742:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800574a:	f043 0208 	orr.w	r2, r3, #8
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005758:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800575c:	2b00      	cmp	r3, #0
 800575e:	d012      	beq.n	8005786 <HAL_UART_IRQHandler+0x196>
 8005760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005764:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00c      	beq.n	8005786 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005774:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577c:	f043 0220 	orr.w	r2, r3, #32
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 82dd 	beq.w	8005d4c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005796:	f003 0320 	and.w	r3, r3, #32
 800579a:	2b00      	cmp	r3, #0
 800579c:	d013      	beq.n	80057c6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800579e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057a2:	f003 0320 	and.w	r3, r3, #32
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d105      	bne.n	80057b6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80057aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d007      	beq.n	80057c6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057da:	2b40      	cmp	r3, #64	; 0x40
 80057dc:	d005      	beq.n	80057ea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80057de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d054      	beq.n	8005894 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f001 f9f6 	bl	8006bdc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fa:	2b40      	cmp	r3, #64	; 0x40
 80057fc:	d146      	bne.n	800588c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	3308      	adds	r3, #8
 8005804:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005808:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800580c:	e853 3f00 	ldrex	r3, [r3]
 8005810:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005814:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800581c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3308      	adds	r3, #8
 8005826:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800582a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800582e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005832:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005836:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800583a:	e841 2300 	strex	r3, r2, [r1]
 800583e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005842:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1d9      	bne.n	80057fe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005850:	2b00      	cmp	r3, #0
 8005852:	d017      	beq.n	8005884 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800585a:	4a15      	ldr	r2, [pc, #84]	; (80058b0 <HAL_UART_IRQHandler+0x2c0>)
 800585c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005864:	4618      	mov	r0, r3
 8005866:	f7fc f80d 	bl	8001884 <HAL_DMA_Abort_IT>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d019      	beq.n	80058a4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800587e:	4610      	mov	r0, r2
 8005880:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005882:	e00f      	b.n	80058a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 fa77 	bl	8005d78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800588a:	e00b      	b.n	80058a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 fa73 	bl	8005d78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005892:	e007      	b.n	80058a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fa6f 	bl	8005d78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80058a2:	e253      	b.n	8005d4c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a4:	bf00      	nop
    return;
 80058a6:	e251      	b.n	8005d4c <HAL_UART_IRQHandler+0x75c>
 80058a8:	10000001 	.word	0x10000001
 80058ac:	04000120 	.word	0x04000120
 80058b0:	08006ca9 	.word	0x08006ca9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	f040 81e7 	bne.w	8005c8c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80058be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058c2:	f003 0310 	and.w	r3, r3, #16
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f000 81e0 	beq.w	8005c8c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80058cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058d0:	f003 0310 	and.w	r3, r3, #16
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 81d9 	beq.w	8005c8c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2210      	movs	r2, #16
 80058e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ec:	2b40      	cmp	r3, #64	; 0x40
 80058ee:	f040 8151 	bne.w	8005b94 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a96      	ldr	r2, [pc, #600]	; (8005b54 <HAL_UART_IRQHandler+0x564>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d068      	beq.n	80059d2 <HAL_UART_IRQHandler+0x3e2>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a93      	ldr	r2, [pc, #588]	; (8005b58 <HAL_UART_IRQHandler+0x568>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d061      	beq.n	80059d2 <HAL_UART_IRQHandler+0x3e2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a91      	ldr	r2, [pc, #580]	; (8005b5c <HAL_UART_IRQHandler+0x56c>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d05a      	beq.n	80059d2 <HAL_UART_IRQHandler+0x3e2>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a8e      	ldr	r2, [pc, #568]	; (8005b60 <HAL_UART_IRQHandler+0x570>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d053      	beq.n	80059d2 <HAL_UART_IRQHandler+0x3e2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a8c      	ldr	r2, [pc, #560]	; (8005b64 <HAL_UART_IRQHandler+0x574>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d04c      	beq.n	80059d2 <HAL_UART_IRQHandler+0x3e2>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a89      	ldr	r2, [pc, #548]	; (8005b68 <HAL_UART_IRQHandler+0x578>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d045      	beq.n	80059d2 <HAL_UART_IRQHandler+0x3e2>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a87      	ldr	r2, [pc, #540]	; (8005b6c <HAL_UART_IRQHandler+0x57c>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d03e      	beq.n	80059d2 <HAL_UART_IRQHandler+0x3e2>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a84      	ldr	r2, [pc, #528]	; (8005b70 <HAL_UART_IRQHandler+0x580>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d037      	beq.n	80059d2 <HAL_UART_IRQHandler+0x3e2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a82      	ldr	r2, [pc, #520]	; (8005b74 <HAL_UART_IRQHandler+0x584>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d030      	beq.n	80059d2 <HAL_UART_IRQHandler+0x3e2>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a7f      	ldr	r2, [pc, #508]	; (8005b78 <HAL_UART_IRQHandler+0x588>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d029      	beq.n	80059d2 <HAL_UART_IRQHandler+0x3e2>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a7d      	ldr	r2, [pc, #500]	; (8005b7c <HAL_UART_IRQHandler+0x58c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d022      	beq.n	80059d2 <HAL_UART_IRQHandler+0x3e2>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a7a      	ldr	r2, [pc, #488]	; (8005b80 <HAL_UART_IRQHandler+0x590>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d01b      	beq.n	80059d2 <HAL_UART_IRQHandler+0x3e2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a78      	ldr	r2, [pc, #480]	; (8005b84 <HAL_UART_IRQHandler+0x594>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d014      	beq.n	80059d2 <HAL_UART_IRQHandler+0x3e2>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a75      	ldr	r2, [pc, #468]	; (8005b88 <HAL_UART_IRQHandler+0x598>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d00d      	beq.n	80059d2 <HAL_UART_IRQHandler+0x3e2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a73      	ldr	r2, [pc, #460]	; (8005b8c <HAL_UART_IRQHandler+0x59c>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d006      	beq.n	80059d2 <HAL_UART_IRQHandler+0x3e2>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a70      	ldr	r2, [pc, #448]	; (8005b90 <HAL_UART_IRQHandler+0x5a0>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d106      	bne.n	80059e0 <HAL_UART_IRQHandler+0x3f0>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	b29b      	uxth	r3, r3
 80059de:	e005      	b.n	80059ec <HAL_UART_IRQHandler+0x3fc>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 81ab 	beq.w	8005d50 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a04:	429a      	cmp	r2, r3
 8005a06:	f080 81a3 	bcs.w	8005d50 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a10:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a20:	f000 8087 	beq.w	8005b32 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a30:	e853 3f00 	ldrex	r3, [r3]
 8005a34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005a38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	461a      	mov	r2, r3
 8005a4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005a52:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005a5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a5e:	e841 2300 	strex	r3, r2, [r1]
 8005a62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1da      	bne.n	8005a24 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	3308      	adds	r3, #8
 8005a74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a78:	e853 3f00 	ldrex	r3, [r3]
 8005a7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a80:	f023 0301 	bic.w	r3, r3, #1
 8005a84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3308      	adds	r3, #8
 8005a8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a9e:	e841 2300 	strex	r3, r2, [r1]
 8005aa2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005aa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1e1      	bne.n	8005a6e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	3308      	adds	r3, #8
 8005ab0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ab4:	e853 3f00 	ldrex	r3, [r3]
 8005ab8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005aba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	3308      	adds	r3, #8
 8005aca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ace:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ad0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ad4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ad6:	e841 2300 	strex	r3, r2, [r1]
 8005ada:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005adc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1e3      	bne.n	8005aaa <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2220      	movs	r2, #32
 8005ae6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af8:	e853 3f00 	ldrex	r3, [r3]
 8005afc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b00:	f023 0310 	bic.w	r3, r3, #16
 8005b04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b12:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b14:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b1a:	e841 2300 	strex	r3, r2, [r1]
 8005b1e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1e4      	bne.n	8005af0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7fb fb8b 	bl	8001248 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2202      	movs	r2, #2
 8005b36:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 f91d 	bl	8005d8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b52:	e0fd      	b.n	8005d50 <HAL_UART_IRQHandler+0x760>
 8005b54:	40020010 	.word	0x40020010
 8005b58:	40020028 	.word	0x40020028
 8005b5c:	40020040 	.word	0x40020040
 8005b60:	40020058 	.word	0x40020058
 8005b64:	40020070 	.word	0x40020070
 8005b68:	40020088 	.word	0x40020088
 8005b6c:	400200a0 	.word	0x400200a0
 8005b70:	400200b8 	.word	0x400200b8
 8005b74:	40020410 	.word	0x40020410
 8005b78:	40020428 	.word	0x40020428
 8005b7c:	40020440 	.word	0x40020440
 8005b80:	40020458 	.word	0x40020458
 8005b84:	40020470 	.word	0x40020470
 8005b88:	40020488 	.word	0x40020488
 8005b8c:	400204a0 	.word	0x400204a0
 8005b90:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 80cf 	beq.w	8005d54 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8005bb6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f000 80ca 	beq.w	8005d54 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc8:	e853 3f00 	ldrex	r3, [r3]
 8005bcc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	461a      	mov	r2, r3
 8005bde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005be2:	647b      	str	r3, [r7, #68]	; 0x44
 8005be4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005be8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bea:	e841 2300 	strex	r3, r2, [r1]
 8005bee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e4      	bne.n	8005bc0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	3308      	adds	r3, #8
 8005bfc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	e853 3f00 	ldrex	r3, [r3]
 8005c04:	623b      	str	r3, [r7, #32]
   return(result);
 8005c06:	6a3a      	ldr	r2, [r7, #32]
 8005c08:	4b55      	ldr	r3, [pc, #340]	; (8005d60 <HAL_UART_IRQHandler+0x770>)
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3308      	adds	r3, #8
 8005c16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005c1a:	633a      	str	r2, [r7, #48]	; 0x30
 8005c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c22:	e841 2300 	strex	r3, r2, [r1]
 8005c26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1e3      	bne.n	8005bf6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2220      	movs	r2, #32
 8005c32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	e853 3f00 	ldrex	r3, [r3]
 8005c4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f023 0310 	bic.w	r3, r3, #16
 8005c56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c64:	61fb      	str	r3, [r7, #28]
 8005c66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c68:	69b9      	ldr	r1, [r7, #24]
 8005c6a:	69fa      	ldr	r2, [r7, #28]
 8005c6c:	e841 2300 	strex	r3, r2, [r1]
 8005c70:	617b      	str	r3, [r7, #20]
   return(result);
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1e4      	bne.n	8005c42 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c82:	4619      	mov	r1, r3
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 f881 	bl	8005d8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c8a:	e063      	b.n	8005d54 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00e      	beq.n	8005cb6 <HAL_UART_IRQHandler+0x6c6>
 8005c98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d008      	beq.n	8005cb6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005cac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f001 f83b 	bl	8006d2a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005cb4:	e051      	b.n	8005d5a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d014      	beq.n	8005cec <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d105      	bne.n	8005cda <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005cce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d008      	beq.n	8005cec <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d03a      	beq.n	8005d58 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	4798      	blx	r3
    }
    return;
 8005cea:	e035      	b.n	8005d58 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d009      	beq.n	8005d0c <HAL_UART_IRQHandler+0x71c>
 8005cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 ffe5 	bl	8006cd4 <UART_EndTransmit_IT>
    return;
 8005d0a:	e026      	b.n	8005d5a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d009      	beq.n	8005d2c <HAL_UART_IRQHandler+0x73c>
 8005d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d003      	beq.n	8005d2c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f001 f814 	bl	8006d52 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d2a:	e016      	b.n	8005d5a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d010      	beq.n	8005d5a <HAL_UART_IRQHandler+0x76a>
 8005d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	da0c      	bge.n	8005d5a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 fffc 	bl	8006d3e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d46:	e008      	b.n	8005d5a <HAL_UART_IRQHandler+0x76a>
      return;
 8005d48:	bf00      	nop
 8005d4a:	e006      	b.n	8005d5a <HAL_UART_IRQHandler+0x76a>
    return;
 8005d4c:	bf00      	nop
 8005d4e:	e004      	b.n	8005d5a <HAL_UART_IRQHandler+0x76a>
      return;
 8005d50:	bf00      	nop
 8005d52:	e002      	b.n	8005d5a <HAL_UART_IRQHandler+0x76a>
      return;
 8005d54:	bf00      	nop
 8005d56:	e000      	b.n	8005d5a <HAL_UART_IRQHandler+0x76a>
    return;
 8005d58:	bf00      	nop
  }
}
 8005d5a:	37e8      	adds	r7, #232	; 0xe8
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	effffffe 	.word	0xeffffffe

08005d64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	460b      	mov	r3, r1
 8005d96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005da8:	b092      	sub	sp, #72	; 0x48
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	69db      	ldr	r3, [r3, #28]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	4bbe      	ldr	r3, [pc, #760]	; (80060cc <UART_SetConfig+0x328>)
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	6812      	ldr	r2, [r2, #0]
 8005dda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ddc:	430b      	orrs	r3, r1
 8005dde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	68da      	ldr	r2, [r3, #12]
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4ab3      	ldr	r2, [pc, #716]	; (80060d0 <UART_SetConfig+0x32c>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d004      	beq.n	8005e10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689a      	ldr	r2, [r3, #8]
 8005e16:	4baf      	ldr	r3, [pc, #700]	; (80060d4 <UART_SetConfig+0x330>)
 8005e18:	4013      	ands	r3, r2
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	6812      	ldr	r2, [r2, #0]
 8005e1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e20:	430b      	orrs	r3, r1
 8005e22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2a:	f023 010f 	bic.w	r1, r3, #15
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4aa6      	ldr	r2, [pc, #664]	; (80060d8 <UART_SetConfig+0x334>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d177      	bne.n	8005f34 <UART_SetConfig+0x190>
 8005e44:	4ba5      	ldr	r3, [pc, #660]	; (80060dc <UART_SetConfig+0x338>)
 8005e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e4c:	2b28      	cmp	r3, #40	; 0x28
 8005e4e:	d86d      	bhi.n	8005f2c <UART_SetConfig+0x188>
 8005e50:	a201      	add	r2, pc, #4	; (adr r2, 8005e58 <UART_SetConfig+0xb4>)
 8005e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e56:	bf00      	nop
 8005e58:	08005efd 	.word	0x08005efd
 8005e5c:	08005f2d 	.word	0x08005f2d
 8005e60:	08005f2d 	.word	0x08005f2d
 8005e64:	08005f2d 	.word	0x08005f2d
 8005e68:	08005f2d 	.word	0x08005f2d
 8005e6c:	08005f2d 	.word	0x08005f2d
 8005e70:	08005f2d 	.word	0x08005f2d
 8005e74:	08005f2d 	.word	0x08005f2d
 8005e78:	08005f05 	.word	0x08005f05
 8005e7c:	08005f2d 	.word	0x08005f2d
 8005e80:	08005f2d 	.word	0x08005f2d
 8005e84:	08005f2d 	.word	0x08005f2d
 8005e88:	08005f2d 	.word	0x08005f2d
 8005e8c:	08005f2d 	.word	0x08005f2d
 8005e90:	08005f2d 	.word	0x08005f2d
 8005e94:	08005f2d 	.word	0x08005f2d
 8005e98:	08005f0d 	.word	0x08005f0d
 8005e9c:	08005f2d 	.word	0x08005f2d
 8005ea0:	08005f2d 	.word	0x08005f2d
 8005ea4:	08005f2d 	.word	0x08005f2d
 8005ea8:	08005f2d 	.word	0x08005f2d
 8005eac:	08005f2d 	.word	0x08005f2d
 8005eb0:	08005f2d 	.word	0x08005f2d
 8005eb4:	08005f2d 	.word	0x08005f2d
 8005eb8:	08005f15 	.word	0x08005f15
 8005ebc:	08005f2d 	.word	0x08005f2d
 8005ec0:	08005f2d 	.word	0x08005f2d
 8005ec4:	08005f2d 	.word	0x08005f2d
 8005ec8:	08005f2d 	.word	0x08005f2d
 8005ecc:	08005f2d 	.word	0x08005f2d
 8005ed0:	08005f2d 	.word	0x08005f2d
 8005ed4:	08005f2d 	.word	0x08005f2d
 8005ed8:	08005f1d 	.word	0x08005f1d
 8005edc:	08005f2d 	.word	0x08005f2d
 8005ee0:	08005f2d 	.word	0x08005f2d
 8005ee4:	08005f2d 	.word	0x08005f2d
 8005ee8:	08005f2d 	.word	0x08005f2d
 8005eec:	08005f2d 	.word	0x08005f2d
 8005ef0:	08005f2d 	.word	0x08005f2d
 8005ef4:	08005f2d 	.word	0x08005f2d
 8005ef8:	08005f25 	.word	0x08005f25
 8005efc:	2301      	movs	r3, #1
 8005efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f02:	e222      	b.n	800634a <UART_SetConfig+0x5a6>
 8005f04:	2304      	movs	r3, #4
 8005f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f0a:	e21e      	b.n	800634a <UART_SetConfig+0x5a6>
 8005f0c:	2308      	movs	r3, #8
 8005f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f12:	e21a      	b.n	800634a <UART_SetConfig+0x5a6>
 8005f14:	2310      	movs	r3, #16
 8005f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f1a:	e216      	b.n	800634a <UART_SetConfig+0x5a6>
 8005f1c:	2320      	movs	r3, #32
 8005f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f22:	e212      	b.n	800634a <UART_SetConfig+0x5a6>
 8005f24:	2340      	movs	r3, #64	; 0x40
 8005f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f2a:	e20e      	b.n	800634a <UART_SetConfig+0x5a6>
 8005f2c:	2380      	movs	r3, #128	; 0x80
 8005f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f32:	e20a      	b.n	800634a <UART_SetConfig+0x5a6>
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a69      	ldr	r2, [pc, #420]	; (80060e0 <UART_SetConfig+0x33c>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d130      	bne.n	8005fa0 <UART_SetConfig+0x1fc>
 8005f3e:	4b67      	ldr	r3, [pc, #412]	; (80060dc <UART_SetConfig+0x338>)
 8005f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f42:	f003 0307 	and.w	r3, r3, #7
 8005f46:	2b05      	cmp	r3, #5
 8005f48:	d826      	bhi.n	8005f98 <UART_SetConfig+0x1f4>
 8005f4a:	a201      	add	r2, pc, #4	; (adr r2, 8005f50 <UART_SetConfig+0x1ac>)
 8005f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f50:	08005f69 	.word	0x08005f69
 8005f54:	08005f71 	.word	0x08005f71
 8005f58:	08005f79 	.word	0x08005f79
 8005f5c:	08005f81 	.word	0x08005f81
 8005f60:	08005f89 	.word	0x08005f89
 8005f64:	08005f91 	.word	0x08005f91
 8005f68:	2300      	movs	r3, #0
 8005f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f6e:	e1ec      	b.n	800634a <UART_SetConfig+0x5a6>
 8005f70:	2304      	movs	r3, #4
 8005f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f76:	e1e8      	b.n	800634a <UART_SetConfig+0x5a6>
 8005f78:	2308      	movs	r3, #8
 8005f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f7e:	e1e4      	b.n	800634a <UART_SetConfig+0x5a6>
 8005f80:	2310      	movs	r3, #16
 8005f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f86:	e1e0      	b.n	800634a <UART_SetConfig+0x5a6>
 8005f88:	2320      	movs	r3, #32
 8005f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f8e:	e1dc      	b.n	800634a <UART_SetConfig+0x5a6>
 8005f90:	2340      	movs	r3, #64	; 0x40
 8005f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f96:	e1d8      	b.n	800634a <UART_SetConfig+0x5a6>
 8005f98:	2380      	movs	r3, #128	; 0x80
 8005f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f9e:	e1d4      	b.n	800634a <UART_SetConfig+0x5a6>
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a4f      	ldr	r2, [pc, #316]	; (80060e4 <UART_SetConfig+0x340>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d130      	bne.n	800600c <UART_SetConfig+0x268>
 8005faa:	4b4c      	ldr	r3, [pc, #304]	; (80060dc <UART_SetConfig+0x338>)
 8005fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fae:	f003 0307 	and.w	r3, r3, #7
 8005fb2:	2b05      	cmp	r3, #5
 8005fb4:	d826      	bhi.n	8006004 <UART_SetConfig+0x260>
 8005fb6:	a201      	add	r2, pc, #4	; (adr r2, 8005fbc <UART_SetConfig+0x218>)
 8005fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbc:	08005fd5 	.word	0x08005fd5
 8005fc0:	08005fdd 	.word	0x08005fdd
 8005fc4:	08005fe5 	.word	0x08005fe5
 8005fc8:	08005fed 	.word	0x08005fed
 8005fcc:	08005ff5 	.word	0x08005ff5
 8005fd0:	08005ffd 	.word	0x08005ffd
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fda:	e1b6      	b.n	800634a <UART_SetConfig+0x5a6>
 8005fdc:	2304      	movs	r3, #4
 8005fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fe2:	e1b2      	b.n	800634a <UART_SetConfig+0x5a6>
 8005fe4:	2308      	movs	r3, #8
 8005fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fea:	e1ae      	b.n	800634a <UART_SetConfig+0x5a6>
 8005fec:	2310      	movs	r3, #16
 8005fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ff2:	e1aa      	b.n	800634a <UART_SetConfig+0x5a6>
 8005ff4:	2320      	movs	r3, #32
 8005ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ffa:	e1a6      	b.n	800634a <UART_SetConfig+0x5a6>
 8005ffc:	2340      	movs	r3, #64	; 0x40
 8005ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006002:	e1a2      	b.n	800634a <UART_SetConfig+0x5a6>
 8006004:	2380      	movs	r3, #128	; 0x80
 8006006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800600a:	e19e      	b.n	800634a <UART_SetConfig+0x5a6>
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a35      	ldr	r2, [pc, #212]	; (80060e8 <UART_SetConfig+0x344>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d130      	bne.n	8006078 <UART_SetConfig+0x2d4>
 8006016:	4b31      	ldr	r3, [pc, #196]	; (80060dc <UART_SetConfig+0x338>)
 8006018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800601a:	f003 0307 	and.w	r3, r3, #7
 800601e:	2b05      	cmp	r3, #5
 8006020:	d826      	bhi.n	8006070 <UART_SetConfig+0x2cc>
 8006022:	a201      	add	r2, pc, #4	; (adr r2, 8006028 <UART_SetConfig+0x284>)
 8006024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006028:	08006041 	.word	0x08006041
 800602c:	08006049 	.word	0x08006049
 8006030:	08006051 	.word	0x08006051
 8006034:	08006059 	.word	0x08006059
 8006038:	08006061 	.word	0x08006061
 800603c:	08006069 	.word	0x08006069
 8006040:	2300      	movs	r3, #0
 8006042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006046:	e180      	b.n	800634a <UART_SetConfig+0x5a6>
 8006048:	2304      	movs	r3, #4
 800604a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800604e:	e17c      	b.n	800634a <UART_SetConfig+0x5a6>
 8006050:	2308      	movs	r3, #8
 8006052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006056:	e178      	b.n	800634a <UART_SetConfig+0x5a6>
 8006058:	2310      	movs	r3, #16
 800605a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800605e:	e174      	b.n	800634a <UART_SetConfig+0x5a6>
 8006060:	2320      	movs	r3, #32
 8006062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006066:	e170      	b.n	800634a <UART_SetConfig+0x5a6>
 8006068:	2340      	movs	r3, #64	; 0x40
 800606a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800606e:	e16c      	b.n	800634a <UART_SetConfig+0x5a6>
 8006070:	2380      	movs	r3, #128	; 0x80
 8006072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006076:	e168      	b.n	800634a <UART_SetConfig+0x5a6>
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a1b      	ldr	r2, [pc, #108]	; (80060ec <UART_SetConfig+0x348>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d142      	bne.n	8006108 <UART_SetConfig+0x364>
 8006082:	4b16      	ldr	r3, [pc, #88]	; (80060dc <UART_SetConfig+0x338>)
 8006084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006086:	f003 0307 	and.w	r3, r3, #7
 800608a:	2b05      	cmp	r3, #5
 800608c:	d838      	bhi.n	8006100 <UART_SetConfig+0x35c>
 800608e:	a201      	add	r2, pc, #4	; (adr r2, 8006094 <UART_SetConfig+0x2f0>)
 8006090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006094:	080060ad 	.word	0x080060ad
 8006098:	080060b5 	.word	0x080060b5
 800609c:	080060bd 	.word	0x080060bd
 80060a0:	080060c5 	.word	0x080060c5
 80060a4:	080060f1 	.word	0x080060f1
 80060a8:	080060f9 	.word	0x080060f9
 80060ac:	2300      	movs	r3, #0
 80060ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060b2:	e14a      	b.n	800634a <UART_SetConfig+0x5a6>
 80060b4:	2304      	movs	r3, #4
 80060b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ba:	e146      	b.n	800634a <UART_SetConfig+0x5a6>
 80060bc:	2308      	movs	r3, #8
 80060be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060c2:	e142      	b.n	800634a <UART_SetConfig+0x5a6>
 80060c4:	2310      	movs	r3, #16
 80060c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ca:	e13e      	b.n	800634a <UART_SetConfig+0x5a6>
 80060cc:	cfff69f3 	.word	0xcfff69f3
 80060d0:	58000c00 	.word	0x58000c00
 80060d4:	11fff4ff 	.word	0x11fff4ff
 80060d8:	40011000 	.word	0x40011000
 80060dc:	58024400 	.word	0x58024400
 80060e0:	40004400 	.word	0x40004400
 80060e4:	40004800 	.word	0x40004800
 80060e8:	40004c00 	.word	0x40004c00
 80060ec:	40005000 	.word	0x40005000
 80060f0:	2320      	movs	r3, #32
 80060f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060f6:	e128      	b.n	800634a <UART_SetConfig+0x5a6>
 80060f8:	2340      	movs	r3, #64	; 0x40
 80060fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060fe:	e124      	b.n	800634a <UART_SetConfig+0x5a6>
 8006100:	2380      	movs	r3, #128	; 0x80
 8006102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006106:	e120      	b.n	800634a <UART_SetConfig+0x5a6>
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4acb      	ldr	r2, [pc, #812]	; (800643c <UART_SetConfig+0x698>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d176      	bne.n	8006200 <UART_SetConfig+0x45c>
 8006112:	4bcb      	ldr	r3, [pc, #812]	; (8006440 <UART_SetConfig+0x69c>)
 8006114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006116:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800611a:	2b28      	cmp	r3, #40	; 0x28
 800611c:	d86c      	bhi.n	80061f8 <UART_SetConfig+0x454>
 800611e:	a201      	add	r2, pc, #4	; (adr r2, 8006124 <UART_SetConfig+0x380>)
 8006120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006124:	080061c9 	.word	0x080061c9
 8006128:	080061f9 	.word	0x080061f9
 800612c:	080061f9 	.word	0x080061f9
 8006130:	080061f9 	.word	0x080061f9
 8006134:	080061f9 	.word	0x080061f9
 8006138:	080061f9 	.word	0x080061f9
 800613c:	080061f9 	.word	0x080061f9
 8006140:	080061f9 	.word	0x080061f9
 8006144:	080061d1 	.word	0x080061d1
 8006148:	080061f9 	.word	0x080061f9
 800614c:	080061f9 	.word	0x080061f9
 8006150:	080061f9 	.word	0x080061f9
 8006154:	080061f9 	.word	0x080061f9
 8006158:	080061f9 	.word	0x080061f9
 800615c:	080061f9 	.word	0x080061f9
 8006160:	080061f9 	.word	0x080061f9
 8006164:	080061d9 	.word	0x080061d9
 8006168:	080061f9 	.word	0x080061f9
 800616c:	080061f9 	.word	0x080061f9
 8006170:	080061f9 	.word	0x080061f9
 8006174:	080061f9 	.word	0x080061f9
 8006178:	080061f9 	.word	0x080061f9
 800617c:	080061f9 	.word	0x080061f9
 8006180:	080061f9 	.word	0x080061f9
 8006184:	080061e1 	.word	0x080061e1
 8006188:	080061f9 	.word	0x080061f9
 800618c:	080061f9 	.word	0x080061f9
 8006190:	080061f9 	.word	0x080061f9
 8006194:	080061f9 	.word	0x080061f9
 8006198:	080061f9 	.word	0x080061f9
 800619c:	080061f9 	.word	0x080061f9
 80061a0:	080061f9 	.word	0x080061f9
 80061a4:	080061e9 	.word	0x080061e9
 80061a8:	080061f9 	.word	0x080061f9
 80061ac:	080061f9 	.word	0x080061f9
 80061b0:	080061f9 	.word	0x080061f9
 80061b4:	080061f9 	.word	0x080061f9
 80061b8:	080061f9 	.word	0x080061f9
 80061bc:	080061f9 	.word	0x080061f9
 80061c0:	080061f9 	.word	0x080061f9
 80061c4:	080061f1 	.word	0x080061f1
 80061c8:	2301      	movs	r3, #1
 80061ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ce:	e0bc      	b.n	800634a <UART_SetConfig+0x5a6>
 80061d0:	2304      	movs	r3, #4
 80061d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061d6:	e0b8      	b.n	800634a <UART_SetConfig+0x5a6>
 80061d8:	2308      	movs	r3, #8
 80061da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061de:	e0b4      	b.n	800634a <UART_SetConfig+0x5a6>
 80061e0:	2310      	movs	r3, #16
 80061e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061e6:	e0b0      	b.n	800634a <UART_SetConfig+0x5a6>
 80061e8:	2320      	movs	r3, #32
 80061ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ee:	e0ac      	b.n	800634a <UART_SetConfig+0x5a6>
 80061f0:	2340      	movs	r3, #64	; 0x40
 80061f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061f6:	e0a8      	b.n	800634a <UART_SetConfig+0x5a6>
 80061f8:	2380      	movs	r3, #128	; 0x80
 80061fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061fe:	e0a4      	b.n	800634a <UART_SetConfig+0x5a6>
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a8f      	ldr	r2, [pc, #572]	; (8006444 <UART_SetConfig+0x6a0>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d130      	bne.n	800626c <UART_SetConfig+0x4c8>
 800620a:	4b8d      	ldr	r3, [pc, #564]	; (8006440 <UART_SetConfig+0x69c>)
 800620c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620e:	f003 0307 	and.w	r3, r3, #7
 8006212:	2b05      	cmp	r3, #5
 8006214:	d826      	bhi.n	8006264 <UART_SetConfig+0x4c0>
 8006216:	a201      	add	r2, pc, #4	; (adr r2, 800621c <UART_SetConfig+0x478>)
 8006218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621c:	08006235 	.word	0x08006235
 8006220:	0800623d 	.word	0x0800623d
 8006224:	08006245 	.word	0x08006245
 8006228:	0800624d 	.word	0x0800624d
 800622c:	08006255 	.word	0x08006255
 8006230:	0800625d 	.word	0x0800625d
 8006234:	2300      	movs	r3, #0
 8006236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800623a:	e086      	b.n	800634a <UART_SetConfig+0x5a6>
 800623c:	2304      	movs	r3, #4
 800623e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006242:	e082      	b.n	800634a <UART_SetConfig+0x5a6>
 8006244:	2308      	movs	r3, #8
 8006246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800624a:	e07e      	b.n	800634a <UART_SetConfig+0x5a6>
 800624c:	2310      	movs	r3, #16
 800624e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006252:	e07a      	b.n	800634a <UART_SetConfig+0x5a6>
 8006254:	2320      	movs	r3, #32
 8006256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800625a:	e076      	b.n	800634a <UART_SetConfig+0x5a6>
 800625c:	2340      	movs	r3, #64	; 0x40
 800625e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006262:	e072      	b.n	800634a <UART_SetConfig+0x5a6>
 8006264:	2380      	movs	r3, #128	; 0x80
 8006266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800626a:	e06e      	b.n	800634a <UART_SetConfig+0x5a6>
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a75      	ldr	r2, [pc, #468]	; (8006448 <UART_SetConfig+0x6a4>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d130      	bne.n	80062d8 <UART_SetConfig+0x534>
 8006276:	4b72      	ldr	r3, [pc, #456]	; (8006440 <UART_SetConfig+0x69c>)
 8006278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800627a:	f003 0307 	and.w	r3, r3, #7
 800627e:	2b05      	cmp	r3, #5
 8006280:	d826      	bhi.n	80062d0 <UART_SetConfig+0x52c>
 8006282:	a201      	add	r2, pc, #4	; (adr r2, 8006288 <UART_SetConfig+0x4e4>)
 8006284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006288:	080062a1 	.word	0x080062a1
 800628c:	080062a9 	.word	0x080062a9
 8006290:	080062b1 	.word	0x080062b1
 8006294:	080062b9 	.word	0x080062b9
 8006298:	080062c1 	.word	0x080062c1
 800629c:	080062c9 	.word	0x080062c9
 80062a0:	2300      	movs	r3, #0
 80062a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062a6:	e050      	b.n	800634a <UART_SetConfig+0x5a6>
 80062a8:	2304      	movs	r3, #4
 80062aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ae:	e04c      	b.n	800634a <UART_SetConfig+0x5a6>
 80062b0:	2308      	movs	r3, #8
 80062b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062b6:	e048      	b.n	800634a <UART_SetConfig+0x5a6>
 80062b8:	2310      	movs	r3, #16
 80062ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062be:	e044      	b.n	800634a <UART_SetConfig+0x5a6>
 80062c0:	2320      	movs	r3, #32
 80062c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062c6:	e040      	b.n	800634a <UART_SetConfig+0x5a6>
 80062c8:	2340      	movs	r3, #64	; 0x40
 80062ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ce:	e03c      	b.n	800634a <UART_SetConfig+0x5a6>
 80062d0:	2380      	movs	r3, #128	; 0x80
 80062d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062d6:	e038      	b.n	800634a <UART_SetConfig+0x5a6>
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a5b      	ldr	r2, [pc, #364]	; (800644c <UART_SetConfig+0x6a8>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d130      	bne.n	8006344 <UART_SetConfig+0x5a0>
 80062e2:	4b57      	ldr	r3, [pc, #348]	; (8006440 <UART_SetConfig+0x69c>)
 80062e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062e6:	f003 0307 	and.w	r3, r3, #7
 80062ea:	2b05      	cmp	r3, #5
 80062ec:	d826      	bhi.n	800633c <UART_SetConfig+0x598>
 80062ee:	a201      	add	r2, pc, #4	; (adr r2, 80062f4 <UART_SetConfig+0x550>)
 80062f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f4:	0800630d 	.word	0x0800630d
 80062f8:	08006315 	.word	0x08006315
 80062fc:	0800631d 	.word	0x0800631d
 8006300:	08006325 	.word	0x08006325
 8006304:	0800632d 	.word	0x0800632d
 8006308:	08006335 	.word	0x08006335
 800630c:	2302      	movs	r3, #2
 800630e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006312:	e01a      	b.n	800634a <UART_SetConfig+0x5a6>
 8006314:	2304      	movs	r3, #4
 8006316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800631a:	e016      	b.n	800634a <UART_SetConfig+0x5a6>
 800631c:	2308      	movs	r3, #8
 800631e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006322:	e012      	b.n	800634a <UART_SetConfig+0x5a6>
 8006324:	2310      	movs	r3, #16
 8006326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800632a:	e00e      	b.n	800634a <UART_SetConfig+0x5a6>
 800632c:	2320      	movs	r3, #32
 800632e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006332:	e00a      	b.n	800634a <UART_SetConfig+0x5a6>
 8006334:	2340      	movs	r3, #64	; 0x40
 8006336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800633a:	e006      	b.n	800634a <UART_SetConfig+0x5a6>
 800633c:	2380      	movs	r3, #128	; 0x80
 800633e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006342:	e002      	b.n	800634a <UART_SetConfig+0x5a6>
 8006344:	2380      	movs	r3, #128	; 0x80
 8006346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a3f      	ldr	r2, [pc, #252]	; (800644c <UART_SetConfig+0x6a8>)
 8006350:	4293      	cmp	r3, r2
 8006352:	f040 80f8 	bne.w	8006546 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006356:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800635a:	2b20      	cmp	r3, #32
 800635c:	dc46      	bgt.n	80063ec <UART_SetConfig+0x648>
 800635e:	2b02      	cmp	r3, #2
 8006360:	f2c0 8082 	blt.w	8006468 <UART_SetConfig+0x6c4>
 8006364:	3b02      	subs	r3, #2
 8006366:	2b1e      	cmp	r3, #30
 8006368:	d87e      	bhi.n	8006468 <UART_SetConfig+0x6c4>
 800636a:	a201      	add	r2, pc, #4	; (adr r2, 8006370 <UART_SetConfig+0x5cc>)
 800636c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006370:	080063f3 	.word	0x080063f3
 8006374:	08006469 	.word	0x08006469
 8006378:	080063fb 	.word	0x080063fb
 800637c:	08006469 	.word	0x08006469
 8006380:	08006469 	.word	0x08006469
 8006384:	08006469 	.word	0x08006469
 8006388:	0800640b 	.word	0x0800640b
 800638c:	08006469 	.word	0x08006469
 8006390:	08006469 	.word	0x08006469
 8006394:	08006469 	.word	0x08006469
 8006398:	08006469 	.word	0x08006469
 800639c:	08006469 	.word	0x08006469
 80063a0:	08006469 	.word	0x08006469
 80063a4:	08006469 	.word	0x08006469
 80063a8:	0800641b 	.word	0x0800641b
 80063ac:	08006469 	.word	0x08006469
 80063b0:	08006469 	.word	0x08006469
 80063b4:	08006469 	.word	0x08006469
 80063b8:	08006469 	.word	0x08006469
 80063bc:	08006469 	.word	0x08006469
 80063c0:	08006469 	.word	0x08006469
 80063c4:	08006469 	.word	0x08006469
 80063c8:	08006469 	.word	0x08006469
 80063cc:	08006469 	.word	0x08006469
 80063d0:	08006469 	.word	0x08006469
 80063d4:	08006469 	.word	0x08006469
 80063d8:	08006469 	.word	0x08006469
 80063dc:	08006469 	.word	0x08006469
 80063e0:	08006469 	.word	0x08006469
 80063e4:	08006469 	.word	0x08006469
 80063e8:	0800645b 	.word	0x0800645b
 80063ec:	2b40      	cmp	r3, #64	; 0x40
 80063ee:	d037      	beq.n	8006460 <UART_SetConfig+0x6bc>
 80063f0:	e03a      	b.n	8006468 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80063f2:	f7fe f881 	bl	80044f8 <HAL_RCCEx_GetD3PCLK1Freq>
 80063f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80063f8:	e03c      	b.n	8006474 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063fe:	4618      	mov	r0, r3
 8006400:	f7fe f890 	bl	8004524 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006406:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006408:	e034      	b.n	8006474 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800640a:	f107 0318 	add.w	r3, r7, #24
 800640e:	4618      	mov	r0, r3
 8006410:	f7fe f9dc 	bl	80047cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006418:	e02c      	b.n	8006474 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800641a:	4b09      	ldr	r3, [pc, #36]	; (8006440 <UART_SetConfig+0x69c>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0320 	and.w	r3, r3, #32
 8006422:	2b00      	cmp	r3, #0
 8006424:	d016      	beq.n	8006454 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006426:	4b06      	ldr	r3, [pc, #24]	; (8006440 <UART_SetConfig+0x69c>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	08db      	lsrs	r3, r3, #3
 800642c:	f003 0303 	and.w	r3, r3, #3
 8006430:	4a07      	ldr	r2, [pc, #28]	; (8006450 <UART_SetConfig+0x6ac>)
 8006432:	fa22 f303 	lsr.w	r3, r2, r3
 8006436:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006438:	e01c      	b.n	8006474 <UART_SetConfig+0x6d0>
 800643a:	bf00      	nop
 800643c:	40011400 	.word	0x40011400
 8006440:	58024400 	.word	0x58024400
 8006444:	40007800 	.word	0x40007800
 8006448:	40007c00 	.word	0x40007c00
 800644c:	58000c00 	.word	0x58000c00
 8006450:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006454:	4b9d      	ldr	r3, [pc, #628]	; (80066cc <UART_SetConfig+0x928>)
 8006456:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006458:	e00c      	b.n	8006474 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800645a:	4b9d      	ldr	r3, [pc, #628]	; (80066d0 <UART_SetConfig+0x92c>)
 800645c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800645e:	e009      	b.n	8006474 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006460:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006464:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006466:	e005      	b.n	8006474 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006468:	2300      	movs	r3, #0
 800646a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006472:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006476:	2b00      	cmp	r3, #0
 8006478:	f000 81de 	beq.w	8006838 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006480:	4a94      	ldr	r2, [pc, #592]	; (80066d4 <UART_SetConfig+0x930>)
 8006482:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006486:	461a      	mov	r2, r3
 8006488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800648a:	fbb3 f3f2 	udiv	r3, r3, r2
 800648e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	4613      	mov	r3, r2
 8006496:	005b      	lsls	r3, r3, #1
 8006498:	4413      	add	r3, r2
 800649a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800649c:	429a      	cmp	r2, r3
 800649e:	d305      	bcc.n	80064ac <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d903      	bls.n	80064b4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80064b2:	e1c1      	b.n	8006838 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b6:	2200      	movs	r2, #0
 80064b8:	60bb      	str	r3, [r7, #8]
 80064ba:	60fa      	str	r2, [r7, #12]
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c0:	4a84      	ldr	r2, [pc, #528]	; (80066d4 <UART_SetConfig+0x930>)
 80064c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	2200      	movs	r2, #0
 80064ca:	603b      	str	r3, [r7, #0]
 80064cc:	607a      	str	r2, [r7, #4]
 80064ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064d6:	f7f9 feff 	bl	80002d8 <__aeabi_uldivmod>
 80064da:	4602      	mov	r2, r0
 80064dc:	460b      	mov	r3, r1
 80064de:	4610      	mov	r0, r2
 80064e0:	4619      	mov	r1, r3
 80064e2:	f04f 0200 	mov.w	r2, #0
 80064e6:	f04f 0300 	mov.w	r3, #0
 80064ea:	020b      	lsls	r3, r1, #8
 80064ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064f0:	0202      	lsls	r2, r0, #8
 80064f2:	6979      	ldr	r1, [r7, #20]
 80064f4:	6849      	ldr	r1, [r1, #4]
 80064f6:	0849      	lsrs	r1, r1, #1
 80064f8:	2000      	movs	r0, #0
 80064fa:	460c      	mov	r4, r1
 80064fc:	4605      	mov	r5, r0
 80064fe:	eb12 0804 	adds.w	r8, r2, r4
 8006502:	eb43 0905 	adc.w	r9, r3, r5
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	469a      	mov	sl, r3
 800650e:	4693      	mov	fp, r2
 8006510:	4652      	mov	r2, sl
 8006512:	465b      	mov	r3, fp
 8006514:	4640      	mov	r0, r8
 8006516:	4649      	mov	r1, r9
 8006518:	f7f9 fede 	bl	80002d8 <__aeabi_uldivmod>
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	4613      	mov	r3, r2
 8006522:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006526:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800652a:	d308      	bcc.n	800653e <UART_SetConfig+0x79a>
 800652c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800652e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006532:	d204      	bcs.n	800653e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800653a:	60da      	str	r2, [r3, #12]
 800653c:	e17c      	b.n	8006838 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006544:	e178      	b.n	8006838 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800654e:	f040 80c5 	bne.w	80066dc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006552:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006556:	2b20      	cmp	r3, #32
 8006558:	dc48      	bgt.n	80065ec <UART_SetConfig+0x848>
 800655a:	2b00      	cmp	r3, #0
 800655c:	db7b      	blt.n	8006656 <UART_SetConfig+0x8b2>
 800655e:	2b20      	cmp	r3, #32
 8006560:	d879      	bhi.n	8006656 <UART_SetConfig+0x8b2>
 8006562:	a201      	add	r2, pc, #4	; (adr r2, 8006568 <UART_SetConfig+0x7c4>)
 8006564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006568:	080065f3 	.word	0x080065f3
 800656c:	080065fb 	.word	0x080065fb
 8006570:	08006657 	.word	0x08006657
 8006574:	08006657 	.word	0x08006657
 8006578:	08006603 	.word	0x08006603
 800657c:	08006657 	.word	0x08006657
 8006580:	08006657 	.word	0x08006657
 8006584:	08006657 	.word	0x08006657
 8006588:	08006613 	.word	0x08006613
 800658c:	08006657 	.word	0x08006657
 8006590:	08006657 	.word	0x08006657
 8006594:	08006657 	.word	0x08006657
 8006598:	08006657 	.word	0x08006657
 800659c:	08006657 	.word	0x08006657
 80065a0:	08006657 	.word	0x08006657
 80065a4:	08006657 	.word	0x08006657
 80065a8:	08006623 	.word	0x08006623
 80065ac:	08006657 	.word	0x08006657
 80065b0:	08006657 	.word	0x08006657
 80065b4:	08006657 	.word	0x08006657
 80065b8:	08006657 	.word	0x08006657
 80065bc:	08006657 	.word	0x08006657
 80065c0:	08006657 	.word	0x08006657
 80065c4:	08006657 	.word	0x08006657
 80065c8:	08006657 	.word	0x08006657
 80065cc:	08006657 	.word	0x08006657
 80065d0:	08006657 	.word	0x08006657
 80065d4:	08006657 	.word	0x08006657
 80065d8:	08006657 	.word	0x08006657
 80065dc:	08006657 	.word	0x08006657
 80065e0:	08006657 	.word	0x08006657
 80065e4:	08006657 	.word	0x08006657
 80065e8:	08006649 	.word	0x08006649
 80065ec:	2b40      	cmp	r3, #64	; 0x40
 80065ee:	d02e      	beq.n	800664e <UART_SetConfig+0x8aa>
 80065f0:	e031      	b.n	8006656 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065f2:	f7fc fd4b 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 80065f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80065f8:	e033      	b.n	8006662 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065fa:	f7fc fd5d 	bl	80030b8 <HAL_RCC_GetPCLK2Freq>
 80065fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006600:	e02f      	b.n	8006662 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006606:	4618      	mov	r0, r3
 8006608:	f7fd ff8c 	bl	8004524 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800660c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006610:	e027      	b.n	8006662 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006612:	f107 0318 	add.w	r3, r7, #24
 8006616:	4618      	mov	r0, r3
 8006618:	f7fe f8d8 	bl	80047cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006620:	e01f      	b.n	8006662 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006622:	4b2d      	ldr	r3, [pc, #180]	; (80066d8 <UART_SetConfig+0x934>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0320 	and.w	r3, r3, #32
 800662a:	2b00      	cmp	r3, #0
 800662c:	d009      	beq.n	8006642 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800662e:	4b2a      	ldr	r3, [pc, #168]	; (80066d8 <UART_SetConfig+0x934>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	08db      	lsrs	r3, r3, #3
 8006634:	f003 0303 	and.w	r3, r3, #3
 8006638:	4a24      	ldr	r2, [pc, #144]	; (80066cc <UART_SetConfig+0x928>)
 800663a:	fa22 f303 	lsr.w	r3, r2, r3
 800663e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006640:	e00f      	b.n	8006662 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006642:	4b22      	ldr	r3, [pc, #136]	; (80066cc <UART_SetConfig+0x928>)
 8006644:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006646:	e00c      	b.n	8006662 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006648:	4b21      	ldr	r3, [pc, #132]	; (80066d0 <UART_SetConfig+0x92c>)
 800664a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800664c:	e009      	b.n	8006662 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800664e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006652:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006654:	e005      	b.n	8006662 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006656:	2300      	movs	r3, #0
 8006658:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006660:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006664:	2b00      	cmp	r3, #0
 8006666:	f000 80e7 	beq.w	8006838 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666e:	4a19      	ldr	r2, [pc, #100]	; (80066d4 <UART_SetConfig+0x930>)
 8006670:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006674:	461a      	mov	r2, r3
 8006676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006678:	fbb3 f3f2 	udiv	r3, r3, r2
 800667c:	005a      	lsls	r2, r3, #1
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	085b      	lsrs	r3, r3, #1
 8006684:	441a      	add	r2, r3
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	fbb2 f3f3 	udiv	r3, r2, r3
 800668e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006692:	2b0f      	cmp	r3, #15
 8006694:	d916      	bls.n	80066c4 <UART_SetConfig+0x920>
 8006696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800669c:	d212      	bcs.n	80066c4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800669e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	f023 030f 	bic.w	r3, r3, #15
 80066a6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066aa:	085b      	lsrs	r3, r3, #1
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	f003 0307 	and.w	r3, r3, #7
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80066b6:	4313      	orrs	r3, r2
 80066b8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80066c0:	60da      	str	r2, [r3, #12]
 80066c2:	e0b9      	b.n	8006838 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80066ca:	e0b5      	b.n	8006838 <UART_SetConfig+0xa94>
 80066cc:	03d09000 	.word	0x03d09000
 80066d0:	003d0900 	.word	0x003d0900
 80066d4:	080078f8 	.word	0x080078f8
 80066d8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80066dc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80066e0:	2b20      	cmp	r3, #32
 80066e2:	dc49      	bgt.n	8006778 <UART_SetConfig+0x9d4>
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	db7c      	blt.n	80067e2 <UART_SetConfig+0xa3e>
 80066e8:	2b20      	cmp	r3, #32
 80066ea:	d87a      	bhi.n	80067e2 <UART_SetConfig+0xa3e>
 80066ec:	a201      	add	r2, pc, #4	; (adr r2, 80066f4 <UART_SetConfig+0x950>)
 80066ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f2:	bf00      	nop
 80066f4:	0800677f 	.word	0x0800677f
 80066f8:	08006787 	.word	0x08006787
 80066fc:	080067e3 	.word	0x080067e3
 8006700:	080067e3 	.word	0x080067e3
 8006704:	0800678f 	.word	0x0800678f
 8006708:	080067e3 	.word	0x080067e3
 800670c:	080067e3 	.word	0x080067e3
 8006710:	080067e3 	.word	0x080067e3
 8006714:	0800679f 	.word	0x0800679f
 8006718:	080067e3 	.word	0x080067e3
 800671c:	080067e3 	.word	0x080067e3
 8006720:	080067e3 	.word	0x080067e3
 8006724:	080067e3 	.word	0x080067e3
 8006728:	080067e3 	.word	0x080067e3
 800672c:	080067e3 	.word	0x080067e3
 8006730:	080067e3 	.word	0x080067e3
 8006734:	080067af 	.word	0x080067af
 8006738:	080067e3 	.word	0x080067e3
 800673c:	080067e3 	.word	0x080067e3
 8006740:	080067e3 	.word	0x080067e3
 8006744:	080067e3 	.word	0x080067e3
 8006748:	080067e3 	.word	0x080067e3
 800674c:	080067e3 	.word	0x080067e3
 8006750:	080067e3 	.word	0x080067e3
 8006754:	080067e3 	.word	0x080067e3
 8006758:	080067e3 	.word	0x080067e3
 800675c:	080067e3 	.word	0x080067e3
 8006760:	080067e3 	.word	0x080067e3
 8006764:	080067e3 	.word	0x080067e3
 8006768:	080067e3 	.word	0x080067e3
 800676c:	080067e3 	.word	0x080067e3
 8006770:	080067e3 	.word	0x080067e3
 8006774:	080067d5 	.word	0x080067d5
 8006778:	2b40      	cmp	r3, #64	; 0x40
 800677a:	d02e      	beq.n	80067da <UART_SetConfig+0xa36>
 800677c:	e031      	b.n	80067e2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800677e:	f7fc fc85 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 8006782:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006784:	e033      	b.n	80067ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006786:	f7fc fc97 	bl	80030b8 <HAL_RCC_GetPCLK2Freq>
 800678a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800678c:	e02f      	b.n	80067ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800678e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006792:	4618      	mov	r0, r3
 8006794:	f7fd fec6 	bl	8004524 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800679c:	e027      	b.n	80067ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800679e:	f107 0318 	add.w	r3, r7, #24
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7fe f812 	bl	80047cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067ac:	e01f      	b.n	80067ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067ae:	4b2d      	ldr	r3, [pc, #180]	; (8006864 <UART_SetConfig+0xac0>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0320 	and.w	r3, r3, #32
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d009      	beq.n	80067ce <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80067ba:	4b2a      	ldr	r3, [pc, #168]	; (8006864 <UART_SetConfig+0xac0>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	08db      	lsrs	r3, r3, #3
 80067c0:	f003 0303 	and.w	r3, r3, #3
 80067c4:	4a28      	ldr	r2, [pc, #160]	; (8006868 <UART_SetConfig+0xac4>)
 80067c6:	fa22 f303 	lsr.w	r3, r2, r3
 80067ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067cc:	e00f      	b.n	80067ee <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80067ce:	4b26      	ldr	r3, [pc, #152]	; (8006868 <UART_SetConfig+0xac4>)
 80067d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067d2:	e00c      	b.n	80067ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80067d4:	4b25      	ldr	r3, [pc, #148]	; (800686c <UART_SetConfig+0xac8>)
 80067d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067d8:	e009      	b.n	80067ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067e0:	e005      	b.n	80067ee <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80067e2:	2300      	movs	r3, #0
 80067e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80067ec:	bf00      	nop
    }

    if (pclk != 0U)
 80067ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d021      	beq.n	8006838 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f8:	4a1d      	ldr	r2, [pc, #116]	; (8006870 <UART_SetConfig+0xacc>)
 80067fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067fe:	461a      	mov	r2, r3
 8006800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006802:	fbb3 f2f2 	udiv	r2, r3, r2
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	085b      	lsrs	r3, r3, #1
 800680c:	441a      	add	r2, r3
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	fbb2 f3f3 	udiv	r3, r2, r3
 8006816:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681a:	2b0f      	cmp	r3, #15
 800681c:	d909      	bls.n	8006832 <UART_SetConfig+0xa8e>
 800681e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006824:	d205      	bcs.n	8006832 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006828:	b29a      	uxth	r2, r3
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	60da      	str	r2, [r3, #12]
 8006830:	e002      	b.n	8006838 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	2201      	movs	r2, #1
 800683c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	2201      	movs	r2, #1
 8006844:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	2200      	movs	r2, #0
 800684c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	2200      	movs	r2, #0
 8006852:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006854:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006858:	4618      	mov	r0, r3
 800685a:	3748      	adds	r7, #72	; 0x48
 800685c:	46bd      	mov	sp, r7
 800685e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006862:	bf00      	nop
 8006864:	58024400 	.word	0x58024400
 8006868:	03d09000 	.word	0x03d09000
 800686c:	003d0900 	.word	0x003d0900
 8006870:	080078f8 	.word	0x080078f8

08006874 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006880:	f003 0301 	and.w	r3, r3, #1
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00a      	beq.n	800689e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	430a      	orrs	r2, r1
 800689c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a2:	f003 0302 	and.w	r3, r3, #2
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00a      	beq.n	80068c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	430a      	orrs	r2, r1
 80068be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c4:	f003 0304 	and.w	r3, r3, #4
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00a      	beq.n	80068e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	430a      	orrs	r2, r1
 80068e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e6:	f003 0308 	and.w	r3, r3, #8
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00a      	beq.n	8006904 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	430a      	orrs	r2, r1
 8006902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006908:	f003 0310 	and.w	r3, r3, #16
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00a      	beq.n	8006926 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	430a      	orrs	r2, r1
 8006924:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692a:	f003 0320 	and.w	r3, r3, #32
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00a      	beq.n	8006948 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	430a      	orrs	r2, r1
 8006946:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006950:	2b00      	cmp	r3, #0
 8006952:	d01a      	beq.n	800698a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	430a      	orrs	r2, r1
 8006968:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800696e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006972:	d10a      	bne.n	800698a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	430a      	orrs	r2, r1
 8006988:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00a      	beq.n	80069ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	430a      	orrs	r2, r1
 80069aa:	605a      	str	r2, [r3, #4]
  }
}
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b098      	sub	sp, #96	; 0x60
 80069bc:	af02      	add	r7, sp, #8
 80069be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069c8:	f7fa faf2 	bl	8000fb0 <HAL_GetTick>
 80069cc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0308 	and.w	r3, r3, #8
 80069d8:	2b08      	cmp	r3, #8
 80069da:	d12f      	bne.n	8006a3c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069e0:	9300      	str	r3, [sp, #0]
 80069e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069e4:	2200      	movs	r2, #0
 80069e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f88e 	bl	8006b0c <UART_WaitOnFlagUntilTimeout>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d022      	beq.n	8006a3c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fe:	e853 3f00 	ldrex	r3, [r3]
 8006a02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a0a:	653b      	str	r3, [r7, #80]	; 0x50
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	461a      	mov	r2, r3
 8006a12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a14:	647b      	str	r3, [r7, #68]	; 0x44
 8006a16:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a1c:	e841 2300 	strex	r3, r2, [r1]
 8006a20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1e6      	bne.n	80069f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e063      	b.n	8006b04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0304 	and.w	r3, r3, #4
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	d149      	bne.n	8006ade <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a4a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a4e:	9300      	str	r3, [sp, #0]
 8006a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a52:	2200      	movs	r2, #0
 8006a54:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f857 	bl	8006b0c <UART_WaitOnFlagUntilTimeout>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d03c      	beq.n	8006ade <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6c:	e853 3f00 	ldrex	r3, [r3]
 8006a70:	623b      	str	r3, [r7, #32]
   return(result);
 8006a72:	6a3b      	ldr	r3, [r7, #32]
 8006a74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a82:	633b      	str	r3, [r7, #48]	; 0x30
 8006a84:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a8a:	e841 2300 	strex	r3, r2, [r1]
 8006a8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1e6      	bne.n	8006a64 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	3308      	adds	r3, #8
 8006a9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	e853 3f00 	ldrex	r3, [r3]
 8006aa4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f023 0301 	bic.w	r3, r3, #1
 8006aac:	64bb      	str	r3, [r7, #72]	; 0x48
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	3308      	adds	r3, #8
 8006ab4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ab6:	61fa      	str	r2, [r7, #28]
 8006ab8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aba:	69b9      	ldr	r1, [r7, #24]
 8006abc:	69fa      	ldr	r2, [r7, #28]
 8006abe:	e841 2300 	strex	r3, r2, [r1]
 8006ac2:	617b      	str	r3, [r7, #20]
   return(result);
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1e5      	bne.n	8006a96 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2220      	movs	r2, #32
 8006ace:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e012      	b.n	8006b04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2220      	movs	r2, #32
 8006aea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3758      	adds	r7, #88	; 0x58
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	603b      	str	r3, [r7, #0]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b1c:	e049      	b.n	8006bb2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b24:	d045      	beq.n	8006bb2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b26:	f7fa fa43 	bl	8000fb0 <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	69ba      	ldr	r2, [r7, #24]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d302      	bcc.n	8006b3c <UART_WaitOnFlagUntilTimeout+0x30>
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d101      	bne.n	8006b40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e048      	b.n	8006bd2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0304 	and.w	r3, r3, #4
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d031      	beq.n	8006bb2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	f003 0308 	and.w	r3, r3, #8
 8006b58:	2b08      	cmp	r3, #8
 8006b5a:	d110      	bne.n	8006b7e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2208      	movs	r2, #8
 8006b62:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f000 f839 	bl	8006bdc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2208      	movs	r2, #8
 8006b6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e029      	b.n	8006bd2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	69db      	ldr	r3, [r3, #28]
 8006b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b8c:	d111      	bne.n	8006bb2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f000 f81f 	bl	8006bdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e00f      	b.n	8006bd2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	69da      	ldr	r2, [r3, #28]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	bf0c      	ite	eq
 8006bc2:	2301      	moveq	r3, #1
 8006bc4:	2300      	movne	r3, #0
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	461a      	mov	r2, r3
 8006bca:	79fb      	ldrb	r3, [r7, #7]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d0a6      	beq.n	8006b1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
	...

08006bdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b095      	sub	sp, #84	; 0x54
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bec:	e853 3f00 	ldrex	r3, [r3]
 8006bf0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c02:	643b      	str	r3, [r7, #64]	; 0x40
 8006c04:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c0a:	e841 2300 	strex	r3, r2, [r1]
 8006c0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1e6      	bne.n	8006be4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	3308      	adds	r3, #8
 8006c1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	e853 3f00 	ldrex	r3, [r3]
 8006c24:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c26:	69fa      	ldr	r2, [r7, #28]
 8006c28:	4b1e      	ldr	r3, [pc, #120]	; (8006ca4 <UART_EndRxTransfer+0xc8>)
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	3308      	adds	r3, #8
 8006c34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c3e:	e841 2300 	strex	r3, r2, [r1]
 8006c42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1e5      	bne.n	8006c16 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d118      	bne.n	8006c84 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	e853 3f00 	ldrex	r3, [r3]
 8006c5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	f023 0310 	bic.w	r3, r3, #16
 8006c66:	647b      	str	r3, [r7, #68]	; 0x44
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c70:	61bb      	str	r3, [r7, #24]
 8006c72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c74:	6979      	ldr	r1, [r7, #20]
 8006c76:	69ba      	ldr	r2, [r7, #24]
 8006c78:	e841 2300 	strex	r3, r2, [r1]
 8006c7c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1e6      	bne.n	8006c52 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2220      	movs	r2, #32
 8006c88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006c98:	bf00      	nop
 8006c9a:	3754      	adds	r7, #84	; 0x54
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr
 8006ca4:	effffffe 	.word	0xeffffffe

08006ca8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f7ff f856 	bl	8005d78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ccc:	bf00      	nop
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b088      	sub	sp, #32
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	e853 3f00 	ldrex	r3, [r3]
 8006ce8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cf0:	61fb      	str	r3, [r7, #28]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	61bb      	str	r3, [r7, #24]
 8006cfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfe:	6979      	ldr	r1, [r7, #20]
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	e841 2300 	strex	r3, r2, [r1]
 8006d06:	613b      	str	r3, [r7, #16]
   return(result);
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1e6      	bne.n	8006cdc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2220      	movs	r2, #32
 8006d12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f7ff f821 	bl	8005d64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d22:	bf00      	nop
 8006d24:	3720      	adds	r7, #32
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b083      	sub	sp, #12
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006d32:	bf00      	nop
 8006d34:	370c      	adds	r7, #12
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b083      	sub	sp, #12
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006d46:	bf00      	nop
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr

08006d52 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006d52:	b480      	push	{r7}
 8006d54:	b083      	sub	sp, #12
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006d5a:	bf00      	nop
 8006d5c:	370c      	adds	r7, #12
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b085      	sub	sp, #20
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d101      	bne.n	8006d7c <HAL_UARTEx_DisableFifoMode+0x16>
 8006d78:	2302      	movs	r3, #2
 8006d7a:	e027      	b.n	8006dcc <HAL_UARTEx_DisableFifoMode+0x66>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2224      	movs	r2, #36	; 0x24
 8006d88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f022 0201 	bic.w	r2, r2, #1
 8006da2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006daa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2220      	movs	r2, #32
 8006dbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d101      	bne.n	8006df0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006dec:	2302      	movs	r3, #2
 8006dee:	e02d      	b.n	8006e4c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2224      	movs	r2, #36	; 0x24
 8006dfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f022 0201 	bic.w	r2, r2, #1
 8006e16:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f84f 	bl	8006ed0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2220      	movs	r2, #32
 8006e3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d101      	bne.n	8006e6c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e68:	2302      	movs	r3, #2
 8006e6a:	e02d      	b.n	8006ec8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2224      	movs	r2, #36	; 0x24
 8006e78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f022 0201 	bic.w	r2, r2, #1
 8006e92:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 f811 	bl	8006ed0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2220      	movs	r2, #32
 8006eba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d108      	bne.n	8006ef2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ef0:	e031      	b.n	8006f56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006ef2:	2310      	movs	r3, #16
 8006ef4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006ef6:	2310      	movs	r3, #16
 8006ef8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	0e5b      	lsrs	r3, r3, #25
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	f003 0307 	and.w	r3, r3, #7
 8006f08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	0f5b      	lsrs	r3, r3, #29
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	f003 0307 	and.w	r3, r3, #7
 8006f18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f1a:	7bbb      	ldrb	r3, [r7, #14]
 8006f1c:	7b3a      	ldrb	r2, [r7, #12]
 8006f1e:	4911      	ldr	r1, [pc, #68]	; (8006f64 <UARTEx_SetNbDataToProcess+0x94>)
 8006f20:	5c8a      	ldrb	r2, [r1, r2]
 8006f22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f26:	7b3a      	ldrb	r2, [r7, #12]
 8006f28:	490f      	ldr	r1, [pc, #60]	; (8006f68 <UARTEx_SetNbDataToProcess+0x98>)
 8006f2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f38:	7bfb      	ldrb	r3, [r7, #15]
 8006f3a:	7b7a      	ldrb	r2, [r7, #13]
 8006f3c:	4909      	ldr	r1, [pc, #36]	; (8006f64 <UARTEx_SetNbDataToProcess+0x94>)
 8006f3e:	5c8a      	ldrb	r2, [r1, r2]
 8006f40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f44:	7b7a      	ldrb	r2, [r7, #13]
 8006f46:	4908      	ldr	r1, [pc, #32]	; (8006f68 <UARTEx_SetNbDataToProcess+0x98>)
 8006f48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006f56:	bf00      	nop
 8006f58:	3714      	adds	r7, #20
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	08007910 	.word	0x08007910
 8006f68:	08007918 	.word	0x08007918

08006f6c <LCD_WriteCommand>:
 *	函数功能: 用于向屏幕控制器写入指令
 *
 ****************************************************************************************************************************************/

void LCD_WriteCommand(uint8_t lcd_command)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	4603      	mov	r3, r0
 8006f74:	71fb      	strb	r3, [r7, #7]
  LCD_DC_Command; // 数据指令选择 引脚输出低电平，代表本次传输 指令
 8006f76:	2200      	movs	r2, #0
 8006f78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f7c:	4806      	ldr	r0, [pc, #24]	; (8006f98 <LCD_WriteCommand+0x2c>)
 8006f7e:	f7fb f877 	bl	8002070 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&LCD_SPI, &lcd_command, 1, 1000); // 启动SPI传输
 8006f82:	1df9      	adds	r1, r7, #7
 8006f84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f88:	2201      	movs	r2, #1
 8006f8a:	4804      	ldr	r0, [pc, #16]	; (8006f9c <LCD_WriteCommand+0x30>)
 8006f8c:	f7fd fffa 	bl	8004f84 <HAL_SPI_Transmit>
}
 8006f90:	bf00      	nop
 8006f92:	3708      	adds	r7, #8
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	58021000 	.word	0x58021000
 8006f9c:	24000038 	.word	0x24000038

08006fa0 <LCD_WriteData_8bit>:
 *	函数功能: 写入8位数据
 *
 ****************************************************************************************************************************************/

void LCD_WriteData_8bit(uint8_t lcd_data)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	71fb      	strb	r3, [r7, #7]
  LCD_DC_Data; // 数据指令选择 引脚输出高电平，代表本次传输 数据
 8006faa:	2201      	movs	r2, #1
 8006fac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006fb0:	4806      	ldr	r0, [pc, #24]	; (8006fcc <LCD_WriteData_8bit+0x2c>)
 8006fb2:	f7fb f85d 	bl	8002070 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&LCD_SPI, &lcd_data, 1, 1000); // 启动SPI传输
 8006fb6:	1df9      	adds	r1, r7, #7
 8006fb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	4804      	ldr	r0, [pc, #16]	; (8006fd0 <LCD_WriteData_8bit+0x30>)
 8006fc0:	f7fd ffe0 	bl	8004f84 <HAL_SPI_Transmit>
}
 8006fc4:	bf00      	nop
 8006fc6:	3708      	adds	r7, #8
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	58021000 	.word	0x58021000
 8006fd0:	24000038 	.word	0x24000038

08006fd4 <LCD_WriteData_16bit>:
 *	函数功能: 写入16位数据
 *
 ****************************************************************************************************************************************/

void LCD_WriteData_16bit(uint16_t lcd_data)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	4603      	mov	r3, r0
 8006fdc:	80fb      	strh	r3, [r7, #6]
  uint8_t lcd_data_buff[2]; // 数据发送区
  LCD_DC_Data;              // 数据指令选择 引脚输出高电平，代表本次传输 数据
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006fe4:	480b      	ldr	r0, [pc, #44]	; (8007014 <LCD_WriteData_16bit+0x40>)
 8006fe6:	f7fb f843 	bl	8002070 <HAL_GPIO_WritePin>

  lcd_data_buff[0] = lcd_data >> 8; // 将数据拆分
 8006fea:	88fb      	ldrh	r3, [r7, #6]
 8006fec:	0a1b      	lsrs	r3, r3, #8
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	733b      	strb	r3, [r7, #12]
  lcd_data_buff[1] = lcd_data;
 8006ff4:	88fb      	ldrh	r3, [r7, #6]
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	737b      	strb	r3, [r7, #13]

  HAL_SPI_Transmit(&LCD_SPI, lcd_data_buff, 2, 1000); // 启动SPI传输
 8006ffa:	f107 010c 	add.w	r1, r7, #12
 8006ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007002:	2202      	movs	r2, #2
 8007004:	4804      	ldr	r0, [pc, #16]	; (8007018 <LCD_WriteData_16bit+0x44>)
 8007006:	f7fd ffbd 	bl	8004f84 <HAL_SPI_Transmit>
}
 800700a:	bf00      	nop
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	58021000 	.word	0x58021000
 8007018:	24000038 	.word	0x24000038

0800701c <LCD_Init>:
 *	函数功能: 初始化SPI以及屏幕控制器的各种参数
 *
 ****************************************************************************************************************************************/

void LCD_Init(void)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	af00      	add	r7, sp, #0

  HAL_Delay(10); // 屏幕刚完成复位时（包括上电复位），需要等待至少5ms才能发送指令
 8007020:	200a      	movs	r0, #10
 8007022:	f7f9 ffd1 	bl	8000fc8 <HAL_Delay>

  LCD_WriteCommand(0x36);   // 显存访问控制 指令，用于设置访问显存的方式
 8007026:	2036      	movs	r0, #54	; 0x36
 8007028:	f7ff ffa0 	bl	8006f6c <LCD_WriteCommand>
  LCD_WriteData_8bit(0x00); // 配置成 从上到下、从左到右，RGB像素格式
 800702c:	2000      	movs	r0, #0
 800702e:	f7ff ffb7 	bl	8006fa0 <LCD_WriteData_8bit>

  LCD_WriteCommand(0x3A);   // 接口像素格式 指令，用于设置使用 12位、16位还是18位色
 8007032:	203a      	movs	r0, #58	; 0x3a
 8007034:	f7ff ff9a 	bl	8006f6c <LCD_WriteCommand>
  LCD_WriteData_8bit(0x05); // 此处配置成 16位 像素格式
 8007038:	2005      	movs	r0, #5
 800703a:	f7ff ffb1 	bl	8006fa0 <LCD_WriteData_8bit>

  // 接下来很多都是电压设置指令，直接使用厂家给设定值
  LCD_WriteCommand(0xB2);
 800703e:	20b2      	movs	r0, #178	; 0xb2
 8007040:	f7ff ff94 	bl	8006f6c <LCD_WriteCommand>
  LCD_WriteData_8bit(0x0C);
 8007044:	200c      	movs	r0, #12
 8007046:	f7ff ffab 	bl	8006fa0 <LCD_WriteData_8bit>
  LCD_WriteData_8bit(0x0C);
 800704a:	200c      	movs	r0, #12
 800704c:	f7ff ffa8 	bl	8006fa0 <LCD_WriteData_8bit>
  LCD_WriteData_8bit(0x00);
 8007050:	2000      	movs	r0, #0
 8007052:	f7ff ffa5 	bl	8006fa0 <LCD_WriteData_8bit>
  LCD_WriteData_8bit(0x33);
 8007056:	2033      	movs	r0, #51	; 0x33
 8007058:	f7ff ffa2 	bl	8006fa0 <LCD_WriteData_8bit>
  LCD_WriteData_8bit(0x33);
 800705c:	2033      	movs	r0, #51	; 0x33
 800705e:	f7ff ff9f 	bl	8006fa0 <LCD_WriteData_8bit>

  LCD_WriteCommand(0xB7);   // 栅极电压设置指令
 8007062:	20b7      	movs	r0, #183	; 0xb7
 8007064:	f7ff ff82 	bl	8006f6c <LCD_WriteCommand>
  LCD_WriteData_8bit(0x35); // VGH = 13.26V，VGL = -10.43V
 8007068:	2035      	movs	r0, #53	; 0x35
 800706a:	f7ff ff99 	bl	8006fa0 <LCD_WriteData_8bit>

  LCD_WriteCommand(0xBB);   // 公共电压设置指令
 800706e:	20bb      	movs	r0, #187	; 0xbb
 8007070:	f7ff ff7c 	bl	8006f6c <LCD_WriteCommand>
  LCD_WriteData_8bit(0x19); // VCOM = 1.35V
 8007074:	2019      	movs	r0, #25
 8007076:	f7ff ff93 	bl	8006fa0 <LCD_WriteData_8bit>

  LCD_WriteCommand(0xC0);
 800707a:	20c0      	movs	r0, #192	; 0xc0
 800707c:	f7ff ff76 	bl	8006f6c <LCD_WriteCommand>
  LCD_WriteData_8bit(0x2C);
 8007080:	202c      	movs	r0, #44	; 0x2c
 8007082:	f7ff ff8d 	bl	8006fa0 <LCD_WriteData_8bit>

  LCD_WriteCommand(0xC2);   // VDV 和 VRH 来源设置
 8007086:	20c2      	movs	r0, #194	; 0xc2
 8007088:	f7ff ff70 	bl	8006f6c <LCD_WriteCommand>
  LCD_WriteData_8bit(0x01); // VDV 和 VRH 由用户自由配置
 800708c:	2001      	movs	r0, #1
 800708e:	f7ff ff87 	bl	8006fa0 <LCD_WriteData_8bit>

  LCD_WriteCommand(0xC3);   // VRH电压 设置指令
 8007092:	20c3      	movs	r0, #195	; 0xc3
 8007094:	f7ff ff6a 	bl	8006f6c <LCD_WriteCommand>
  LCD_WriteData_8bit(0x12); // VRH电压 = 4.6+( vcom+vcom offset+vdv)
 8007098:	2012      	movs	r0, #18
 800709a:	f7ff ff81 	bl	8006fa0 <LCD_WriteData_8bit>

  LCD_WriteCommand(0xC4);   // VDV电压 设置指令
 800709e:	20c4      	movs	r0, #196	; 0xc4
 80070a0:	f7ff ff64 	bl	8006f6c <LCD_WriteCommand>
  LCD_WriteData_8bit(0x20); // VDV电压 = 0v
 80070a4:	2020      	movs	r0, #32
 80070a6:	f7ff ff7b 	bl	8006fa0 <LCD_WriteData_8bit>

  LCD_WriteCommand(0xC6);   // 正常模式的帧率控制指令
 80070aa:	20c6      	movs	r0, #198	; 0xc6
 80070ac:	f7ff ff5e 	bl	8006f6c <LCD_WriteCommand>
  LCD_WriteData_8bit(0x0F); // 设置屏幕控制器的刷新帧率为60帧
 80070b0:	200f      	movs	r0, #15
 80070b2:	f7ff ff75 	bl	8006fa0 <LCD_WriteData_8bit>

  LCD_WriteCommand(0xD0);   // 电源控制指令
 80070b6:	20d0      	movs	r0, #208	; 0xd0
 80070b8:	f7ff ff58 	bl	8006f6c <LCD_WriteCommand>
  LCD_WriteData_8bit(0xA4); // 无效数据，固定写入0xA4
 80070bc:	20a4      	movs	r0, #164	; 0xa4
 80070be:	f7ff ff6f 	bl	8006fa0 <LCD_WriteData_8bit>
  LCD_WriteData_8bit(0xA1); // AVDD = 6.8V ，AVDD = -4.8V ，VDS = 2.3V
 80070c2:	20a1      	movs	r0, #161	; 0xa1
 80070c4:	f7ff ff6c 	bl	8006fa0 <LCD_WriteData_8bit>

  LCD_WriteCommand(0xE0); // 正极电压伽马值设定
 80070c8:	20e0      	movs	r0, #224	; 0xe0
 80070ca:	f7ff ff4f 	bl	8006f6c <LCD_WriteCommand>
  LCD_WriteData_8bit(0xD0);
 80070ce:	20d0      	movs	r0, #208	; 0xd0
 80070d0:	f7ff ff66 	bl	8006fa0 <LCD_WriteData_8bit>
  LCD_WriteData_8bit(0x04);
 80070d4:	2004      	movs	r0, #4
 80070d6:	f7ff ff63 	bl	8006fa0 <LCD_WriteData_8bit>
  LCD_WriteData_8bit(0x0D);
 80070da:	200d      	movs	r0, #13
 80070dc:	f7ff ff60 	bl	8006fa0 <LCD_WriteData_8bit>
  LCD_WriteData_8bit(0x11);
 80070e0:	2011      	movs	r0, #17
 80070e2:	f7ff ff5d 	bl	8006fa0 <LCD_WriteData_8bit>
  LCD_WriteData_8bit(0x13);
 80070e6:	2013      	movs	r0, #19
 80070e8:	f7ff ff5a 	bl	8006fa0 <LCD_WriteData_8bit>
  LCD_WriteData_8bit(0x2B);
 80070ec:	202b      	movs	r0, #43	; 0x2b
 80070ee:	f7ff ff57 	bl	8006fa0 <LCD_WriteData_8bit>
  LCD_WriteData_8bit(0x3F);
 80070f2:	203f      	movs	r0, #63	; 0x3f
 80070f4:	f7ff ff54 	bl	8006fa0 <LCD_WriteData_8bit>
  LCD_WriteData_8bit(0x54);
 80070f8:	2054      	movs	r0, #84	; 0x54
 80070fa:	f7ff ff51 	bl	8006fa0 <LCD_WriteData_8bit>
  LCD_WriteData_8bit(0x4C);
 80070fe:	204c      	movs	r0, #76	; 0x4c
 8007100:	f7ff ff4e 	bl	8006fa0 <LCD_WriteData_8bit>
  LCD_WriteData_8bit(0x18);
 8007104:	2018      	movs	r0, #24
 8007106:	f7ff ff4b 	bl	8006fa0 <LCD_WriteData_8bit>
  LCD_WriteData_8bit(0x0D);
 800710a:	200d      	movs	r0, #13
 800710c:	f7ff ff48 	bl	8006fa0 <LCD_WriteData_8bit>
  LCD_WriteData_8bit(0x0B);
 8007110:	200b      	movs	r0, #11
 8007112:	f7ff ff45 	bl	8006fa0 <LCD_WriteData_8bit>
  LCD_WriteData_8bit(0x1F);
 8007116:	201f      	movs	r0, #31
 8007118:	f7ff ff42 	bl	8006fa0 <LCD_WriteData_8bit>
  LCD_WriteData_8bit(0x23);
 800711c:	2023      	movs	r0, #35	; 0x23
 800711e:	f7ff ff3f 	bl	8006fa0 <LCD_WriteData_8bit>

  LCD_WriteCommand(0xE1); // 负极电压伽马值设定
 8007122:	20e1      	movs	r0, #225	; 0xe1
 8007124:	f7ff ff22 	bl	8006f6c <LCD_WriteCommand>
  LCD_WriteData_8bit(0xD0);
 8007128:	20d0      	movs	r0, #208	; 0xd0
 800712a:	f7ff ff39 	bl	8006fa0 <LCD_WriteData_8bit>
  LCD_WriteData_8bit(0x04);
 800712e:	2004      	movs	r0, #4
 8007130:	f7ff ff36 	bl	8006fa0 <LCD_WriteData_8bit>
  LCD_WriteData_8bit(0x0C);
 8007134:	200c      	movs	r0, #12
 8007136:	f7ff ff33 	bl	8006fa0 <LCD_WriteData_8bit>
  LCD_WriteData_8bit(0x11);
 800713a:	2011      	movs	r0, #17
 800713c:	f7ff ff30 	bl	8006fa0 <LCD_WriteData_8bit>
  LCD_WriteData_8bit(0x13);
 8007140:	2013      	movs	r0, #19
 8007142:	f7ff ff2d 	bl	8006fa0 <LCD_WriteData_8bit>
  LCD_WriteData_8bit(0x2C);
 8007146:	202c      	movs	r0, #44	; 0x2c
 8007148:	f7ff ff2a 	bl	8006fa0 <LCD_WriteData_8bit>
  LCD_WriteData_8bit(0x3F);
 800714c:	203f      	movs	r0, #63	; 0x3f
 800714e:	f7ff ff27 	bl	8006fa0 <LCD_WriteData_8bit>
  LCD_WriteData_8bit(0x44);
 8007152:	2044      	movs	r0, #68	; 0x44
 8007154:	f7ff ff24 	bl	8006fa0 <LCD_WriteData_8bit>
  LCD_WriteData_8bit(0x51);
 8007158:	2051      	movs	r0, #81	; 0x51
 800715a:	f7ff ff21 	bl	8006fa0 <LCD_WriteData_8bit>
  LCD_WriteData_8bit(0x2F);
 800715e:	202f      	movs	r0, #47	; 0x2f
 8007160:	f7ff ff1e 	bl	8006fa0 <LCD_WriteData_8bit>
  LCD_WriteData_8bit(0x1F);
 8007164:	201f      	movs	r0, #31
 8007166:	f7ff ff1b 	bl	8006fa0 <LCD_WriteData_8bit>
  LCD_WriteData_8bit(0x1F);
 800716a:	201f      	movs	r0, #31
 800716c:	f7ff ff18 	bl	8006fa0 <LCD_WriteData_8bit>
  LCD_WriteData_8bit(0x20);
 8007170:	2020      	movs	r0, #32
 8007172:	f7ff ff15 	bl	8006fa0 <LCD_WriteData_8bit>
  LCD_WriteData_8bit(0x23);
 8007176:	2023      	movs	r0, #35	; 0x23
 8007178:	f7ff ff12 	bl	8006fa0 <LCD_WriteData_8bit>

  LCD_WriteCommand(0x21); // 打开反显，因为面板是常黑型，操作需要反过来
 800717c:	2021      	movs	r0, #33	; 0x21
 800717e:	f7ff fef5 	bl	8006f6c <LCD_WriteCommand>

  // 退出休眠指令，LCD控制器在刚上电、复位时，会自动进入休眠模式 ，因此操作屏幕之前，需要退出休眠
  LCD_WriteCommand(0x11); // 退出休眠 指令
 8007182:	2011      	movs	r0, #17
 8007184:	f7ff fef2 	bl	8006f6c <LCD_WriteCommand>
  HAL_Delay(120);         // 需要等待120ms，让电源电压和时钟电路稳定下来
 8007188:	2078      	movs	r0, #120	; 0x78
 800718a:	f7f9 ff1d 	bl	8000fc8 <HAL_Delay>

  // 打开显示指令，LCD控制器在刚上电、复位时，会自动关闭显示
  LCD_WriteCommand(0x29); // 打开显示
 800718e:	2029      	movs	r0, #41	; 0x29
 8007190:	f7ff feec 	bl	8006f6c <LCD_WriteCommand>

  // 以下进行一些驱动的默认设置
  LCD_SetDirection(Direction_V); //	设置显示方向
 8007194:	2002      	movs	r0, #2
 8007196:	f000 f8bd 	bl	8007314 <LCD_SetDirection>
  LCD_SetBackColor(LCD_BLACK);   // 设置背景色
 800719a:	2000      	movs	r0, #0
 800719c:	f000 f88a 	bl	80072b4 <LCD_SetBackColor>
  LCD_SetColor(LCD_WHITE);       // 设置画笔色
 80071a0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80071a4:	f000 f856 	bl	8007254 <LCD_SetColor>
  LCD_Clear();                   // 清屏
 80071a8:	f000 f92e 	bl	8007408 <LCD_Clear>

  LCD_SetAsciiFont(&ASCII_Font24); // 设置默认字体
 80071ac:	4806      	ldr	r0, [pc, #24]	; (80071c8 <LCD_Init+0x1ac>)
 80071ae:	f000 f91b 	bl	80073e8 <LCD_SetAsciiFont>
  LCD_ShowNumMode(Fill_Zero);      // 设置变量显示模式，多余位填充空格还是填充0
 80071b2:	2000      	movs	r0, #0
 80071b4:	f000 f95e 	bl	8007474 <LCD_ShowNumMode>

  // 全部设置完毕之后，打开背光
  LCD_Backlight_ON; // 引脚输出高电平点亮背光
 80071b8:	2201      	movs	r2, #1
 80071ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80071be:	4803      	ldr	r0, [pc, #12]	; (80071cc <LCD_Init+0x1b0>)
 80071c0:	f7fa ff56 	bl	8002070 <HAL_GPIO_WritePin>
}
 80071c4:	bf00      	nop
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	24000010 	.word	0x24000010
 80071cc:	58020c00 	.word	0x58020c00

080071d0 <LCD_SetAddress>:
 *
 *	函数功能:   设置需要显示的坐标区域
 *****************************************************************************************************************************************/

void LCD_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80071d0:	b590      	push	{r4, r7, lr}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	4604      	mov	r4, r0
 80071d8:	4608      	mov	r0, r1
 80071da:	4611      	mov	r1, r2
 80071dc:	461a      	mov	r2, r3
 80071de:	4623      	mov	r3, r4
 80071e0:	80fb      	strh	r3, [r7, #6]
 80071e2:	4603      	mov	r3, r0
 80071e4:	80bb      	strh	r3, [r7, #4]
 80071e6:	460b      	mov	r3, r1
 80071e8:	807b      	strh	r3, [r7, #2]
 80071ea:	4613      	mov	r3, r2
 80071ec:	803b      	strh	r3, [r7, #0]
  LCD_WriteCommand(0x2a); //	列地址设置，即X坐标
 80071ee:	202a      	movs	r0, #42	; 0x2a
 80071f0:	f7ff febc 	bl	8006f6c <LCD_WriteCommand>
  LCD_WriteData_16bit(x1 + LCD.X_Offset);
 80071f4:	4b16      	ldr	r3, [pc, #88]	; (8007250 <LCD_SetAddress+0x80>)
 80071f6:	7b9b      	ldrb	r3, [r3, #14]
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	88fb      	ldrh	r3, [r7, #6]
 80071fc:	4413      	add	r3, r2
 80071fe:	b29b      	uxth	r3, r3
 8007200:	4618      	mov	r0, r3
 8007202:	f7ff fee7 	bl	8006fd4 <LCD_WriteData_16bit>
  LCD_WriteData_16bit(x2 + LCD.X_Offset);
 8007206:	4b12      	ldr	r3, [pc, #72]	; (8007250 <LCD_SetAddress+0x80>)
 8007208:	7b9b      	ldrb	r3, [r3, #14]
 800720a:	b29a      	uxth	r2, r3
 800720c:	887b      	ldrh	r3, [r7, #2]
 800720e:	4413      	add	r3, r2
 8007210:	b29b      	uxth	r3, r3
 8007212:	4618      	mov	r0, r3
 8007214:	f7ff fede 	bl	8006fd4 <LCD_WriteData_16bit>

  LCD_WriteCommand(0x2b); //	行地址设置，即Y坐标
 8007218:	202b      	movs	r0, #43	; 0x2b
 800721a:	f7ff fea7 	bl	8006f6c <LCD_WriteCommand>
  LCD_WriteData_16bit(y1 + LCD.Y_Offset);
 800721e:	4b0c      	ldr	r3, [pc, #48]	; (8007250 <LCD_SetAddress+0x80>)
 8007220:	7bdb      	ldrb	r3, [r3, #15]
 8007222:	b29a      	uxth	r2, r3
 8007224:	88bb      	ldrh	r3, [r7, #4]
 8007226:	4413      	add	r3, r2
 8007228:	b29b      	uxth	r3, r3
 800722a:	4618      	mov	r0, r3
 800722c:	f7ff fed2 	bl	8006fd4 <LCD_WriteData_16bit>
  LCD_WriteData_16bit(y2 + LCD.Y_Offset);
 8007230:	4b07      	ldr	r3, [pc, #28]	; (8007250 <LCD_SetAddress+0x80>)
 8007232:	7bdb      	ldrb	r3, [r3, #15]
 8007234:	b29a      	uxth	r2, r3
 8007236:	883b      	ldrh	r3, [r7, #0]
 8007238:	4413      	add	r3, r2
 800723a:	b29b      	uxth	r3, r3
 800723c:	4618      	mov	r0, r3
 800723e:	f7ff fec9 	bl	8006fd4 <LCD_WriteData_16bit>

  LCD_WriteCommand(0x2c); //	开始写入显存，即要显示的颜色数据
 8007242:	202c      	movs	r0, #44	; 0x2c
 8007244:	f7ff fe92 	bl	8006f6c <LCD_WriteCommand>
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	bd90      	pop	{r4, r7, pc}
 8007250:	2400015c 	.word	0x2400015c

08007254 <LCD_SetColor>:
 *					2. 24位的颜色中，从高位到低位分别对应 R、G、B  3个颜色通道
 *
 *****************************************************************************************************************************************/

void LCD_SetColor(uint32_t Color)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  uint16_t Red_Value = 0, Green_Value = 0, Blue_Value = 0; // 各个颜色通道的值
 800725c:	2300      	movs	r3, #0
 800725e:	81fb      	strh	r3, [r7, #14]
 8007260:	2300      	movs	r3, #0
 8007262:	81bb      	strh	r3, [r7, #12]
 8007264:	2300      	movs	r3, #0
 8007266:	817b      	strh	r3, [r7, #10]

  Red_Value = (uint16_t)((Color & 0x00F80000) >> 8); // 转换成 16位 的RGB565颜色
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	0a1b      	lsrs	r3, r3, #8
 800726c:	b29a      	uxth	r2, r3
 800726e:	4b0f      	ldr	r3, [pc, #60]	; (80072ac <LCD_SetColor+0x58>)
 8007270:	4013      	ands	r3, r2
 8007272:	81fb      	strh	r3, [r7, #14]
  Green_Value = (uint16_t)((Color & 0x0000FC00) >> 5);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	095b      	lsrs	r3, r3, #5
 8007278:	b29b      	uxth	r3, r3
 800727a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800727e:	81bb      	strh	r3, [r7, #12]
  Blue_Value = (uint16_t)((Color & 0x000000F8) >> 3);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	08db      	lsrs	r3, r3, #3
 8007284:	b29b      	uxth	r3, r3
 8007286:	f003 031f 	and.w	r3, r3, #31
 800728a:	817b      	strh	r3, [r7, #10]

  LCD.Color = (uint16_t)(Red_Value | Green_Value | Blue_Value); // 将颜色写入全局LCD参数
 800728c:	89fa      	ldrh	r2, [r7, #14]
 800728e:	89bb      	ldrh	r3, [r7, #12]
 8007290:	4313      	orrs	r3, r2
 8007292:	b29a      	uxth	r2, r3
 8007294:	897b      	ldrh	r3, [r7, #10]
 8007296:	4313      	orrs	r3, r2
 8007298:	b29b      	uxth	r3, r3
 800729a:	461a      	mov	r2, r3
 800729c:	4b04      	ldr	r3, [pc, #16]	; (80072b0 <LCD_SetColor+0x5c>)
 800729e:	601a      	str	r2, [r3, #0]
}
 80072a0:	bf00      	nop
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	fffff800 	.word	0xfffff800
 80072b0:	2400015c 	.word	0x2400015c

080072b4 <LCD_SetBackColor>:
 *					2. 24位的颜色中，从高位到低位分别对应 R、G、B  3个颜色通道
 *
 *****************************************************************************************************************************************/

void LCD_SetBackColor(uint32_t Color)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  uint16_t Red_Value = 0, Green_Value = 0, Blue_Value = 0; // 各个颜色通道的值
 80072bc:	2300      	movs	r3, #0
 80072be:	81fb      	strh	r3, [r7, #14]
 80072c0:	2300      	movs	r3, #0
 80072c2:	81bb      	strh	r3, [r7, #12]
 80072c4:	2300      	movs	r3, #0
 80072c6:	817b      	strh	r3, [r7, #10]

  Red_Value = (uint16_t)((Color & 0x00F80000) >> 8); // 转换成 16位 的RGB565颜色
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	0a1b      	lsrs	r3, r3, #8
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	4b0f      	ldr	r3, [pc, #60]	; (800730c <LCD_SetBackColor+0x58>)
 80072d0:	4013      	ands	r3, r2
 80072d2:	81fb      	strh	r3, [r7, #14]
  Green_Value = (uint16_t)((Color & 0x0000FC00) >> 5);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	095b      	lsrs	r3, r3, #5
 80072d8:	b29b      	uxth	r3, r3
 80072da:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80072de:	81bb      	strh	r3, [r7, #12]
  Blue_Value = (uint16_t)((Color & 0x000000F8) >> 3);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	08db      	lsrs	r3, r3, #3
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	f003 031f 	and.w	r3, r3, #31
 80072ea:	817b      	strh	r3, [r7, #10]

  LCD.BackColor = (uint16_t)(Red_Value | Green_Value | Blue_Value); // 将颜色写入全局LCD参数
 80072ec:	89fa      	ldrh	r2, [r7, #14]
 80072ee:	89bb      	ldrh	r3, [r7, #12]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	897b      	ldrh	r3, [r7, #10]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	461a      	mov	r2, r3
 80072fc:	4b04      	ldr	r3, [pc, #16]	; (8007310 <LCD_SetBackColor+0x5c>)
 80072fe:	605a      	str	r2, [r3, #4]
}
 8007300:	bf00      	nop
 8007302:	3714      	adds	r7, #20
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	fffff800 	.word	0xfffff800
 8007310:	2400015c 	.word	0x2400015c

08007314 <LCD_SetDirection>:
 *              2. 使用示例 LCD_DisplayDirection(Direction_H) ，即设置屏幕横屏显示
 *
 *****************************************************************************************************************************************/

void LCD_SetDirection(uint8_t direction)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	4603      	mov	r3, r0
 800731c:	71fb      	strb	r3, [r7, #7]
  LCD.Direction = direction; // 写入全局LCD参数
 800731e:	4a31      	ldr	r2, [pc, #196]	; (80073e4 <LCD_SetDirection+0xd0>)
 8007320:	79fb      	ldrb	r3, [r7, #7]
 8007322:	7253      	strb	r3, [r2, #9]

  if (direction == Direction_H) // 横屏显示
 8007324:	79fb      	ldrb	r3, [r7, #7]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d113      	bne.n	8007352 <LCD_SetDirection+0x3e>
  {
    LCD_WriteCommand(0x36);   // 显存访问控制 指令，用于设置访问显存的方式
 800732a:	2036      	movs	r0, #54	; 0x36
 800732c:	f7ff fe1e 	bl	8006f6c <LCD_WriteCommand>
    LCD_WriteData_8bit(0x70); // 横屏显示
 8007330:	2070      	movs	r0, #112	; 0x70
 8007332:	f7ff fe35 	bl	8006fa0 <LCD_WriteData_8bit>
    LCD.X_Offset = 20;        // 设置控制器坐标偏移量
 8007336:	4b2b      	ldr	r3, [pc, #172]	; (80073e4 <LCD_SetDirection+0xd0>)
 8007338:	2214      	movs	r2, #20
 800733a:	739a      	strb	r2, [r3, #14]
    LCD.Y_Offset = 0;
 800733c:	4b29      	ldr	r3, [pc, #164]	; (80073e4 <LCD_SetDirection+0xd0>)
 800733e:	2200      	movs	r2, #0
 8007340:	73da      	strb	r2, [r3, #15]
    LCD.Width = LCD_Height; // 重新赋值长、宽
 8007342:	4b28      	ldr	r3, [pc, #160]	; (80073e4 <LCD_SetDirection+0xd0>)
 8007344:	f44f 728c 	mov.w	r2, #280	; 0x118
 8007348:	815a      	strh	r2, [r3, #10]
    LCD.Height = LCD_Width;
 800734a:	4b26      	ldr	r3, [pc, #152]	; (80073e4 <LCD_SetDirection+0xd0>)
 800734c:	22f0      	movs	r2, #240	; 0xf0
 800734e:	819a      	strh	r2, [r3, #12]
    LCD.X_Offset = 0;         // 设置控制器坐标偏移量
    LCD.Y_Offset = 20;
    LCD.Width = LCD_Width; // 重新赋值长、宽
    LCD.Height = LCD_Height;
  }
}
 8007350:	e043      	b.n	80073da <LCD_SetDirection+0xc6>
  else if (direction == Direction_V)
 8007352:	79fb      	ldrb	r3, [r7, #7]
 8007354:	2b02      	cmp	r3, #2
 8007356:	d113      	bne.n	8007380 <LCD_SetDirection+0x6c>
    LCD_WriteCommand(0x36);   // 显存访问控制 指令，用于设置访问显存的方式
 8007358:	2036      	movs	r0, #54	; 0x36
 800735a:	f7ff fe07 	bl	8006f6c <LCD_WriteCommand>
    LCD_WriteData_8bit(0x00); // 垂直显示
 800735e:	2000      	movs	r0, #0
 8007360:	f7ff fe1e 	bl	8006fa0 <LCD_WriteData_8bit>
    LCD.X_Offset = 0;         // 设置控制器坐标偏移量
 8007364:	4b1f      	ldr	r3, [pc, #124]	; (80073e4 <LCD_SetDirection+0xd0>)
 8007366:	2200      	movs	r2, #0
 8007368:	739a      	strb	r2, [r3, #14]
    LCD.Y_Offset = 20;
 800736a:	4b1e      	ldr	r3, [pc, #120]	; (80073e4 <LCD_SetDirection+0xd0>)
 800736c:	2214      	movs	r2, #20
 800736e:	73da      	strb	r2, [r3, #15]
    LCD.Width = LCD_Width; // 重新赋值长、宽
 8007370:	4b1c      	ldr	r3, [pc, #112]	; (80073e4 <LCD_SetDirection+0xd0>)
 8007372:	22f0      	movs	r2, #240	; 0xf0
 8007374:	815a      	strh	r2, [r3, #10]
    LCD.Height = LCD_Height;
 8007376:	4b1b      	ldr	r3, [pc, #108]	; (80073e4 <LCD_SetDirection+0xd0>)
 8007378:	f44f 728c 	mov.w	r2, #280	; 0x118
 800737c:	819a      	strh	r2, [r3, #12]
}
 800737e:	e02c      	b.n	80073da <LCD_SetDirection+0xc6>
  else if (direction == Direction_H_Flip)
 8007380:	79fb      	ldrb	r3, [r7, #7]
 8007382:	2b01      	cmp	r3, #1
 8007384:	d113      	bne.n	80073ae <LCD_SetDirection+0x9a>
    LCD_WriteCommand(0x36);   // 显存访问控制 指令，用于设置访问显存的方式
 8007386:	2036      	movs	r0, #54	; 0x36
 8007388:	f7ff fdf0 	bl	8006f6c <LCD_WriteCommand>
    LCD_WriteData_8bit(0xA0); // 横屏显示，并上下翻转，RGB像素格式
 800738c:	20a0      	movs	r0, #160	; 0xa0
 800738e:	f7ff fe07 	bl	8006fa0 <LCD_WriteData_8bit>
    LCD.X_Offset = 20;        // 设置控制器坐标偏移量
 8007392:	4b14      	ldr	r3, [pc, #80]	; (80073e4 <LCD_SetDirection+0xd0>)
 8007394:	2214      	movs	r2, #20
 8007396:	739a      	strb	r2, [r3, #14]
    LCD.Y_Offset = 0;
 8007398:	4b12      	ldr	r3, [pc, #72]	; (80073e4 <LCD_SetDirection+0xd0>)
 800739a:	2200      	movs	r2, #0
 800739c:	73da      	strb	r2, [r3, #15]
    LCD.Width = LCD_Height; // 重新赋值长、宽
 800739e:	4b11      	ldr	r3, [pc, #68]	; (80073e4 <LCD_SetDirection+0xd0>)
 80073a0:	f44f 728c 	mov.w	r2, #280	; 0x118
 80073a4:	815a      	strh	r2, [r3, #10]
    LCD.Height = LCD_Width;
 80073a6:	4b0f      	ldr	r3, [pc, #60]	; (80073e4 <LCD_SetDirection+0xd0>)
 80073a8:	22f0      	movs	r2, #240	; 0xf0
 80073aa:	819a      	strh	r2, [r3, #12]
}
 80073ac:	e015      	b.n	80073da <LCD_SetDirection+0xc6>
  else if (direction == Direction_V_Flip)
 80073ae:	79fb      	ldrb	r3, [r7, #7]
 80073b0:	2b03      	cmp	r3, #3
 80073b2:	d112      	bne.n	80073da <LCD_SetDirection+0xc6>
    LCD_WriteCommand(0x36);   // 显存访问控制 指令，用于设置访问显存的方式
 80073b4:	2036      	movs	r0, #54	; 0x36
 80073b6:	f7ff fdd9 	bl	8006f6c <LCD_WriteCommand>
    LCD_WriteData_8bit(0xC0); // 垂直显示 ，并上下翻转，RGB像素格式
 80073ba:	20c0      	movs	r0, #192	; 0xc0
 80073bc:	f7ff fdf0 	bl	8006fa0 <LCD_WriteData_8bit>
    LCD.X_Offset = 0;         // 设置控制器坐标偏移量
 80073c0:	4b08      	ldr	r3, [pc, #32]	; (80073e4 <LCD_SetDirection+0xd0>)
 80073c2:	2200      	movs	r2, #0
 80073c4:	739a      	strb	r2, [r3, #14]
    LCD.Y_Offset = 20;
 80073c6:	4b07      	ldr	r3, [pc, #28]	; (80073e4 <LCD_SetDirection+0xd0>)
 80073c8:	2214      	movs	r2, #20
 80073ca:	73da      	strb	r2, [r3, #15]
    LCD.Width = LCD_Width; // 重新赋值长、宽
 80073cc:	4b05      	ldr	r3, [pc, #20]	; (80073e4 <LCD_SetDirection+0xd0>)
 80073ce:	22f0      	movs	r2, #240	; 0xf0
 80073d0:	815a      	strh	r2, [r3, #10]
    LCD.Height = LCD_Height;
 80073d2:	4b04      	ldr	r3, [pc, #16]	; (80073e4 <LCD_SetDirection+0xd0>)
 80073d4:	f44f 728c 	mov.w	r2, #280	; 0x118
 80073d8:	819a      	strh	r2, [r3, #12]
}
 80073da:	bf00      	nop
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	2400015c 	.word	0x2400015c

080073e8 <LCD_SetAsciiFont>:
 *					2. 相关字模存放在 lcd_fonts.c
 *
 *****************************************************************************************************************************************/

void LCD_SetAsciiFont(pFONT *Asciifonts)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  LCD_AsciiFonts = Asciifonts;
 80073f0:	4a04      	ldr	r2, [pc, #16]	; (8007404 <LCD_SetAsciiFont+0x1c>)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6013      	str	r3, [r2, #0]
}
 80073f6:	bf00      	nop
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	24000158 	.word	0x24000158

08007408 <LCD_Clear>:
 *	说    明:	先用 LCD_SetBackColor() 设置要清除的背景色，再调用该函数清屏即可
 *
 *****************************************************************************************************************************************/

void LCD_Clear(void)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	af00      	add	r7, sp, #0
  LCD_SetAddress(0, 0, LCD.Width - 1, LCD.Height - 1); // 设置坐标
 800740c:	4b16      	ldr	r3, [pc, #88]	; (8007468 <LCD_Clear+0x60>)
 800740e:	895b      	ldrh	r3, [r3, #10]
 8007410:	3b01      	subs	r3, #1
 8007412:	b29a      	uxth	r2, r3
 8007414:	4b14      	ldr	r3, [pc, #80]	; (8007468 <LCD_Clear+0x60>)
 8007416:	899b      	ldrh	r3, [r3, #12]
 8007418:	3b01      	subs	r3, #1
 800741a:	b29b      	uxth	r3, r3
 800741c:	2100      	movs	r1, #0
 800741e:	2000      	movs	r0, #0
 8007420:	f7ff fed6 	bl	80071d0 <LCD_SetAddress>

  LCD_DC_Data; // 数据指令选择 引脚输出高电平，代表本次传输 数据
 8007424:	2201      	movs	r2, #1
 8007426:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800742a:	4810      	ldr	r0, [pc, #64]	; (800746c <LCD_Clear+0x64>)
 800742c:	f7fa fe20 	bl	8002070 <HAL_GPIO_WritePin>

  // 修改为16位数据宽度，写入数据更加效率，不需要拆分
  LCD_SPI.Init.DataSize = SPI_DATASIZE_16BIT; //	16位数据宽度
 8007430:	4b0f      	ldr	r3, [pc, #60]	; (8007470 <LCD_Clear+0x68>)
 8007432:	220f      	movs	r2, #15
 8007434:	60da      	str	r2, [r3, #12]
  HAL_SPI_Init(&LCD_SPI);
 8007436:	480e      	ldr	r0, [pc, #56]	; (8007470 <LCD_Clear+0x68>)
 8007438:	f7fd fc80 	bl	8004d3c <HAL_SPI_Init>

  LCD_SPI_Transmit(&LCD_SPI, LCD.BackColor, LCD.Width * LCD.Height); // 启动传输
 800743c:	4b0a      	ldr	r3, [pc, #40]	; (8007468 <LCD_Clear+0x60>)
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	b29b      	uxth	r3, r3
 8007442:	4a09      	ldr	r2, [pc, #36]	; (8007468 <LCD_Clear+0x60>)
 8007444:	8952      	ldrh	r2, [r2, #10]
 8007446:	4611      	mov	r1, r2
 8007448:	4a07      	ldr	r2, [pc, #28]	; (8007468 <LCD_Clear+0x60>)
 800744a:	8992      	ldrh	r2, [r2, #12]
 800744c:	fb01 f202 	mul.w	r2, r1, r2
 8007450:	4619      	mov	r1, r3
 8007452:	4807      	ldr	r0, [pc, #28]	; (8007470 <LCD_Clear+0x68>)
 8007454:	f000 f8ec 	bl	8007630 <LCD_SPI_Transmit>

  // 改回8位数据宽度，因为指令和部分数据都是按照8位传输的
  LCD_SPI.Init.DataSize = SPI_DATASIZE_8BIT; //	8位数据宽度
 8007458:	4b05      	ldr	r3, [pc, #20]	; (8007470 <LCD_Clear+0x68>)
 800745a:	2207      	movs	r2, #7
 800745c:	60da      	str	r2, [r3, #12]
  HAL_SPI_Init(&LCD_SPI);
 800745e:	4804      	ldr	r0, [pc, #16]	; (8007470 <LCD_Clear+0x68>)
 8007460:	f7fd fc6c 	bl	8004d3c <HAL_SPI_Init>
}
 8007464:	bf00      	nop
 8007466:	bd80      	pop	{r7, pc}
 8007468:	2400015c 	.word	0x2400015c
 800746c:	58021000 	.word	0x58021000
 8007470:	24000038 	.word	0x24000038

08007474 <LCD_ShowNumMode>:
 *					2. 使用示例 LCD_ShowNumMode(Fill_Zero) 设置多余位填充0，例如 123 可以显示为 000123
 *
 *****************************************************************************************************************************************/

void LCD_ShowNumMode(uint8_t mode)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	4603      	mov	r3, r0
 800747c:	71fb      	strb	r3, [r7, #7]
  LCD.ShowNum_Mode = mode;
 800747e:	4a04      	ldr	r2, [pc, #16]	; (8007490 <LCD_ShowNumMode+0x1c>)
 8007480:	79fb      	ldrb	r3, [r7, #7]
 8007482:	7213      	strb	r3, [r2, #8]
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr
 8007490:	2400015c 	.word	0x2400015c

08007494 <LCD_SPI_WaitOnFlagUntilTimeout>:
 * @param Tickstart: Tick start value
 * @retval HAL status
 */
HAL_StatusTypeDef LCD_SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                 uint32_t Tickstart, uint32_t Timeout)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	603b      	str	r3, [r7, #0]
 80074a0:	4613      	mov	r3, r2
 80074a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80074a4:	e010      	b.n	80074c8 <LCD_SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >= Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074a6:	f7f9 fd83 	bl	8000fb0 <HAL_GetTick>
 80074aa:	4602      	mov	r2, r0
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	69ba      	ldr	r2, [r7, #24]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d803      	bhi.n	80074be <LCD_SPI_WaitOnFlagUntilTimeout+0x2a>
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074bc:	d102      	bne.n	80074c4 <LCD_SPI_WaitOnFlagUntilTimeout+0x30>
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d101      	bne.n	80074c8 <LCD_SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e00f      	b.n	80074e8 <LCD_SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	695a      	ldr	r2, [r3, #20]
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	4013      	ands	r3, r2
 80074d2:	68ba      	ldr	r2, [r7, #8]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	bf0c      	ite	eq
 80074d8:	2301      	moveq	r3, #1
 80074da:	2300      	movne	r3, #0
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	461a      	mov	r2, r3
 80074e0:	79fb      	ldrb	r3, [r7, #7]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d0df      	beq.n	80074a6 <LCD_SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <LCD_SPI_CloseTransfer>:
 *               the configuration information for SPI module.
 * @retval HAL_ERROR: if any error detected
 *         HAL_OK: if nothing detected
 */
void LCD_SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	695b      	ldr	r3, [r3, #20]
 80074fe:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	699a      	ldr	r2, [r3, #24]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f042 0208 	orr.w	r2, r2, #8
 800750e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	699a      	ldr	r2, [r3, #24]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f042 0210 	orr.w	r2, r2, #16
 800751e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f022 0201 	bic.w	r2, r2, #1
 800752e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6919      	ldr	r1, [r3, #16]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	4b3c      	ldr	r3, [pc, #240]	; (800762c <LCD_SPI_CloseTransfer+0x13c>)
 800753c:	400b      	ands	r3, r1
 800753e:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	689a      	ldr	r2, [r3, #8]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800754e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007556:	b2db      	uxtb	r3, r3
 8007558:	2b04      	cmp	r3, #4
 800755a:	d014      	beq.n	8007586 <LCD_SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f003 0320 	and.w	r3, r3, #32
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00f      	beq.n	8007586 <LCD_SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800756c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	699a      	ldr	r2, [r3, #24]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f042 0220 	orr.w	r2, r2, #32
 8007584:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800758c:	b2db      	uxtb	r3, r3
 800758e:	2b03      	cmp	r3, #3
 8007590:	d014      	beq.n	80075bc <LCD_SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00f      	beq.n	80075bc <LCD_SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075a2:	f043 0204 	orr.w	r2, r3, #4
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	699a      	ldr	r2, [r3, #24]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075ba:	619a      	str	r2, [r3, #24]
    }
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00f      	beq.n	80075e6 <LCD_SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075cc:	f043 0201 	orr.w	r2, r3, #1
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	699a      	ldr	r2, [r3, #24]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075e4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00f      	beq.n	8007610 <LCD_SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075f6:	f043 0208 	orr.w	r2, r3, #8
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	699a      	ldr	r2, [r3, #24]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800760e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8007620:	bf00      	nop
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr
 800762c:	fffffc90 	.word	0xfffffc90

08007630 <LCD_SPI_Transmit>:
 * @param  Size   : 数据大小
 * @retval HAL status
 */

HAL_StatusTypeDef LCD_SPI_Transmit(SPI_HandleTypeDef *hspi, uint16_t pData, uint32_t Size)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b08c      	sub	sp, #48	; 0x30
 8007634:	af02      	add	r7, sp, #8
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	460b      	mov	r3, r1
 800763a:	607a      	str	r2, [r7, #4]
 800763c:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;
  uint32_t Timeout = 1000;  // 超时判断
 800763e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007642:	623b      	str	r3, [r7, #32]
  uint32_t LCD_pData_32bit; // 按32位传输时的数据
  uint32_t LCD_TxDataCount; // 传输计数
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007644:	2300      	movs	r3, #0
 8007646:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800764e:	2b01      	cmp	r3, #1
 8007650:	d101      	bne.n	8007656 <LCD_SPI_Transmit+0x26>
 8007652:	2302      	movs	r3, #2
 8007654:	e0fe      	b.n	8007854 <LCD_SPI_Transmit+0x224>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800765e:	f7f9 fca7 	bl	8000fb0 <HAL_GetTick>
 8007662:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2b01      	cmp	r3, #1
 800766e:	d007      	beq.n	8007680 <LCD_SPI_Transmit+0x50>
  {
    errorcode = HAL_BUSY;
 8007670:	2302      	movs	r3, #2
 8007672:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800767c:	7ffb      	ldrb	r3, [r7, #31]
 800767e:	e0e9      	b.n	8007854 <LCD_SPI_Transmit+0x224>
  }

  if (Size == 0UL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d107      	bne.n	8007696 <LCD_SPI_Transmit+0x66>
  {
    errorcode = HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007692:	7ffb      	ldrb	r3, [r7, #31]
 8007694:	e0de      	b.n	8007854 <LCD_SPI_Transmit+0x224>
  }

  /* Set the transaction information */
  hspi->State = HAL_SPI_STATE_BUSY_TX;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2203      	movs	r2, #3
 800769a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  LCD_TxDataCount = Size;                  // 传输的数据长度
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	627b      	str	r3, [r7, #36]	; 0x24
  LCD_pData_32bit = (pData << 16) | pData; // 按32位传输时，合并2个像素点的颜色
 80076aa:	897b      	ldrh	r3, [r7, #10]
 80076ac:	041a      	lsls	r2, r3, #16
 80076ae:	897b      	ldrh	r3, [r7, #10]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	617b      	str	r3, [r7, #20]

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr = NULL;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2200      	movs	r2, #0
 80076b8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize = (uint16_t)0UL;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR = NULL;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2200      	movs	r2, #0
 80076ce:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR = NULL;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2200      	movs	r2, #0
 80076d4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80076de:	d107      	bne.n	80076f0 <LCD_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076ee:	601a      	str	r2, [r3, #0]
  }

  // 不使用硬件 TSIZE 控制，此处设置为0，即不限制传输的数据长度
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6859      	ldr	r1, [r3, #4]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	4b58      	ldr	r3, [pc, #352]	; (800785c <LCD_SPI_Transmit+0x22c>)
 80076fc:	400b      	ands	r3, r1
 80076fe:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f042 0201 	orr.w	r2, r2, #1
 800770e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007718:	d14e      	bne.n	80077b8 <LCD_SPI_Transmit+0x188>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007728:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  while (LCD_TxDataCount > 0UL)
 800772a:	e045      	b.n	80077b8 <LCD_SPI_Transmit+0x188>
  {
    /* Wait until TXP flag is set to send data */
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	f003 0302 	and.w	r3, r3, #2
 8007736:	2b02      	cmp	r3, #2
 8007738:	d11a      	bne.n	8007770 <LCD_SPI_Transmit+0x140>
    {
      if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007740:	b29b      	uxth	r3, r3
 8007742:	2b01      	cmp	r3, #1
 8007744:	d90b      	bls.n	800775e <LCD_SPI_Transmit+0x12e>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800774a:	2b00      	cmp	r3, #0
 800774c:	d007      	beq.n	800775e <LCD_SPI_Transmit+0x12e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = (uint32_t)LCD_pData_32bit;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	697a      	ldr	r2, [r7, #20]
 8007754:	621a      	str	r2, [r3, #32]
        LCD_TxDataCount -= (uint16_t)2UL;
 8007756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007758:	3b02      	subs	r3, #2
 800775a:	627b      	str	r3, [r7, #36]	; 0x24
 800775c:	e02c      	b.n	80077b8 <LCD_SPI_Transmit+0x188>
      }
      else
      {
        *((__IO uint16_t *)&hspi->Instance->TXDR) = (uint16_t)pData;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	3320      	adds	r3, #32
 8007764:	897a      	ldrh	r2, [r7, #10]
 8007766:	801a      	strh	r2, [r3, #0]
        LCD_TxDataCount--;
 8007768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776a:	3b01      	subs	r3, #1
 800776c:	627b      	str	r3, [r7, #36]	; 0x24
 800776e:	e023      	b.n	80077b8 <LCD_SPI_Transmit+0x188>
      }
    }
    else
    {
      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >= Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007770:	f7f9 fc1e 	bl	8000fb0 <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	6a3a      	ldr	r2, [r7, #32]
 800777c:	429a      	cmp	r2, r3
 800777e:	d803      	bhi.n	8007788 <LCD_SPI_Transmit+0x158>
 8007780:	6a3b      	ldr	r3, [r7, #32]
 8007782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007786:	d102      	bne.n	800778e <LCD_SPI_Transmit+0x15e>
 8007788:	6a3b      	ldr	r3, [r7, #32]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d114      	bne.n	80077b8 <LCD_SPI_Transmit+0x188>
      {
        /* Call standard close procedure with error check */
        LCD_SPI_CloseTransfer(hspi);
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f7ff feae 	bl	80074f0 <LCD_SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e04d      	b.n	8007854 <LCD_SPI_Transmit+0x224>
  while (LCD_TxDataCount > 0UL)
 80077b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1b6      	bne.n	800772c <LCD_SPI_Transmit+0xfc>
      }
    }
  }

  if (LCD_SPI_WaitOnFlagUntilTimeout(hspi, SPI_SR_TXC, RESET, tickstart, Timeout) != HAL_OK)
 80077be:	6a3b      	ldr	r3, [r7, #32]
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f7ff fe62 	bl	8007494 <LCD_SPI_WaitOnFlagUntilTimeout>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d007      	beq.n	80077e6 <LCD_SPI_Transmit+0x1b6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077dc:	f043 0220 	orr.w	r2, r3, #32
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  SET_BIT((hspi)->Instance->CR1, SPI_CR1_CSUSP); // 请求挂起SPI传输
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077f4:	601a      	str	r2, [r3, #0]
  /* 等待SPI挂起 */
  if (LCD_SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_SUSP, RESET, tickstart, Timeout) != HAL_OK)
 80077f6:	6a3b      	ldr	r3, [r7, #32]
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f7ff fe46 	bl	8007494 <LCD_SPI_WaitOnFlagUntilTimeout>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d007      	beq.n	800781e <LCD_SPI_Transmit+0x1ee>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007814:	f043 0220 	orr.w	r2, r3, #32
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
  LCD_SPI_CloseTransfer(hspi); /* Call standard close procedure with error check */
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f7ff fe66 	bl	80074f0 <LCD_SPI_CloseTransfer>

  SET_BIT((hspi)->Instance->IFCR, SPI_IFCR_SUSPC); // 清除挂起标志位
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	699a      	ldr	r2, [r3, #24]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007832:	619a      	str	r2, [r3, #24]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2200      	movs	r2, #0
 8007838:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800784a:	2b00      	cmp	r3, #0
 800784c:	d001      	beq.n	8007852 <LCD_SPI_Transmit+0x222>
  {
    return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e000      	b.n	8007854 <LCD_SPI_Transmit+0x224>
  }
  return errorcode;
 8007852:	7ffb      	ldrb	r3, [r7, #31]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3728      	adds	r7, #40	; 0x28
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	ffff0000 	.word	0xffff0000

08007860 <LED_Init>:

#include "stm32h7xx_hal.h"
#include "led.h"

void LED_Init(void)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	af00      	add	r7, sp, #0
  LED1_ON;
 8007864:	2200      	movs	r2, #0
 8007866:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800786a:	4802      	ldr	r0, [pc, #8]	; (8007874 <LED_Init+0x14>)
 800786c:	f7fa fc00 	bl	8002070 <HAL_GPIO_WritePin>
}
 8007870:	bf00      	nop
 8007872:	bd80      	pop	{r7, pc}
 8007874:	58020800 	.word	0x58020800

08007878 <memset>:
 8007878:	4402      	add	r2, r0
 800787a:	4603      	mov	r3, r0
 800787c:	4293      	cmp	r3, r2
 800787e:	d100      	bne.n	8007882 <memset+0xa>
 8007880:	4770      	bx	lr
 8007882:	f803 1b01 	strb.w	r1, [r3], #1
 8007886:	e7f9      	b.n	800787c <memset+0x4>

08007888 <__libc_init_array>:
 8007888:	b570      	push	{r4, r5, r6, lr}
 800788a:	4d0d      	ldr	r5, [pc, #52]	; (80078c0 <__libc_init_array+0x38>)
 800788c:	4c0d      	ldr	r4, [pc, #52]	; (80078c4 <__libc_init_array+0x3c>)
 800788e:	1b64      	subs	r4, r4, r5
 8007890:	10a4      	asrs	r4, r4, #2
 8007892:	2600      	movs	r6, #0
 8007894:	42a6      	cmp	r6, r4
 8007896:	d109      	bne.n	80078ac <__libc_init_array+0x24>
 8007898:	4d0b      	ldr	r5, [pc, #44]	; (80078c8 <__libc_init_array+0x40>)
 800789a:	4c0c      	ldr	r4, [pc, #48]	; (80078cc <__libc_init_array+0x44>)
 800789c:	f000 f818 	bl	80078d0 <_init>
 80078a0:	1b64      	subs	r4, r4, r5
 80078a2:	10a4      	asrs	r4, r4, #2
 80078a4:	2600      	movs	r6, #0
 80078a6:	42a6      	cmp	r6, r4
 80078a8:	d105      	bne.n	80078b6 <__libc_init_array+0x2e>
 80078aa:	bd70      	pop	{r4, r5, r6, pc}
 80078ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80078b0:	4798      	blx	r3
 80078b2:	3601      	adds	r6, #1
 80078b4:	e7ee      	b.n	8007894 <__libc_init_array+0xc>
 80078b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80078ba:	4798      	blx	r3
 80078bc:	3601      	adds	r6, #1
 80078be:	e7f2      	b.n	80078a6 <__libc_init_array+0x1e>
 80078c0:	08008af8 	.word	0x08008af8
 80078c4:	08008af8 	.word	0x08008af8
 80078c8:	08008af8 	.word	0x08008af8
 80078cc:	08008afc 	.word	0x08008afc

080078d0 <_init>:
 80078d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078d2:	bf00      	nop
 80078d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078d6:	bc08      	pop	{r3}
 80078d8:	469e      	mov	lr, r3
 80078da:	4770      	bx	lr

080078dc <_fini>:
 80078dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078de:	bf00      	nop
 80078e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078e2:	bc08      	pop	{r3}
 80078e4:	469e      	mov	lr, r3
 80078e6:	4770      	bx	lr
