
CubeMX_STM32F407VET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006214  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008dc  0800639c  0800639c  0001639c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c78  08006c78  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08006c78  08006c78  00016c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c80  08006c80  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c80  08006c80  00016c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c84  08006c84  00016c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08006c88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          000003a4  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000428  20000428  00020084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001410c  00000000  00000000  000200f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000030ff  00000000  00000000  00034203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001340  00000000  00000000  00037308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f08  00000000  00000000  00038648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023d7a  00000000  00000000  00039550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018fe0  00000000  00000000  0005d2ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d1e54  00000000  00000000  000762aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005700  00000000  00000000  00148100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0014d800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000084 	.word	0x20000084
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006384 	.word	0x08006384

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000088 	.word	0x20000088
 80001c4:	08006384 	.word	0x08006384

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08c      	sub	sp, #48	; 0x30
 80004c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 031c 	add.w	r3, r7, #28
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004da:	2300      	movs	r3, #0
 80004dc:	61bb      	str	r3, [r7, #24]
 80004de:	4b4d      	ldr	r3, [pc, #308]	; (8000614 <MX_GPIO_Init+0x150>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	4a4c      	ldr	r2, [pc, #304]	; (8000614 <MX_GPIO_Init+0x150>)
 80004e4:	f043 0304 	orr.w	r3, r3, #4
 80004e8:	6313      	str	r3, [r2, #48]	; 0x30
 80004ea:	4b4a      	ldr	r3, [pc, #296]	; (8000614 <MX_GPIO_Init+0x150>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	f003 0304 	and.w	r3, r3, #4
 80004f2:	61bb      	str	r3, [r7, #24]
 80004f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004f6:	2300      	movs	r3, #0
 80004f8:	617b      	str	r3, [r7, #20]
 80004fa:	4b46      	ldr	r3, [pc, #280]	; (8000614 <MX_GPIO_Init+0x150>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	4a45      	ldr	r2, [pc, #276]	; (8000614 <MX_GPIO_Init+0x150>)
 8000500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000504:	6313      	str	r3, [r2, #48]	; 0x30
 8000506:	4b43      	ldr	r3, [pc, #268]	; (8000614 <MX_GPIO_Init+0x150>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050e:	617b      	str	r3, [r7, #20]
 8000510:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	2300      	movs	r3, #0
 8000514:	613b      	str	r3, [r7, #16]
 8000516:	4b3f      	ldr	r3, [pc, #252]	; (8000614 <MX_GPIO_Init+0x150>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	4a3e      	ldr	r2, [pc, #248]	; (8000614 <MX_GPIO_Init+0x150>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	6313      	str	r3, [r2, #48]	; 0x30
 8000522:	4b3c      	ldr	r3, [pc, #240]	; (8000614 <MX_GPIO_Init+0x150>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	613b      	str	r3, [r7, #16]
 800052c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	60fb      	str	r3, [r7, #12]
 8000532:	4b38      	ldr	r3, [pc, #224]	; (8000614 <MX_GPIO_Init+0x150>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	4a37      	ldr	r2, [pc, #220]	; (8000614 <MX_GPIO_Init+0x150>)
 8000538:	f043 0310 	orr.w	r3, r3, #16
 800053c:	6313      	str	r3, [r2, #48]	; 0x30
 800053e:	4b35      	ldr	r3, [pc, #212]	; (8000614 <MX_GPIO_Init+0x150>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	f003 0310 	and.w	r3, r3, #16
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054a:	2300      	movs	r3, #0
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	4b31      	ldr	r3, [pc, #196]	; (8000614 <MX_GPIO_Init+0x150>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	4a30      	ldr	r2, [pc, #192]	; (8000614 <MX_GPIO_Init+0x150>)
 8000554:	f043 0302 	orr.w	r3, r3, #2
 8000558:	6313      	str	r3, [r2, #48]	; 0x30
 800055a:	4b2e      	ldr	r3, [pc, #184]	; (8000614 <MX_GPIO_Init+0x150>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	f003 0302 	and.w	r3, r3, #2
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	4b2a      	ldr	r3, [pc, #168]	; (8000614 <MX_GPIO_Init+0x150>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a29      	ldr	r2, [pc, #164]	; (8000614 <MX_GPIO_Init+0x150>)
 8000570:	f043 0308 	orr.w	r3, r3, #8
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
 8000576:	4b27      	ldr	r3, [pc, #156]	; (8000614 <MX_GPIO_Init+0x150>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f003 0308 	and.w	r3, r3, #8
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_24L01_Pin|CE_24L01_Pin, GPIO_PIN_SET);
 8000582:	2201      	movs	r2, #1
 8000584:	2160      	movs	r1, #96	; 0x60
 8000586:	4824      	ldr	r0, [pc, #144]	; (8000618 <MX_GPIO_Init+0x154>)
 8000588:	f001 f94e 	bl	8001828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Back_AIN2_Pin|Back_BIN1_Pin|Back_BIN2_Pin, GPIO_PIN_RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	21e0      	movs	r1, #224	; 0xe0
 8000590:	4822      	ldr	r0, [pc, #136]	; (800061c <MX_GPIO_Init+0x158>)
 8000592:	f001 f949 	bl	8001828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Front_AIN1_Pin|Front_AIN2_Pin|Front_BIN1_Pin|Front_BIN2_Pin
 8000596:	2200      	movs	r2, #0
 8000598:	21f8      	movs	r1, #248	; 0xf8
 800059a:	4821      	ldr	r0, [pc, #132]	; (8000620 <MX_GPIO_Init+0x15c>)
 800059c:	f001 f944 	bl	8001828 <HAL_GPIO_WritePin>
                          |Back_AIN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_24L01_Pin;
 80005a0:	2310      	movs	r3, #16
 80005a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005a4:	2300      	movs	r3, #0
 80005a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005a8:	2301      	movs	r3, #1
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IRQ_24L01_GPIO_Port, &GPIO_InitStruct);
 80005ac:	f107 031c 	add.w	r3, r7, #28
 80005b0:	4619      	mov	r1, r3
 80005b2:	4819      	ldr	r0, [pc, #100]	; (8000618 <MX_GPIO_Init+0x154>)
 80005b4:	f000 ff9c 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CSN_24L01_Pin|CE_24L01_Pin;
 80005b8:	2360      	movs	r3, #96	; 0x60
 80005ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005bc:	2301      	movs	r3, #1
 80005be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c4:	2302      	movs	r3, #2
 80005c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c8:	f107 031c 	add.w	r3, r7, #28
 80005cc:	4619      	mov	r1, r3
 80005ce:	4812      	ldr	r0, [pc, #72]	; (8000618 <MX_GPIO_Init+0x154>)
 80005d0:	f000 ff8e 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = Back_AIN2_Pin|Back_BIN1_Pin|Back_BIN2_Pin;
 80005d4:	23e0      	movs	r3, #224	; 0xe0
 80005d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d8:	2301      	movs	r3, #1
 80005da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e0:	2300      	movs	r3, #0
 80005e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005e4:	f107 031c 	add.w	r3, r7, #28
 80005e8:	4619      	mov	r1, r3
 80005ea:	480c      	ldr	r0, [pc, #48]	; (800061c <MX_GPIO_Init+0x158>)
 80005ec:	f000 ff80 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = Front_AIN1_Pin|Front_AIN2_Pin|Front_BIN1_Pin|Front_BIN2_Pin
 80005f0:	23f8      	movs	r3, #248	; 0xf8
 80005f2:	61fb      	str	r3, [r7, #28]
                          |Back_AIN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f4:	2301      	movs	r3, #1
 80005f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fc:	2300      	movs	r3, #0
 80005fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000600:	f107 031c 	add.w	r3, r7, #28
 8000604:	4619      	mov	r1, r3
 8000606:	4806      	ldr	r0, [pc, #24]	; (8000620 <MX_GPIO_Init+0x15c>)
 8000608:	f000 ff72 	bl	80014f0 <HAL_GPIO_Init>

}
 800060c:	bf00      	nop
 800060e:	3730      	adds	r7, #48	; 0x30
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40023800 	.word	0x40023800
 8000618:	40020000 	.word	0x40020000
 800061c:	40020c00 	.word	0x40020c00
 8000620:	40020400 	.word	0x40020400

08000624 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <MX_I2C1_Init+0x50>)
 800062a:	4a13      	ldr	r2, [pc, #76]	; (8000678 <MX_I2C1_Init+0x54>)
 800062c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_I2C1_Init+0x50>)
 8000630:	4a12      	ldr	r2, [pc, #72]	; (800067c <MX_I2C1_Init+0x58>)
 8000632:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_I2C1_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_I2C1_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <MX_I2C1_Init+0x50>)
 8000642:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000646:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000648:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <MX_I2C1_Init+0x50>)
 800064a:	2200      	movs	r2, #0
 800064c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_I2C1_Init+0x50>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000654:	4b07      	ldr	r3, [pc, #28]	; (8000674 <MX_I2C1_Init+0x50>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <MX_I2C1_Init+0x50>)
 800065c:	2200      	movs	r2, #0
 800065e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000660:	4804      	ldr	r0, [pc, #16]	; (8000674 <MX_I2C1_Init+0x50>)
 8000662:	f001 f8fb 	bl	800185c <HAL_I2C_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800066c:	f000 f93a 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200000a0 	.word	0x200000a0
 8000678:	40005400 	.word	0x40005400
 800067c:	00061a80 	.word	0x00061a80

08000680 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a19      	ldr	r2, [pc, #100]	; (8000704 <HAL_I2C_MspInit+0x84>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d12c      	bne.n	80006fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
 80006a6:	4b18      	ldr	r3, [pc, #96]	; (8000708 <HAL_I2C_MspInit+0x88>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a17      	ldr	r2, [pc, #92]	; (8000708 <HAL_I2C_MspInit+0x88>)
 80006ac:	f043 0302 	orr.w	r3, r3, #2
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <HAL_I2C_MspInit+0x88>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0302 	and.w	r3, r3, #2
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006c4:	2312      	movs	r3, #18
 80006c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006cc:	2303      	movs	r3, #3
 80006ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006d0:	2304      	movs	r3, #4
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	4619      	mov	r1, r3
 80006da:	480c      	ldr	r0, [pc, #48]	; (800070c <HAL_I2C_MspInit+0x8c>)
 80006dc:	f000 ff08 	bl	80014f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	4b08      	ldr	r3, [pc, #32]	; (8000708 <HAL_I2C_MspInit+0x88>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	4a07      	ldr	r2, [pc, #28]	; (8000708 <HAL_I2C_MspInit+0x88>)
 80006ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006ee:	6413      	str	r3, [r2, #64]	; 0x40
 80006f0:	4b05      	ldr	r3, [pc, #20]	; (8000708 <HAL_I2C_MspInit+0x88>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006fc:	bf00      	nop
 80006fe:	3728      	adds	r7, #40	; 0x28
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40005400 	.word	0x40005400
 8000708:	40023800 	.word	0x40023800
 800070c:	40020400 	.word	0x40020400

08000710 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000716:	f000 fcb1 	bl	800107c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071a:	f000 f87b 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071e:	f7ff fed1 	bl	80004c4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000722:	f000 fa95 	bl	8000c50 <MX_TIM1_Init>
  MX_SPI2_Init();
 8000726:	f000 f8e3 	bl	80008f0 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800072a:	f000 fb95 	bl	8000e58 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800072e:	f7ff ff79 	bl	8000624 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)&USART1_NewData, 1);
 8000732:	2201      	movs	r2, #1
 8000734:	4930      	ldr	r1, [pc, #192]	; (80007f8 <main+0xe8>)
 8000736:	4831      	ldr	r0, [pc, #196]	; (80007fc <main+0xec>)
 8000738:	f003 fdb1 	bl	800429e <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800073c:	2100      	movs	r1, #0
 800073e:	4830      	ldr	r0, [pc, #192]	; (8000800 <main+0xf0>)
 8000740:	f002 fff8 	bl	8003734 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000744:	2104      	movs	r1, #4
 8000746:	482e      	ldr	r0, [pc, #184]	; (8000800 <main+0xf0>)
 8000748:	f002 fff4 	bl	8003734 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800074c:	2108      	movs	r1, #8
 800074e:	482c      	ldr	r0, [pc, #176]	; (8000800 <main+0xf0>)
 8000750:	f002 fff0 	bl	8003734 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000754:	210c      	movs	r1, #12
 8000756:	482a      	ldr	r0, [pc, #168]	; (8000800 <main+0xf0>)
 8000758:	f002 ffec 	bl	8003734 <HAL_TIM_PWM_Start>
  // int SPEED = 0;
  // int increment = 100;
  NRF24L01_RX_Start();
 800075c:	f004 ff32 	bl	80055c4 <NRF24L01_RX_Start>
  uint16_t *ADC_DATA;

  OLED_Init();
 8000760:	f004 ffa6 	bl	80056b0 <OLED_Init>
  OLED_Clear();
 8000764:	f004 ffad 	bl	80056c2 <OLED_Clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    ADC_DATA = NRF24Lo1_RX_Adjusted_ADC_Data();
 8000768:	f004 fd14 	bl	8005194 <NRF24Lo1_RX_Adjusted_ADC_Data>
 800076c:	4603      	mov	r3, r0
 800076e:	607b      	str	r3, [r7, #4]

    OLED_ShowString(0, 0, "ADC0:", 16);
 8000770:	2310      	movs	r3, #16
 8000772:	4a24      	ldr	r2, [pc, #144]	; (8000804 <main+0xf4>)
 8000774:	2100      	movs	r1, #0
 8000776:	2000      	movs	r0, #0
 8000778:	f005 f8ec 	bl	8005954 <OLED_ShowString>
    OLED_ShowNum(48, 0, ADC_DATA[0], 4, 16);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	461a      	mov	r2, r3
 8000782:	2310      	movs	r3, #16
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	2304      	movs	r3, #4
 8000788:	2100      	movs	r1, #0
 800078a:	2030      	movs	r0, #48	; 0x30
 800078c:	f005 f802 	bl	8005794 <OLED_ShowNum>

    OLED_ShowString(0, 2, "ADC1:", 16);
 8000790:	2310      	movs	r3, #16
 8000792:	4a1d      	ldr	r2, [pc, #116]	; (8000808 <main+0xf8>)
 8000794:	2102      	movs	r1, #2
 8000796:	2000      	movs	r0, #0
 8000798:	f005 f8dc 	bl	8005954 <OLED_ShowString>
    OLED_ShowNum(48, 2, ADC_DATA[1], 4, 16);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3302      	adds	r3, #2
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	461a      	mov	r2, r3
 80007a4:	2310      	movs	r3, #16
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	2304      	movs	r3, #4
 80007aa:	2102      	movs	r1, #2
 80007ac:	2030      	movs	r0, #48	; 0x30
 80007ae:	f004 fff1 	bl	8005794 <OLED_ShowNum>

    OLED_ShowString(0, 4, "ADC2:", 16);
 80007b2:	2310      	movs	r3, #16
 80007b4:	4a15      	ldr	r2, [pc, #84]	; (800080c <main+0xfc>)
 80007b6:	2104      	movs	r1, #4
 80007b8:	2000      	movs	r0, #0
 80007ba:	f005 f8cb 	bl	8005954 <OLED_ShowString>
    OLED_ShowNum(48, 4, ADC_DATA[2], 4, 16);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	3304      	adds	r3, #4
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	461a      	mov	r2, r3
 80007c6:	2310      	movs	r3, #16
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	2304      	movs	r3, #4
 80007cc:	2104      	movs	r1, #4
 80007ce:	2030      	movs	r0, #48	; 0x30
 80007d0:	f004 ffe0 	bl	8005794 <OLED_ShowNum>

    OLED_ShowString(0, 6, "ADC3:", 16);
 80007d4:	2310      	movs	r3, #16
 80007d6:	4a0e      	ldr	r2, [pc, #56]	; (8000810 <main+0x100>)
 80007d8:	2106      	movs	r1, #6
 80007da:	2000      	movs	r0, #0
 80007dc:	f005 f8ba 	bl	8005954 <OLED_ShowString>
    OLED_ShowNum(48, 6, ADC_DATA[3], 4, 16);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3306      	adds	r3, #6
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	461a      	mov	r2, r3
 80007e8:	2310      	movs	r3, #16
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	2304      	movs	r3, #4
 80007ee:	2106      	movs	r1, #6
 80007f0:	2030      	movs	r0, #48	; 0x30
 80007f2:	f004 ffcf 	bl	8005794 <OLED_ShowNum>
  {
 80007f6:	e7b7      	b.n	8000768 <main+0x58>
 80007f8:	20000262 	.word	0x20000262
 80007fc:	20000264 	.word	0x20000264
 8000800:	20000150 	.word	0x20000150
 8000804:	0800639c 	.word	0x0800639c
 8000808:	080063a4 	.word	0x080063a4
 800080c:	080063ac 	.word	0x080063ac
 8000810:	080063b4 	.word	0x080063b4

08000814 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b094      	sub	sp, #80	; 0x50
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0320 	add.w	r3, r7, #32
 800081e:	2230      	movs	r2, #48	; 0x30
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f005 fac4 	bl	8005db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000838:	2300      	movs	r3, #0
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	4b27      	ldr	r3, [pc, #156]	; (80008dc <SystemClock_Config+0xc8>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	4a26      	ldr	r2, [pc, #152]	; (80008dc <SystemClock_Config+0xc8>)
 8000842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000846:	6413      	str	r3, [r2, #64]	; 0x40
 8000848:	4b24      	ldr	r3, [pc, #144]	; (80008dc <SystemClock_Config+0xc8>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <SystemClock_Config+0xcc>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a20      	ldr	r2, [pc, #128]	; (80008e0 <SystemClock_Config+0xcc>)
 800085e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000862:	6013      	str	r3, [r2, #0]
 8000864:	4b1e      	ldr	r3, [pc, #120]	; (80008e0 <SystemClock_Config+0xcc>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000870:	2301      	movs	r3, #1
 8000872:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000874:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087a:	2302      	movs	r3, #2
 800087c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800087e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000882:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000884:	2304      	movs	r3, #4
 8000886:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000888:	2348      	movs	r3, #72	; 0x48
 800088a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800088c:	2302      	movs	r3, #2
 800088e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000890:	2304      	movs	r3, #4
 8000892:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000894:	f107 0320 	add.w	r3, r7, #32
 8000898:	4618      	mov	r0, r3
 800089a:	f001 fc8d 	bl	80021b8 <HAL_RCC_OscConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008a4:	f000 f81e 	bl	80008e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80008a8:	230f      	movs	r3, #15
 80008aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ac:	2302      	movs	r3, #2
 80008ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	2102      	movs	r1, #2
 80008c4:	4618      	mov	r0, r3
 80008c6:	f001 feef 	bl	80026a8 <HAL_RCC_ClockConfig>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008d0:	f000 f808 	bl	80008e4 <Error_Handler>
  }
}
 80008d4:	bf00      	nop
 80008d6:	3750      	adds	r7, #80	; 0x50
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40007000 	.word	0x40007000

080008e4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
}
 80008ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ec:	e7fe      	b.n	80008ec <Error_Handler+0x8>
	...

080008f0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <MX_SPI2_Init+0x64>)
 80008f6:	4a18      	ldr	r2, [pc, #96]	; (8000958 <MX_SPI2_Init+0x68>)
 80008f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008fa:	4b16      	ldr	r3, [pc, #88]	; (8000954 <MX_SPI2_Init+0x64>)
 80008fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000900:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_SPI2_Init+0x64>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_SPI2_Init+0x64>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_SPI2_Init+0x64>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_SPI2_Init+0x64>)
 8000916:	2200      	movs	r2, #0
 8000918:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_SPI2_Init+0x64>)
 800091c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000920:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_SPI2_Init+0x64>)
 8000924:	2210      	movs	r2, #16
 8000926:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MX_SPI2_Init+0x64>)
 800092a:	2200      	movs	r2, #0
 800092c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_SPI2_Init+0x64>)
 8000930:	2200      	movs	r2, #0
 8000932:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000934:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MX_SPI2_Init+0x64>)
 8000936:	2200      	movs	r2, #0
 8000938:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_SPI2_Init+0x64>)
 800093c:	220a      	movs	r2, #10
 800093e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_SPI2_Init+0x64>)
 8000942:	f002 f8d1 	bl	8002ae8 <HAL_SPI_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800094c:	f7ff ffca 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200000f4 	.word	0x200000f4
 8000958:	40003800 	.word	0x40003800

0800095c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a28      	ldr	r2, [pc, #160]	; (8000a1c <HAL_SPI_MspInit+0xc0>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d14a      	bne.n	8000a14 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	4b27      	ldr	r3, [pc, #156]	; (8000a20 <HAL_SPI_MspInit+0xc4>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	4a26      	ldr	r2, [pc, #152]	; (8000a20 <HAL_SPI_MspInit+0xc4>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098c:	6413      	str	r3, [r2, #64]	; 0x40
 800098e:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <HAL_SPI_MspInit+0xc4>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <HAL_SPI_MspInit+0xc4>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a1f      	ldr	r2, [pc, #124]	; (8000a20 <HAL_SPI_MspInit+0xc4>)
 80009a4:	f043 0304 	orr.w	r3, r3, #4
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <HAL_SPI_MspInit+0xc4>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0304 	and.w	r3, r3, #4
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <HAL_SPI_MspInit+0xc4>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a18      	ldr	r2, [pc, #96]	; (8000a20 <HAL_SPI_MspInit+0xc4>)
 80009c0:	f043 0302 	orr.w	r3, r3, #2
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <HAL_SPI_MspInit+0xc4>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009d2:	230c      	movs	r3, #12
 80009d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009de:	2303      	movs	r3, #3
 80009e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009e2:	2305      	movs	r3, #5
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	480d      	ldr	r0, [pc, #52]	; (8000a24 <HAL_SPI_MspInit+0xc8>)
 80009ee:	f000 fd7f 	bl	80014f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a04:	2305      	movs	r3, #5
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4806      	ldr	r0, [pc, #24]	; (8000a28 <HAL_SPI_MspInit+0xcc>)
 8000a10:	f000 fd6e 	bl	80014f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000a14:	bf00      	nop
 8000a16:	3728      	adds	r7, #40	; 0x28
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40003800 	.word	0x40003800
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020800 	.word	0x40020800
 8000a28:	40020400 	.word	0x40020400

08000a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	4a0f      	ldr	r2, [pc, #60]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a40:	6453      	str	r3, [r2, #68]	; 0x44
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <MemManage_Handler+0x4>

08000a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac8:	f000 fb2a 	bl	8001120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <USART1_IRQHandler+0x10>)
 8000ad6:	f003 fc07 	bl	80042e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000264 	.word	0x20000264

08000ae4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	e00a      	b.n	8000b0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000af6:	f3af 8000 	nop.w
 8000afa:	4601      	mov	r1, r0
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	60ba      	str	r2, [r7, #8]
 8000b02:	b2ca      	uxtb	r2, r1
 8000b04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	697a      	ldr	r2, [r7, #20]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	dbf0      	blt.n	8000af6 <_read+0x12>
  }

  return len;
 8000b14:	687b      	ldr	r3, [r7, #4]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3718      	adds	r7, #24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b086      	sub	sp, #24
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	60f8      	str	r0, [r7, #12]
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]
 8000b2e:	e009      	b.n	8000b44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	1c5a      	adds	r2, r3, #1
 8000b34:	60ba      	str	r2, [r7, #8]
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f000 fa07 	bl	8000f4c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	3301      	adds	r3, #1
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	697a      	ldr	r2, [r7, #20]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	dbf1      	blt.n	8000b30 <_write+0x12>
  }
  return len;
 8000b4c:	687b      	ldr	r3, [r7, #4]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <_close>:

int _close(int file)
{
 8000b56:	b480      	push	{r7}
 8000b58:	b083      	sub	sp, #12
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
 8000b76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b7e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <_isatty>:

int _isatty(int file)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b083      	sub	sp, #12
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b96:	2301      	movs	r3, #1
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
	...

08000bc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc8:	4a14      	ldr	r2, [pc, #80]	; (8000c1c <_sbrk+0x5c>)
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <_sbrk+0x60>)
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd4:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <_sbrk+0x64>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d102      	bne.n	8000be2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <_sbrk+0x64>)
 8000bde:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <_sbrk+0x68>)
 8000be0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <_sbrk+0x64>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d207      	bcs.n	8000c00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf0:	f005 f92c 	bl	8005e4c <__errno>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfe:	e009      	b.n	8000c14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <_sbrk+0x64>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c06:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <_sbrk+0x64>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <_sbrk+0x64>)
 8000c10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c12:	68fb      	ldr	r3, [r7, #12]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20020000 	.word	0x20020000
 8000c20:	00000400 	.word	0x00000400
 8000c24:	2000014c 	.word	0x2000014c
 8000c28:	20000428 	.word	0x20000428

08000c2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <SystemInit+0x20>)
 8000c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <SystemInit+0x20>)
 8000c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b092      	sub	sp, #72	; 0x48
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
 8000c70:	615a      	str	r2, [r3, #20]
 8000c72:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	2220      	movs	r2, #32
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f005 f898 	bl	8005db0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c80:	4b45      	ldr	r3, [pc, #276]	; (8000d98 <MX_TIM1_Init+0x148>)
 8000c82:	4a46      	ldr	r2, [pc, #280]	; (8000d9c <MX_TIM1_Init+0x14c>)
 8000c84:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c86:	4b44      	ldr	r3, [pc, #272]	; (8000d98 <MX_TIM1_Init+0x148>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8c:	4b42      	ldr	r3, [pc, #264]	; (8000d98 <MX_TIM1_Init+0x148>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8400-1;
 8000c92:	4b41      	ldr	r3, [pc, #260]	; (8000d98 <MX_TIM1_Init+0x148>)
 8000c94:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000c98:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9a:	4b3f      	ldr	r3, [pc, #252]	; (8000d98 <MX_TIM1_Init+0x148>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ca0:	4b3d      	ldr	r3, [pc, #244]	; (8000d98 <MX_TIM1_Init+0x148>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca6:	4b3c      	ldr	r3, [pc, #240]	; (8000d98 <MX_TIM1_Init+0x148>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cac:	483a      	ldr	r0, [pc, #232]	; (8000d98 <MX_TIM1_Init+0x148>)
 8000cae:	f002 fcf1 	bl	8003694 <HAL_TIM_PWM_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000cb8:	f7ff fe14 	bl	80008e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cc4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4833      	ldr	r0, [pc, #204]	; (8000d98 <MX_TIM1_Init+0x148>)
 8000ccc:	f003 f93e 	bl	8003f4c <HAL_TIMEx_MasterConfigSynchronization>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000cd6:	f7ff fe05 	bl	80008e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cda:	2360      	movs	r3, #96	; 0x60
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4826      	ldr	r0, [pc, #152]	; (8000d98 <MX_TIM1_Init+0x148>)
 8000d00:	f002 fde0 	bl	80038c4 <HAL_TIM_PWM_ConfigChannel>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000d0a:	f7ff fdeb 	bl	80008e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d12:	2204      	movs	r2, #4
 8000d14:	4619      	mov	r1, r3
 8000d16:	4820      	ldr	r0, [pc, #128]	; (8000d98 <MX_TIM1_Init+0x148>)
 8000d18:	f002 fdd4 	bl	80038c4 <HAL_TIM_PWM_ConfigChannel>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000d22:	f7ff fddf 	bl	80008e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2a:	2208      	movs	r2, #8
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	481a      	ldr	r0, [pc, #104]	; (8000d98 <MX_TIM1_Init+0x148>)
 8000d30:	f002 fdc8 	bl	80038c4 <HAL_TIM_PWM_ConfigChannel>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000d3a:	f7ff fdd3 	bl	80008e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d42:	220c      	movs	r2, #12
 8000d44:	4619      	mov	r1, r3
 8000d46:	4814      	ldr	r0, [pc, #80]	; (8000d98 <MX_TIM1_Init+0x148>)
 8000d48:	f002 fdbc 	bl	80038c4 <HAL_TIM_PWM_ConfigChannel>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000d52:	f7ff fdc7 	bl	80008e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d6e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	4619      	mov	r1, r3
 8000d78:	4807      	ldr	r0, [pc, #28]	; (8000d98 <MX_TIM1_Init+0x148>)
 8000d7a:	f003 f963 	bl	8004044 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000d84:	f7ff fdae 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d88:	4803      	ldr	r0, [pc, #12]	; (8000d98 <MX_TIM1_Init+0x148>)
 8000d8a:	f000 f82b 	bl	8000de4 <HAL_TIM_MspPostInit>

}
 8000d8e:	bf00      	nop
 8000d90:	3748      	adds	r7, #72	; 0x48
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000150 	.word	0x20000150
 8000d9c:	40010000 	.word	0x40010000

08000da0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <HAL_TIM_PWM_MspInit+0x3c>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d10d      	bne.n	8000dce <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <HAL_TIM_PWM_MspInit+0x40>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	4a09      	ldr	r2, [pc, #36]	; (8000de0 <HAL_TIM_PWM_MspInit+0x40>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc2:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <HAL_TIM_PWM_MspInit+0x40>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000dce:	bf00      	nop
 8000dd0:	3714      	adds	r7, #20
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40010000 	.word	0x40010000
 8000de0:	40023800 	.word	0x40023800

08000de4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a12      	ldr	r2, [pc, #72]	; (8000e4c <HAL_TIM_MspPostInit+0x68>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d11e      	bne.n	8000e44 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <HAL_TIM_MspPostInit+0x6c>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a10      	ldr	r2, [pc, #64]	; (8000e50 <HAL_TIM_MspPostInit+0x6c>)
 8000e10:	f043 0310 	orr.w	r3, r3, #16
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_TIM_MspPostInit+0x6c>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0310 	and.w	r3, r3, #16
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Front_PWMA_Pin|Front_PWMB_Pin|Back_PWMA_Pin|Back_PWMB_Pin;
 8000e22:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8000e26:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e30:	2303      	movs	r3, #3
 8000e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e34:	2301      	movs	r3, #1
 8000e36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <HAL_TIM_MspPostInit+0x70>)
 8000e40:	f000 fb56 	bl	80014f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e44:	bf00      	nop
 8000e46:	3720      	adds	r7, #32
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40010000 	.word	0x40010000
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40021000 	.word	0x40021000

08000e58 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <MX_USART1_UART_Init+0x4c>)
 8000e5e:	4a12      	ldr	r2, [pc, #72]	; (8000ea8 <MX_USART1_UART_Init+0x50>)
 8000e60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <MX_USART1_UART_Init+0x4c>)
 8000e64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <MX_USART1_UART_Init+0x4c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <MX_USART1_UART_Init+0x4c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <MX_USART1_UART_Init+0x4c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e7c:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <MX_USART1_UART_Init+0x4c>)
 8000e7e:	220c      	movs	r2, #12
 8000e80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e82:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <MX_USART1_UART_Init+0x4c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <MX_USART1_UART_Init+0x4c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_USART1_UART_Init+0x4c>)
 8000e90:	f003 f92a 	bl	80040e8 <HAL_UART_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e9a:	f7ff fd23 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000264 	.word	0x20000264
 8000ea8:	40011000 	.word	0x40011000

08000eac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a1d      	ldr	r2, [pc, #116]	; (8000f40 <HAL_UART_MspInit+0x94>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d134      	bne.n	8000f38 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <HAL_UART_MspInit+0x98>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	4a1b      	ldr	r2, [pc, #108]	; (8000f44 <HAL_UART_MspInit+0x98>)
 8000ed8:	f043 0310 	orr.w	r3, r3, #16
 8000edc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ede:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <HAL_UART_MspInit+0x98>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	f003 0310 	and.w	r3, r3, #16
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <HAL_UART_MspInit+0x98>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a14      	ldr	r2, [pc, #80]	; (8000f44 <HAL_UART_MspInit+0x98>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_UART_MspInit+0x98>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f06:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f14:	2303      	movs	r3, #3
 8000f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f18:	2307      	movs	r3, #7
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4619      	mov	r1, r3
 8000f22:	4809      	ldr	r0, [pc, #36]	; (8000f48 <HAL_UART_MspInit+0x9c>)
 8000f24:	f000 fae4 	bl	80014f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	2025      	movs	r0, #37	; 0x25
 8000f2e:	f000 fa16 	bl	800135e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f32:	2025      	movs	r0, #37	; 0x25
 8000f34:	f000 fa2f 	bl	8001396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f38:	bf00      	nop
 8000f3a:	3728      	adds	r7, #40	; 0x28
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40011000 	.word	0x40011000
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020000 	.word	0x40020000

08000f4c <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
PUTCHAR_PROTOTYPE
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

  /* Place your implementation of fputc here */

  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000f54:	1d39      	adds	r1, r7, #4
 8000f56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4803      	ldr	r0, [pc, #12]	; (8000f6c <__io_putchar+0x20>)
 8000f5e:	f003 f913 	bl	8004188 <HAL_UART_Transmit>

  return ch;
 8000f62:	687b      	ldr	r3, [r7, #4]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000264 	.word	0x20000264

08000f70 <HAL_UART_RxCpltCallback>:
//* 锟叫断回碉拷
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]

  //* USART1 锟斤拷锟斤拷
  if (huart == &huart1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a27      	ldr	r2, [pc, #156]	; (8001018 <HAL_UART_RxCpltCallback+0xa8>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d147      	bne.n	8001010 <HAL_UART_RxCpltCallback+0xa0>
  {

    printf("%c", USART1_NewData);
 8000f80:	4b26      	ldr	r3, [pc, #152]	; (800101c <HAL_UART_RxCpltCallback+0xac>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f004 fdd7 	bl	8005b38 <putchar>
    //* 锟叫讹拷锟斤拷锟斤拷位锟侥碉拷一位?
    if ((USART1_Rx_STA & 0x8000) == 0)
 8000f8a:	4b25      	ldr	r3, [pc, #148]	; (8001020 <HAL_UART_RxCpltCallback+0xb0>)
 8000f8c:	881b      	ldrh	r3, [r3, #0]
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	db38      	blt.n	8001006 <HAL_UART_RxCpltCallback+0x96>
    {
      //* 锟叫讹拷锟斤拷锟斤拷位锟侥第讹拷位
      if (USART1_Rx_STA & 0x4000)
 8000f94:	4b22      	ldr	r3, [pc, #136]	; (8001020 <HAL_UART_RxCpltCallback+0xb0>)
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d011      	beq.n	8000fc4 <HAL_UART_RxCpltCallback+0x54>
      {
        if (USART1_NewData != 0x0a) //? 0x0a(锟斤拷锟斤拷)
 8000fa0:	4b1e      	ldr	r3, [pc, #120]	; (800101c <HAL_UART_RxCpltCallback+0xac>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b0a      	cmp	r3, #10
 8000fa6:	d003      	beq.n	8000fb0 <HAL_UART_RxCpltCallback+0x40>
          USART1_Rx_STA = 0;
 8000fa8:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <HAL_UART_RxCpltCallback+0xb0>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
 8000fae:	e02a      	b.n	8001006 <HAL_UART_RxCpltCallback+0x96>
        else
          USART1_Rx_STA |= 0x8000;
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <HAL_UART_RxCpltCallback+0xb0>)
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000fb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <HAL_UART_RxCpltCallback+0xb0>)
 8000fc0:	801a      	strh	r2, [r3, #0]
 8000fc2:	e020      	b.n	8001006 <HAL_UART_RxCpltCallback+0x96>
      }
      else
      { //* 锟叫讹拷锟角诧拷锟角回筹拷
        if (USART1_NewData == 0x0d)
 8000fc4:	4b15      	ldr	r3, [pc, #84]	; (800101c <HAL_UART_RxCpltCallback+0xac>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b0d      	cmp	r3, #13
 8000fca:	d107      	bne.n	8000fdc <HAL_UART_RxCpltCallback+0x6c>
          USART1_Rx_STA |= 0x4000;
 8000fcc:	4b14      	ldr	r3, [pc, #80]	; (8001020 <HAL_UART_RxCpltCallback+0xb0>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_UART_RxCpltCallback+0xb0>)
 8000fd8:	801a      	strh	r2, [r3, #0]
 8000fda:	e014      	b.n	8001006 <HAL_UART_RxCpltCallback+0x96>
        else
        {
          //* 锟斤拷锟斤拷锟斤拷锟斤拷拥锟斤拷锟斤拷锟斤拷锟�
          USART1_Rx_Buf[USART1_Rx_STA & 0x3FFF] = USART1_NewData;
 8000fdc:	4b10      	ldr	r3, [pc, #64]	; (8001020 <HAL_UART_RxCpltCallback+0xb0>)
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000fe4:	4a0d      	ldr	r2, [pc, #52]	; (800101c <HAL_UART_RxCpltCallback+0xac>)
 8000fe6:	7811      	ldrb	r1, [r2, #0]
 8000fe8:	4a0e      	ldr	r2, [pc, #56]	; (8001024 <HAL_UART_RxCpltCallback+0xb4>)
 8000fea:	54d1      	strb	r1, [r2, r3]
          USART1_Rx_STA++;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <HAL_UART_RxCpltCallback+0xb0>)
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <HAL_UART_RxCpltCallback+0xb0>)
 8000ff6:	801a      	strh	r2, [r3, #0]
          if (USART1_Rx_STA > (USART1_REC_LEN - 1))
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <HAL_UART_RxCpltCallback+0xb0>)
 8000ffa:	881b      	ldrh	r3, [r3, #0]
 8000ffc:	2bc7      	cmp	r3, #199	; 0xc7
 8000ffe:	d902      	bls.n	8001006 <HAL_UART_RxCpltCallback+0x96>
            USART1_Rx_STA = 0;
 8001000:	4b07      	ldr	r3, [pc, #28]	; (8001020 <HAL_UART_RxCpltCallback+0xb0>)
 8001002:	2200      	movs	r2, #0
 8001004:	801a      	strh	r2, [r3, #0]
        }
      }
    }
    //* 锟斤拷锟铰匡拷始锟叫讹拷
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&USART1_NewData, 1);
 8001006:	2201      	movs	r2, #1
 8001008:	4904      	ldr	r1, [pc, #16]	; (800101c <HAL_UART_RxCpltCallback+0xac>)
 800100a:	4803      	ldr	r0, [pc, #12]	; (8001018 <HAL_UART_RxCpltCallback+0xa8>)
 800100c:	f003 f947 	bl	800429e <HAL_UART_Receive_IT>
  //     }
  //   }
  //   //* 锟斤拷锟铰匡拷始锟叫讹拷
  //   HAL_UART_Receive_IT(&huart2, (uint8_t *)&USART2_NewData, 1);
  // }
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000264 	.word	0x20000264
 800101c:	20000262 	.word	0x20000262
 8001020:	20000260 	.word	0x20000260
 8001024:	20000198 	.word	0x20000198

08001028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001028:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001060 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800102c:	f7ff fdfe 	bl	8000c2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001030:	480c      	ldr	r0, [pc, #48]	; (8001064 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001032:	490d      	ldr	r1, [pc, #52]	; (8001068 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001034:	4a0d      	ldr	r2, [pc, #52]	; (800106c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001038:	e002      	b.n	8001040 <LoopCopyDataInit>

0800103a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800103c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103e:	3304      	adds	r3, #4

08001040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001044:	d3f9      	bcc.n	800103a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001048:	4c0a      	ldr	r4, [pc, #40]	; (8001074 <LoopFillZerobss+0x22>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800104c:	e001      	b.n	8001052 <LoopFillZerobss>

0800104e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001050:	3204      	adds	r2, #4

08001052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001054:	d3fb      	bcc.n	800104e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001056:	f004 feff 	bl	8005e58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105a:	f7ff fb59 	bl	8000710 <main>
  bx  lr    
 800105e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001060:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001068:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800106c:	08006c88 	.word	0x08006c88
  ldr r2, =_sbss
 8001070:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001074:	20000428 	.word	0x20000428

08001078 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001078:	e7fe      	b.n	8001078 <ADC_IRQHandler>
	...

0800107c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001080:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <HAL_Init+0x40>)
 8001086:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800108a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <HAL_Init+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <HAL_Init+0x40>)
 8001092:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001096:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <HAL_Init+0x40>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a07      	ldr	r2, [pc, #28]	; (80010bc <HAL_Init+0x40>)
 800109e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a4:	2003      	movs	r0, #3
 80010a6:	f000 f94f 	bl	8001348 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010aa:	200f      	movs	r0, #15
 80010ac:	f000 f808 	bl	80010c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b0:	f7ff fcbc 	bl	8000a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023c00 	.word	0x40023c00

080010c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <HAL_InitTick+0x54>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <HAL_InitTick+0x58>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4619      	mov	r1, r3
 80010d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010da:	fbb2 f3f3 	udiv	r3, r2, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 f967 	bl	80013b2 <HAL_SYSTICK_Config>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00e      	b.n	800110c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b0f      	cmp	r3, #15
 80010f2:	d80a      	bhi.n	800110a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f4:	2200      	movs	r2, #0
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295
 80010fc:	f000 f92f 	bl	800135e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001100:	4a06      	ldr	r2, [pc, #24]	; (800111c <HAL_InitTick+0x5c>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001106:	2300      	movs	r3, #0
 8001108:	e000      	b.n	800110c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000000 	.word	0x20000000
 8001118:	20000008 	.word	0x20000008
 800111c:	20000004 	.word	0x20000004

08001120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_IncTick+0x20>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_IncTick+0x24>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4413      	add	r3, r2
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <HAL_IncTick+0x24>)
 8001132:	6013      	str	r3, [r2, #0]
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000008 	.word	0x20000008
 8001144:	200002ac 	.word	0x200002ac

08001148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return uwTick;
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <HAL_GetTick+0x14>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	200002ac 	.word	0x200002ac

08001160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001168:	f7ff ffee 	bl	8001148 <HAL_GetTick>
 800116c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001178:	d005      	beq.n	8001186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <HAL_Delay+0x44>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4413      	add	r3, r2
 8001184:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001186:	bf00      	nop
 8001188:	f7ff ffde 	bl	8001148 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	429a      	cmp	r2, r3
 8001196:	d8f7      	bhi.n	8001188 <HAL_Delay+0x28>
  {
  }
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000008 	.word	0x20000008

080011a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c4:	4013      	ands	r3, r2
 80011c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011da:	4a04      	ldr	r2, [pc, #16]	; (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	60d3      	str	r3, [r2, #12]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <__NVIC_GetPriorityGrouping+0x18>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	0a1b      	lsrs	r3, r3, #8
 80011fa:	f003 0307 	and.w	r3, r3, #7
}
 80011fe:	4618      	mov	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	2b00      	cmp	r3, #0
 800121c:	db0b      	blt.n	8001236 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	f003 021f 	and.w	r2, r3, #31
 8001224:	4907      	ldr	r1, [pc, #28]	; (8001244 <__NVIC_EnableIRQ+0x38>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	095b      	lsrs	r3, r3, #5
 800122c:	2001      	movs	r0, #1
 800122e:	fa00 f202 	lsl.w	r2, r0, r2
 8001232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000e100 	.word	0xe000e100

08001248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	db0a      	blt.n	8001272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	b2da      	uxtb	r2, r3
 8001260:	490c      	ldr	r1, [pc, #48]	; (8001294 <__NVIC_SetPriority+0x4c>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	0112      	lsls	r2, r2, #4
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	440b      	add	r3, r1
 800126c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001270:	e00a      	b.n	8001288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4908      	ldr	r1, [pc, #32]	; (8001298 <__NVIC_SetPriority+0x50>)
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	3b04      	subs	r3, #4
 8001280:	0112      	lsls	r2, r2, #4
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	440b      	add	r3, r1
 8001286:	761a      	strb	r2, [r3, #24]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000e100 	.word	0xe000e100
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	; 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f1c3 0307 	rsb	r3, r3, #7
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	bf28      	it	cs
 80012ba:	2304      	movcs	r3, #4
 80012bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3304      	adds	r3, #4
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d902      	bls.n	80012cc <NVIC_EncodePriority+0x30>
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3b03      	subs	r3, #3
 80012ca:	e000      	b.n	80012ce <NVIC_EncodePriority+0x32>
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	f04f 32ff 	mov.w	r2, #4294967295
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43da      	mvns	r2, r3
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	401a      	ands	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e4:	f04f 31ff 	mov.w	r1, #4294967295
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	43d9      	mvns	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	4313      	orrs	r3, r2
         );
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3724      	adds	r7, #36	; 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3b01      	subs	r3, #1
 8001310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001314:	d301      	bcc.n	800131a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001316:	2301      	movs	r3, #1
 8001318:	e00f      	b.n	800133a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <SysTick_Config+0x40>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001322:	210f      	movs	r1, #15
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	f7ff ff8e 	bl	8001248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <SysTick_Config+0x40>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001332:	4b04      	ldr	r3, [pc, #16]	; (8001344 <SysTick_Config+0x40>)
 8001334:	2207      	movs	r2, #7
 8001336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	e000e010 	.word	0xe000e010

08001348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff29 	bl	80011a8 <__NVIC_SetPriorityGrouping>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135e:	b580      	push	{r7, lr}
 8001360:	b086      	sub	sp, #24
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001370:	f7ff ff3e 	bl	80011f0 <__NVIC_GetPriorityGrouping>
 8001374:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	68b9      	ldr	r1, [r7, #8]
 800137a:	6978      	ldr	r0, [r7, #20]
 800137c:	f7ff ff8e 	bl	800129c <NVIC_EncodePriority>
 8001380:	4602      	mov	r2, r0
 8001382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff5d 	bl	8001248 <__NVIC_SetPriority>
}
 800138e:	bf00      	nop
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff31 	bl	800120c <__NVIC_EnableIRQ>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ffa2 	bl	8001304 <SysTick_Config>
 80013c0:	4603      	mov	r3, r0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b084      	sub	sp, #16
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013d8:	f7ff feb6 	bl	8001148 <HAL_GetTick>
 80013dc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d008      	beq.n	80013fc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2280      	movs	r2, #128	; 0x80
 80013ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e052      	b.n	80014a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 0216 	bic.w	r2, r2, #22
 800140a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	695a      	ldr	r2, [r3, #20]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800141a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	2b00      	cmp	r3, #0
 8001422:	d103      	bne.n	800142c <HAL_DMA_Abort+0x62>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001428:	2b00      	cmp	r3, #0
 800142a:	d007      	beq.n	800143c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f022 0208 	bic.w	r2, r2, #8
 800143a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f022 0201 	bic.w	r2, r2, #1
 800144a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800144c:	e013      	b.n	8001476 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800144e:	f7ff fe7b 	bl	8001148 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b05      	cmp	r3, #5
 800145a:	d90c      	bls.n	8001476 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2220      	movs	r2, #32
 8001460:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2203      	movs	r2, #3
 8001466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e015      	b.n	80014a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1e4      	bne.n	800144e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001488:	223f      	movs	r2, #63	; 0x3f
 800148a:	409a      	lsls	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d004      	beq.n	80014c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2280      	movs	r2, #128	; 0x80
 80014c2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e00c      	b.n	80014e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2205      	movs	r2, #5
 80014cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 0201 	bic.w	r2, r2, #1
 80014de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b089      	sub	sp, #36	; 0x24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001502:	2300      	movs	r3, #0
 8001504:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
 800150a:	e16b      	b.n	80017e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800150c:	2201      	movs	r2, #1
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	429a      	cmp	r2, r3
 8001526:	f040 815a 	bne.w	80017de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 0303 	and.w	r3, r3, #3
 8001532:	2b01      	cmp	r3, #1
 8001534:	d005      	beq.n	8001542 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800153e:	2b02      	cmp	r3, #2
 8001540:	d130      	bne.n	80015a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	2203      	movs	r2, #3
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4013      	ands	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	68da      	ldr	r2, [r3, #12]
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4313      	orrs	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001578:	2201      	movs	r2, #1
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	091b      	lsrs	r3, r3, #4
 800158e:	f003 0201 	and.w	r2, r3, #1
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4313      	orrs	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 0303 	and.w	r3, r3, #3
 80015ac:	2b03      	cmp	r3, #3
 80015ae:	d017      	beq.n	80015e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	2203      	movs	r2, #3
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4013      	ands	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d123      	bne.n	8001634 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	08da      	lsrs	r2, r3, #3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3208      	adds	r2, #8
 80015f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	f003 0307 	and.w	r3, r3, #7
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	220f      	movs	r2, #15
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	691a      	ldr	r2, [r3, #16]
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	08da      	lsrs	r2, r3, #3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3208      	adds	r2, #8
 800162e:	69b9      	ldr	r1, [r7, #24]
 8001630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	2203      	movs	r2, #3
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 0203 	and.w	r2, r3, #3
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001670:	2b00      	cmp	r3, #0
 8001672:	f000 80b4 	beq.w	80017de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b60      	ldr	r3, [pc, #384]	; (80017fc <HAL_GPIO_Init+0x30c>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	4a5f      	ldr	r2, [pc, #380]	; (80017fc <HAL_GPIO_Init+0x30c>)
 8001680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001684:	6453      	str	r3, [r2, #68]	; 0x44
 8001686:	4b5d      	ldr	r3, [pc, #372]	; (80017fc <HAL_GPIO_Init+0x30c>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001692:	4a5b      	ldr	r2, [pc, #364]	; (8001800 <HAL_GPIO_Init+0x310>)
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	089b      	lsrs	r3, r3, #2
 8001698:	3302      	adds	r3, #2
 800169a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	220f      	movs	r2, #15
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4013      	ands	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a52      	ldr	r2, [pc, #328]	; (8001804 <HAL_GPIO_Init+0x314>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d02b      	beq.n	8001716 <HAL_GPIO_Init+0x226>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a51      	ldr	r2, [pc, #324]	; (8001808 <HAL_GPIO_Init+0x318>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d025      	beq.n	8001712 <HAL_GPIO_Init+0x222>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a50      	ldr	r2, [pc, #320]	; (800180c <HAL_GPIO_Init+0x31c>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d01f      	beq.n	800170e <HAL_GPIO_Init+0x21e>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a4f      	ldr	r2, [pc, #316]	; (8001810 <HAL_GPIO_Init+0x320>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d019      	beq.n	800170a <HAL_GPIO_Init+0x21a>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a4e      	ldr	r2, [pc, #312]	; (8001814 <HAL_GPIO_Init+0x324>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d013      	beq.n	8001706 <HAL_GPIO_Init+0x216>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a4d      	ldr	r2, [pc, #308]	; (8001818 <HAL_GPIO_Init+0x328>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d00d      	beq.n	8001702 <HAL_GPIO_Init+0x212>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a4c      	ldr	r2, [pc, #304]	; (800181c <HAL_GPIO_Init+0x32c>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d007      	beq.n	80016fe <HAL_GPIO_Init+0x20e>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a4b      	ldr	r2, [pc, #300]	; (8001820 <HAL_GPIO_Init+0x330>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d101      	bne.n	80016fa <HAL_GPIO_Init+0x20a>
 80016f6:	2307      	movs	r3, #7
 80016f8:	e00e      	b.n	8001718 <HAL_GPIO_Init+0x228>
 80016fa:	2308      	movs	r3, #8
 80016fc:	e00c      	b.n	8001718 <HAL_GPIO_Init+0x228>
 80016fe:	2306      	movs	r3, #6
 8001700:	e00a      	b.n	8001718 <HAL_GPIO_Init+0x228>
 8001702:	2305      	movs	r3, #5
 8001704:	e008      	b.n	8001718 <HAL_GPIO_Init+0x228>
 8001706:	2304      	movs	r3, #4
 8001708:	e006      	b.n	8001718 <HAL_GPIO_Init+0x228>
 800170a:	2303      	movs	r3, #3
 800170c:	e004      	b.n	8001718 <HAL_GPIO_Init+0x228>
 800170e:	2302      	movs	r3, #2
 8001710:	e002      	b.n	8001718 <HAL_GPIO_Init+0x228>
 8001712:	2301      	movs	r3, #1
 8001714:	e000      	b.n	8001718 <HAL_GPIO_Init+0x228>
 8001716:	2300      	movs	r3, #0
 8001718:	69fa      	ldr	r2, [r7, #28]
 800171a:	f002 0203 	and.w	r2, r2, #3
 800171e:	0092      	lsls	r2, r2, #2
 8001720:	4093      	lsls	r3, r2
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4313      	orrs	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001728:	4935      	ldr	r1, [pc, #212]	; (8001800 <HAL_GPIO_Init+0x310>)
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	089b      	lsrs	r3, r3, #2
 800172e:	3302      	adds	r3, #2
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001736:	4b3b      	ldr	r3, [pc, #236]	; (8001824 <HAL_GPIO_Init+0x334>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	43db      	mvns	r3, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4013      	ands	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800175a:	4a32      	ldr	r2, [pc, #200]	; (8001824 <HAL_GPIO_Init+0x334>)
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001760:	4b30      	ldr	r3, [pc, #192]	; (8001824 <HAL_GPIO_Init+0x334>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	43db      	mvns	r3, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4013      	ands	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	4313      	orrs	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001784:	4a27      	ldr	r2, [pc, #156]	; (8001824 <HAL_GPIO_Init+0x334>)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800178a:	4b26      	ldr	r3, [pc, #152]	; (8001824 <HAL_GPIO_Init+0x334>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	43db      	mvns	r3, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017ae:	4a1d      	ldr	r2, [pc, #116]	; (8001824 <HAL_GPIO_Init+0x334>)
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017b4:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <HAL_GPIO_Init+0x334>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	43db      	mvns	r3, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017d8:	4a12      	ldr	r2, [pc, #72]	; (8001824 <HAL_GPIO_Init+0x334>)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3301      	adds	r3, #1
 80017e2:	61fb      	str	r3, [r7, #28]
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	2b0f      	cmp	r3, #15
 80017e8:	f67f ae90 	bls.w	800150c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	3724      	adds	r7, #36	; 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800
 8001800:	40013800 	.word	0x40013800
 8001804:	40020000 	.word	0x40020000
 8001808:	40020400 	.word	0x40020400
 800180c:	40020800 	.word	0x40020800
 8001810:	40020c00 	.word	0x40020c00
 8001814:	40021000 	.word	0x40021000
 8001818:	40021400 	.word	0x40021400
 800181c:	40021800 	.word	0x40021800
 8001820:	40021c00 	.word	0x40021c00
 8001824:	40013c00 	.word	0x40013c00

08001828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	807b      	strh	r3, [r7, #2]
 8001834:	4613      	mov	r3, r2
 8001836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001838:	787b      	ldrb	r3, [r7, #1]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800183e:	887a      	ldrh	r2, [r7, #2]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001844:	e003      	b.n	800184e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001846:	887b      	ldrh	r3, [r7, #2]
 8001848:	041a      	lsls	r2, r3, #16
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	619a      	str	r2, [r3, #24]
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e12b      	b.n	8001ac6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d106      	bne.n	8001888 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7fe fefc 	bl	8000680 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2224      	movs	r2, #36	; 0x24
 800188c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 0201 	bic.w	r2, r2, #1
 800189e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018c0:	f001 f8ea 	bl	8002a98 <HAL_RCC_GetPCLK1Freq>
 80018c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4a81      	ldr	r2, [pc, #516]	; (8001ad0 <HAL_I2C_Init+0x274>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d807      	bhi.n	80018e0 <HAL_I2C_Init+0x84>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4a80      	ldr	r2, [pc, #512]	; (8001ad4 <HAL_I2C_Init+0x278>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	bf94      	ite	ls
 80018d8:	2301      	movls	r3, #1
 80018da:	2300      	movhi	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	e006      	b.n	80018ee <HAL_I2C_Init+0x92>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4a7d      	ldr	r2, [pc, #500]	; (8001ad8 <HAL_I2C_Init+0x27c>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	bf94      	ite	ls
 80018e8:	2301      	movls	r3, #1
 80018ea:	2300      	movhi	r3, #0
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e0e7      	b.n	8001ac6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4a78      	ldr	r2, [pc, #480]	; (8001adc <HAL_I2C_Init+0x280>)
 80018fa:	fba2 2303 	umull	r2, r3, r2, r3
 80018fe:	0c9b      	lsrs	r3, r3, #18
 8001900:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68ba      	ldr	r2, [r7, #8]
 8001912:	430a      	orrs	r2, r1
 8001914:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	4a6a      	ldr	r2, [pc, #424]	; (8001ad0 <HAL_I2C_Init+0x274>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d802      	bhi.n	8001930 <HAL_I2C_Init+0xd4>
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	3301      	adds	r3, #1
 800192e:	e009      	b.n	8001944 <HAL_I2C_Init+0xe8>
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001936:	fb02 f303 	mul.w	r3, r2, r3
 800193a:	4a69      	ldr	r2, [pc, #420]	; (8001ae0 <HAL_I2C_Init+0x284>)
 800193c:	fba2 2303 	umull	r2, r3, r2, r3
 8001940:	099b      	lsrs	r3, r3, #6
 8001942:	3301      	adds	r3, #1
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6812      	ldr	r2, [r2, #0]
 8001948:	430b      	orrs	r3, r1
 800194a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001956:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	495c      	ldr	r1, [pc, #368]	; (8001ad0 <HAL_I2C_Init+0x274>)
 8001960:	428b      	cmp	r3, r1
 8001962:	d819      	bhi.n	8001998 <HAL_I2C_Init+0x13c>
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	1e59      	subs	r1, r3, #1
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001972:	1c59      	adds	r1, r3, #1
 8001974:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001978:	400b      	ands	r3, r1
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00a      	beq.n	8001994 <HAL_I2C_Init+0x138>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	1e59      	subs	r1, r3, #1
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	fbb1 f3f3 	udiv	r3, r1, r3
 800198c:	3301      	adds	r3, #1
 800198e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001992:	e051      	b.n	8001a38 <HAL_I2C_Init+0x1dc>
 8001994:	2304      	movs	r3, #4
 8001996:	e04f      	b.n	8001a38 <HAL_I2C_Init+0x1dc>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d111      	bne.n	80019c4 <HAL_I2C_Init+0x168>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	1e58      	subs	r0, r3, #1
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6859      	ldr	r1, [r3, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	440b      	add	r3, r1
 80019ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80019b2:	3301      	adds	r3, #1
 80019b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	bf0c      	ite	eq
 80019bc:	2301      	moveq	r3, #1
 80019be:	2300      	movne	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	e012      	b.n	80019ea <HAL_I2C_Init+0x18e>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	1e58      	subs	r0, r3, #1
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6859      	ldr	r1, [r3, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	0099      	lsls	r1, r3, #2
 80019d4:	440b      	add	r3, r1
 80019d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019da:	3301      	adds	r3, #1
 80019dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	bf0c      	ite	eq
 80019e4:	2301      	moveq	r3, #1
 80019e6:	2300      	movne	r3, #0
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_I2C_Init+0x196>
 80019ee:	2301      	movs	r3, #1
 80019f0:	e022      	b.n	8001a38 <HAL_I2C_Init+0x1dc>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d10e      	bne.n	8001a18 <HAL_I2C_Init+0x1bc>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	1e58      	subs	r0, r3, #1
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6859      	ldr	r1, [r3, #4]
 8001a02:	460b      	mov	r3, r1
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	440b      	add	r3, r1
 8001a08:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a16:	e00f      	b.n	8001a38 <HAL_I2C_Init+0x1dc>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	1e58      	subs	r0, r3, #1
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6859      	ldr	r1, [r3, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	440b      	add	r3, r1
 8001a26:	0099      	lsls	r1, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a2e:	3301      	adds	r3, #1
 8001a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	6809      	ldr	r1, [r1, #0]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69da      	ldr	r2, [r3, #28]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	431a      	orrs	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6911      	ldr	r1, [r2, #16]
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	68d2      	ldr	r2, [r2, #12]
 8001a72:	4311      	orrs	r1, r2
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	430b      	orrs	r3, r1
 8001a7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695a      	ldr	r2, [r3, #20]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f042 0201 	orr.w	r2, r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2220      	movs	r2, #32
 8001ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	000186a0 	.word	0x000186a0
 8001ad4:	001e847f 	.word	0x001e847f
 8001ad8:	003d08ff 	.word	0x003d08ff
 8001adc:	431bde83 	.word	0x431bde83
 8001ae0:	10624dd3 	.word	0x10624dd3

08001ae4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b088      	sub	sp, #32
 8001ae8:	af02      	add	r7, sp, #8
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	4608      	mov	r0, r1
 8001aee:	4611      	mov	r1, r2
 8001af0:	461a      	mov	r2, r3
 8001af2:	4603      	mov	r3, r0
 8001af4:	817b      	strh	r3, [r7, #10]
 8001af6:	460b      	mov	r3, r1
 8001af8:	813b      	strh	r3, [r7, #8]
 8001afa:	4613      	mov	r3, r2
 8001afc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001afe:	f7ff fb23 	bl	8001148 <HAL_GetTick>
 8001b02:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b20      	cmp	r3, #32
 8001b0e:	f040 80d9 	bne.w	8001cc4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	2319      	movs	r3, #25
 8001b18:	2201      	movs	r2, #1
 8001b1a:	496d      	ldr	r1, [pc, #436]	; (8001cd0 <HAL_I2C_Mem_Write+0x1ec>)
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f000 f971 	bl	8001e04 <I2C_WaitOnFlagUntilTimeout>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e0cc      	b.n	8001cc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d101      	bne.n	8001b3a <HAL_I2C_Mem_Write+0x56>
 8001b36:	2302      	movs	r3, #2
 8001b38:	e0c5      	b.n	8001cc6 <HAL_I2C_Mem_Write+0x1e2>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d007      	beq.n	8001b60 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0201 	orr.w	r2, r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2221      	movs	r2, #33	; 0x21
 8001b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2240      	movs	r2, #64	; 0x40
 8001b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6a3a      	ldr	r2, [r7, #32]
 8001b8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4a4d      	ldr	r2, [pc, #308]	; (8001cd4 <HAL_I2C_Mem_Write+0x1f0>)
 8001ba0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ba2:	88f8      	ldrh	r0, [r7, #6]
 8001ba4:	893a      	ldrh	r2, [r7, #8]
 8001ba6:	8979      	ldrh	r1, [r7, #10]
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	9301      	str	r3, [sp, #4]
 8001bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f000 f890 	bl	8001cd8 <I2C_RequestMemoryWrite>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d052      	beq.n	8001c64 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e081      	b.n	8001cc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f000 fa36 	bl	8002038 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00d      	beq.n	8001bee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d107      	bne.n	8001bea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001be8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e06b      	b.n	8001cc6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf2:	781a      	ldrb	r2, [r3, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	3b01      	subs	r3, #1
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	d11b      	bne.n	8001c64 <HAL_I2C_Mem_Write+0x180>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d017      	beq.n	8001c64 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	781a      	ldrb	r2, [r3, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	1c5a      	adds	r2, r3, #1
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1aa      	bne.n	8001bc2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f000 fa29 	bl	80020c8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00d      	beq.n	8001c98 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	2b04      	cmp	r3, #4
 8001c82:	d107      	bne.n	8001c94 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c92:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e016      	b.n	8001cc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ca6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2220      	movs	r2, #32
 8001cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	e000      	b.n	8001cc6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001cc4:	2302      	movs	r3, #2
  }
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	00100002 	.word	0x00100002
 8001cd4:	ffff0000 	.word	0xffff0000

08001cd8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af02      	add	r7, sp, #8
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	4608      	mov	r0, r1
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	817b      	strh	r3, [r7, #10]
 8001cea:	460b      	mov	r3, r1
 8001cec:	813b      	strh	r3, [r7, #8]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	6a3b      	ldr	r3, [r7, #32]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f000 f878 	bl	8001e04 <I2C_WaitOnFlagUntilTimeout>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00d      	beq.n	8001d36 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d28:	d103      	bne.n	8001d32 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e05f      	b.n	8001df6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d36:	897b      	ldrh	r3, [r7, #10]
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	6a3a      	ldr	r2, [r7, #32]
 8001d4a:	492d      	ldr	r1, [pc, #180]	; (8001e00 <I2C_RequestMemoryWrite+0x128>)
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 f8d3 	bl	8001ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e04c      	b.n	8001df6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d74:	6a39      	ldr	r1, [r7, #32]
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f000 f95e 	bl	8002038 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00d      	beq.n	8001d9e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d107      	bne.n	8001d9a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e02b      	b.n	8001df6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d9e:	88fb      	ldrh	r3, [r7, #6]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d105      	bne.n	8001db0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001da4:	893b      	ldrh	r3, [r7, #8]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	611a      	str	r2, [r3, #16]
 8001dae:	e021      	b.n	8001df4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001db0:	893b      	ldrh	r3, [r7, #8]
 8001db2:	0a1b      	lsrs	r3, r3, #8
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc0:	6a39      	ldr	r1, [r7, #32]
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	f000 f938 	bl	8002038 <I2C_WaitOnTXEFlagUntilTimeout>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00d      	beq.n	8001dea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d107      	bne.n	8001de6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001de4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e005      	b.n	8001df6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001dea:	893b      	ldrh	r3, [r7, #8]
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	00010002 	.word	0x00010002

08001e04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	4613      	mov	r3, r2
 8001e12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e14:	e048      	b.n	8001ea8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1c:	d044      	beq.n	8001ea8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e1e:	f7ff f993 	bl	8001148 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d302      	bcc.n	8001e34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d139      	bne.n	8001ea8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	0c1b      	lsrs	r3, r3, #16
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d10d      	bne.n	8001e5a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	43da      	mvns	r2, r3
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	bf0c      	ite	eq
 8001e50:	2301      	moveq	r3, #1
 8001e52:	2300      	movne	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	461a      	mov	r2, r3
 8001e58:	e00c      	b.n	8001e74 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	43da      	mvns	r2, r3
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	4013      	ands	r3, r2
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	bf0c      	ite	eq
 8001e6c:	2301      	moveq	r3, #1
 8001e6e:	2300      	movne	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	461a      	mov	r2, r3
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d116      	bne.n	8001ea8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2220      	movs	r2, #32
 8001e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	f043 0220 	orr.w	r2, r3, #32
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e023      	b.n	8001ef0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	0c1b      	lsrs	r3, r3, #16
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d10d      	bne.n	8001ece <I2C_WaitOnFlagUntilTimeout+0xca>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	43da      	mvns	r2, r3
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	bf0c      	ite	eq
 8001ec4:	2301      	moveq	r3, #1
 8001ec6:	2300      	movne	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	461a      	mov	r2, r3
 8001ecc:	e00c      	b.n	8001ee8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	43da      	mvns	r2, r3
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	bf0c      	ite	eq
 8001ee0:	2301      	moveq	r3, #1
 8001ee2:	2300      	movne	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d093      	beq.n	8001e16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
 8001f04:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f06:	e071      	b.n	8001fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f16:	d123      	bne.n	8001f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f26:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	f043 0204 	orr.w	r2, r3, #4
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e067      	b.n	8002030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f66:	d041      	beq.n	8001fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f68:	f7ff f8ee 	bl	8001148 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d302      	bcc.n	8001f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d136      	bne.n	8001fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	0c1b      	lsrs	r3, r3, #16
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d10c      	bne.n	8001fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	43da      	mvns	r2, r3
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	4013      	ands	r3, r2
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	bf14      	ite	ne
 8001f9a:	2301      	movne	r3, #1
 8001f9c:	2300      	moveq	r3, #0
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	e00b      	b.n	8001fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	43da      	mvns	r2, r3
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	4013      	ands	r3, r2
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	bf14      	ite	ne
 8001fb4:	2301      	movne	r3, #1
 8001fb6:	2300      	moveq	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d016      	beq.n	8001fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	f043 0220 	orr.w	r2, r3, #32
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e021      	b.n	8002030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	0c1b      	lsrs	r3, r3, #16
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d10c      	bne.n	8002010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	43da      	mvns	r2, r3
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	4013      	ands	r3, r2
 8002002:	b29b      	uxth	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	bf14      	ite	ne
 8002008:	2301      	movne	r3, #1
 800200a:	2300      	moveq	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	e00b      	b.n	8002028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	43da      	mvns	r2, r3
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	4013      	ands	r3, r2
 800201c:	b29b      	uxth	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	bf14      	ite	ne
 8002022:	2301      	movne	r3, #1
 8002024:	2300      	moveq	r3, #0
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	f47f af6d 	bne.w	8001f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002044:	e034      	b.n	80020b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 f886 	bl	8002158 <I2C_IsAcknowledgeFailed>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e034      	b.n	80020c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205c:	d028      	beq.n	80020b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800205e:	f7ff f873 	bl	8001148 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	68ba      	ldr	r2, [r7, #8]
 800206a:	429a      	cmp	r2, r3
 800206c:	d302      	bcc.n	8002074 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d11d      	bne.n	80020b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207e:	2b80      	cmp	r3, #128	; 0x80
 8002080:	d016      	beq.n	80020b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2220      	movs	r2, #32
 800208c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	f043 0220 	orr.w	r2, r3, #32
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e007      	b.n	80020c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ba:	2b80      	cmp	r3, #128	; 0x80
 80020bc:	d1c3      	bne.n	8002046 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020d4:	e034      	b.n	8002140 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 f83e 	bl	8002158 <I2C_IsAcknowledgeFailed>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e034      	b.n	8002150 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ec:	d028      	beq.n	8002140 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ee:	f7ff f82b 	bl	8001148 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d302      	bcc.n	8002104 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d11d      	bne.n	8002140 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	2b04      	cmp	r3, #4
 8002110:	d016      	beq.n	8002140 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2220      	movs	r2, #32
 800211c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	f043 0220 	orr.w	r2, r3, #32
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e007      	b.n	8002150 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	2b04      	cmp	r3, #4
 800214c:	d1c3      	bne.n	80020d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800216e:	d11b      	bne.n	80021a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002178:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2220      	movs	r2, #32
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	f043 0204 	orr.w	r2, r3, #4
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
	...

080021b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e267      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d075      	beq.n	80022c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021d6:	4b88      	ldr	r3, [pc, #544]	; (80023f8 <HAL_RCC_OscConfig+0x240>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 030c 	and.w	r3, r3, #12
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d00c      	beq.n	80021fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021e2:	4b85      	ldr	r3, [pc, #532]	; (80023f8 <HAL_RCC_OscConfig+0x240>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d112      	bne.n	8002214 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ee:	4b82      	ldr	r3, [pc, #520]	; (80023f8 <HAL_RCC_OscConfig+0x240>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021fa:	d10b      	bne.n	8002214 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fc:	4b7e      	ldr	r3, [pc, #504]	; (80023f8 <HAL_RCC_OscConfig+0x240>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d05b      	beq.n	80022c0 <HAL_RCC_OscConfig+0x108>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d157      	bne.n	80022c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e242      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800221c:	d106      	bne.n	800222c <HAL_RCC_OscConfig+0x74>
 800221e:	4b76      	ldr	r3, [pc, #472]	; (80023f8 <HAL_RCC_OscConfig+0x240>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a75      	ldr	r2, [pc, #468]	; (80023f8 <HAL_RCC_OscConfig+0x240>)
 8002224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	e01d      	b.n	8002268 <HAL_RCC_OscConfig+0xb0>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002234:	d10c      	bne.n	8002250 <HAL_RCC_OscConfig+0x98>
 8002236:	4b70      	ldr	r3, [pc, #448]	; (80023f8 <HAL_RCC_OscConfig+0x240>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a6f      	ldr	r2, [pc, #444]	; (80023f8 <HAL_RCC_OscConfig+0x240>)
 800223c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	4b6d      	ldr	r3, [pc, #436]	; (80023f8 <HAL_RCC_OscConfig+0x240>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a6c      	ldr	r2, [pc, #432]	; (80023f8 <HAL_RCC_OscConfig+0x240>)
 8002248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	e00b      	b.n	8002268 <HAL_RCC_OscConfig+0xb0>
 8002250:	4b69      	ldr	r3, [pc, #420]	; (80023f8 <HAL_RCC_OscConfig+0x240>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a68      	ldr	r2, [pc, #416]	; (80023f8 <HAL_RCC_OscConfig+0x240>)
 8002256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800225a:	6013      	str	r3, [r2, #0]
 800225c:	4b66      	ldr	r3, [pc, #408]	; (80023f8 <HAL_RCC_OscConfig+0x240>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a65      	ldr	r2, [pc, #404]	; (80023f8 <HAL_RCC_OscConfig+0x240>)
 8002262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d013      	beq.n	8002298 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002270:	f7fe ff6a 	bl	8001148 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002278:	f7fe ff66 	bl	8001148 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b64      	cmp	r3, #100	; 0x64
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e207      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228a:	4b5b      	ldr	r3, [pc, #364]	; (80023f8 <HAL_RCC_OscConfig+0x240>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0xc0>
 8002296:	e014      	b.n	80022c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002298:	f7fe ff56 	bl	8001148 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022a0:	f7fe ff52 	bl	8001148 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b64      	cmp	r3, #100	; 0x64
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e1f3      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b2:	4b51      	ldr	r3, [pc, #324]	; (80023f8 <HAL_RCC_OscConfig+0x240>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f0      	bne.n	80022a0 <HAL_RCC_OscConfig+0xe8>
 80022be:	e000      	b.n	80022c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d063      	beq.n	8002396 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022ce:	4b4a      	ldr	r3, [pc, #296]	; (80023f8 <HAL_RCC_OscConfig+0x240>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 030c 	and.w	r3, r3, #12
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00b      	beq.n	80022f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022da:	4b47      	ldr	r3, [pc, #284]	; (80023f8 <HAL_RCC_OscConfig+0x240>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d11c      	bne.n	8002320 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022e6:	4b44      	ldr	r3, [pc, #272]	; (80023f8 <HAL_RCC_OscConfig+0x240>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d116      	bne.n	8002320 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022f2:	4b41      	ldr	r3, [pc, #260]	; (80023f8 <HAL_RCC_OscConfig+0x240>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d005      	beq.n	800230a <HAL_RCC_OscConfig+0x152>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d001      	beq.n	800230a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e1c7      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230a:	4b3b      	ldr	r3, [pc, #236]	; (80023f8 <HAL_RCC_OscConfig+0x240>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4937      	ldr	r1, [pc, #220]	; (80023f8 <HAL_RCC_OscConfig+0x240>)
 800231a:	4313      	orrs	r3, r2
 800231c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231e:	e03a      	b.n	8002396 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d020      	beq.n	800236a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002328:	4b34      	ldr	r3, [pc, #208]	; (80023fc <HAL_RCC_OscConfig+0x244>)
 800232a:	2201      	movs	r2, #1
 800232c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232e:	f7fe ff0b 	bl	8001148 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002336:	f7fe ff07 	bl	8001148 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e1a8      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002348:	4b2b      	ldr	r3, [pc, #172]	; (80023f8 <HAL_RCC_OscConfig+0x240>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0f0      	beq.n	8002336 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002354:	4b28      	ldr	r3, [pc, #160]	; (80023f8 <HAL_RCC_OscConfig+0x240>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	4925      	ldr	r1, [pc, #148]	; (80023f8 <HAL_RCC_OscConfig+0x240>)
 8002364:	4313      	orrs	r3, r2
 8002366:	600b      	str	r3, [r1, #0]
 8002368:	e015      	b.n	8002396 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800236a:	4b24      	ldr	r3, [pc, #144]	; (80023fc <HAL_RCC_OscConfig+0x244>)
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002370:	f7fe feea 	bl	8001148 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002378:	f7fe fee6 	bl	8001148 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e187      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800238a:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <HAL_RCC_OscConfig+0x240>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d036      	beq.n	8002410 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d016      	beq.n	80023d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023aa:	4b15      	ldr	r3, [pc, #84]	; (8002400 <HAL_RCC_OscConfig+0x248>)
 80023ac:	2201      	movs	r2, #1
 80023ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b0:	f7fe feca 	bl	8001148 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023b8:	f7fe fec6 	bl	8001148 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e167      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ca:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <HAL_RCC_OscConfig+0x240>)
 80023cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0x200>
 80023d6:	e01b      	b.n	8002410 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023d8:	4b09      	ldr	r3, [pc, #36]	; (8002400 <HAL_RCC_OscConfig+0x248>)
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023de:	f7fe feb3 	bl	8001148 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e4:	e00e      	b.n	8002404 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023e6:	f7fe feaf 	bl	8001148 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d907      	bls.n	8002404 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e150      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
 80023f8:	40023800 	.word	0x40023800
 80023fc:	42470000 	.word	0x42470000
 8002400:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002404:	4b88      	ldr	r3, [pc, #544]	; (8002628 <HAL_RCC_OscConfig+0x470>)
 8002406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1ea      	bne.n	80023e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 8097 	beq.w	800254c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800241e:	2300      	movs	r3, #0
 8002420:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002422:	4b81      	ldr	r3, [pc, #516]	; (8002628 <HAL_RCC_OscConfig+0x470>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10f      	bne.n	800244e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	4b7d      	ldr	r3, [pc, #500]	; (8002628 <HAL_RCC_OscConfig+0x470>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	4a7c      	ldr	r2, [pc, #496]	; (8002628 <HAL_RCC_OscConfig+0x470>)
 8002438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800243c:	6413      	str	r3, [r2, #64]	; 0x40
 800243e:	4b7a      	ldr	r3, [pc, #488]	; (8002628 <HAL_RCC_OscConfig+0x470>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800244a:	2301      	movs	r3, #1
 800244c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244e:	4b77      	ldr	r3, [pc, #476]	; (800262c <HAL_RCC_OscConfig+0x474>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002456:	2b00      	cmp	r3, #0
 8002458:	d118      	bne.n	800248c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800245a:	4b74      	ldr	r3, [pc, #464]	; (800262c <HAL_RCC_OscConfig+0x474>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a73      	ldr	r2, [pc, #460]	; (800262c <HAL_RCC_OscConfig+0x474>)
 8002460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002466:	f7fe fe6f 	bl	8001148 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800246e:	f7fe fe6b 	bl	8001148 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e10c      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002480:	4b6a      	ldr	r3, [pc, #424]	; (800262c <HAL_RCC_OscConfig+0x474>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f0      	beq.n	800246e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d106      	bne.n	80024a2 <HAL_RCC_OscConfig+0x2ea>
 8002494:	4b64      	ldr	r3, [pc, #400]	; (8002628 <HAL_RCC_OscConfig+0x470>)
 8002496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002498:	4a63      	ldr	r2, [pc, #396]	; (8002628 <HAL_RCC_OscConfig+0x470>)
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	6713      	str	r3, [r2, #112]	; 0x70
 80024a0:	e01c      	b.n	80024dc <HAL_RCC_OscConfig+0x324>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2b05      	cmp	r3, #5
 80024a8:	d10c      	bne.n	80024c4 <HAL_RCC_OscConfig+0x30c>
 80024aa:	4b5f      	ldr	r3, [pc, #380]	; (8002628 <HAL_RCC_OscConfig+0x470>)
 80024ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ae:	4a5e      	ldr	r2, [pc, #376]	; (8002628 <HAL_RCC_OscConfig+0x470>)
 80024b0:	f043 0304 	orr.w	r3, r3, #4
 80024b4:	6713      	str	r3, [r2, #112]	; 0x70
 80024b6:	4b5c      	ldr	r3, [pc, #368]	; (8002628 <HAL_RCC_OscConfig+0x470>)
 80024b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ba:	4a5b      	ldr	r2, [pc, #364]	; (8002628 <HAL_RCC_OscConfig+0x470>)
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	6713      	str	r3, [r2, #112]	; 0x70
 80024c2:	e00b      	b.n	80024dc <HAL_RCC_OscConfig+0x324>
 80024c4:	4b58      	ldr	r3, [pc, #352]	; (8002628 <HAL_RCC_OscConfig+0x470>)
 80024c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c8:	4a57      	ldr	r2, [pc, #348]	; (8002628 <HAL_RCC_OscConfig+0x470>)
 80024ca:	f023 0301 	bic.w	r3, r3, #1
 80024ce:	6713      	str	r3, [r2, #112]	; 0x70
 80024d0:	4b55      	ldr	r3, [pc, #340]	; (8002628 <HAL_RCC_OscConfig+0x470>)
 80024d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d4:	4a54      	ldr	r2, [pc, #336]	; (8002628 <HAL_RCC_OscConfig+0x470>)
 80024d6:	f023 0304 	bic.w	r3, r3, #4
 80024da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d015      	beq.n	8002510 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e4:	f7fe fe30 	bl	8001148 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ea:	e00a      	b.n	8002502 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ec:	f7fe fe2c 	bl	8001148 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e0cb      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002502:	4b49      	ldr	r3, [pc, #292]	; (8002628 <HAL_RCC_OscConfig+0x470>)
 8002504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0ee      	beq.n	80024ec <HAL_RCC_OscConfig+0x334>
 800250e:	e014      	b.n	800253a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002510:	f7fe fe1a 	bl	8001148 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002516:	e00a      	b.n	800252e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002518:	f7fe fe16 	bl	8001148 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	f241 3288 	movw	r2, #5000	; 0x1388
 8002526:	4293      	cmp	r3, r2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e0b5      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800252e:	4b3e      	ldr	r3, [pc, #248]	; (8002628 <HAL_RCC_OscConfig+0x470>)
 8002530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1ee      	bne.n	8002518 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800253a:	7dfb      	ldrb	r3, [r7, #23]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d105      	bne.n	800254c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002540:	4b39      	ldr	r3, [pc, #228]	; (8002628 <HAL_RCC_OscConfig+0x470>)
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	4a38      	ldr	r2, [pc, #224]	; (8002628 <HAL_RCC_OscConfig+0x470>)
 8002546:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800254a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 80a1 	beq.w	8002698 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002556:	4b34      	ldr	r3, [pc, #208]	; (8002628 <HAL_RCC_OscConfig+0x470>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 030c 	and.w	r3, r3, #12
 800255e:	2b08      	cmp	r3, #8
 8002560:	d05c      	beq.n	800261c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d141      	bne.n	80025ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256a:	4b31      	ldr	r3, [pc, #196]	; (8002630 <HAL_RCC_OscConfig+0x478>)
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002570:	f7fe fdea 	bl	8001148 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002578:	f7fe fde6 	bl	8001148 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e087      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800258a:	4b27      	ldr	r3, [pc, #156]	; (8002628 <HAL_RCC_OscConfig+0x470>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69da      	ldr	r2, [r3, #28]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	019b      	lsls	r3, r3, #6
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ac:	085b      	lsrs	r3, r3, #1
 80025ae:	3b01      	subs	r3, #1
 80025b0:	041b      	lsls	r3, r3, #16
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b8:	061b      	lsls	r3, r3, #24
 80025ba:	491b      	ldr	r1, [pc, #108]	; (8002628 <HAL_RCC_OscConfig+0x470>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025c0:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <HAL_RCC_OscConfig+0x478>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c6:	f7fe fdbf 	bl	8001148 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ce:	f7fe fdbb 	bl	8001148 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e05c      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e0:	4b11      	ldr	r3, [pc, #68]	; (8002628 <HAL_RCC_OscConfig+0x470>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0f0      	beq.n	80025ce <HAL_RCC_OscConfig+0x416>
 80025ec:	e054      	b.n	8002698 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ee:	4b10      	ldr	r3, [pc, #64]	; (8002630 <HAL_RCC_OscConfig+0x478>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f4:	f7fe fda8 	bl	8001148 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025fc:	f7fe fda4 	bl	8001148 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e045      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800260e:	4b06      	ldr	r3, [pc, #24]	; (8002628 <HAL_RCC_OscConfig+0x470>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f0      	bne.n	80025fc <HAL_RCC_OscConfig+0x444>
 800261a:	e03d      	b.n	8002698 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d107      	bne.n	8002634 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e038      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
 8002628:	40023800 	.word	0x40023800
 800262c:	40007000 	.word	0x40007000
 8002630:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002634:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <HAL_RCC_OscConfig+0x4ec>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d028      	beq.n	8002694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800264c:	429a      	cmp	r2, r3
 800264e:	d121      	bne.n	8002694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265a:	429a      	cmp	r2, r3
 800265c:	d11a      	bne.n	8002694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002664:	4013      	ands	r3, r2
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800266a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800266c:	4293      	cmp	r3, r2
 800266e:	d111      	bne.n	8002694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267a:	085b      	lsrs	r3, r3, #1
 800267c:	3b01      	subs	r3, #1
 800267e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002680:	429a      	cmp	r2, r3
 8002682:	d107      	bne.n	8002694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002690:	429a      	cmp	r2, r3
 8002692:	d001      	beq.n	8002698 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e000      	b.n	800269a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40023800 	.word	0x40023800

080026a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0cc      	b.n	8002856 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026bc:	4b68      	ldr	r3, [pc, #416]	; (8002860 <HAL_RCC_ClockConfig+0x1b8>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d90c      	bls.n	80026e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ca:	4b65      	ldr	r3, [pc, #404]	; (8002860 <HAL_RCC_ClockConfig+0x1b8>)
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d2:	4b63      	ldr	r3, [pc, #396]	; (8002860 <HAL_RCC_ClockConfig+0x1b8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d001      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0b8      	b.n	8002856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d020      	beq.n	8002732 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026fc:	4b59      	ldr	r3, [pc, #356]	; (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	4a58      	ldr	r2, [pc, #352]	; (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002706:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0308 	and.w	r3, r3, #8
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002714:	4b53      	ldr	r3, [pc, #332]	; (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	4a52      	ldr	r2, [pc, #328]	; (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 800271a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800271e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002720:	4b50      	ldr	r3, [pc, #320]	; (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	494d      	ldr	r1, [pc, #308]	; (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 800272e:	4313      	orrs	r3, r2
 8002730:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d044      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d107      	bne.n	8002756 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002746:	4b47      	ldr	r3, [pc, #284]	; (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d119      	bne.n	8002786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e07f      	b.n	8002856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d003      	beq.n	8002766 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002762:	2b03      	cmp	r3, #3
 8002764:	d107      	bne.n	8002776 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002766:	4b3f      	ldr	r3, [pc, #252]	; (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d109      	bne.n	8002786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e06f      	b.n	8002856 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002776:	4b3b      	ldr	r3, [pc, #236]	; (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e067      	b.n	8002856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002786:	4b37      	ldr	r3, [pc, #220]	; (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f023 0203 	bic.w	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	4934      	ldr	r1, [pc, #208]	; (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 8002794:	4313      	orrs	r3, r2
 8002796:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002798:	f7fe fcd6 	bl	8001148 <HAL_GetTick>
 800279c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a0:	f7fe fcd2 	bl	8001148 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e04f      	b.n	8002856 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b6:	4b2b      	ldr	r3, [pc, #172]	; (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 020c 	and.w	r2, r3, #12
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d1eb      	bne.n	80027a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027c8:	4b25      	ldr	r3, [pc, #148]	; (8002860 <HAL_RCC_ClockConfig+0x1b8>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d20c      	bcs.n	80027f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d6:	4b22      	ldr	r3, [pc, #136]	; (8002860 <HAL_RCC_ClockConfig+0x1b8>)
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027de:	4b20      	ldr	r3, [pc, #128]	; (8002860 <HAL_RCC_ClockConfig+0x1b8>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e032      	b.n	8002856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027fc:	4b19      	ldr	r3, [pc, #100]	; (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	4916      	ldr	r1, [pc, #88]	; (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 800280a:	4313      	orrs	r3, r2
 800280c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d009      	beq.n	800282e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800281a:	4b12      	ldr	r3, [pc, #72]	; (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	490e      	ldr	r1, [pc, #56]	; (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	4313      	orrs	r3, r2
 800282c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800282e:	f000 f821 	bl	8002874 <HAL_RCC_GetSysClockFreq>
 8002832:	4602      	mov	r2, r0
 8002834:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	091b      	lsrs	r3, r3, #4
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	490a      	ldr	r1, [pc, #40]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 8002840:	5ccb      	ldrb	r3, [r1, r3]
 8002842:	fa22 f303 	lsr.w	r3, r2, r3
 8002846:	4a09      	ldr	r2, [pc, #36]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800284a:	4b09      	ldr	r3, [pc, #36]	; (8002870 <HAL_RCC_ClockConfig+0x1c8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7fe fc36 	bl	80010c0 <HAL_InitTick>

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40023c00 	.word	0x40023c00
 8002864:	40023800 	.word	0x40023800
 8002868:	08006450 	.word	0x08006450
 800286c:	20000000 	.word	0x20000000
 8002870:	20000004 	.word	0x20000004

08002874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002878:	b094      	sub	sp, #80	; 0x50
 800287a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	647b      	str	r3, [r7, #68]	; 0x44
 8002880:	2300      	movs	r3, #0
 8002882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002884:	2300      	movs	r3, #0
 8002886:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800288c:	4b79      	ldr	r3, [pc, #484]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x200>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 030c 	and.w	r3, r3, #12
 8002894:	2b08      	cmp	r3, #8
 8002896:	d00d      	beq.n	80028b4 <HAL_RCC_GetSysClockFreq+0x40>
 8002898:	2b08      	cmp	r3, #8
 800289a:	f200 80e1 	bhi.w	8002a60 <HAL_RCC_GetSysClockFreq+0x1ec>
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d002      	beq.n	80028a8 <HAL_RCC_GetSysClockFreq+0x34>
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d003      	beq.n	80028ae <HAL_RCC_GetSysClockFreq+0x3a>
 80028a6:	e0db      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028a8:	4b73      	ldr	r3, [pc, #460]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x204>)
 80028aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80028ac:	e0db      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028ae:	4b73      	ldr	r3, [pc, #460]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x208>)
 80028b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028b2:	e0d8      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028b4:	4b6f      	ldr	r3, [pc, #444]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x200>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028be:	4b6d      	ldr	r3, [pc, #436]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x200>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d063      	beq.n	8002992 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ca:	4b6a      	ldr	r3, [pc, #424]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x200>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	099b      	lsrs	r3, r3, #6
 80028d0:	2200      	movs	r2, #0
 80028d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80028d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028dc:	633b      	str	r3, [r7, #48]	; 0x30
 80028de:	2300      	movs	r3, #0
 80028e0:	637b      	str	r3, [r7, #52]	; 0x34
 80028e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028e6:	4622      	mov	r2, r4
 80028e8:	462b      	mov	r3, r5
 80028ea:	f04f 0000 	mov.w	r0, #0
 80028ee:	f04f 0100 	mov.w	r1, #0
 80028f2:	0159      	lsls	r1, r3, #5
 80028f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028f8:	0150      	lsls	r0, r2, #5
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
 80028fe:	4621      	mov	r1, r4
 8002900:	1a51      	subs	r1, r2, r1
 8002902:	6139      	str	r1, [r7, #16]
 8002904:	4629      	mov	r1, r5
 8002906:	eb63 0301 	sbc.w	r3, r3, r1
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002918:	4659      	mov	r1, fp
 800291a:	018b      	lsls	r3, r1, #6
 800291c:	4651      	mov	r1, sl
 800291e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002922:	4651      	mov	r1, sl
 8002924:	018a      	lsls	r2, r1, #6
 8002926:	4651      	mov	r1, sl
 8002928:	ebb2 0801 	subs.w	r8, r2, r1
 800292c:	4659      	mov	r1, fp
 800292e:	eb63 0901 	sbc.w	r9, r3, r1
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800293e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002942:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002946:	4690      	mov	r8, r2
 8002948:	4699      	mov	r9, r3
 800294a:	4623      	mov	r3, r4
 800294c:	eb18 0303 	adds.w	r3, r8, r3
 8002950:	60bb      	str	r3, [r7, #8]
 8002952:	462b      	mov	r3, r5
 8002954:	eb49 0303 	adc.w	r3, r9, r3
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	f04f 0300 	mov.w	r3, #0
 8002962:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002966:	4629      	mov	r1, r5
 8002968:	024b      	lsls	r3, r1, #9
 800296a:	4621      	mov	r1, r4
 800296c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002970:	4621      	mov	r1, r4
 8002972:	024a      	lsls	r2, r1, #9
 8002974:	4610      	mov	r0, r2
 8002976:	4619      	mov	r1, r3
 8002978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800297a:	2200      	movs	r2, #0
 800297c:	62bb      	str	r3, [r7, #40]	; 0x28
 800297e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002980:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002984:	f7fd fc20 	bl	80001c8 <__aeabi_uldivmod>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4613      	mov	r3, r2
 800298e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002990:	e058      	b.n	8002a44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002992:	4b38      	ldr	r3, [pc, #224]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x200>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	099b      	lsrs	r3, r3, #6
 8002998:	2200      	movs	r2, #0
 800299a:	4618      	mov	r0, r3
 800299c:	4611      	mov	r1, r2
 800299e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029a2:	623b      	str	r3, [r7, #32]
 80029a4:	2300      	movs	r3, #0
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
 80029a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029ac:	4642      	mov	r2, r8
 80029ae:	464b      	mov	r3, r9
 80029b0:	f04f 0000 	mov.w	r0, #0
 80029b4:	f04f 0100 	mov.w	r1, #0
 80029b8:	0159      	lsls	r1, r3, #5
 80029ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029be:	0150      	lsls	r0, r2, #5
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4641      	mov	r1, r8
 80029c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80029ca:	4649      	mov	r1, r9
 80029cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	f04f 0300 	mov.w	r3, #0
 80029d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029e4:	ebb2 040a 	subs.w	r4, r2, sl
 80029e8:	eb63 050b 	sbc.w	r5, r3, fp
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	00eb      	lsls	r3, r5, #3
 80029f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029fa:	00e2      	lsls	r2, r4, #3
 80029fc:	4614      	mov	r4, r2
 80029fe:	461d      	mov	r5, r3
 8002a00:	4643      	mov	r3, r8
 8002a02:	18e3      	adds	r3, r4, r3
 8002a04:	603b      	str	r3, [r7, #0]
 8002a06:	464b      	mov	r3, r9
 8002a08:	eb45 0303 	adc.w	r3, r5, r3
 8002a0c:	607b      	str	r3, [r7, #4]
 8002a0e:	f04f 0200 	mov.w	r2, #0
 8002a12:	f04f 0300 	mov.w	r3, #0
 8002a16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a1a:	4629      	mov	r1, r5
 8002a1c:	028b      	lsls	r3, r1, #10
 8002a1e:	4621      	mov	r1, r4
 8002a20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a24:	4621      	mov	r1, r4
 8002a26:	028a      	lsls	r2, r1, #10
 8002a28:	4610      	mov	r0, r2
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a2e:	2200      	movs	r2, #0
 8002a30:	61bb      	str	r3, [r7, #24]
 8002a32:	61fa      	str	r2, [r7, #28]
 8002a34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a38:	f7fd fbc6 	bl	80001c8 <__aeabi_uldivmod>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4613      	mov	r3, r2
 8002a42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	0c1b      	lsrs	r3, r3, #16
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	3301      	adds	r3, #1
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a5e:	e002      	b.n	8002a66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a60:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3750      	adds	r7, #80	; 0x50
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a72:	bf00      	nop
 8002a74:	40023800 	.word	0x40023800
 8002a78:	00f42400 	.word	0x00f42400
 8002a7c:	007a1200 	.word	0x007a1200

08002a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a84:	4b03      	ldr	r3, [pc, #12]	; (8002a94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a86:	681b      	ldr	r3, [r3, #0]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	20000000 	.word	0x20000000

08002a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a9c:	f7ff fff0 	bl	8002a80 <HAL_RCC_GetHCLKFreq>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	0a9b      	lsrs	r3, r3, #10
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	4903      	ldr	r1, [pc, #12]	; (8002abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aae:	5ccb      	ldrb	r3, [r1, r3]
 8002ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	08006460 	.word	0x08006460

08002ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ac4:	f7ff ffdc 	bl	8002a80 <HAL_RCC_GetHCLKFreq>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	0b5b      	lsrs	r3, r3, #13
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	4903      	ldr	r1, [pc, #12]	; (8002ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ad6:	5ccb      	ldrb	r3, [r1, r3]
 8002ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	08006460 	.word	0x08006460

08002ae8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e07b      	b.n	8002bf2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d108      	bne.n	8002b14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b0a:	d009      	beq.n	8002b20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	61da      	str	r2, [r3, #28]
 8002b12:	e005      	b.n	8002b20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d106      	bne.n	8002b40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7fd ff0e 	bl	800095c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2202      	movs	r2, #2
 8002b44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b90:	431a      	orrs	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba4:	ea42 0103 	orr.w	r1, r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	0c1b      	lsrs	r3, r3, #16
 8002bbe:	f003 0104 	and.w	r1, r3, #4
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	f003 0210 	and.w	r2, r3, #16
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	69da      	ldr	r2, [r3, #28]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002be0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b088      	sub	sp, #32
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	60f8      	str	r0, [r7, #12]
 8002c02:	60b9      	str	r1, [r7, #8]
 8002c04:	603b      	str	r3, [r7, #0]
 8002c06:	4613      	mov	r3, r2
 8002c08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_SPI_Transmit+0x22>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e12d      	b.n	8002e78 <HAL_SPI_Transmit+0x27e>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c24:	f7fe fa90 	bl	8001148 <HAL_GetTick>
 8002c28:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c2a:	88fb      	ldrh	r3, [r7, #6]
 8002c2c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d002      	beq.n	8002c40 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c3e:	e116      	b.n	8002e6e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <HAL_SPI_Transmit+0x52>
 8002c46:	88fb      	ldrh	r3, [r7, #6]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d102      	bne.n	8002c52 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c50:	e10d      	b.n	8002e6e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2203      	movs	r2, #3
 8002c56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	88fa      	ldrh	r2, [r7, #6]
 8002c6a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	88fa      	ldrh	r2, [r7, #6]
 8002c70:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c98:	d10f      	bne.n	8002cba <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ca8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cb8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc4:	2b40      	cmp	r3, #64	; 0x40
 8002cc6:	d007      	beq.n	8002cd8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ce0:	d14f      	bne.n	8002d82 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <HAL_SPI_Transmit+0xf6>
 8002cea:	8afb      	ldrh	r3, [r7, #22]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d142      	bne.n	8002d76 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf4:	881a      	ldrh	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	1c9a      	adds	r2, r3, #2
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d14:	e02f      	b.n	8002d76 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d112      	bne.n	8002d4a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	881a      	ldrh	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	1c9a      	adds	r2, r3, #2
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	3b01      	subs	r3, #1
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d48:	e015      	b.n	8002d76 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d4a:	f7fe f9fd 	bl	8001148 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d803      	bhi.n	8002d62 <HAL_SPI_Transmit+0x168>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d60:	d102      	bne.n	8002d68 <HAL_SPI_Transmit+0x16e>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d106      	bne.n	8002d76 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002d74:	e07b      	b.n	8002e6e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1ca      	bne.n	8002d16 <HAL_SPI_Transmit+0x11c>
 8002d80:	e050      	b.n	8002e24 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d002      	beq.n	8002d90 <HAL_SPI_Transmit+0x196>
 8002d8a:	8afb      	ldrh	r3, [r7, #22]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d144      	bne.n	8002e1a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	330c      	adds	r3, #12
 8002d9a:	7812      	ldrb	r2, [r2, #0]
 8002d9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002db6:	e030      	b.n	8002e1a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d113      	bne.n	8002dee <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	330c      	adds	r3, #12
 8002dd0:	7812      	ldrb	r2, [r2, #0]
 8002dd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	3b01      	subs	r3, #1
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dec:	e015      	b.n	8002e1a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dee:	f7fe f9ab 	bl	8001148 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d803      	bhi.n	8002e06 <HAL_SPI_Transmit+0x20c>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e04:	d102      	bne.n	8002e0c <HAL_SPI_Transmit+0x212>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d106      	bne.n	8002e1a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002e18:	e029      	b.n	8002e6e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1c9      	bne.n	8002db8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	6839      	ldr	r1, [r7, #0]
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 fbdf 	bl	80035ec <SPI_EndRxTxTransaction>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d002      	beq.n	8002e3a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2220      	movs	r2, #32
 8002e38:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10a      	bne.n	8002e58 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e42:	2300      	movs	r3, #0
 8002e44:	613b      	str	r3, [r7, #16]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	613b      	str	r3, [r7, #16]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	77fb      	strb	r3, [r7, #31]
 8002e64:	e003      	b.n	8002e6e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e76:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3720      	adds	r7, #32
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af02      	add	r7, sp, #8
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	603b      	str	r3, [r7, #0]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d002      	beq.n	8002ea6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ea4:	e0fb      	b.n	800309e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eae:	d112      	bne.n	8002ed6 <HAL_SPI_Receive+0x56>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10e      	bne.n	8002ed6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2204      	movs	r2, #4
 8002ebc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002ec0:	88fa      	ldrh	r2, [r7, #6]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	68b9      	ldr	r1, [r7, #8]
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 f8ef 	bl	80030b0 <HAL_SPI_TransmitReceive>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	e0e8      	b.n	80030a8 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d101      	bne.n	8002ee4 <HAL_SPI_Receive+0x64>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e0e1      	b.n	80030a8 <HAL_SPI_Receive+0x228>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002eec:	f7fe f92c 	bl	8001148 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d002      	beq.n	8002efe <HAL_SPI_Receive+0x7e>
 8002ef8:	88fb      	ldrh	r3, [r7, #6]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d102      	bne.n	8002f04 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f02:	e0cc      	b.n	800309e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2204      	movs	r2, #4
 8002f08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	88fa      	ldrh	r2, [r7, #6]
 8002f1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	88fa      	ldrh	r2, [r7, #6]
 8002f22:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f4a:	d10f      	bne.n	8002f6c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f5a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f6a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f76:	2b40      	cmp	r3, #64	; 0x40
 8002f78:	d007      	beq.n	8002f8a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f88:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d16a      	bne.n	8003068 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f92:	e032      	b.n	8002ffa <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d115      	bne.n	8002fce <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f103 020c 	add.w	r2, r3, #12
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fae:	7812      	ldrb	r2, [r2, #0]
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fcc:	e015      	b.n	8002ffa <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fce:	f7fe f8bb 	bl	8001148 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d803      	bhi.n	8002fe6 <HAL_SPI_Receive+0x166>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe4:	d102      	bne.n	8002fec <HAL_SPI_Receive+0x16c>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d106      	bne.n	8002ffa <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002ff8:	e051      	b.n	800309e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1c7      	bne.n	8002f94 <HAL_SPI_Receive+0x114>
 8003004:	e035      	b.n	8003072 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b01      	cmp	r3, #1
 8003012:	d113      	bne.n	800303c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301e:	b292      	uxth	r2, r2
 8003020:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003026:	1c9a      	adds	r2, r3, #2
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003030:	b29b      	uxth	r3, r3
 8003032:	3b01      	subs	r3, #1
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	87da      	strh	r2, [r3, #62]	; 0x3e
 800303a:	e015      	b.n	8003068 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800303c:	f7fe f884 	bl	8001148 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d803      	bhi.n	8003054 <HAL_SPI_Receive+0x1d4>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003052:	d102      	bne.n	800305a <HAL_SPI_Receive+0x1da>
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d106      	bne.n	8003068 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003066:	e01a      	b.n	800309e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800306c:	b29b      	uxth	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1c9      	bne.n	8003006 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	6839      	ldr	r1, [r7, #0]
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 fa52 	bl	8003520 <SPI_EndRxTransaction>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2220      	movs	r2, #32
 8003086:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	75fb      	strb	r3, [r7, #23]
 8003094:	e003      	b.n	800309e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08c      	sub	sp, #48	; 0x30
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
 80030bc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80030be:	2301      	movs	r3, #1
 80030c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030c2:	2300      	movs	r3, #0
 80030c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d101      	bne.n	80030d6 <HAL_SPI_TransmitReceive+0x26>
 80030d2:	2302      	movs	r3, #2
 80030d4:	e198      	b.n	8003408 <HAL_SPI_TransmitReceive+0x358>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030de:	f7fe f833 	bl	8001148 <HAL_GetTick>
 80030e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80030f4:	887b      	ldrh	r3, [r7, #2]
 80030f6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d00f      	beq.n	8003120 <HAL_SPI_TransmitReceive+0x70>
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003106:	d107      	bne.n	8003118 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d103      	bne.n	8003118 <HAL_SPI_TransmitReceive+0x68>
 8003110:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003114:	2b04      	cmp	r3, #4
 8003116:	d003      	beq.n	8003120 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003118:	2302      	movs	r3, #2
 800311a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800311e:	e16d      	b.n	80033fc <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d005      	beq.n	8003132 <HAL_SPI_TransmitReceive+0x82>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d002      	beq.n	8003132 <HAL_SPI_TransmitReceive+0x82>
 800312c:	887b      	ldrh	r3, [r7, #2]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d103      	bne.n	800313a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003138:	e160      	b.n	80033fc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b04      	cmp	r3, #4
 8003144:	d003      	beq.n	800314e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2205      	movs	r2, #5
 800314a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	887a      	ldrh	r2, [r7, #2]
 800315e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	887a      	ldrh	r2, [r7, #2]
 8003164:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	887a      	ldrh	r2, [r7, #2]
 8003170:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	887a      	ldrh	r2, [r7, #2]
 8003176:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318e:	2b40      	cmp	r3, #64	; 0x40
 8003190:	d007      	beq.n	80031a2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031aa:	d17c      	bne.n	80032a6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <HAL_SPI_TransmitReceive+0x10a>
 80031b4:	8b7b      	ldrh	r3, [r7, #26]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d16a      	bne.n	8003290 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	881a      	ldrh	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	1c9a      	adds	r2, r3, #2
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b29a      	uxth	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031de:	e057      	b.n	8003290 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d11b      	bne.n	8003226 <HAL_SPI_TransmitReceive+0x176>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d016      	beq.n	8003226 <HAL_SPI_TransmitReceive+0x176>
 80031f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d113      	bne.n	8003226 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	881a      	ldrh	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	1c9a      	adds	r2, r3, #2
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003218:	b29b      	uxth	r3, r3
 800321a:	3b01      	subs	r3, #1
 800321c:	b29a      	uxth	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003222:	2300      	movs	r3, #0
 8003224:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b01      	cmp	r3, #1
 8003232:	d119      	bne.n	8003268 <HAL_SPI_TransmitReceive+0x1b8>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003238:	b29b      	uxth	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d014      	beq.n	8003268 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003248:	b292      	uxth	r2, r2
 800324a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003250:	1c9a      	adds	r2, r3, #2
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800325a:	b29b      	uxth	r3, r3
 800325c:	3b01      	subs	r3, #1
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003264:	2301      	movs	r3, #1
 8003266:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003268:	f7fd ff6e 	bl	8001148 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003274:	429a      	cmp	r2, r3
 8003276:	d80b      	bhi.n	8003290 <HAL_SPI_TransmitReceive+0x1e0>
 8003278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800327a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327e:	d007      	beq.n	8003290 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800328e:	e0b5      	b.n	80033fc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1a2      	bne.n	80031e0 <HAL_SPI_TransmitReceive+0x130>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800329e:	b29b      	uxth	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d19d      	bne.n	80031e0 <HAL_SPI_TransmitReceive+0x130>
 80032a4:	e080      	b.n	80033a8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <HAL_SPI_TransmitReceive+0x204>
 80032ae:	8b7b      	ldrh	r3, [r7, #26]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d16f      	bne.n	8003394 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	330c      	adds	r3, #12
 80032be:	7812      	ldrb	r2, [r2, #0]
 80032c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032da:	e05b      	b.n	8003394 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d11c      	bne.n	8003324 <HAL_SPI_TransmitReceive+0x274>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d017      	beq.n	8003324 <HAL_SPI_TransmitReceive+0x274>
 80032f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d114      	bne.n	8003324 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	330c      	adds	r3, #12
 8003304:	7812      	ldrb	r2, [r2, #0]
 8003306:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003316:	b29b      	uxth	r3, r3
 8003318:	3b01      	subs	r3, #1
 800331a:	b29a      	uxth	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b01      	cmp	r3, #1
 8003330:	d119      	bne.n	8003366 <HAL_SPI_TransmitReceive+0x2b6>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003336:	b29b      	uxth	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d014      	beq.n	8003366 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003358:	b29b      	uxth	r3, r3
 800335a:	3b01      	subs	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003362:	2301      	movs	r3, #1
 8003364:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003366:	f7fd feef 	bl	8001148 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003372:	429a      	cmp	r2, r3
 8003374:	d803      	bhi.n	800337e <HAL_SPI_TransmitReceive+0x2ce>
 8003376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337c:	d102      	bne.n	8003384 <HAL_SPI_TransmitReceive+0x2d4>
 800337e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003380:	2b00      	cmp	r3, #0
 8003382:	d107      	bne.n	8003394 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003392:	e033      	b.n	80033fc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003398:	b29b      	uxth	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d19e      	bne.n	80032dc <HAL_SPI_TransmitReceive+0x22c>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d199      	bne.n	80032dc <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 f91d 	bl	80035ec <SPI_EndRxTxTransaction>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d006      	beq.n	80033c6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2220      	movs	r2, #32
 80033c2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80033c4:	e01a      	b.n	80033fc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10a      	bne.n	80033e4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	617b      	str	r3, [r7, #20]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	617b      	str	r3, [r7, #20]
 80033e2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033f2:	e003      	b.n	80033fc <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003404:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003408:	4618      	mov	r0, r3
 800340a:	3730      	adds	r7, #48	; 0x30
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b088      	sub	sp, #32
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	4613      	mov	r3, r2
 800341e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003420:	f7fd fe92 	bl	8001148 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003428:	1a9b      	subs	r3, r3, r2
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	4413      	add	r3, r2
 800342e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003430:	f7fd fe8a 	bl	8001148 <HAL_GetTick>
 8003434:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003436:	4b39      	ldr	r3, [pc, #228]	; (800351c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	015b      	lsls	r3, r3, #5
 800343c:	0d1b      	lsrs	r3, r3, #20
 800343e:	69fa      	ldr	r2, [r7, #28]
 8003440:	fb02 f303 	mul.w	r3, r2, r3
 8003444:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003446:	e054      	b.n	80034f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344e:	d050      	beq.n	80034f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003450:	f7fd fe7a 	bl	8001148 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	69fa      	ldr	r2, [r7, #28]
 800345c:	429a      	cmp	r2, r3
 800345e:	d902      	bls.n	8003466 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d13d      	bne.n	80034e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003474:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800347e:	d111      	bne.n	80034a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003488:	d004      	beq.n	8003494 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003492:	d107      	bne.n	80034a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ac:	d10f      	bne.n	80034ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e017      	b.n	8003512 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	4013      	ands	r3, r2
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	429a      	cmp	r2, r3
 8003500:	bf0c      	ite	eq
 8003502:	2301      	moveq	r3, #1
 8003504:	2300      	movne	r3, #0
 8003506:	b2db      	uxtb	r3, r3
 8003508:	461a      	mov	r2, r3
 800350a:	79fb      	ldrb	r3, [r7, #7]
 800350c:	429a      	cmp	r2, r3
 800350e:	d19b      	bne.n	8003448 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3720      	adds	r7, #32
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	20000000 	.word	0x20000000

08003520 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af02      	add	r7, sp, #8
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003534:	d111      	bne.n	800355a <SPI_EndRxTransaction+0x3a>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800353e:	d004      	beq.n	800354a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003548:	d107      	bne.n	800355a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003558:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003562:	d12a      	bne.n	80035ba <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800356c:	d012      	beq.n	8003594 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2200      	movs	r2, #0
 8003576:	2180      	movs	r1, #128	; 0x80
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f7ff ff49 	bl	8003410 <SPI_WaitFlagStateUntilTimeout>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d02d      	beq.n	80035e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003588:	f043 0220 	orr.w	r2, r3, #32
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e026      	b.n	80035e2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	2200      	movs	r2, #0
 800359c:	2101      	movs	r1, #1
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f7ff ff36 	bl	8003410 <SPI_WaitFlagStateUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d01a      	beq.n	80035e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ae:	f043 0220 	orr.w	r2, r3, #32
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e013      	b.n	80035e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	2200      	movs	r2, #0
 80035c2:	2101      	movs	r1, #1
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f7ff ff23 	bl	8003410 <SPI_WaitFlagStateUntilTimeout>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d007      	beq.n	80035e0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d4:	f043 0220 	orr.w	r2, r3, #32
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e000      	b.n	80035e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
	...

080035ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b088      	sub	sp, #32
 80035f0:	af02      	add	r7, sp, #8
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	2201      	movs	r2, #1
 8003600:	2102      	movs	r1, #2
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f7ff ff04 	bl	8003410 <SPI_WaitFlagStateUntilTimeout>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d007      	beq.n	800361e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003612:	f043 0220 	orr.w	r2, r3, #32
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e032      	b.n	8003684 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800361e:	4b1b      	ldr	r3, [pc, #108]	; (800368c <SPI_EndRxTxTransaction+0xa0>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a1b      	ldr	r2, [pc, #108]	; (8003690 <SPI_EndRxTxTransaction+0xa4>)
 8003624:	fba2 2303 	umull	r2, r3, r2, r3
 8003628:	0d5b      	lsrs	r3, r3, #21
 800362a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800362e:	fb02 f303 	mul.w	r3, r2, r3
 8003632:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800363c:	d112      	bne.n	8003664 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2200      	movs	r2, #0
 8003646:	2180      	movs	r1, #128	; 0x80
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f7ff fee1 	bl	8003410 <SPI_WaitFlagStateUntilTimeout>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d016      	beq.n	8003682 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003658:	f043 0220 	orr.w	r2, r3, #32
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e00f      	b.n	8003684 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	3b01      	subs	r3, #1
 800366e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367a:	2b80      	cmp	r3, #128	; 0x80
 800367c:	d0f2      	beq.n	8003664 <SPI_EndRxTxTransaction+0x78>
 800367e:	e000      	b.n	8003682 <SPI_EndRxTxTransaction+0x96>
        break;
 8003680:	bf00      	nop
  }

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20000000 	.word	0x20000000
 8003690:	165e9f81 	.word	0x165e9f81

08003694 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e041      	b.n	800372a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d106      	bne.n	80036c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7fd fb70 	bl	8000da0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2202      	movs	r2, #2
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3304      	adds	r3, #4
 80036d0:	4619      	mov	r1, r3
 80036d2:	4610      	mov	r0, r2
 80036d4:	f000 f9b8 	bl	8003a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
	...

08003734 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d109      	bne.n	8003758 <HAL_TIM_PWM_Start+0x24>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b01      	cmp	r3, #1
 800374e:	bf14      	ite	ne
 8003750:	2301      	movne	r3, #1
 8003752:	2300      	moveq	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	e022      	b.n	800379e <HAL_TIM_PWM_Start+0x6a>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2b04      	cmp	r3, #4
 800375c:	d109      	bne.n	8003772 <HAL_TIM_PWM_Start+0x3e>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b01      	cmp	r3, #1
 8003768:	bf14      	ite	ne
 800376a:	2301      	movne	r3, #1
 800376c:	2300      	moveq	r3, #0
 800376e:	b2db      	uxtb	r3, r3
 8003770:	e015      	b.n	800379e <HAL_TIM_PWM_Start+0x6a>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b08      	cmp	r3, #8
 8003776:	d109      	bne.n	800378c <HAL_TIM_PWM_Start+0x58>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b01      	cmp	r3, #1
 8003782:	bf14      	ite	ne
 8003784:	2301      	movne	r3, #1
 8003786:	2300      	moveq	r3, #0
 8003788:	b2db      	uxtb	r3, r3
 800378a:	e008      	b.n	800379e <HAL_TIM_PWM_Start+0x6a>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b01      	cmp	r3, #1
 8003796:	bf14      	ite	ne
 8003798:	2301      	movne	r3, #1
 800379a:	2300      	moveq	r3, #0
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e07c      	b.n	80038a0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d104      	bne.n	80037b6 <HAL_TIM_PWM_Start+0x82>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037b4:	e013      	b.n	80037de <HAL_TIM_PWM_Start+0xaa>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d104      	bne.n	80037c6 <HAL_TIM_PWM_Start+0x92>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037c4:	e00b      	b.n	80037de <HAL_TIM_PWM_Start+0xaa>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d104      	bne.n	80037d6 <HAL_TIM_PWM_Start+0xa2>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037d4:	e003      	b.n	80037de <HAL_TIM_PWM_Start+0xaa>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2202      	movs	r2, #2
 80037da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2201      	movs	r2, #1
 80037e4:	6839      	ldr	r1, [r7, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 fb8a 	bl	8003f00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a2d      	ldr	r2, [pc, #180]	; (80038a8 <HAL_TIM_PWM_Start+0x174>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d004      	beq.n	8003800 <HAL_TIM_PWM_Start+0xcc>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a2c      	ldr	r2, [pc, #176]	; (80038ac <HAL_TIM_PWM_Start+0x178>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d101      	bne.n	8003804 <HAL_TIM_PWM_Start+0xd0>
 8003800:	2301      	movs	r3, #1
 8003802:	e000      	b.n	8003806 <HAL_TIM_PWM_Start+0xd2>
 8003804:	2300      	movs	r3, #0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d007      	beq.n	800381a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003818:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a22      	ldr	r2, [pc, #136]	; (80038a8 <HAL_TIM_PWM_Start+0x174>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d022      	beq.n	800386a <HAL_TIM_PWM_Start+0x136>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382c:	d01d      	beq.n	800386a <HAL_TIM_PWM_Start+0x136>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a1f      	ldr	r2, [pc, #124]	; (80038b0 <HAL_TIM_PWM_Start+0x17c>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d018      	beq.n	800386a <HAL_TIM_PWM_Start+0x136>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a1d      	ldr	r2, [pc, #116]	; (80038b4 <HAL_TIM_PWM_Start+0x180>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d013      	beq.n	800386a <HAL_TIM_PWM_Start+0x136>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a1c      	ldr	r2, [pc, #112]	; (80038b8 <HAL_TIM_PWM_Start+0x184>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d00e      	beq.n	800386a <HAL_TIM_PWM_Start+0x136>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a16      	ldr	r2, [pc, #88]	; (80038ac <HAL_TIM_PWM_Start+0x178>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d009      	beq.n	800386a <HAL_TIM_PWM_Start+0x136>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a18      	ldr	r2, [pc, #96]	; (80038bc <HAL_TIM_PWM_Start+0x188>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d004      	beq.n	800386a <HAL_TIM_PWM_Start+0x136>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a16      	ldr	r2, [pc, #88]	; (80038c0 <HAL_TIM_PWM_Start+0x18c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d111      	bne.n	800388e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2b06      	cmp	r3, #6
 800387a:	d010      	beq.n	800389e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0201 	orr.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800388c:	e007      	b.n	800389e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f042 0201 	orr.w	r2, r2, #1
 800389c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40010000 	.word	0x40010000
 80038ac:	40010400 	.word	0x40010400
 80038b0:	40000400 	.word	0x40000400
 80038b4:	40000800 	.word	0x40000800
 80038b8:	40000c00 	.word	0x40000c00
 80038bc:	40014000 	.word	0x40014000
 80038c0:	40001800 	.word	0x40001800

080038c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d101      	bne.n	80038e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038de:	2302      	movs	r3, #2
 80038e0:	e0ae      	b.n	8003a40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b0c      	cmp	r3, #12
 80038ee:	f200 809f 	bhi.w	8003a30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80038f2:	a201      	add	r2, pc, #4	; (adr r2, 80038f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80038f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f8:	0800392d 	.word	0x0800392d
 80038fc:	08003a31 	.word	0x08003a31
 8003900:	08003a31 	.word	0x08003a31
 8003904:	08003a31 	.word	0x08003a31
 8003908:	0800396d 	.word	0x0800396d
 800390c:	08003a31 	.word	0x08003a31
 8003910:	08003a31 	.word	0x08003a31
 8003914:	08003a31 	.word	0x08003a31
 8003918:	080039af 	.word	0x080039af
 800391c:	08003a31 	.word	0x08003a31
 8003920:	08003a31 	.word	0x08003a31
 8003924:	08003a31 	.word	0x08003a31
 8003928:	080039ef 	.word	0x080039ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68b9      	ldr	r1, [r7, #8]
 8003932:	4618      	mov	r0, r3
 8003934:	f000 f934 	bl	8003ba0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0208 	orr.w	r2, r2, #8
 8003946:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699a      	ldr	r2, [r3, #24]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0204 	bic.w	r2, r2, #4
 8003956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6999      	ldr	r1, [r3, #24]
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	691a      	ldr	r2, [r3, #16]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	619a      	str	r2, [r3, #24]
      break;
 800396a:	e064      	b.n	8003a36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68b9      	ldr	r1, [r7, #8]
 8003972:	4618      	mov	r0, r3
 8003974:	f000 f984 	bl	8003c80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699a      	ldr	r2, [r3, #24]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003986:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699a      	ldr	r2, [r3, #24]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003996:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6999      	ldr	r1, [r3, #24]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	021a      	lsls	r2, r3, #8
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	619a      	str	r2, [r3, #24]
      break;
 80039ac:	e043      	b.n	8003a36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68b9      	ldr	r1, [r7, #8]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 f9d9 	bl	8003d6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69da      	ldr	r2, [r3, #28]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f042 0208 	orr.w	r2, r2, #8
 80039c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69da      	ldr	r2, [r3, #28]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0204 	bic.w	r2, r2, #4
 80039d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	69d9      	ldr	r1, [r3, #28]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	61da      	str	r2, [r3, #28]
      break;
 80039ec:	e023      	b.n	8003a36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68b9      	ldr	r1, [r7, #8]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 fa2d 	bl	8003e54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	69da      	ldr	r2, [r3, #28]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	69da      	ldr	r2, [r3, #28]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	69d9      	ldr	r1, [r3, #28]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	021a      	lsls	r2, r3, #8
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	61da      	str	r2, [r3, #28]
      break;
 8003a2e:	e002      	b.n	8003a36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	75fb      	strb	r3, [r7, #23]
      break;
 8003a34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a46      	ldr	r2, [pc, #280]	; (8003b74 <TIM_Base_SetConfig+0x12c>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d013      	beq.n	8003a88 <TIM_Base_SetConfig+0x40>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a66:	d00f      	beq.n	8003a88 <TIM_Base_SetConfig+0x40>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a43      	ldr	r2, [pc, #268]	; (8003b78 <TIM_Base_SetConfig+0x130>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d00b      	beq.n	8003a88 <TIM_Base_SetConfig+0x40>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a42      	ldr	r2, [pc, #264]	; (8003b7c <TIM_Base_SetConfig+0x134>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d007      	beq.n	8003a88 <TIM_Base_SetConfig+0x40>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a41      	ldr	r2, [pc, #260]	; (8003b80 <TIM_Base_SetConfig+0x138>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d003      	beq.n	8003a88 <TIM_Base_SetConfig+0x40>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a40      	ldr	r2, [pc, #256]	; (8003b84 <TIM_Base_SetConfig+0x13c>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d108      	bne.n	8003a9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a35      	ldr	r2, [pc, #212]	; (8003b74 <TIM_Base_SetConfig+0x12c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d02b      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa8:	d027      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a32      	ldr	r2, [pc, #200]	; (8003b78 <TIM_Base_SetConfig+0x130>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d023      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a31      	ldr	r2, [pc, #196]	; (8003b7c <TIM_Base_SetConfig+0x134>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d01f      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a30      	ldr	r2, [pc, #192]	; (8003b80 <TIM_Base_SetConfig+0x138>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d01b      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a2f      	ldr	r2, [pc, #188]	; (8003b84 <TIM_Base_SetConfig+0x13c>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d017      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a2e      	ldr	r2, [pc, #184]	; (8003b88 <TIM_Base_SetConfig+0x140>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d013      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a2d      	ldr	r2, [pc, #180]	; (8003b8c <TIM_Base_SetConfig+0x144>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00f      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a2c      	ldr	r2, [pc, #176]	; (8003b90 <TIM_Base_SetConfig+0x148>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d00b      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a2b      	ldr	r2, [pc, #172]	; (8003b94 <TIM_Base_SetConfig+0x14c>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d007      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a2a      	ldr	r2, [pc, #168]	; (8003b98 <TIM_Base_SetConfig+0x150>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d003      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a29      	ldr	r2, [pc, #164]	; (8003b9c <TIM_Base_SetConfig+0x154>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d108      	bne.n	8003b0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a10      	ldr	r2, [pc, #64]	; (8003b74 <TIM_Base_SetConfig+0x12c>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d003      	beq.n	8003b40 <TIM_Base_SetConfig+0xf8>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a12      	ldr	r2, [pc, #72]	; (8003b84 <TIM_Base_SetConfig+0x13c>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d103      	bne.n	8003b48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d105      	bne.n	8003b66 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f023 0201 	bic.w	r2, r3, #1
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	611a      	str	r2, [r3, #16]
  }
}
 8003b66:	bf00      	nop
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	40010000 	.word	0x40010000
 8003b78:	40000400 	.word	0x40000400
 8003b7c:	40000800 	.word	0x40000800
 8003b80:	40000c00 	.word	0x40000c00
 8003b84:	40010400 	.word	0x40010400
 8003b88:	40014000 	.word	0x40014000
 8003b8c:	40014400 	.word	0x40014400
 8003b90:	40014800 	.word	0x40014800
 8003b94:	40001800 	.word	0x40001800
 8003b98:	40001c00 	.word	0x40001c00
 8003b9c:	40002000 	.word	0x40002000

08003ba0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b087      	sub	sp, #28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	f023 0201 	bic.w	r2, r3, #1
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f023 0303 	bic.w	r3, r3, #3
 8003bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f023 0302 	bic.w	r3, r3, #2
 8003be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a20      	ldr	r2, [pc, #128]	; (8003c78 <TIM_OC1_SetConfig+0xd8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d003      	beq.n	8003c04 <TIM_OC1_SetConfig+0x64>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a1f      	ldr	r2, [pc, #124]	; (8003c7c <TIM_OC1_SetConfig+0xdc>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d10c      	bne.n	8003c1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f023 0308 	bic.w	r3, r3, #8
 8003c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f023 0304 	bic.w	r3, r3, #4
 8003c1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a15      	ldr	r2, [pc, #84]	; (8003c78 <TIM_OC1_SetConfig+0xd8>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d003      	beq.n	8003c2e <TIM_OC1_SetConfig+0x8e>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a14      	ldr	r2, [pc, #80]	; (8003c7c <TIM_OC1_SetConfig+0xdc>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d111      	bne.n	8003c52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	621a      	str	r2, [r3, #32]
}
 8003c6c:	bf00      	nop
 8003c6e:	371c      	adds	r7, #28
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	40010000 	.word	0x40010000
 8003c7c:	40010400 	.word	0x40010400

08003c80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	f023 0210 	bic.w	r2, r3, #16
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	021b      	lsls	r3, r3, #8
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f023 0320 	bic.w	r3, r3, #32
 8003cca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a22      	ldr	r2, [pc, #136]	; (8003d64 <TIM_OC2_SetConfig+0xe4>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d003      	beq.n	8003ce8 <TIM_OC2_SetConfig+0x68>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a21      	ldr	r2, [pc, #132]	; (8003d68 <TIM_OC2_SetConfig+0xe8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d10d      	bne.n	8003d04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	011b      	lsls	r3, r3, #4
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a17      	ldr	r2, [pc, #92]	; (8003d64 <TIM_OC2_SetConfig+0xe4>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d003      	beq.n	8003d14 <TIM_OC2_SetConfig+0x94>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a16      	ldr	r2, [pc, #88]	; (8003d68 <TIM_OC2_SetConfig+0xe8>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d113      	bne.n	8003d3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	621a      	str	r2, [r3, #32]
}
 8003d56:	bf00      	nop
 8003d58:	371c      	adds	r7, #28
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40010000 	.word	0x40010000
 8003d68:	40010400 	.word	0x40010400

08003d6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f023 0303 	bic.w	r3, r3, #3
 8003da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003db4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	021b      	lsls	r3, r3, #8
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a21      	ldr	r2, [pc, #132]	; (8003e4c <TIM_OC3_SetConfig+0xe0>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d003      	beq.n	8003dd2 <TIM_OC3_SetConfig+0x66>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a20      	ldr	r2, [pc, #128]	; (8003e50 <TIM_OC3_SetConfig+0xe4>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d10d      	bne.n	8003dee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	021b      	lsls	r3, r3, #8
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a16      	ldr	r2, [pc, #88]	; (8003e4c <TIM_OC3_SetConfig+0xe0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d003      	beq.n	8003dfe <TIM_OC3_SetConfig+0x92>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a15      	ldr	r2, [pc, #84]	; (8003e50 <TIM_OC3_SetConfig+0xe4>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d113      	bne.n	8003e26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	621a      	str	r2, [r3, #32]
}
 8003e40:	bf00      	nop
 8003e42:	371c      	adds	r7, #28
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	40010000 	.word	0x40010000
 8003e50:	40010400 	.word	0x40010400

08003e54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b087      	sub	sp, #28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	021b      	lsls	r3, r3, #8
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	031b      	lsls	r3, r3, #12
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a12      	ldr	r2, [pc, #72]	; (8003ef8 <TIM_OC4_SetConfig+0xa4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d003      	beq.n	8003ebc <TIM_OC4_SetConfig+0x68>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a11      	ldr	r2, [pc, #68]	; (8003efc <TIM_OC4_SetConfig+0xa8>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d109      	bne.n	8003ed0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ec2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	019b      	lsls	r3, r3, #6
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	621a      	str	r2, [r3, #32]
}
 8003eea:	bf00      	nop
 8003eec:	371c      	adds	r7, #28
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	40010000 	.word	0x40010000
 8003efc:	40010400 	.word	0x40010400

08003f00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	f003 031f 	and.w	r3, r3, #31
 8003f12:	2201      	movs	r2, #1
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a1a      	ldr	r2, [r3, #32]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	43db      	mvns	r3, r3
 8003f22:	401a      	ands	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a1a      	ldr	r2, [r3, #32]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f003 031f 	and.w	r3, r3, #31
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	fa01 f303 	lsl.w	r3, r1, r3
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	621a      	str	r2, [r3, #32]
}
 8003f3e:	bf00      	nop
 8003f40:	371c      	adds	r7, #28
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
	...

08003f4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d101      	bne.n	8003f64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f60:	2302      	movs	r3, #2
 8003f62:	e05a      	b.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a21      	ldr	r2, [pc, #132]	; (8004028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d022      	beq.n	8003fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb0:	d01d      	beq.n	8003fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a1d      	ldr	r2, [pc, #116]	; (800402c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d018      	beq.n	8003fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a1b      	ldr	r2, [pc, #108]	; (8004030 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d013      	beq.n	8003fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a1a      	ldr	r2, [pc, #104]	; (8004034 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d00e      	beq.n	8003fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a18      	ldr	r2, [pc, #96]	; (8004038 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d009      	beq.n	8003fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a17      	ldr	r2, [pc, #92]	; (800403c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d004      	beq.n	8003fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a15      	ldr	r2, [pc, #84]	; (8004040 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d10c      	bne.n	8004008 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ff4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	40010000 	.word	0x40010000
 800402c:	40000400 	.word	0x40000400
 8004030:	40000800 	.word	0x40000800
 8004034:	40000c00 	.word	0x40000c00
 8004038:	40010400 	.word	0x40010400
 800403c:	40014000 	.word	0x40014000
 8004040:	40001800 	.word	0x40001800

08004044 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800404e:	2300      	movs	r3, #0
 8004050:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800405c:	2302      	movs	r3, #2
 800405e:	e03d      	b.n	80040dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	4313      	orrs	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	4313      	orrs	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4313      	orrs	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e042      	b.n	8004180 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d106      	bne.n	8004114 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7fc fecc 	bl	8000eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2224      	movs	r2, #36	; 0x24
 8004118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68da      	ldr	r2, [r3, #12]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800412a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 fdbd 	bl	8004cac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	691a      	ldr	r2, [r3, #16]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004140:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	695a      	ldr	r2, [r3, #20]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004150:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68da      	ldr	r2, [r3, #12]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004160:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2220      	movs	r2, #32
 800416c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b08a      	sub	sp, #40	; 0x28
 800418c:	af02      	add	r7, sp, #8
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	603b      	str	r3, [r7, #0]
 8004194:	4613      	mov	r3, r2
 8004196:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b20      	cmp	r3, #32
 80041a6:	d175      	bne.n	8004294 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <HAL_UART_Transmit+0x2c>
 80041ae:	88fb      	ldrh	r3, [r7, #6]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e06e      	b.n	8004296 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2221      	movs	r2, #33	; 0x21
 80041c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041c6:	f7fc ffbf 	bl	8001148 <HAL_GetTick>
 80041ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	88fa      	ldrh	r2, [r7, #6]
 80041d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	88fa      	ldrh	r2, [r7, #6]
 80041d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e0:	d108      	bne.n	80041f4 <HAL_UART_Transmit+0x6c>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d104      	bne.n	80041f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80041ea:	2300      	movs	r3, #0
 80041ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	61bb      	str	r3, [r7, #24]
 80041f2:	e003      	b.n	80041fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041f8:	2300      	movs	r3, #0
 80041fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041fc:	e02e      	b.n	800425c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	2200      	movs	r2, #0
 8004206:	2180      	movs	r1, #128	; 0x80
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 fb1f 	bl	800484c <UART_WaitOnFlagUntilTimeout>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d005      	beq.n	8004220 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e03a      	b.n	8004296 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10b      	bne.n	800423e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	461a      	mov	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004234:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	3302      	adds	r3, #2
 800423a:	61bb      	str	r3, [r7, #24]
 800423c:	e007      	b.n	800424e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	781a      	ldrb	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	3301      	adds	r3, #1
 800424c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004252:	b29b      	uxth	r3, r3
 8004254:	3b01      	subs	r3, #1
 8004256:	b29a      	uxth	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004260:	b29b      	uxth	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1cb      	bne.n	80041fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2200      	movs	r2, #0
 800426e:	2140      	movs	r1, #64	; 0x40
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 faeb 	bl	800484c <UART_WaitOnFlagUntilTimeout>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d005      	beq.n	8004288 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e006      	b.n	8004296 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2220      	movs	r2, #32
 800428c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004290:	2300      	movs	r3, #0
 8004292:	e000      	b.n	8004296 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004294:	2302      	movs	r3, #2
  }
}
 8004296:	4618      	mov	r0, r3
 8004298:	3720      	adds	r7, #32
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b084      	sub	sp, #16
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	60f8      	str	r0, [r7, #12]
 80042a6:	60b9      	str	r1, [r7, #8]
 80042a8:	4613      	mov	r3, r2
 80042aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b20      	cmp	r3, #32
 80042b6:	d112      	bne.n	80042de <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <HAL_UART_Receive_IT+0x26>
 80042be:	88fb      	ldrh	r3, [r7, #6]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e00b      	b.n	80042e0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80042ce:	88fb      	ldrh	r3, [r7, #6]
 80042d0:	461a      	mov	r2, r3
 80042d2:	68b9      	ldr	r1, [r7, #8]
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 fb12 	bl	80048fe <UART_Start_Receive_IT>
 80042da:	4603      	mov	r3, r0
 80042dc:	e000      	b.n	80042e0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80042de:	2302      	movs	r3, #2
  }
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b0ba      	sub	sp, #232	; 0xe8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800430e:	2300      	movs	r3, #0
 8004310:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004314:	2300      	movs	r3, #0
 8004316:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800431a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004326:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10f      	bne.n	800434e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800432e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004332:	f003 0320 	and.w	r3, r3, #32
 8004336:	2b00      	cmp	r3, #0
 8004338:	d009      	beq.n	800434e <HAL_UART_IRQHandler+0x66>
 800433a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800433e:	f003 0320 	and.w	r3, r3, #32
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 fbf2 	bl	8004b30 <UART_Receive_IT>
      return;
 800434c:	e25b      	b.n	8004806 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800434e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 80de 	beq.w	8004514 <HAL_UART_IRQHandler+0x22c>
 8004358:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b00      	cmp	r3, #0
 8004362:	d106      	bne.n	8004372 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004368:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 80d1 	beq.w	8004514 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00b      	beq.n	8004396 <HAL_UART_IRQHandler+0xae>
 800437e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004386:	2b00      	cmp	r3, #0
 8004388:	d005      	beq.n	8004396 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438e:	f043 0201 	orr.w	r2, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00b      	beq.n	80043ba <HAL_UART_IRQHandler+0xd2>
 80043a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d005      	beq.n	80043ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b2:	f043 0202 	orr.w	r2, r3, #2
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00b      	beq.n	80043de <HAL_UART_IRQHandler+0xf6>
 80043c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d005      	beq.n	80043de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d6:	f043 0204 	orr.w	r2, r3, #4
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80043de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043e2:	f003 0308 	and.w	r3, r3, #8
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d011      	beq.n	800440e <HAL_UART_IRQHandler+0x126>
 80043ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ee:	f003 0320 	and.w	r3, r3, #32
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d105      	bne.n	8004402 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d005      	beq.n	800440e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004406:	f043 0208 	orr.w	r2, r3, #8
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 81f2 	beq.w	80047fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800441c:	f003 0320 	and.w	r3, r3, #32
 8004420:	2b00      	cmp	r3, #0
 8004422:	d008      	beq.n	8004436 <HAL_UART_IRQHandler+0x14e>
 8004424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004428:	f003 0320 	and.w	r3, r3, #32
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 fb7d 	bl	8004b30 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004440:	2b40      	cmp	r3, #64	; 0x40
 8004442:	bf0c      	ite	eq
 8004444:	2301      	moveq	r3, #1
 8004446:	2300      	movne	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b00      	cmp	r3, #0
 8004458:	d103      	bne.n	8004462 <HAL_UART_IRQHandler+0x17a>
 800445a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800445e:	2b00      	cmp	r3, #0
 8004460:	d04f      	beq.n	8004502 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 fa85 	bl	8004972 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004472:	2b40      	cmp	r3, #64	; 0x40
 8004474:	d141      	bne.n	80044fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	3314      	adds	r3, #20
 800447c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004480:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004484:	e853 3f00 	ldrex	r3, [r3]
 8004488:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800448c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004494:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3314      	adds	r3, #20
 800449e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80044a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80044a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80044ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80044b2:	e841 2300 	strex	r3, r2, [r1]
 80044b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80044ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1d9      	bne.n	8004476 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d013      	beq.n	80044f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ce:	4a7e      	ldr	r2, [pc, #504]	; (80046c8 <HAL_UART_IRQHandler+0x3e0>)
 80044d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fc ffe7 	bl	80014aa <HAL_DMA_Abort_IT>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d016      	beq.n	8004510 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80044ec:	4610      	mov	r0, r2
 80044ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f0:	e00e      	b.n	8004510 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f994 	bl	8004820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f8:	e00a      	b.n	8004510 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f990 	bl	8004820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004500:	e006      	b.n	8004510 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f98c 	bl	8004820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800450e:	e175      	b.n	80047fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004510:	bf00      	nop
    return;
 8004512:	e173      	b.n	80047fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004518:	2b01      	cmp	r3, #1
 800451a:	f040 814f 	bne.w	80047bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800451e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004522:	f003 0310 	and.w	r3, r3, #16
 8004526:	2b00      	cmp	r3, #0
 8004528:	f000 8148 	beq.w	80047bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800452c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004530:	f003 0310 	and.w	r3, r3, #16
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 8141 	beq.w	80047bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800453a:	2300      	movs	r3, #0
 800453c:	60bb      	str	r3, [r7, #8]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	60bb      	str	r3, [r7, #8]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	60bb      	str	r3, [r7, #8]
 800454e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455a:	2b40      	cmp	r3, #64	; 0x40
 800455c:	f040 80b6 	bne.w	80046cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800456c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 8145 	beq.w	8004800 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800457a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800457e:	429a      	cmp	r2, r3
 8004580:	f080 813e 	bcs.w	8004800 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800458a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004596:	f000 8088 	beq.w	80046aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	330c      	adds	r3, #12
 80045a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045a8:	e853 3f00 	ldrex	r3, [r3]
 80045ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80045b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	330c      	adds	r3, #12
 80045c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80045c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80045d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80045d6:	e841 2300 	strex	r3, r2, [r1]
 80045da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80045de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1d9      	bne.n	800459a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	3314      	adds	r3, #20
 80045ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045f0:	e853 3f00 	ldrex	r3, [r3]
 80045f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80045f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045f8:	f023 0301 	bic.w	r3, r3, #1
 80045fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	3314      	adds	r3, #20
 8004606:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800460a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800460e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004610:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004612:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004616:	e841 2300 	strex	r3, r2, [r1]
 800461a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800461c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1e1      	bne.n	80045e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	3314      	adds	r3, #20
 8004628:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800462c:	e853 3f00 	ldrex	r3, [r3]
 8004630:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004638:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	3314      	adds	r3, #20
 8004642:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004646:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004648:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800464c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800464e:	e841 2300 	strex	r3, r2, [r1]
 8004652:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004654:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1e3      	bne.n	8004622 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2220      	movs	r2, #32
 800465e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	330c      	adds	r3, #12
 800466e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004672:	e853 3f00 	ldrex	r3, [r3]
 8004676:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800467a:	f023 0310 	bic.w	r3, r3, #16
 800467e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	330c      	adds	r3, #12
 8004688:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800468c:	65ba      	str	r2, [r7, #88]	; 0x58
 800468e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004690:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004692:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004694:	e841 2300 	strex	r3, r2, [r1]
 8004698:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800469a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1e3      	bne.n	8004668 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7fc fe90 	bl	80013ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2202      	movs	r2, #2
 80046ae:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	b29b      	uxth	r3, r3
 80046be:	4619      	mov	r1, r3
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 f8b7 	bl	8004834 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046c6:	e09b      	b.n	8004800 <HAL_UART_IRQHandler+0x518>
 80046c8:	08004a39 	.word	0x08004a39
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 808e 	beq.w	8004804 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80046e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 8089 	beq.w	8004804 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	330c      	adds	r3, #12
 80046f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fc:	e853 3f00 	ldrex	r3, [r3]
 8004700:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004704:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004708:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	330c      	adds	r3, #12
 8004712:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004716:	647a      	str	r2, [r7, #68]	; 0x44
 8004718:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800471c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800471e:	e841 2300 	strex	r3, r2, [r1]
 8004722:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1e3      	bne.n	80046f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3314      	adds	r3, #20
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	e853 3f00 	ldrex	r3, [r3]
 8004738:	623b      	str	r3, [r7, #32]
   return(result);
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	f023 0301 	bic.w	r3, r3, #1
 8004740:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3314      	adds	r3, #20
 800474a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800474e:	633a      	str	r2, [r7, #48]	; 0x30
 8004750:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004752:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004756:	e841 2300 	strex	r3, r2, [r1]
 800475a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800475c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1e3      	bne.n	800472a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2220      	movs	r2, #32
 8004766:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	330c      	adds	r3, #12
 8004776:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	e853 3f00 	ldrex	r3, [r3]
 800477e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f023 0310 	bic.w	r3, r3, #16
 8004786:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	330c      	adds	r3, #12
 8004790:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004794:	61fa      	str	r2, [r7, #28]
 8004796:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004798:	69b9      	ldr	r1, [r7, #24]
 800479a:	69fa      	ldr	r2, [r7, #28]
 800479c:	e841 2300 	strex	r3, r2, [r1]
 80047a0:	617b      	str	r3, [r7, #20]
   return(result);
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1e3      	bne.n	8004770 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047b2:	4619      	mov	r1, r3
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f83d 	bl	8004834 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047ba:	e023      	b.n	8004804 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d009      	beq.n	80047dc <HAL_UART_IRQHandler+0x4f4>
 80047c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d003      	beq.n	80047dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 f943 	bl	8004a60 <UART_Transmit_IT>
    return;
 80047da:	e014      	b.n	8004806 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00e      	beq.n	8004806 <HAL_UART_IRQHandler+0x51e>
 80047e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d008      	beq.n	8004806 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f983 	bl	8004b00 <UART_EndTransmit_IT>
    return;
 80047fa:	e004      	b.n	8004806 <HAL_UART_IRQHandler+0x51e>
    return;
 80047fc:	bf00      	nop
 80047fe:	e002      	b.n	8004806 <HAL_UART_IRQHandler+0x51e>
      return;
 8004800:	bf00      	nop
 8004802:	e000      	b.n	8004806 <HAL_UART_IRQHandler+0x51e>
      return;
 8004804:	bf00      	nop
  }
}
 8004806:	37e8      	adds	r7, #232	; 0xe8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	460b      	mov	r3, r1
 800483e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	603b      	str	r3, [r7, #0]
 8004858:	4613      	mov	r3, r2
 800485a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800485c:	e03b      	b.n	80048d6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800485e:	6a3b      	ldr	r3, [r7, #32]
 8004860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004864:	d037      	beq.n	80048d6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004866:	f7fc fc6f 	bl	8001148 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	6a3a      	ldr	r2, [r7, #32]
 8004872:	429a      	cmp	r2, r3
 8004874:	d302      	bcc.n	800487c <UART_WaitOnFlagUntilTimeout+0x30>
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e03a      	b.n	80048f6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f003 0304 	and.w	r3, r3, #4
 800488a:	2b00      	cmp	r3, #0
 800488c:	d023      	beq.n	80048d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2b80      	cmp	r3, #128	; 0x80
 8004892:	d020      	beq.n	80048d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	2b40      	cmp	r3, #64	; 0x40
 8004898:	d01d      	beq.n	80048d6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0308 	and.w	r3, r3, #8
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d116      	bne.n	80048d6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80048a8:	2300      	movs	r3, #0
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	617b      	str	r3, [r7, #20]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	617b      	str	r3, [r7, #20]
 80048bc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 f857 	bl	8004972 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2208      	movs	r2, #8
 80048c8:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e00f      	b.n	80048f6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	4013      	ands	r3, r2
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	bf0c      	ite	eq
 80048e6:	2301      	moveq	r3, #1
 80048e8:	2300      	movne	r3, #0
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	461a      	mov	r2, r3
 80048ee:	79fb      	ldrb	r3, [r7, #7]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d0b4      	beq.n	800485e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3718      	adds	r7, #24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048fe:	b480      	push	{r7}
 8004900:	b085      	sub	sp, #20
 8004902:	af00      	add	r7, sp, #0
 8004904:	60f8      	str	r0, [r7, #12]
 8004906:	60b9      	str	r1, [r7, #8]
 8004908:	4613      	mov	r3, r2
 800490a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	88fa      	ldrh	r2, [r7, #6]
 8004916:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	88fa      	ldrh	r2, [r7, #6]
 800491c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2222      	movs	r2, #34	; 0x22
 8004928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d007      	beq.n	8004944 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004942:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	695a      	ldr	r2, [r3, #20]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0201 	orr.w	r2, r2, #1
 8004952:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68da      	ldr	r2, [r3, #12]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0220 	orr.w	r2, r2, #32
 8004962:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004972:	b480      	push	{r7}
 8004974:	b095      	sub	sp, #84	; 0x54
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	330c      	adds	r3, #12
 8004980:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004984:	e853 3f00 	ldrex	r3, [r3]
 8004988:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800498a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004990:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	330c      	adds	r3, #12
 8004998:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800499a:	643a      	str	r2, [r7, #64]	; 0x40
 800499c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049a2:	e841 2300 	strex	r3, r2, [r1]
 80049a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1e5      	bne.n	800497a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3314      	adds	r3, #20
 80049b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	e853 3f00 	ldrex	r3, [r3]
 80049bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	f023 0301 	bic.w	r3, r3, #1
 80049c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	3314      	adds	r3, #20
 80049cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049d6:	e841 2300 	strex	r3, r2, [r1]
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1e5      	bne.n	80049ae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d119      	bne.n	8004a1e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	330c      	adds	r3, #12
 80049f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	e853 3f00 	ldrex	r3, [r3]
 80049f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	f023 0310 	bic.w	r3, r3, #16
 8004a00:	647b      	str	r3, [r7, #68]	; 0x44
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	330c      	adds	r3, #12
 8004a08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a0a:	61ba      	str	r2, [r7, #24]
 8004a0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0e:	6979      	ldr	r1, [r7, #20]
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	e841 2300 	strex	r3, r2, [r1]
 8004a16:	613b      	str	r3, [r7, #16]
   return(result);
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1e5      	bne.n	80049ea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2220      	movs	r2, #32
 8004a22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a2c:	bf00      	nop
 8004a2e:	3754      	adds	r7, #84	; 0x54
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f7ff fee4 	bl	8004820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a58:	bf00      	nop
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b21      	cmp	r3, #33	; 0x21
 8004a72:	d13e      	bne.n	8004af2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a7c:	d114      	bne.n	8004aa8 <UART_Transmit_IT+0x48>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d110      	bne.n	8004aa8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	461a      	mov	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a9a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	1c9a      	adds	r2, r3, #2
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	621a      	str	r2, [r3, #32]
 8004aa6:	e008      	b.n	8004aba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	1c59      	adds	r1, r3, #1
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6211      	str	r1, [r2, #32]
 8004ab2:	781a      	ldrb	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10f      	bne.n	8004aee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68da      	ldr	r2, [r3, #12]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004adc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68da      	ldr	r2, [r3, #12]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004aee:	2300      	movs	r3, #0
 8004af0:	e000      	b.n	8004af4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004af2:	2302      	movs	r3, #2
  }
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b16:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f7ff fe73 	bl	800480c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08c      	sub	sp, #48	; 0x30
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b22      	cmp	r3, #34	; 0x22
 8004b42:	f040 80ae 	bne.w	8004ca2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b4e:	d117      	bne.n	8004b80 <UART_Receive_IT+0x50>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d113      	bne.n	8004b80 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b60:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b72:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b78:	1c9a      	adds	r2, r3, #2
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	629a      	str	r2, [r3, #40]	; 0x28
 8004b7e:	e026      	b.n	8004bce <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b84:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004b86:	2300      	movs	r3, #0
 8004b88:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b92:	d007      	beq.n	8004ba4 <UART_Receive_IT+0x74>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10a      	bne.n	8004bb2 <UART_Receive_IT+0x82>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d106      	bne.n	8004bb2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	b2da      	uxtb	r2, r3
 8004bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bae:	701a      	strb	r2, [r3, #0]
 8004bb0:	e008      	b.n	8004bc4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	4619      	mov	r1, r3
 8004bdc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d15d      	bne.n	8004c9e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68da      	ldr	r2, [r3, #12]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 0220 	bic.w	r2, r2, #32
 8004bf0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68da      	ldr	r2, [r3, #12]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c00:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	695a      	ldr	r2, [r3, #20]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0201 	bic.w	r2, r2, #1
 8004c10:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2220      	movs	r2, #32
 8004c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d135      	bne.n	8004c94 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	330c      	adds	r3, #12
 8004c34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	e853 3f00 	ldrex	r3, [r3]
 8004c3c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	f023 0310 	bic.w	r3, r3, #16
 8004c44:	627b      	str	r3, [r7, #36]	; 0x24
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	330c      	adds	r3, #12
 8004c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c4e:	623a      	str	r2, [r7, #32]
 8004c50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c52:	69f9      	ldr	r1, [r7, #28]
 8004c54:	6a3a      	ldr	r2, [r7, #32]
 8004c56:	e841 2300 	strex	r3, r2, [r1]
 8004c5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1e5      	bne.n	8004c2e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0310 	and.w	r3, r3, #16
 8004c6c:	2b10      	cmp	r3, #16
 8004c6e:	d10a      	bne.n	8004c86 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c70:	2300      	movs	r3, #0
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f7ff fdd1 	bl	8004834 <HAL_UARTEx_RxEventCallback>
 8004c92:	e002      	b.n	8004c9a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7fc f96b 	bl	8000f70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	e002      	b.n	8004ca4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	e000      	b.n	8004ca4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ca2:	2302      	movs	r3, #2
  }
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3730      	adds	r7, #48	; 0x30
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cb0:	b0c0      	sub	sp, #256	; 0x100
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc8:	68d9      	ldr	r1, [r3, #12]
 8004cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	ea40 0301 	orr.w	r3, r0, r1
 8004cd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	431a      	orrs	r2, r3
 8004cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d04:	f021 010c 	bic.w	r1, r1, #12
 8004d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d12:	430b      	orrs	r3, r1
 8004d14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d26:	6999      	ldr	r1, [r3, #24]
 8004d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	ea40 0301 	orr.w	r3, r0, r1
 8004d32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	4b8f      	ldr	r3, [pc, #572]	; (8004f78 <UART_SetConfig+0x2cc>)
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d005      	beq.n	8004d4c <UART_SetConfig+0xa0>
 8004d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	4b8d      	ldr	r3, [pc, #564]	; (8004f7c <UART_SetConfig+0x2d0>)
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d104      	bne.n	8004d56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d4c:	f7fd feb8 	bl	8002ac0 <HAL_RCC_GetPCLK2Freq>
 8004d50:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d54:	e003      	b.n	8004d5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d56:	f7fd fe9f 	bl	8002a98 <HAL_RCC_GetPCLK1Freq>
 8004d5a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d62:	69db      	ldr	r3, [r3, #28]
 8004d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d68:	f040 810c 	bne.w	8004f84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d70:	2200      	movs	r2, #0
 8004d72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d7e:	4622      	mov	r2, r4
 8004d80:	462b      	mov	r3, r5
 8004d82:	1891      	adds	r1, r2, r2
 8004d84:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d86:	415b      	adcs	r3, r3
 8004d88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d8e:	4621      	mov	r1, r4
 8004d90:	eb12 0801 	adds.w	r8, r2, r1
 8004d94:	4629      	mov	r1, r5
 8004d96:	eb43 0901 	adc.w	r9, r3, r1
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	f04f 0300 	mov.w	r3, #0
 8004da2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004da6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004daa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dae:	4690      	mov	r8, r2
 8004db0:	4699      	mov	r9, r3
 8004db2:	4623      	mov	r3, r4
 8004db4:	eb18 0303 	adds.w	r3, r8, r3
 8004db8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004dbc:	462b      	mov	r3, r5
 8004dbe:	eb49 0303 	adc.w	r3, r9, r3
 8004dc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004dd2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004dd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004dda:	460b      	mov	r3, r1
 8004ddc:	18db      	adds	r3, r3, r3
 8004dde:	653b      	str	r3, [r7, #80]	; 0x50
 8004de0:	4613      	mov	r3, r2
 8004de2:	eb42 0303 	adc.w	r3, r2, r3
 8004de6:	657b      	str	r3, [r7, #84]	; 0x54
 8004de8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004dec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004df0:	f7fb f9ea 	bl	80001c8 <__aeabi_uldivmod>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	4b61      	ldr	r3, [pc, #388]	; (8004f80 <UART_SetConfig+0x2d4>)
 8004dfa:	fba3 2302 	umull	r2, r3, r3, r2
 8004dfe:	095b      	lsrs	r3, r3, #5
 8004e00:	011c      	lsls	r4, r3, #4
 8004e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e06:	2200      	movs	r2, #0
 8004e08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e14:	4642      	mov	r2, r8
 8004e16:	464b      	mov	r3, r9
 8004e18:	1891      	adds	r1, r2, r2
 8004e1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e1c:	415b      	adcs	r3, r3
 8004e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e24:	4641      	mov	r1, r8
 8004e26:	eb12 0a01 	adds.w	sl, r2, r1
 8004e2a:	4649      	mov	r1, r9
 8004e2c:	eb43 0b01 	adc.w	fp, r3, r1
 8004e30:	f04f 0200 	mov.w	r2, #0
 8004e34:	f04f 0300 	mov.w	r3, #0
 8004e38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e44:	4692      	mov	sl, r2
 8004e46:	469b      	mov	fp, r3
 8004e48:	4643      	mov	r3, r8
 8004e4a:	eb1a 0303 	adds.w	r3, sl, r3
 8004e4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e52:	464b      	mov	r3, r9
 8004e54:	eb4b 0303 	adc.w	r3, fp, r3
 8004e58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e70:	460b      	mov	r3, r1
 8004e72:	18db      	adds	r3, r3, r3
 8004e74:	643b      	str	r3, [r7, #64]	; 0x40
 8004e76:	4613      	mov	r3, r2
 8004e78:	eb42 0303 	adc.w	r3, r2, r3
 8004e7c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e86:	f7fb f99f 	bl	80001c8 <__aeabi_uldivmod>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	4611      	mov	r1, r2
 8004e90:	4b3b      	ldr	r3, [pc, #236]	; (8004f80 <UART_SetConfig+0x2d4>)
 8004e92:	fba3 2301 	umull	r2, r3, r3, r1
 8004e96:	095b      	lsrs	r3, r3, #5
 8004e98:	2264      	movs	r2, #100	; 0x64
 8004e9a:	fb02 f303 	mul.w	r3, r2, r3
 8004e9e:	1acb      	subs	r3, r1, r3
 8004ea0:	00db      	lsls	r3, r3, #3
 8004ea2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ea6:	4b36      	ldr	r3, [pc, #216]	; (8004f80 <UART_SetConfig+0x2d4>)
 8004ea8:	fba3 2302 	umull	r2, r3, r3, r2
 8004eac:	095b      	lsrs	r3, r3, #5
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004eb4:	441c      	add	r4, r3
 8004eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ec0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ec4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ec8:	4642      	mov	r2, r8
 8004eca:	464b      	mov	r3, r9
 8004ecc:	1891      	adds	r1, r2, r2
 8004ece:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ed0:	415b      	adcs	r3, r3
 8004ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ed4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ed8:	4641      	mov	r1, r8
 8004eda:	1851      	adds	r1, r2, r1
 8004edc:	6339      	str	r1, [r7, #48]	; 0x30
 8004ede:	4649      	mov	r1, r9
 8004ee0:	414b      	adcs	r3, r1
 8004ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ef0:	4659      	mov	r1, fp
 8004ef2:	00cb      	lsls	r3, r1, #3
 8004ef4:	4651      	mov	r1, sl
 8004ef6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004efa:	4651      	mov	r1, sl
 8004efc:	00ca      	lsls	r2, r1, #3
 8004efe:	4610      	mov	r0, r2
 8004f00:	4619      	mov	r1, r3
 8004f02:	4603      	mov	r3, r0
 8004f04:	4642      	mov	r2, r8
 8004f06:	189b      	adds	r3, r3, r2
 8004f08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f0c:	464b      	mov	r3, r9
 8004f0e:	460a      	mov	r2, r1
 8004f10:	eb42 0303 	adc.w	r3, r2, r3
 8004f14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	18db      	adds	r3, r3, r3
 8004f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f32:	4613      	mov	r3, r2
 8004f34:	eb42 0303 	adc.w	r3, r2, r3
 8004f38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f42:	f7fb f941 	bl	80001c8 <__aeabi_uldivmod>
 8004f46:	4602      	mov	r2, r0
 8004f48:	460b      	mov	r3, r1
 8004f4a:	4b0d      	ldr	r3, [pc, #52]	; (8004f80 <UART_SetConfig+0x2d4>)
 8004f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f50:	095b      	lsrs	r3, r3, #5
 8004f52:	2164      	movs	r1, #100	; 0x64
 8004f54:	fb01 f303 	mul.w	r3, r1, r3
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	3332      	adds	r3, #50	; 0x32
 8004f5e:	4a08      	ldr	r2, [pc, #32]	; (8004f80 <UART_SetConfig+0x2d4>)
 8004f60:	fba2 2303 	umull	r2, r3, r2, r3
 8004f64:	095b      	lsrs	r3, r3, #5
 8004f66:	f003 0207 	and.w	r2, r3, #7
 8004f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4422      	add	r2, r4
 8004f72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f74:	e106      	b.n	8005184 <UART_SetConfig+0x4d8>
 8004f76:	bf00      	nop
 8004f78:	40011000 	.word	0x40011000
 8004f7c:	40011400 	.word	0x40011400
 8004f80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004f96:	4642      	mov	r2, r8
 8004f98:	464b      	mov	r3, r9
 8004f9a:	1891      	adds	r1, r2, r2
 8004f9c:	6239      	str	r1, [r7, #32]
 8004f9e:	415b      	adcs	r3, r3
 8004fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fa6:	4641      	mov	r1, r8
 8004fa8:	1854      	adds	r4, r2, r1
 8004faa:	4649      	mov	r1, r9
 8004fac:	eb43 0501 	adc.w	r5, r3, r1
 8004fb0:	f04f 0200 	mov.w	r2, #0
 8004fb4:	f04f 0300 	mov.w	r3, #0
 8004fb8:	00eb      	lsls	r3, r5, #3
 8004fba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fbe:	00e2      	lsls	r2, r4, #3
 8004fc0:	4614      	mov	r4, r2
 8004fc2:	461d      	mov	r5, r3
 8004fc4:	4643      	mov	r3, r8
 8004fc6:	18e3      	adds	r3, r4, r3
 8004fc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fcc:	464b      	mov	r3, r9
 8004fce:	eb45 0303 	adc.w	r3, r5, r3
 8004fd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fe2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004fe6:	f04f 0200 	mov.w	r2, #0
 8004fea:	f04f 0300 	mov.w	r3, #0
 8004fee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ff2:	4629      	mov	r1, r5
 8004ff4:	008b      	lsls	r3, r1, #2
 8004ff6:	4621      	mov	r1, r4
 8004ff8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ffc:	4621      	mov	r1, r4
 8004ffe:	008a      	lsls	r2, r1, #2
 8005000:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005004:	f7fb f8e0 	bl	80001c8 <__aeabi_uldivmod>
 8005008:	4602      	mov	r2, r0
 800500a:	460b      	mov	r3, r1
 800500c:	4b60      	ldr	r3, [pc, #384]	; (8005190 <UART_SetConfig+0x4e4>)
 800500e:	fba3 2302 	umull	r2, r3, r3, r2
 8005012:	095b      	lsrs	r3, r3, #5
 8005014:	011c      	lsls	r4, r3, #4
 8005016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800501a:	2200      	movs	r2, #0
 800501c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005020:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005024:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005028:	4642      	mov	r2, r8
 800502a:	464b      	mov	r3, r9
 800502c:	1891      	adds	r1, r2, r2
 800502e:	61b9      	str	r1, [r7, #24]
 8005030:	415b      	adcs	r3, r3
 8005032:	61fb      	str	r3, [r7, #28]
 8005034:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005038:	4641      	mov	r1, r8
 800503a:	1851      	adds	r1, r2, r1
 800503c:	6139      	str	r1, [r7, #16]
 800503e:	4649      	mov	r1, r9
 8005040:	414b      	adcs	r3, r1
 8005042:	617b      	str	r3, [r7, #20]
 8005044:	f04f 0200 	mov.w	r2, #0
 8005048:	f04f 0300 	mov.w	r3, #0
 800504c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005050:	4659      	mov	r1, fp
 8005052:	00cb      	lsls	r3, r1, #3
 8005054:	4651      	mov	r1, sl
 8005056:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800505a:	4651      	mov	r1, sl
 800505c:	00ca      	lsls	r2, r1, #3
 800505e:	4610      	mov	r0, r2
 8005060:	4619      	mov	r1, r3
 8005062:	4603      	mov	r3, r0
 8005064:	4642      	mov	r2, r8
 8005066:	189b      	adds	r3, r3, r2
 8005068:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800506c:	464b      	mov	r3, r9
 800506e:	460a      	mov	r2, r1
 8005070:	eb42 0303 	adc.w	r3, r2, r3
 8005074:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	67bb      	str	r3, [r7, #120]	; 0x78
 8005082:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005084:	f04f 0200 	mov.w	r2, #0
 8005088:	f04f 0300 	mov.w	r3, #0
 800508c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005090:	4649      	mov	r1, r9
 8005092:	008b      	lsls	r3, r1, #2
 8005094:	4641      	mov	r1, r8
 8005096:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800509a:	4641      	mov	r1, r8
 800509c:	008a      	lsls	r2, r1, #2
 800509e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80050a2:	f7fb f891 	bl	80001c8 <__aeabi_uldivmod>
 80050a6:	4602      	mov	r2, r0
 80050a8:	460b      	mov	r3, r1
 80050aa:	4611      	mov	r1, r2
 80050ac:	4b38      	ldr	r3, [pc, #224]	; (8005190 <UART_SetConfig+0x4e4>)
 80050ae:	fba3 2301 	umull	r2, r3, r3, r1
 80050b2:	095b      	lsrs	r3, r3, #5
 80050b4:	2264      	movs	r2, #100	; 0x64
 80050b6:	fb02 f303 	mul.w	r3, r2, r3
 80050ba:	1acb      	subs	r3, r1, r3
 80050bc:	011b      	lsls	r3, r3, #4
 80050be:	3332      	adds	r3, #50	; 0x32
 80050c0:	4a33      	ldr	r2, [pc, #204]	; (8005190 <UART_SetConfig+0x4e4>)
 80050c2:	fba2 2303 	umull	r2, r3, r2, r3
 80050c6:	095b      	lsrs	r3, r3, #5
 80050c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050cc:	441c      	add	r4, r3
 80050ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050d2:	2200      	movs	r2, #0
 80050d4:	673b      	str	r3, [r7, #112]	; 0x70
 80050d6:	677a      	str	r2, [r7, #116]	; 0x74
 80050d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80050dc:	4642      	mov	r2, r8
 80050de:	464b      	mov	r3, r9
 80050e0:	1891      	adds	r1, r2, r2
 80050e2:	60b9      	str	r1, [r7, #8]
 80050e4:	415b      	adcs	r3, r3
 80050e6:	60fb      	str	r3, [r7, #12]
 80050e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050ec:	4641      	mov	r1, r8
 80050ee:	1851      	adds	r1, r2, r1
 80050f0:	6039      	str	r1, [r7, #0]
 80050f2:	4649      	mov	r1, r9
 80050f4:	414b      	adcs	r3, r1
 80050f6:	607b      	str	r3, [r7, #4]
 80050f8:	f04f 0200 	mov.w	r2, #0
 80050fc:	f04f 0300 	mov.w	r3, #0
 8005100:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005104:	4659      	mov	r1, fp
 8005106:	00cb      	lsls	r3, r1, #3
 8005108:	4651      	mov	r1, sl
 800510a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800510e:	4651      	mov	r1, sl
 8005110:	00ca      	lsls	r2, r1, #3
 8005112:	4610      	mov	r0, r2
 8005114:	4619      	mov	r1, r3
 8005116:	4603      	mov	r3, r0
 8005118:	4642      	mov	r2, r8
 800511a:	189b      	adds	r3, r3, r2
 800511c:	66bb      	str	r3, [r7, #104]	; 0x68
 800511e:	464b      	mov	r3, r9
 8005120:	460a      	mov	r2, r1
 8005122:	eb42 0303 	adc.w	r3, r2, r3
 8005126:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	663b      	str	r3, [r7, #96]	; 0x60
 8005132:	667a      	str	r2, [r7, #100]	; 0x64
 8005134:	f04f 0200 	mov.w	r2, #0
 8005138:	f04f 0300 	mov.w	r3, #0
 800513c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005140:	4649      	mov	r1, r9
 8005142:	008b      	lsls	r3, r1, #2
 8005144:	4641      	mov	r1, r8
 8005146:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800514a:	4641      	mov	r1, r8
 800514c:	008a      	lsls	r2, r1, #2
 800514e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005152:	f7fb f839 	bl	80001c8 <__aeabi_uldivmod>
 8005156:	4602      	mov	r2, r0
 8005158:	460b      	mov	r3, r1
 800515a:	4b0d      	ldr	r3, [pc, #52]	; (8005190 <UART_SetConfig+0x4e4>)
 800515c:	fba3 1302 	umull	r1, r3, r3, r2
 8005160:	095b      	lsrs	r3, r3, #5
 8005162:	2164      	movs	r1, #100	; 0x64
 8005164:	fb01 f303 	mul.w	r3, r1, r3
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	3332      	adds	r3, #50	; 0x32
 800516e:	4a08      	ldr	r2, [pc, #32]	; (8005190 <UART_SetConfig+0x4e4>)
 8005170:	fba2 2303 	umull	r2, r3, r2, r3
 8005174:	095b      	lsrs	r3, r3, #5
 8005176:	f003 020f 	and.w	r2, r3, #15
 800517a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4422      	add	r2, r4
 8005182:	609a      	str	r2, [r3, #8]
}
 8005184:	bf00      	nop
 8005186:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800518a:	46bd      	mov	sp, r7
 800518c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005190:	51eb851f 	.word	0x51eb851f

08005194 <NRF24Lo1_RX_Adjusted_ADC_Data>:

unsigned char tmp_buf[32] = {0};

//* 将俩个八位数合并为十六位并塞入一个数组
uint16_t *NRF24Lo1_RX_Adjusted_ADC_Data()
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
  static uint16_t ADC_Data[4];
  if (NRF24L01_RxPacket(tmp_buf) == 0)
 800519a:	484a      	ldr	r0, [pc, #296]	; (80052c4 <NRF24Lo1_RX_Adjusted_ADC_Data+0x130>)
 800519c:	f000 f970 	bl	8005480 <NRF24L01_RxPacket>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f040 8088 	bne.w	80052b8 <NRF24Lo1_RX_Adjusted_ADC_Data+0x124>
  {
    for (size_t i = 0; i < 4; i++)
 80051a8:	2300      	movs	r3, #0
 80051aa:	607b      	str	r3, [r7, #4]
 80051ac:	e014      	b.n	80051d8 <NRF24Lo1_RX_Adjusted_ADC_Data+0x44>
    {
      ADC_Data[i] = ((uint16_t)(tmp_buf[i] << 8) | tmp_buf[i + 4]) * 1;
 80051ae:	4a45      	ldr	r2, [pc, #276]	; (80052c4 <NRF24Lo1_RX_Adjusted_ADC_Data+0x130>)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4413      	add	r3, r2
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	021b      	lsls	r3, r3, #8
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	3304      	adds	r3, #4
 80051c0:	4940      	ldr	r1, [pc, #256]	; (80052c4 <NRF24Lo1_RX_Adjusted_ADC_Data+0x130>)
 80051c2:	5ccb      	ldrb	r3, [r1, r3]
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	4313      	orrs	r3, r2
 80051c8:	b299      	uxth	r1, r3
 80051ca:	4a3f      	ldr	r2, [pc, #252]	; (80052c8 <NRF24Lo1_RX_Adjusted_ADC_Data+0x134>)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (size_t i = 0; i < 4; i++)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	3301      	adds	r3, #1
 80051d6:	607b      	str	r3, [r7, #4]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b03      	cmp	r3, #3
 80051dc:	d9e7      	bls.n	80051ae <NRF24Lo1_RX_Adjusted_ADC_Data+0x1a>
    }
    //* 微调
    ADC_Data[0] = ADC_Data[0];
 80051de:	4b3a      	ldr	r3, [pc, #232]	; (80052c8 <NRF24Lo1_RX_Adjusted_ADC_Data+0x134>)
 80051e0:	881a      	ldrh	r2, [r3, #0]
 80051e2:	4b39      	ldr	r3, [pc, #228]	; (80052c8 <NRF24Lo1_RX_Adjusted_ADC_Data+0x134>)
 80051e4:	801a      	strh	r2, [r3, #0]
    ADC_Data[1] = ADC_Data[1] + 75;
 80051e6:	4b38      	ldr	r3, [pc, #224]	; (80052c8 <NRF24Lo1_RX_Adjusted_ADC_Data+0x134>)
 80051e8:	885b      	ldrh	r3, [r3, #2]
 80051ea:	334b      	adds	r3, #75	; 0x4b
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	4b36      	ldr	r3, [pc, #216]	; (80052c8 <NRF24Lo1_RX_Adjusted_ADC_Data+0x134>)
 80051f0:	805a      	strh	r2, [r3, #2]
    ADC_Data[2] = ADC_Data[2] - 50;
 80051f2:	4b35      	ldr	r3, [pc, #212]	; (80052c8 <NRF24Lo1_RX_Adjusted_ADC_Data+0x134>)
 80051f4:	889b      	ldrh	r3, [r3, #4]
 80051f6:	3b32      	subs	r3, #50	; 0x32
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	4b33      	ldr	r3, [pc, #204]	; (80052c8 <NRF24Lo1_RX_Adjusted_ADC_Data+0x134>)
 80051fc:	809a      	strh	r2, [r3, #4]
    ADC_Data[3] = ADC_Data[3] + 10;
 80051fe:	4b32      	ldr	r3, [pc, #200]	; (80052c8 <NRF24Lo1_RX_Adjusted_ADC_Data+0x134>)
 8005200:	88db      	ldrh	r3, [r3, #6]
 8005202:	330a      	adds	r3, #10
 8005204:	b29a      	uxth	r2, r3
 8005206:	4b30      	ldr	r3, [pc, #192]	; (80052c8 <NRF24Lo1_RX_Adjusted_ADC_Data+0x134>)
 8005208:	80da      	strh	r2, [r3, #6]

    for (size_t i = 0; i < 4; i++)
 800520a:	2300      	movs	r3, #0
 800520c:	603b      	str	r3, [r7, #0]
 800520e:	e050      	b.n	80052b2 <NRF24Lo1_RX_Adjusted_ADC_Data+0x11e>
    {
      if (ADC_Data[i] % 100 < 50)
 8005210:	4a2d      	ldr	r2, [pc, #180]	; (80052c8 <NRF24Lo1_RX_Adjusted_ADC_Data+0x134>)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005218:	4a2c      	ldr	r2, [pc, #176]	; (80052cc <NRF24Lo1_RX_Adjusted_ADC_Data+0x138>)
 800521a:	fba2 1203 	umull	r1, r2, r2, r3
 800521e:	0952      	lsrs	r2, r2, #5
 8005220:	2164      	movs	r1, #100	; 0x64
 8005222:	fb01 f202 	mul.w	r2, r1, r2
 8005226:	1a9b      	subs	r3, r3, r2
 8005228:	b29b      	uxth	r3, r3
 800522a:	2b31      	cmp	r3, #49	; 0x31
 800522c:	d816      	bhi.n	800525c <NRF24Lo1_RX_Adjusted_ADC_Data+0xc8>
      {
        ADC_Data[i] = ADC_Data[i] - (ADC_Data[i] % 100);
 800522e:	4a26      	ldr	r2, [pc, #152]	; (80052c8 <NRF24Lo1_RX_Adjusted_ADC_Data+0x134>)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005236:	4924      	ldr	r1, [pc, #144]	; (80052c8 <NRF24Lo1_RX_Adjusted_ADC_Data+0x134>)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800523e:	4923      	ldr	r1, [pc, #140]	; (80052cc <NRF24Lo1_RX_Adjusted_ADC_Data+0x138>)
 8005240:	fba1 0103 	umull	r0, r1, r1, r3
 8005244:	0949      	lsrs	r1, r1, #5
 8005246:	2064      	movs	r0, #100	; 0x64
 8005248:	fb00 f101 	mul.w	r1, r0, r1
 800524c:	1a5b      	subs	r3, r3, r1
 800524e:	b29b      	uxth	r3, r3
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	b299      	uxth	r1, r3
 8005254:	4a1c      	ldr	r2, [pc, #112]	; (80052c8 <NRF24Lo1_RX_Adjusted_ADC_Data+0x134>)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      }
      if (ADC_Data[i] % 100 >= 50)
 800525c:	4a1a      	ldr	r2, [pc, #104]	; (80052c8 <NRF24Lo1_RX_Adjusted_ADC_Data+0x134>)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005264:	4a19      	ldr	r2, [pc, #100]	; (80052cc <NRF24Lo1_RX_Adjusted_ADC_Data+0x138>)
 8005266:	fba2 1203 	umull	r1, r2, r2, r3
 800526a:	0952      	lsrs	r2, r2, #5
 800526c:	2164      	movs	r1, #100	; 0x64
 800526e:	fb01 f202 	mul.w	r2, r1, r2
 8005272:	1a9b      	subs	r3, r3, r2
 8005274:	b29b      	uxth	r3, r3
 8005276:	2b31      	cmp	r3, #49	; 0x31
 8005278:	d918      	bls.n	80052ac <NRF24Lo1_RX_Adjusted_ADC_Data+0x118>
      {
        ADC_Data[i] = ADC_Data[i] + (100 - (ADC_Data[i] % 100));
 800527a:	4a13      	ldr	r2, [pc, #76]	; (80052c8 <NRF24Lo1_RX_Adjusted_ADC_Data+0x134>)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005282:	4911      	ldr	r1, [pc, #68]	; (80052c8 <NRF24Lo1_RX_Adjusted_ADC_Data+0x134>)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800528a:	4910      	ldr	r1, [pc, #64]	; (80052cc <NRF24Lo1_RX_Adjusted_ADC_Data+0x138>)
 800528c:	fba1 0103 	umull	r0, r1, r1, r3
 8005290:	0949      	lsrs	r1, r1, #5
 8005292:	2064      	movs	r0, #100	; 0x64
 8005294:	fb00 f101 	mul.w	r1, r0, r1
 8005298:	1a5b      	subs	r3, r3, r1
 800529a:	b29b      	uxth	r3, r3
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	b29b      	uxth	r3, r3
 80052a0:	3364      	adds	r3, #100	; 0x64
 80052a2:	b299      	uxth	r1, r3
 80052a4:	4a08      	ldr	r2, [pc, #32]	; (80052c8 <NRF24Lo1_RX_Adjusted_ADC_Data+0x134>)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (size_t i = 0; i < 4; i++)
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	3301      	adds	r3, #1
 80052b0:	603b      	str	r3, [r7, #0]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2b03      	cmp	r3, #3
 80052b6:	d9ab      	bls.n	8005210 <NRF24Lo1_RX_Adjusted_ADC_Data+0x7c>
      }
    }
  }
  return ADC_Data;
 80052b8:	4b03      	ldr	r3, [pc, #12]	; (80052c8 <NRF24Lo1_RX_Adjusted_ADC_Data+0x134>)
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	200002b0 	.word	0x200002b0
 80052c8:	200002d0 	.word	0x200002d0
 80052cc:	51eb851f 	.word	0x51eb851f

080052d0 <delay_us>:
#define CH_Num 120
#define debug_out(fmt, args...) printf(fmt, ##args)
// #define debug_out(fmt,args...)

void delay_us(uint32_t n)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  unsigned char i;

  while (n--)
 80052d8:	e007      	b.n	80052ea <delay_us+0x1a>
  {
    i = 8;
 80052da:	2308      	movs	r3, #8
 80052dc:	73fb      	strb	r3, [r7, #15]
    while (i--)
 80052de:	bf00      	nop
 80052e0:	7bfb      	ldrb	r3, [r7, #15]
 80052e2:	1e5a      	subs	r2, r3, #1
 80052e4:	73fa      	strb	r2, [r7, #15]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1fa      	bne.n	80052e0 <delay_us+0x10>
  while (n--)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	1e5a      	subs	r2, r3, #1
 80052ee:	607a      	str	r2, [r7, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1f2      	bne.n	80052da <delay_us+0xa>
      ;
  }
}
 80052f4:	bf00      	nop
 80052f6:	bf00      	nop
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
	...

08005304 <NRF24L01_Init>:
// 初始化24L01的IO口
void NRF24L01_Init(void)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	af00      	add	r7, sp, #0
  // spi init
  // gpio init
  Clr_NRF24L01_CE;  // chip enable
 8005308:	2200      	movs	r2, #0
 800530a:	2140      	movs	r1, #64	; 0x40
 800530c:	4806      	ldr	r0, [pc, #24]	; (8005328 <NRF24L01_Init+0x24>)
 800530e:	f7fc fa8b 	bl	8001828 <HAL_GPIO_WritePin>
  Set_NRF24L01_CSN; // Spi disable
 8005312:	2201      	movs	r2, #1
 8005314:	2120      	movs	r1, #32
 8005316:	4804      	ldr	r0, [pc, #16]	; (8005328 <NRF24L01_Init+0x24>)
 8005318:	f7fc fa86 	bl	8001828 <HAL_GPIO_WritePin>
  delay_us(100);
 800531c:	2064      	movs	r0, #100	; 0x64
 800531e:	f7ff ffd7 	bl	80052d0 <delay_us>
}
 8005322:	bf00      	nop
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	40020000 	.word	0x40020000

0800532c <nRF24_SPI_Send_Byte>:

// 封装spi读写函数
unsigned char nRF24_SPI_Send_Byte(unsigned char txdata)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af02      	add	r7, sp, #8
 8005332:	4603      	mov	r3, r0
 8005334:	71fb      	strb	r3, [r7, #7]
  unsigned char rxdata;
  HAL_SPI_TransmitReceive(&hspi2, &txdata, &rxdata, 1, 0x10);
 8005336:	f107 020f 	add.w	r2, r7, #15
 800533a:	1df9      	adds	r1, r7, #7
 800533c:	2310      	movs	r3, #16
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	2301      	movs	r3, #1
 8005342:	4804      	ldr	r0, [pc, #16]	; (8005354 <nRF24_SPI_Send_Byte+0x28>)
 8005344:	f7fd feb4 	bl	80030b0 <HAL_SPI_TransmitReceive>
  return (rxdata); // return read unsigned char
 8005348:	7bfb      	ldrb	r3, [r7, #15]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	200000f4 	.word	0x200000f4

08005358 <NRF24L01_Write_Reg>:

// 通过SPI写寄存器
unsigned char NRF24L01_Write_Reg(unsigned char regaddr, unsigned char data)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	4603      	mov	r3, r0
 8005360:	460a      	mov	r2, r1
 8005362:	71fb      	strb	r3, [r7, #7]
 8005364:	4613      	mov	r3, r2
 8005366:	71bb      	strb	r3, [r7, #6]
  unsigned char status;
  Clr_NRF24L01_CSN;                      // 使能SPI传输
 8005368:	2200      	movs	r2, #0
 800536a:	2120      	movs	r1, #32
 800536c:	480b      	ldr	r0, [pc, #44]	; (800539c <NRF24L01_Write_Reg+0x44>)
 800536e:	f7fc fa5b 	bl	8001828 <HAL_GPIO_WritePin>
  status = nRF24_SPI_Send_Byte(regaddr); // 发送寄存器号
 8005372:	79fb      	ldrb	r3, [r7, #7]
 8005374:	4618      	mov	r0, r3
 8005376:	f7ff ffd9 	bl	800532c <nRF24_SPI_Send_Byte>
 800537a:	4603      	mov	r3, r0
 800537c:	73fb      	strb	r3, [r7, #15]
  nRF24_SPI_Send_Byte(data);             // 写入寄存器的值
 800537e:	79bb      	ldrb	r3, [r7, #6]
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff ffd3 	bl	800532c <nRF24_SPI_Send_Byte>
  Set_NRF24L01_CSN;                      // 禁止SPI传输
 8005386:	2201      	movs	r2, #1
 8005388:	2120      	movs	r1, #32
 800538a:	4804      	ldr	r0, [pc, #16]	; (800539c <NRF24L01_Write_Reg+0x44>)
 800538c:	f7fc fa4c 	bl	8001828 <HAL_GPIO_WritePin>
  return (status);                       // 返回状态值
 8005390:	7bfb      	ldrb	r3, [r7, #15]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	40020000 	.word	0x40020000

080053a0 <NRF24L01_Read_Reg>:
// 读取SPI寄存器值 ，regaddr:要读的寄存器
unsigned char NRF24L01_Read_Reg(unsigned char regaddr)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	4603      	mov	r3, r0
 80053a8:	71fb      	strb	r3, [r7, #7]
  unsigned char reg_val;
  Clr_NRF24L01_CSN;                    // 使能SPI传输
 80053aa:	2200      	movs	r2, #0
 80053ac:	2120      	movs	r1, #32
 80053ae:	480b      	ldr	r0, [pc, #44]	; (80053dc <NRF24L01_Read_Reg+0x3c>)
 80053b0:	f7fc fa3a 	bl	8001828 <HAL_GPIO_WritePin>
  nRF24_SPI_Send_Byte(regaddr);        // 发送寄存器号
 80053b4:	79fb      	ldrb	r3, [r7, #7]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7ff ffb8 	bl	800532c <nRF24_SPI_Send_Byte>
  reg_val = nRF24_SPI_Send_Byte(0XFF); // 读取寄存器内容
 80053bc:	20ff      	movs	r0, #255	; 0xff
 80053be:	f7ff ffb5 	bl	800532c <nRF24_SPI_Send_Byte>
 80053c2:	4603      	mov	r3, r0
 80053c4:	73fb      	strb	r3, [r7, #15]
  Set_NRF24L01_CSN;                    // 禁止SPI传输
 80053c6:	2201      	movs	r2, #1
 80053c8:	2120      	movs	r1, #32
 80053ca:	4804      	ldr	r0, [pc, #16]	; (80053dc <NRF24L01_Read_Reg+0x3c>)
 80053cc:	f7fc fa2c 	bl	8001828 <HAL_GPIO_WritePin>
  return (reg_val);                    // 返回状态值
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	40020000 	.word	0x40020000

080053e0 <NRF24L01_Read_Buf>:
// 在指定位置读出指定长度的数据
//*pBuf:数据指针
// 返回值,此次读到的状态寄存器值
unsigned char NRF24L01_Read_Buf(unsigned char regaddr, unsigned char *pBuf, unsigned char datalen)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	4603      	mov	r3, r0
 80053e8:	6039      	str	r1, [r7, #0]
 80053ea:	71fb      	strb	r3, [r7, #7]
 80053ec:	4613      	mov	r3, r2
 80053ee:	71bb      	strb	r3, [r7, #6]
  unsigned char status;
  Clr_NRF24L01_CSN;                      // 使能SPI传输
 80053f0:	2200      	movs	r2, #0
 80053f2:	2120      	movs	r1, #32
 80053f4:	480c      	ldr	r0, [pc, #48]	; (8005428 <NRF24L01_Read_Buf+0x48>)
 80053f6:	f7fc fa17 	bl	8001828 <HAL_GPIO_WritePin>
  status = nRF24_SPI_Send_Byte(regaddr); // 发送寄存器值(位置),并读取状态值
 80053fa:	79fb      	ldrb	r3, [r7, #7]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7ff ff95 	bl	800532c <nRF24_SPI_Send_Byte>
 8005402:	4603      	mov	r3, r0
 8005404:	73fb      	strb	r3, [r7, #15]
  // for(u8_ctr=0;u8_ctr<datalen;u8_ctr++)pBuf[u8_ctr]=SPI_ReadWriteByte(0XFF);//读出数据
  HAL_SPI_Receive(&hspi2, pBuf, datalen, 0x10);
 8005406:	79bb      	ldrb	r3, [r7, #6]
 8005408:	b29a      	uxth	r2, r3
 800540a:	2310      	movs	r3, #16
 800540c:	6839      	ldr	r1, [r7, #0]
 800540e:	4807      	ldr	r0, [pc, #28]	; (800542c <NRF24L01_Read_Buf+0x4c>)
 8005410:	f7fd fd36 	bl	8002e80 <HAL_SPI_Receive>
  Set_NRF24L01_CSN; // 关闭SPI传输
 8005414:	2201      	movs	r2, #1
 8005416:	2120      	movs	r1, #32
 8005418:	4803      	ldr	r0, [pc, #12]	; (8005428 <NRF24L01_Read_Buf+0x48>)
 800541a:	f7fc fa05 	bl	8001828 <HAL_GPIO_WritePin>
  return status;    // 返回读到的状态值
 800541e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	40020000 	.word	0x40020000
 800542c:	200000f4 	.word	0x200000f4

08005430 <NRF24L01_Write_Buf>:
// 在指定位置写指定长度的数据
//*pBuf:数据指针
// 返回值,此次读到的状态寄存器值
unsigned char NRF24L01_Write_Buf(unsigned char regaddr, unsigned char *pBuf, unsigned char datalen)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	4603      	mov	r3, r0
 8005438:	6039      	str	r1, [r7, #0]
 800543a:	71fb      	strb	r3, [r7, #7]
 800543c:	4613      	mov	r3, r2
 800543e:	71bb      	strb	r3, [r7, #6]
  unsigned char status;
  Clr_NRF24L01_CSN;                      // 使能SPI传输
 8005440:	2200      	movs	r2, #0
 8005442:	2120      	movs	r1, #32
 8005444:	480c      	ldr	r0, [pc, #48]	; (8005478 <NRF24L01_Write_Buf+0x48>)
 8005446:	f7fc f9ef 	bl	8001828 <HAL_GPIO_WritePin>
  status = nRF24_SPI_Send_Byte(regaddr); // 发送寄存器值(位置),并读取状态值
 800544a:	79fb      	ldrb	r3, [r7, #7]
 800544c:	4618      	mov	r0, r3
 800544e:	f7ff ff6d 	bl	800532c <nRF24_SPI_Send_Byte>
 8005452:	4603      	mov	r3, r0
 8005454:	73fb      	strb	r3, [r7, #15]
  // for(u8_ctr=0; u8_ctr<datalen; u8_ctr++)SPI_ReadWriteByte(*pBuf++); //写入数据
  HAL_SPI_Transmit(&hspi2, pBuf, datalen, 0x10);
 8005456:	79bb      	ldrb	r3, [r7, #6]
 8005458:	b29a      	uxth	r2, r3
 800545a:	2310      	movs	r3, #16
 800545c:	6839      	ldr	r1, [r7, #0]
 800545e:	4807      	ldr	r0, [pc, #28]	; (800547c <NRF24L01_Write_Buf+0x4c>)
 8005460:	f7fd fbcb 	bl	8002bfa <HAL_SPI_Transmit>
  Set_NRF24L01_CSN; // 关闭SPI传输
 8005464:	2201      	movs	r2, #1
 8005466:	2120      	movs	r1, #32
 8005468:	4803      	ldr	r0, [pc, #12]	; (8005478 <NRF24L01_Write_Buf+0x48>)
 800546a:	f7fc f9dd 	bl	8001828 <HAL_GPIO_WritePin>
  return status;    // 返回读到的状态值
 800546e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	40020000 	.word	0x40020000
 800547c:	200000f4 	.word	0x200000f4

08005480 <NRF24L01_RxPacket>:

// 启动NRF24L01发送一次数据
// txbuf:待发送数据首地址
// 返回值:0，接收完成；其他，错误代码
unsigned char NRF24L01_RxPacket(unsigned char *rxbuf)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  unsigned char state;
  state = NRF24L01_Read_Reg(STATUS);                 // 读取状态寄存器的值
 8005488:	2007      	movs	r0, #7
 800548a:	f7ff ff89 	bl	80053a0 <NRF24L01_Read_Reg>
 800548e:	4603      	mov	r3, r0
 8005490:	73fb      	strb	r3, [r7, #15]
  NRF24L01_Write_Reg(SPI_WRITE_REG + STATUS, state); // 清除TX_DS或MAX_RT中断标志
 8005492:	7bfb      	ldrb	r3, [r7, #15]
 8005494:	4619      	mov	r1, r3
 8005496:	2027      	movs	r0, #39	; 0x27
 8005498:	f7ff ff5e 	bl	8005358 <NRF24L01_Write_Reg>
  if (state & TX_OK)
 800549c:	7bfb      	ldrb	r3, [r7, #15]
 800549e:	f003 0320 	and.w	r3, r3, #32
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d002      	beq.n	80054ac <NRF24L01_RxPacket+0x2c>
  {
    debug_out("RX send ack!\r\n"); // 成功发送ACK
 80054a6:	480d      	ldr	r0, [pc, #52]	; (80054dc <NRF24L01_RxPacket+0x5c>)
 80054a8:	f000 fba2 	bl	8005bf0 <puts>
  }
  if (state & RX_OK) // 接收到数据
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
 80054ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00d      	beq.n	80054d2 <NRF24L01_RxPacket+0x52>
  {
    NRF24L01_Read_Buf(RD_RX_PLOAD, rxbuf, RX_PLOAD_WIDTH); // 读取数据
 80054b6:	2220      	movs	r2, #32
 80054b8:	6879      	ldr	r1, [r7, #4]
 80054ba:	2061      	movs	r0, #97	; 0x61
 80054bc:	f7ff ff90 	bl	80053e0 <NRF24L01_Read_Buf>
    NRF24L01_Write_Reg(FLUSH_RX, 0xff);                    // 清除RX FIFO寄存器
 80054c0:	21ff      	movs	r1, #255	; 0xff
 80054c2:	20e2      	movs	r0, #226	; 0xe2
 80054c4:	f7ff ff48 	bl	8005358 <NRF24L01_Write_Reg>
    debug_out("RX read data!\r\n");
 80054c8:	4805      	ldr	r0, [pc, #20]	; (80054e0 <NRF24L01_RxPacket+0x60>)
 80054ca:	f000 fb91 	bl	8005bf0 <puts>
    return 0;
 80054ce:	2300      	movs	r3, #0
 80054d0:	e000      	b.n	80054d4 <NRF24L01_RxPacket+0x54>
  }
  return 1; // 没收到任何数据
 80054d2:	2301      	movs	r3, #1
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	080063ec 	.word	0x080063ec
 80054e0:	080063fc 	.word	0x080063fc

080054e4 <RX_Mode>:

// 该函数初始化NRF24L01到RX模式
// 设置RX地址,写RX数据宽度,选择RF频道,波特率和LNA HCURR
// 当CE变高后,即进入RX模式,并可以接收数据了
void RX_Mode(void)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0
  Clr_NRF24L01_CE;
 80054e8:	2200      	movs	r2, #0
 80054ea:	2140      	movs	r1, #64	; 0x40
 80054ec:	4813      	ldr	r0, [pc, #76]	; (800553c <RX_Mode+0x58>)
 80054ee:	f7fc f99b 	bl	8001828 <HAL_GPIO_WritePin>
  // 写RX节点地址
  NRF24L01_Write_Buf(SPI_WRITE_REG + RX_ADDR_P0, (unsigned char *)INIT_ADDR0, RX_ADR_WIDTH);
 80054f2:	2205      	movs	r2, #5
 80054f4:	4912      	ldr	r1, [pc, #72]	; (8005540 <RX_Mode+0x5c>)
 80054f6:	202a      	movs	r0, #42	; 0x2a
 80054f8:	f7ff ff9a 	bl	8005430 <NRF24L01_Write_Buf>

  // 使能通道0的自动应答
  NRF24L01_Write_Reg(SPI_WRITE_REG + EN_AA, 0x01);
 80054fc:	2101      	movs	r1, #1
 80054fe:	2021      	movs	r0, #33	; 0x21
 8005500:	f7ff ff2a 	bl	8005358 <NRF24L01_Write_Reg>
  // 使能通道0的接收地址
  NRF24L01_Write_Reg(SPI_WRITE_REG + EN_RXADDR, 0x01);
 8005504:	2101      	movs	r1, #1
 8005506:	2022      	movs	r0, #34	; 0x22
 8005508:	f7ff ff26 	bl	8005358 <NRF24L01_Write_Reg>
  // 设置RF通信频率
  NRF24L01_Write_Reg(SPI_WRITE_REG + RF_CH, CH_Num);
 800550c:	2178      	movs	r1, #120	; 0x78
 800550e:	2025      	movs	r0, #37	; 0x25
 8005510:	f7ff ff22 	bl	8005358 <NRF24L01_Write_Reg>
  // 选择通道0的有效数据宽度
  NRF24L01_Write_Reg(SPI_WRITE_REG + RX_PW_P0, RX_PLOAD_WIDTH);
 8005514:	2120      	movs	r1, #32
 8005516:	2031      	movs	r0, #49	; 0x31
 8005518:	f7ff ff1e 	bl	8005358 <NRF24L01_Write_Reg>
  // 设置TX发射参数,0db增益,2Mbps,低噪声增益开启
  NRF24L01_Write_Reg(SPI_WRITE_REG + RF_SETUP, 0x0f);
 800551c:	210f      	movs	r1, #15
 800551e:	2026      	movs	r0, #38	; 0x26
 8005520:	f7ff ff1a 	bl	8005358 <NRF24L01_Write_Reg>
  // 配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC,PRIM_RX接收模式
  NRF24L01_Write_Reg(SPI_WRITE_REG + CONFIG, 0x0f);
 8005524:	210f      	movs	r1, #15
 8005526:	2020      	movs	r0, #32
 8005528:	f7ff ff16 	bl	8005358 <NRF24L01_Write_Reg>
  // CE为高,进入接收模式
  Set_NRF24L01_CE;
 800552c:	2201      	movs	r2, #1
 800552e:	2140      	movs	r1, #64	; 0x40
 8005530:	4802      	ldr	r0, [pc, #8]	; (800553c <RX_Mode+0x58>)
 8005532:	f7fc f979 	bl	8001828 <HAL_GPIO_WritePin>
}
 8005536:	bf00      	nop
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	40020000 	.word	0x40020000
 8005540:	08006468 	.word	0x08006468

08005544 <NRF24L01_Check>:

// 上电检测NRF24L01是否在位
// 写5个数据然后再读回来进行比较，
// 相同时返回值:0，表示在位;否则返回1，表示不在位
unsigned char NRF24L01_Check(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
  unsigned char buf[5] = {0XA5, 0XA5, 0XA5, 0XA5, 0XA5};
 800554a:	4a1b      	ldr	r2, [pc, #108]	; (80055b8 <NRF24L01_Check+0x74>)
 800554c:	f107 0308 	add.w	r3, r7, #8
 8005550:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005554:	6018      	str	r0, [r3, #0]
 8005556:	3304      	adds	r3, #4
 8005558:	7019      	strb	r1, [r3, #0]
  unsigned char buf1[5];
  unsigned char i;
  NRF24L01_Write_Buf(SPI_WRITE_REG + TX_ADDR, buf, 5); // 写入5个字节的地址.
 800555a:	f107 0308 	add.w	r3, r7, #8
 800555e:	2205      	movs	r2, #5
 8005560:	4619      	mov	r1, r3
 8005562:	2030      	movs	r0, #48	; 0x30
 8005564:	f7ff ff64 	bl	8005430 <NRF24L01_Write_Buf>
  NRF24L01_Read_Buf(TX_ADDR, buf1, 5);                 // 读出写入的地址
 8005568:	463b      	mov	r3, r7
 800556a:	2205      	movs	r2, #5
 800556c:	4619      	mov	r1, r3
 800556e:	2010      	movs	r0, #16
 8005570:	f7ff ff36 	bl	80053e0 <NRF24L01_Read_Buf>
  for (i = 0; i < 5; i++)
 8005574:	2300      	movs	r3, #0
 8005576:	73fb      	strb	r3, [r7, #15]
 8005578:	e009      	b.n	800558e <NRF24L01_Check+0x4a>
    if (buf1[i] != 0XA5)
 800557a:	7bfb      	ldrb	r3, [r7, #15]
 800557c:	3310      	adds	r3, #16
 800557e:	443b      	add	r3, r7
 8005580:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005584:	2ba5      	cmp	r3, #165	; 0xa5
 8005586:	d106      	bne.n	8005596 <NRF24L01_Check+0x52>
  for (i = 0; i < 5; i++)
 8005588:	7bfb      	ldrb	r3, [r7, #15]
 800558a:	3301      	adds	r3, #1
 800558c:	73fb      	strb	r3, [r7, #15]
 800558e:	7bfb      	ldrb	r3, [r7, #15]
 8005590:	2b04      	cmp	r3, #4
 8005592:	d9f2      	bls.n	800557a <NRF24L01_Check+0x36>
 8005594:	e000      	b.n	8005598 <NRF24L01_Check+0x54>
      break;
 8005596:	bf00      	nop
  if (i != 5)
 8005598:	7bfb      	ldrb	r3, [r7, #15]
 800559a:	2b05      	cmp	r3, #5
 800559c:	d004      	beq.n	80055a8 <NRF24L01_Check+0x64>
  {
    debug_out(("nRF24L01 TEST FAIL\r\n"));
 800559e:	4807      	ldr	r0, [pc, #28]	; (80055bc <NRF24L01_Check+0x78>)
 80055a0:	f000 fb26 	bl	8005bf0 <puts>
    return 1; // NRF24L01不在位
 80055a4:	2301      	movs	r3, #1
 80055a6:	e003      	b.n	80055b0 <NRF24L01_Check+0x6c>
  }
  debug_out(("nRF24L01 TEST OK\r\n"));
 80055a8:	4805      	ldr	r0, [pc, #20]	; (80055c0 <NRF24L01_Check+0x7c>)
 80055aa:	f000 fb21 	bl	8005bf0 <puts>
  return 0; // NRF24L01在位
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	08006434 	.word	0x08006434
 80055bc:	0800640c 	.word	0x0800640c
 80055c0:	08006420 	.word	0x08006420

080055c4 <NRF24L01_RX_Start>:

void NRF24L01_RX_Start(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	af00      	add	r7, sp, #0
  NRF24L01_Init();
 80055c8:	f7ff fe9c 	bl	8005304 <NRF24L01_Init>
  printf("\r\nNRF24l01 init ok\r\n");
 80055cc:	480b      	ldr	r0, [pc, #44]	; (80055fc <NRF24L01_RX_Start+0x38>)
 80055ce:	f000 fb0f 	bl	8005bf0 <puts>
  temp = 4;
 80055d2:	4b0b      	ldr	r3, [pc, #44]	; (8005600 <NRF24L01_RX_Start+0x3c>)
 80055d4:	2204      	movs	r2, #4
 80055d6:	701a      	strb	r2, [r3, #0]
  while (NRF24L01_Check() && (temp--))
 80055d8:	bf00      	nop
 80055da:	f7ff ffb3 	bl	8005544 <NRF24L01_Check>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d007      	beq.n	80055f4 <NRF24L01_RX_Start+0x30>
 80055e4:	4b06      	ldr	r3, [pc, #24]	; (8005600 <NRF24L01_RX_Start+0x3c>)
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	1e5a      	subs	r2, r3, #1
 80055ea:	b2d1      	uxtb	r1, r2
 80055ec:	4a04      	ldr	r2, [pc, #16]	; (8005600 <NRF24L01_RX_Start+0x3c>)
 80055ee:	7011      	strb	r1, [r2, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1f2      	bne.n	80055da <NRF24L01_RX_Start+0x16>
    ;

  RX_Mode();
 80055f4:	f7ff ff76 	bl	80054e4 <RX_Mode>
 80055f8:	bf00      	nop
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	0800643c 	.word	0x0800643c
 8005600:	200002d8 	.word	0x200002d8

08005604 <WriteCmd>:
    0xC8, 0xD3, 0x00, 0xD5, 0x80, 0xD8, 0x05, 0xD9, 0xF1, 0xDA, 0x12,

    0xD8, 0x30, 0x8D, 0x14, 0xAF}; // 初始化命令

void WriteCmd(void)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af04      	add	r7, sp, #16
  uint8_t i = 0;
 800560a:	2300      	movs	r3, #0
 800560c:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 27; i++)
 800560e:	2300      	movs	r3, #0
 8005610:	71fb      	strb	r3, [r7, #7]
 8005612:	e011      	b.n	8005638 <WriteCmd+0x34>
  {
    HAL_I2C_Mem_Write(&hi2c1, 0x78, 0x00, I2C_MEMADD_SIZE_8BIT, CMD_Data + i, 1, 0x100);
 8005614:	79fb      	ldrb	r3, [r7, #7]
 8005616:	4a0c      	ldr	r2, [pc, #48]	; (8005648 <WriteCmd+0x44>)
 8005618:	4413      	add	r3, r2
 800561a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800561e:	9202      	str	r2, [sp, #8]
 8005620:	2201      	movs	r2, #1
 8005622:	9201      	str	r2, [sp, #4]
 8005624:	9300      	str	r3, [sp, #0]
 8005626:	2301      	movs	r3, #1
 8005628:	2200      	movs	r2, #0
 800562a:	2178      	movs	r1, #120	; 0x78
 800562c:	4807      	ldr	r0, [pc, #28]	; (800564c <WriteCmd+0x48>)
 800562e:	f7fc fa59 	bl	8001ae4 <HAL_I2C_Mem_Write>
  for (i = 0; i < 27; i++)
 8005632:	79fb      	ldrb	r3, [r7, #7]
 8005634:	3301      	adds	r3, #1
 8005636:	71fb      	strb	r3, [r7, #7]
 8005638:	79fb      	ldrb	r3, [r7, #7]
 800563a:	2b1a      	cmp	r3, #26
 800563c:	d9ea      	bls.n	8005614 <WriteCmd+0x10>
  }
}
 800563e:	bf00      	nop
 8005640:	bf00      	nop
 8005642:	3708      	adds	r7, #8
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	2000000c 	.word	0x2000000c
 800564c:	200000a0 	.word	0x200000a0

08005650 <OLED_WR_CMD>:
// 向设备写控制命令
void OLED_WR_CMD(uint8_t cmd)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af04      	add	r7, sp, #16
 8005656:	4603      	mov	r3, r0
 8005658:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c1, 0x78, 0x00, I2C_MEMADD_SIZE_8BIT, &cmd, 1, 0x100);
 800565a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800565e:	9302      	str	r3, [sp, #8]
 8005660:	2301      	movs	r3, #1
 8005662:	9301      	str	r3, [sp, #4]
 8005664:	1dfb      	adds	r3, r7, #7
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	2301      	movs	r3, #1
 800566a:	2200      	movs	r2, #0
 800566c:	2178      	movs	r1, #120	; 0x78
 800566e:	4803      	ldr	r0, [pc, #12]	; (800567c <OLED_WR_CMD+0x2c>)
 8005670:	f7fc fa38 	bl	8001ae4 <HAL_I2C_Mem_Write>
}
 8005674:	bf00      	nop
 8005676:	3708      	adds	r7, #8
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	200000a0 	.word	0x200000a0

08005680 <OLED_WR_DATA>:
// 向设备写数据
void OLED_WR_DATA(uint8_t data)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af04      	add	r7, sp, #16
 8005686:	4603      	mov	r3, r0
 8005688:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c1, 0x78, 0x40, I2C_MEMADD_SIZE_8BIT, &data, 1, 0x100);
 800568a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800568e:	9302      	str	r3, [sp, #8]
 8005690:	2301      	movs	r3, #1
 8005692:	9301      	str	r3, [sp, #4]
 8005694:	1dfb      	adds	r3, r7, #7
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	2301      	movs	r3, #1
 800569a:	2240      	movs	r2, #64	; 0x40
 800569c:	2178      	movs	r1, #120	; 0x78
 800569e:	4803      	ldr	r0, [pc, #12]	; (80056ac <OLED_WR_DATA+0x2c>)
 80056a0:	f7fc fa20 	bl	8001ae4 <HAL_I2C_Mem_Write>
}
 80056a4:	bf00      	nop
 80056a6:	3708      	adds	r7, #8
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	200000a0 	.word	0x200000a0

080056b0 <OLED_Init>:
// 初始化oled屏幕
void OLED_Init(void)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	af00      	add	r7, sp, #0
  HAL_Delay(200);
 80056b4:	20c8      	movs	r0, #200	; 0xc8
 80056b6:	f7fb fd53 	bl	8001160 <HAL_Delay>

  WriteCmd();
 80056ba:	f7ff ffa3 	bl	8005604 <WriteCmd>
}
 80056be:	bf00      	nop
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <OLED_Clear>:
// 清屏
void OLED_Clear(void)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b082      	sub	sp, #8
 80056c6:	af00      	add	r7, sp, #0
  uint8_t i, n;
  for (i = 0; i < 8; i++)
 80056c8:	2300      	movs	r3, #0
 80056ca:	71fb      	strb	r3, [r7, #7]
 80056cc:	e01b      	b.n	8005706 <OLED_Clear+0x44>
  {
    OLED_WR_CMD(0xb0 + i);
 80056ce:	79fb      	ldrb	r3, [r7, #7]
 80056d0:	3b50      	subs	r3, #80	; 0x50
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7ff ffbb 	bl	8005650 <OLED_WR_CMD>
    OLED_WR_CMD(0x00);
 80056da:	2000      	movs	r0, #0
 80056dc:	f7ff ffb8 	bl	8005650 <OLED_WR_CMD>
    OLED_WR_CMD(0x10);
 80056e0:	2010      	movs	r0, #16
 80056e2:	f7ff ffb5 	bl	8005650 <OLED_WR_CMD>
    for (n = 0; n < 128; n++)
 80056e6:	2300      	movs	r3, #0
 80056e8:	71bb      	strb	r3, [r7, #6]
 80056ea:	e005      	b.n	80056f8 <OLED_Clear+0x36>
      OLED_WR_DATA(0);
 80056ec:	2000      	movs	r0, #0
 80056ee:	f7ff ffc7 	bl	8005680 <OLED_WR_DATA>
    for (n = 0; n < 128; n++)
 80056f2:	79bb      	ldrb	r3, [r7, #6]
 80056f4:	3301      	adds	r3, #1
 80056f6:	71bb      	strb	r3, [r7, #6]
 80056f8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	daf5      	bge.n	80056ec <OLED_Clear+0x2a>
  for (i = 0; i < 8; i++)
 8005700:	79fb      	ldrb	r3, [r7, #7]
 8005702:	3301      	adds	r3, #1
 8005704:	71fb      	strb	r3, [r7, #7]
 8005706:	79fb      	ldrb	r3, [r7, #7]
 8005708:	2b07      	cmp	r3, #7
 800570a:	d9e0      	bls.n	80056ce <OLED_Clear+0xc>
  }
}
 800570c:	bf00      	nop
 800570e:	bf00      	nop
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <OLED_Set_Pos>:
  OLED_WR_CMD(0X8D); // SET DCDC命令
  OLED_WR_CMD(0X10); // DCDC OFF
  OLED_WR_CMD(0XAE); // DISPLAY OFF
}
void OLED_Set_Pos(uint8_t x, uint8_t y)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b082      	sub	sp, #8
 800571a:	af00      	add	r7, sp, #0
 800571c:	4603      	mov	r3, r0
 800571e:	460a      	mov	r2, r1
 8005720:	71fb      	strb	r3, [r7, #7]
 8005722:	4613      	mov	r3, r2
 8005724:	71bb      	strb	r3, [r7, #6]
  OLED_WR_CMD(0xb0 + y);
 8005726:	79bb      	ldrb	r3, [r7, #6]
 8005728:	3b50      	subs	r3, #80	; 0x50
 800572a:	b2db      	uxtb	r3, r3
 800572c:	4618      	mov	r0, r3
 800572e:	f7ff ff8f 	bl	8005650 <OLED_WR_CMD>
  OLED_WR_CMD(((x & 0xf0) >> 4) | 0x10);
 8005732:	79fb      	ldrb	r3, [r7, #7]
 8005734:	091b      	lsrs	r3, r3, #4
 8005736:	b2db      	uxtb	r3, r3
 8005738:	f043 0310 	orr.w	r3, r3, #16
 800573c:	b2db      	uxtb	r3, r3
 800573e:	4618      	mov	r0, r3
 8005740:	f7ff ff86 	bl	8005650 <OLED_WR_CMD>
  OLED_WR_CMD(x & 0x0f);
 8005744:	79fb      	ldrb	r3, [r7, #7]
 8005746:	f003 030f 	and.w	r3, r3, #15
 800574a:	b2db      	uxtb	r3, r3
 800574c:	4618      	mov	r0, r3
 800574e:	f7ff ff7f 	bl	8005650 <OLED_WR_CMD>
}
 8005752:	bf00      	nop
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <oled_pow>:
    for (n = 0; n < 128; n++)
      OLED_WR_DATA(1);
  } // 更新显示
}
unsigned int oled_pow(uint8_t m, uint8_t n)
{
 800575a:	b480      	push	{r7}
 800575c:	b085      	sub	sp, #20
 800575e:	af00      	add	r7, sp, #0
 8005760:	4603      	mov	r3, r0
 8005762:	460a      	mov	r2, r1
 8005764:	71fb      	strb	r3, [r7, #7]
 8005766:	4613      	mov	r3, r2
 8005768:	71bb      	strb	r3, [r7, #6]
  unsigned int result = 1;
 800576a:	2301      	movs	r3, #1
 800576c:	60fb      	str	r3, [r7, #12]
  while (n--)
 800576e:	e004      	b.n	800577a <oled_pow+0x20>
    result *= m;
 8005770:	79fa      	ldrb	r2, [r7, #7]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	fb02 f303 	mul.w	r3, r2, r3
 8005778:	60fb      	str	r3, [r7, #12]
  while (n--)
 800577a:	79bb      	ldrb	r3, [r7, #6]
 800577c:	1e5a      	subs	r2, r3, #1
 800577e:	71ba      	strb	r2, [r7, #6]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1f5      	bne.n	8005770 <oled_pow+0x16>
  return result;
 8005784:	68fb      	ldr	r3, [r7, #12]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
	...

08005794 <OLED_ShowNum>:
// len :数字的位数
// size:字体大小
// mode:模式	0,填充模式;1,叠加模式
// num:数值(0~4294967295);
void OLED_ShowNum(uint8_t x, uint8_t y, unsigned int num, uint8_t len, uint8_t size2)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	603a      	str	r2, [r7, #0]
 800579c:	461a      	mov	r2, r3
 800579e:	4603      	mov	r3, r0
 80057a0:	71fb      	strb	r3, [r7, #7]
 80057a2:	460b      	mov	r3, r1
 80057a4:	71bb      	strb	r3, [r7, #6]
 80057a6:	4613      	mov	r3, r2
 80057a8:	717b      	strb	r3, [r7, #5]
  uint8_t t, temp;
  uint8_t enshow = 0;
 80057aa:	2300      	movs	r3, #0
 80057ac:	73bb      	strb	r3, [r7, #14]
  for (t = 0; t < len; t++)
 80057ae:	2300      	movs	r3, #0
 80057b0:	73fb      	strb	r3, [r7, #15]
 80057b2:	e049      	b.n	8005848 <OLED_ShowNum+0xb4>
  {
    temp = (num / oled_pow(10, len - t - 1)) % 10;
 80057b4:	797a      	ldrb	r2, [r7, #5]
 80057b6:	7bfb      	ldrb	r3, [r7, #15]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	3b01      	subs	r3, #1
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	4619      	mov	r1, r3
 80057c2:	200a      	movs	r0, #10
 80057c4:	f7ff ffc9 	bl	800575a <oled_pow>
 80057c8:	4602      	mov	r2, r0
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80057d0:	4b22      	ldr	r3, [pc, #136]	; (800585c <OLED_ShowNum+0xc8>)
 80057d2:	fba3 2301 	umull	r2, r3, r3, r1
 80057d6:	08da      	lsrs	r2, r3, #3
 80057d8:	4613      	mov	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4413      	add	r3, r2
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	1aca      	subs	r2, r1, r3
 80057e2:	4613      	mov	r3, r2
 80057e4:	737b      	strb	r3, [r7, #13]
    if (enshow == 0 && t < (len - 1))
 80057e6:	7bbb      	ldrb	r3, [r7, #14]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d119      	bne.n	8005820 <OLED_ShowNum+0x8c>
 80057ec:	7bfa      	ldrb	r2, [r7, #15]
 80057ee:	797b      	ldrb	r3, [r7, #5]
 80057f0:	3b01      	subs	r3, #1
 80057f2:	429a      	cmp	r2, r3
 80057f4:	da14      	bge.n	8005820 <OLED_ShowNum+0x8c>
    {
      if (temp == 0)
 80057f6:	7b7b      	ldrb	r3, [r7, #13]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10f      	bne.n	800581c <OLED_ShowNum+0x88>
      {
        OLED_ShowChar(x + (size2 / 2) * t, y, ' ', size2);
 80057fc:	7e3b      	ldrb	r3, [r7, #24]
 80057fe:	085b      	lsrs	r3, r3, #1
 8005800:	b2db      	uxtb	r3, r3
 8005802:	7bfa      	ldrb	r2, [r7, #15]
 8005804:	fb12 f303 	smulbb	r3, r2, r3
 8005808:	b2da      	uxtb	r2, r3
 800580a:	79fb      	ldrb	r3, [r7, #7]
 800580c:	4413      	add	r3, r2
 800580e:	b2d8      	uxtb	r0, r3
 8005810:	7e3b      	ldrb	r3, [r7, #24]
 8005812:	79b9      	ldrb	r1, [r7, #6]
 8005814:	2220      	movs	r2, #32
 8005816:	f000 f823 	bl	8005860 <OLED_ShowChar>
        continue;
 800581a:	e012      	b.n	8005842 <OLED_ShowNum+0xae>
      }
      else
        enshow = 1;
 800581c:	2301      	movs	r3, #1
 800581e:	73bb      	strb	r3, [r7, #14]
    }
    OLED_ShowChar(x + (size2 / 2) * t, y, temp + '0', size2);
 8005820:	7e3b      	ldrb	r3, [r7, #24]
 8005822:	085b      	lsrs	r3, r3, #1
 8005824:	b2db      	uxtb	r3, r3
 8005826:	7bfa      	ldrb	r2, [r7, #15]
 8005828:	fb12 f303 	smulbb	r3, r2, r3
 800582c:	b2da      	uxtb	r2, r3
 800582e:	79fb      	ldrb	r3, [r7, #7]
 8005830:	4413      	add	r3, r2
 8005832:	b2d8      	uxtb	r0, r3
 8005834:	7b7b      	ldrb	r3, [r7, #13]
 8005836:	3330      	adds	r3, #48	; 0x30
 8005838:	b2da      	uxtb	r2, r3
 800583a:	7e3b      	ldrb	r3, [r7, #24]
 800583c:	79b9      	ldrb	r1, [r7, #6]
 800583e:	f000 f80f 	bl	8005860 <OLED_ShowChar>
  for (t = 0; t < len; t++)
 8005842:	7bfb      	ldrb	r3, [r7, #15]
 8005844:	3301      	adds	r3, #1
 8005846:	73fb      	strb	r3, [r7, #15]
 8005848:	7bfa      	ldrb	r2, [r7, #15]
 800584a:	797b      	ldrb	r3, [r7, #5]
 800584c:	429a      	cmp	r2, r3
 800584e:	d3b1      	bcc.n	80057b4 <OLED_ShowNum+0x20>
  }
}
 8005850:	bf00      	nop
 8005852:	bf00      	nop
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	cccccccd 	.word	0xcccccccd

08005860 <OLED_ShowChar>:
// x:0~127
// y:0~63
// mode:0,反白显示;1,正常显示
// size:选择字体 16/12
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t Char_Size)
{
 8005860:	b590      	push	{r4, r7, lr}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	4604      	mov	r4, r0
 8005868:	4608      	mov	r0, r1
 800586a:	4611      	mov	r1, r2
 800586c:	461a      	mov	r2, r3
 800586e:	4623      	mov	r3, r4
 8005870:	71fb      	strb	r3, [r7, #7]
 8005872:	4603      	mov	r3, r0
 8005874:	71bb      	strb	r3, [r7, #6]
 8005876:	460b      	mov	r3, r1
 8005878:	717b      	strb	r3, [r7, #5]
 800587a:	4613      	mov	r3, r2
 800587c:	713b      	strb	r3, [r7, #4]
  unsigned char c = 0, i = 0;
 800587e:	2300      	movs	r3, #0
 8005880:	73bb      	strb	r3, [r7, #14]
 8005882:	2300      	movs	r3, #0
 8005884:	73fb      	strb	r3, [r7, #15]
  c = chr - ' '; // 得到偏移后的值
 8005886:	797b      	ldrb	r3, [r7, #5]
 8005888:	3b20      	subs	r3, #32
 800588a:	73bb      	strb	r3, [r7, #14]
  if (x > 128 - 1)
 800588c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005890:	2b00      	cmp	r3, #0
 8005892:	da04      	bge.n	800589e <OLED_ShowChar+0x3e>
  {
    x = 0;
 8005894:	2300      	movs	r3, #0
 8005896:	71fb      	strb	r3, [r7, #7]
    y = y + 2;
 8005898:	79bb      	ldrb	r3, [r7, #6]
 800589a:	3302      	adds	r3, #2
 800589c:	71bb      	strb	r3, [r7, #6]
  }
  if (Char_Size == 16)
 800589e:	793b      	ldrb	r3, [r7, #4]
 80058a0:	2b10      	cmp	r3, #16
 80058a2:	d133      	bne.n	800590c <OLED_ShowChar+0xac>
  {
    OLED_Set_Pos(x, y);
 80058a4:	79ba      	ldrb	r2, [r7, #6]
 80058a6:	79fb      	ldrb	r3, [r7, #7]
 80058a8:	4611      	mov	r1, r2
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7ff ff33 	bl	8005716 <OLED_Set_Pos>
    for (i = 0; i < 8; i++)
 80058b0:	2300      	movs	r3, #0
 80058b2:	73fb      	strb	r3, [r7, #15]
 80058b4:	e00b      	b.n	80058ce <OLED_ShowChar+0x6e>
      OLED_WR_DATA(F8X16[c * 16 + i]);
 80058b6:	7bbb      	ldrb	r3, [r7, #14]
 80058b8:	011a      	lsls	r2, r3, #4
 80058ba:	7bfb      	ldrb	r3, [r7, #15]
 80058bc:	4413      	add	r3, r2
 80058be:	4a23      	ldr	r2, [pc, #140]	; (800594c <OLED_ShowChar+0xec>)
 80058c0:	5cd3      	ldrb	r3, [r2, r3]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7ff fedc 	bl	8005680 <OLED_WR_DATA>
    for (i = 0; i < 8; i++)
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
 80058ca:	3301      	adds	r3, #1
 80058cc:	73fb      	strb	r3, [r7, #15]
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
 80058d0:	2b07      	cmp	r3, #7
 80058d2:	d9f0      	bls.n	80058b6 <OLED_ShowChar+0x56>
    OLED_Set_Pos(x, y + 1);
 80058d4:	79bb      	ldrb	r3, [r7, #6]
 80058d6:	3301      	adds	r3, #1
 80058d8:	b2da      	uxtb	r2, r3
 80058da:	79fb      	ldrb	r3, [r7, #7]
 80058dc:	4611      	mov	r1, r2
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff ff19 	bl	8005716 <OLED_Set_Pos>
    for (i = 0; i < 8; i++)
 80058e4:	2300      	movs	r3, #0
 80058e6:	73fb      	strb	r3, [r7, #15]
 80058e8:	e00c      	b.n	8005904 <OLED_ShowChar+0xa4>
      OLED_WR_DATA(F8X16[c * 16 + i + 8]);
 80058ea:	7bbb      	ldrb	r3, [r7, #14]
 80058ec:	011a      	lsls	r2, r3, #4
 80058ee:	7bfb      	ldrb	r3, [r7, #15]
 80058f0:	4413      	add	r3, r2
 80058f2:	3308      	adds	r3, #8
 80058f4:	4a15      	ldr	r2, [pc, #84]	; (800594c <OLED_ShowChar+0xec>)
 80058f6:	5cd3      	ldrb	r3, [r2, r3]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7ff fec1 	bl	8005680 <OLED_WR_DATA>
    for (i = 0; i < 8; i++)
 80058fe:	7bfb      	ldrb	r3, [r7, #15]
 8005900:	3301      	adds	r3, #1
 8005902:	73fb      	strb	r3, [r7, #15]
 8005904:	7bfb      	ldrb	r3, [r7, #15]
 8005906:	2b07      	cmp	r3, #7
 8005908:	d9ef      	bls.n	80058ea <OLED_ShowChar+0x8a>
  {
    OLED_Set_Pos(x, y);
    for (i = 0; i < 6; i++)
      OLED_WR_DATA(F6x8[c][i]);
  }
}
 800590a:	e01b      	b.n	8005944 <OLED_ShowChar+0xe4>
    OLED_Set_Pos(x, y);
 800590c:	79ba      	ldrb	r2, [r7, #6]
 800590e:	79fb      	ldrb	r3, [r7, #7]
 8005910:	4611      	mov	r1, r2
 8005912:	4618      	mov	r0, r3
 8005914:	f7ff feff 	bl	8005716 <OLED_Set_Pos>
    for (i = 0; i < 6; i++)
 8005918:	2300      	movs	r3, #0
 800591a:	73fb      	strb	r3, [r7, #15]
 800591c:	e00f      	b.n	800593e <OLED_ShowChar+0xde>
      OLED_WR_DATA(F6x8[c][i]);
 800591e:	7bba      	ldrb	r2, [r7, #14]
 8005920:	7bf9      	ldrb	r1, [r7, #15]
 8005922:	480b      	ldr	r0, [pc, #44]	; (8005950 <OLED_ShowChar+0xf0>)
 8005924:	4613      	mov	r3, r2
 8005926:	005b      	lsls	r3, r3, #1
 8005928:	4413      	add	r3, r2
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	4403      	add	r3, r0
 800592e:	440b      	add	r3, r1
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	4618      	mov	r0, r3
 8005934:	f7ff fea4 	bl	8005680 <OLED_WR_DATA>
    for (i = 0; i < 6; i++)
 8005938:	7bfb      	ldrb	r3, [r7, #15]
 800593a:	3301      	adds	r3, #1
 800593c:	73fb      	strb	r3, [r7, #15]
 800593e:	7bfb      	ldrb	r3, [r7, #15]
 8005940:	2b05      	cmp	r3, #5
 8005942:	d9ec      	bls.n	800591e <OLED_ShowChar+0xbe>
}
 8005944:	bf00      	nop
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	bd90      	pop	{r4, r7, pc}
 800594c:	08006698 	.word	0x08006698
 8005950:	08006470 	.word	0x08006470

08005954 <OLED_ShowString>:

// 显示一个字符号串
void OLED_ShowString(uint8_t x, uint8_t y, uint8_t *chr, uint8_t Char_Size)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	603a      	str	r2, [r7, #0]
 800595c:	461a      	mov	r2, r3
 800595e:	4603      	mov	r3, r0
 8005960:	71fb      	strb	r3, [r7, #7]
 8005962:	460b      	mov	r3, r1
 8005964:	71bb      	strb	r3, [r7, #6]
 8005966:	4613      	mov	r3, r2
 8005968:	717b      	strb	r3, [r7, #5]
  unsigned char j = 0;
 800596a:	2300      	movs	r3, #0
 800596c:	73fb      	strb	r3, [r7, #15]
  while (chr[j] != '\0')
 800596e:	e016      	b.n	800599e <OLED_ShowString+0x4a>
  {
    OLED_ShowChar(x, y, chr[j], Char_Size);
 8005970:	7bfb      	ldrb	r3, [r7, #15]
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	4413      	add	r3, r2
 8005976:	781a      	ldrb	r2, [r3, #0]
 8005978:	797b      	ldrb	r3, [r7, #5]
 800597a:	79b9      	ldrb	r1, [r7, #6]
 800597c:	79f8      	ldrb	r0, [r7, #7]
 800597e:	f7ff ff6f 	bl	8005860 <OLED_ShowChar>
    x += 8;
 8005982:	79fb      	ldrb	r3, [r7, #7]
 8005984:	3308      	adds	r3, #8
 8005986:	71fb      	strb	r3, [r7, #7]
    if (x > 120)
 8005988:	79fb      	ldrb	r3, [r7, #7]
 800598a:	2b78      	cmp	r3, #120	; 0x78
 800598c:	d904      	bls.n	8005998 <OLED_ShowString+0x44>
    {
      x = 0;
 800598e:	2300      	movs	r3, #0
 8005990:	71fb      	strb	r3, [r7, #7]
      y += 2;
 8005992:	79bb      	ldrb	r3, [r7, #6]
 8005994:	3302      	adds	r3, #2
 8005996:	71bb      	strb	r3, [r7, #6]
    }
    j++;
 8005998:	7bfb      	ldrb	r3, [r7, #15]
 800599a:	3301      	adds	r3, #1
 800599c:	73fb      	strb	r3, [r7, #15]
  while (chr[j] != '\0')
 800599e:	7bfb      	ldrb	r3, [r7, #15]
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	4413      	add	r3, r2
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1e2      	bne.n	8005970 <OLED_ShowString+0x1c>
  }
}
 80059aa:	bf00      	nop
 80059ac:	bf00      	nop
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <std>:
 80059b4:	2300      	movs	r3, #0
 80059b6:	b510      	push	{r4, lr}
 80059b8:	4604      	mov	r4, r0
 80059ba:	e9c0 3300 	strd	r3, r3, [r0]
 80059be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059c2:	6083      	str	r3, [r0, #8]
 80059c4:	8181      	strh	r1, [r0, #12]
 80059c6:	6643      	str	r3, [r0, #100]	; 0x64
 80059c8:	81c2      	strh	r2, [r0, #14]
 80059ca:	6183      	str	r3, [r0, #24]
 80059cc:	4619      	mov	r1, r3
 80059ce:	2208      	movs	r2, #8
 80059d0:	305c      	adds	r0, #92	; 0x5c
 80059d2:	f000 f9ed 	bl	8005db0 <memset>
 80059d6:	4b0d      	ldr	r3, [pc, #52]	; (8005a0c <std+0x58>)
 80059d8:	6263      	str	r3, [r4, #36]	; 0x24
 80059da:	4b0d      	ldr	r3, [pc, #52]	; (8005a10 <std+0x5c>)
 80059dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80059de:	4b0d      	ldr	r3, [pc, #52]	; (8005a14 <std+0x60>)
 80059e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80059e2:	4b0d      	ldr	r3, [pc, #52]	; (8005a18 <std+0x64>)
 80059e4:	6323      	str	r3, [r4, #48]	; 0x30
 80059e6:	4b0d      	ldr	r3, [pc, #52]	; (8005a1c <std+0x68>)
 80059e8:	6224      	str	r4, [r4, #32]
 80059ea:	429c      	cmp	r4, r3
 80059ec:	d006      	beq.n	80059fc <std+0x48>
 80059ee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80059f2:	4294      	cmp	r4, r2
 80059f4:	d002      	beq.n	80059fc <std+0x48>
 80059f6:	33d0      	adds	r3, #208	; 0xd0
 80059f8:	429c      	cmp	r4, r3
 80059fa:	d105      	bne.n	8005a08 <std+0x54>
 80059fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a04:	f000 ba4c 	b.w	8005ea0 <__retarget_lock_init_recursive>
 8005a08:	bd10      	pop	{r4, pc}
 8005a0a:	bf00      	nop
 8005a0c:	08005c01 	.word	0x08005c01
 8005a10:	08005c23 	.word	0x08005c23
 8005a14:	08005c5b 	.word	0x08005c5b
 8005a18:	08005c7f 	.word	0x08005c7f
 8005a1c:	200002dc 	.word	0x200002dc

08005a20 <stdio_exit_handler>:
 8005a20:	4a02      	ldr	r2, [pc, #8]	; (8005a2c <stdio_exit_handler+0xc>)
 8005a22:	4903      	ldr	r1, [pc, #12]	; (8005a30 <stdio_exit_handler+0x10>)
 8005a24:	4803      	ldr	r0, [pc, #12]	; (8005a34 <stdio_exit_handler+0x14>)
 8005a26:	f000 b869 	b.w	8005afc <_fwalk_sglue>
 8005a2a:	bf00      	nop
 8005a2c:	20000028 	.word	0x20000028
 8005a30:	080061a5 	.word	0x080061a5
 8005a34:	20000034 	.word	0x20000034

08005a38 <cleanup_stdio>:
 8005a38:	6841      	ldr	r1, [r0, #4]
 8005a3a:	4b0c      	ldr	r3, [pc, #48]	; (8005a6c <cleanup_stdio+0x34>)
 8005a3c:	4299      	cmp	r1, r3
 8005a3e:	b510      	push	{r4, lr}
 8005a40:	4604      	mov	r4, r0
 8005a42:	d001      	beq.n	8005a48 <cleanup_stdio+0x10>
 8005a44:	f000 fbae 	bl	80061a4 <_fflush_r>
 8005a48:	68a1      	ldr	r1, [r4, #8]
 8005a4a:	4b09      	ldr	r3, [pc, #36]	; (8005a70 <cleanup_stdio+0x38>)
 8005a4c:	4299      	cmp	r1, r3
 8005a4e:	d002      	beq.n	8005a56 <cleanup_stdio+0x1e>
 8005a50:	4620      	mov	r0, r4
 8005a52:	f000 fba7 	bl	80061a4 <_fflush_r>
 8005a56:	68e1      	ldr	r1, [r4, #12]
 8005a58:	4b06      	ldr	r3, [pc, #24]	; (8005a74 <cleanup_stdio+0x3c>)
 8005a5a:	4299      	cmp	r1, r3
 8005a5c:	d004      	beq.n	8005a68 <cleanup_stdio+0x30>
 8005a5e:	4620      	mov	r0, r4
 8005a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a64:	f000 bb9e 	b.w	80061a4 <_fflush_r>
 8005a68:	bd10      	pop	{r4, pc}
 8005a6a:	bf00      	nop
 8005a6c:	200002dc 	.word	0x200002dc
 8005a70:	20000344 	.word	0x20000344
 8005a74:	200003ac 	.word	0x200003ac

08005a78 <global_stdio_init.part.0>:
 8005a78:	b510      	push	{r4, lr}
 8005a7a:	4b0b      	ldr	r3, [pc, #44]	; (8005aa8 <global_stdio_init.part.0+0x30>)
 8005a7c:	4c0b      	ldr	r4, [pc, #44]	; (8005aac <global_stdio_init.part.0+0x34>)
 8005a7e:	4a0c      	ldr	r2, [pc, #48]	; (8005ab0 <global_stdio_init.part.0+0x38>)
 8005a80:	601a      	str	r2, [r3, #0]
 8005a82:	4620      	mov	r0, r4
 8005a84:	2200      	movs	r2, #0
 8005a86:	2104      	movs	r1, #4
 8005a88:	f7ff ff94 	bl	80059b4 <std>
 8005a8c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005a90:	2201      	movs	r2, #1
 8005a92:	2109      	movs	r1, #9
 8005a94:	f7ff ff8e 	bl	80059b4 <std>
 8005a98:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005a9c:	2202      	movs	r2, #2
 8005a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005aa2:	2112      	movs	r1, #18
 8005aa4:	f7ff bf86 	b.w	80059b4 <std>
 8005aa8:	20000414 	.word	0x20000414
 8005aac:	200002dc 	.word	0x200002dc
 8005ab0:	08005a21 	.word	0x08005a21

08005ab4 <__sfp_lock_acquire>:
 8005ab4:	4801      	ldr	r0, [pc, #4]	; (8005abc <__sfp_lock_acquire+0x8>)
 8005ab6:	f000 b9f4 	b.w	8005ea2 <__retarget_lock_acquire_recursive>
 8005aba:	bf00      	nop
 8005abc:	2000041d 	.word	0x2000041d

08005ac0 <__sfp_lock_release>:
 8005ac0:	4801      	ldr	r0, [pc, #4]	; (8005ac8 <__sfp_lock_release+0x8>)
 8005ac2:	f000 b9ef 	b.w	8005ea4 <__retarget_lock_release_recursive>
 8005ac6:	bf00      	nop
 8005ac8:	2000041d 	.word	0x2000041d

08005acc <__sinit>:
 8005acc:	b510      	push	{r4, lr}
 8005ace:	4604      	mov	r4, r0
 8005ad0:	f7ff fff0 	bl	8005ab4 <__sfp_lock_acquire>
 8005ad4:	6a23      	ldr	r3, [r4, #32]
 8005ad6:	b11b      	cbz	r3, 8005ae0 <__sinit+0x14>
 8005ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005adc:	f7ff bff0 	b.w	8005ac0 <__sfp_lock_release>
 8005ae0:	4b04      	ldr	r3, [pc, #16]	; (8005af4 <__sinit+0x28>)
 8005ae2:	6223      	str	r3, [r4, #32]
 8005ae4:	4b04      	ldr	r3, [pc, #16]	; (8005af8 <__sinit+0x2c>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1f5      	bne.n	8005ad8 <__sinit+0xc>
 8005aec:	f7ff ffc4 	bl	8005a78 <global_stdio_init.part.0>
 8005af0:	e7f2      	b.n	8005ad8 <__sinit+0xc>
 8005af2:	bf00      	nop
 8005af4:	08005a39 	.word	0x08005a39
 8005af8:	20000414 	.word	0x20000414

08005afc <_fwalk_sglue>:
 8005afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b00:	4607      	mov	r7, r0
 8005b02:	4688      	mov	r8, r1
 8005b04:	4614      	mov	r4, r2
 8005b06:	2600      	movs	r6, #0
 8005b08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b0c:	f1b9 0901 	subs.w	r9, r9, #1
 8005b10:	d505      	bpl.n	8005b1e <_fwalk_sglue+0x22>
 8005b12:	6824      	ldr	r4, [r4, #0]
 8005b14:	2c00      	cmp	r4, #0
 8005b16:	d1f7      	bne.n	8005b08 <_fwalk_sglue+0xc>
 8005b18:	4630      	mov	r0, r6
 8005b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b1e:	89ab      	ldrh	r3, [r5, #12]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d907      	bls.n	8005b34 <_fwalk_sglue+0x38>
 8005b24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	d003      	beq.n	8005b34 <_fwalk_sglue+0x38>
 8005b2c:	4629      	mov	r1, r5
 8005b2e:	4638      	mov	r0, r7
 8005b30:	47c0      	blx	r8
 8005b32:	4306      	orrs	r6, r0
 8005b34:	3568      	adds	r5, #104	; 0x68
 8005b36:	e7e9      	b.n	8005b0c <_fwalk_sglue+0x10>

08005b38 <putchar>:
 8005b38:	4b02      	ldr	r3, [pc, #8]	; (8005b44 <putchar+0xc>)
 8005b3a:	4601      	mov	r1, r0
 8005b3c:	6818      	ldr	r0, [r3, #0]
 8005b3e:	6882      	ldr	r2, [r0, #8]
 8005b40:	f000 bbba 	b.w	80062b8 <_putc_r>
 8005b44:	20000080 	.word	0x20000080

08005b48 <_puts_r>:
 8005b48:	6a03      	ldr	r3, [r0, #32]
 8005b4a:	b570      	push	{r4, r5, r6, lr}
 8005b4c:	6884      	ldr	r4, [r0, #8]
 8005b4e:	4605      	mov	r5, r0
 8005b50:	460e      	mov	r6, r1
 8005b52:	b90b      	cbnz	r3, 8005b58 <_puts_r+0x10>
 8005b54:	f7ff ffba 	bl	8005acc <__sinit>
 8005b58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b5a:	07db      	lsls	r3, r3, #31
 8005b5c:	d405      	bmi.n	8005b6a <_puts_r+0x22>
 8005b5e:	89a3      	ldrh	r3, [r4, #12]
 8005b60:	0598      	lsls	r0, r3, #22
 8005b62:	d402      	bmi.n	8005b6a <_puts_r+0x22>
 8005b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b66:	f000 f99c 	bl	8005ea2 <__retarget_lock_acquire_recursive>
 8005b6a:	89a3      	ldrh	r3, [r4, #12]
 8005b6c:	0719      	lsls	r1, r3, #28
 8005b6e:	d513      	bpl.n	8005b98 <_puts_r+0x50>
 8005b70:	6923      	ldr	r3, [r4, #16]
 8005b72:	b18b      	cbz	r3, 8005b98 <_puts_r+0x50>
 8005b74:	3e01      	subs	r6, #1
 8005b76:	68a3      	ldr	r3, [r4, #8]
 8005b78:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	60a3      	str	r3, [r4, #8]
 8005b80:	b9e9      	cbnz	r1, 8005bbe <_puts_r+0x76>
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	da2e      	bge.n	8005be4 <_puts_r+0x9c>
 8005b86:	4622      	mov	r2, r4
 8005b88:	210a      	movs	r1, #10
 8005b8a:	4628      	mov	r0, r5
 8005b8c:	f000 f87b 	bl	8005c86 <__swbuf_r>
 8005b90:	3001      	adds	r0, #1
 8005b92:	d007      	beq.n	8005ba4 <_puts_r+0x5c>
 8005b94:	250a      	movs	r5, #10
 8005b96:	e007      	b.n	8005ba8 <_puts_r+0x60>
 8005b98:	4621      	mov	r1, r4
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	f000 f8b0 	bl	8005d00 <__swsetup_r>
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	d0e7      	beq.n	8005b74 <_puts_r+0x2c>
 8005ba4:	f04f 35ff 	mov.w	r5, #4294967295
 8005ba8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005baa:	07da      	lsls	r2, r3, #31
 8005bac:	d405      	bmi.n	8005bba <_puts_r+0x72>
 8005bae:	89a3      	ldrh	r3, [r4, #12]
 8005bb0:	059b      	lsls	r3, r3, #22
 8005bb2:	d402      	bmi.n	8005bba <_puts_r+0x72>
 8005bb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bb6:	f000 f975 	bl	8005ea4 <__retarget_lock_release_recursive>
 8005bba:	4628      	mov	r0, r5
 8005bbc:	bd70      	pop	{r4, r5, r6, pc}
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	da04      	bge.n	8005bcc <_puts_r+0x84>
 8005bc2:	69a2      	ldr	r2, [r4, #24]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	dc06      	bgt.n	8005bd6 <_puts_r+0x8e>
 8005bc8:	290a      	cmp	r1, #10
 8005bca:	d004      	beq.n	8005bd6 <_puts_r+0x8e>
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	1c5a      	adds	r2, r3, #1
 8005bd0:	6022      	str	r2, [r4, #0]
 8005bd2:	7019      	strb	r1, [r3, #0]
 8005bd4:	e7cf      	b.n	8005b76 <_puts_r+0x2e>
 8005bd6:	4622      	mov	r2, r4
 8005bd8:	4628      	mov	r0, r5
 8005bda:	f000 f854 	bl	8005c86 <__swbuf_r>
 8005bde:	3001      	adds	r0, #1
 8005be0:	d1c9      	bne.n	8005b76 <_puts_r+0x2e>
 8005be2:	e7df      	b.n	8005ba4 <_puts_r+0x5c>
 8005be4:	6823      	ldr	r3, [r4, #0]
 8005be6:	250a      	movs	r5, #10
 8005be8:	1c5a      	adds	r2, r3, #1
 8005bea:	6022      	str	r2, [r4, #0]
 8005bec:	701d      	strb	r5, [r3, #0]
 8005bee:	e7db      	b.n	8005ba8 <_puts_r+0x60>

08005bf0 <puts>:
 8005bf0:	4b02      	ldr	r3, [pc, #8]	; (8005bfc <puts+0xc>)
 8005bf2:	4601      	mov	r1, r0
 8005bf4:	6818      	ldr	r0, [r3, #0]
 8005bf6:	f7ff bfa7 	b.w	8005b48 <_puts_r>
 8005bfa:	bf00      	nop
 8005bfc:	20000080 	.word	0x20000080

08005c00 <__sread>:
 8005c00:	b510      	push	{r4, lr}
 8005c02:	460c      	mov	r4, r1
 8005c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c08:	f000 f8fc 	bl	8005e04 <_read_r>
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	bfab      	itete	ge
 8005c10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c12:	89a3      	ldrhlt	r3, [r4, #12]
 8005c14:	181b      	addge	r3, r3, r0
 8005c16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c1a:	bfac      	ite	ge
 8005c1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c1e:	81a3      	strhlt	r3, [r4, #12]
 8005c20:	bd10      	pop	{r4, pc}

08005c22 <__swrite>:
 8005c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c26:	461f      	mov	r7, r3
 8005c28:	898b      	ldrh	r3, [r1, #12]
 8005c2a:	05db      	lsls	r3, r3, #23
 8005c2c:	4605      	mov	r5, r0
 8005c2e:	460c      	mov	r4, r1
 8005c30:	4616      	mov	r6, r2
 8005c32:	d505      	bpl.n	8005c40 <__swrite+0x1e>
 8005c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c38:	2302      	movs	r3, #2
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f000 f8d0 	bl	8005de0 <_lseek_r>
 8005c40:	89a3      	ldrh	r3, [r4, #12]
 8005c42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c4a:	81a3      	strh	r3, [r4, #12]
 8005c4c:	4632      	mov	r2, r6
 8005c4e:	463b      	mov	r3, r7
 8005c50:	4628      	mov	r0, r5
 8005c52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c56:	f000 b8e7 	b.w	8005e28 <_write_r>

08005c5a <__sseek>:
 8005c5a:	b510      	push	{r4, lr}
 8005c5c:	460c      	mov	r4, r1
 8005c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c62:	f000 f8bd 	bl	8005de0 <_lseek_r>
 8005c66:	1c43      	adds	r3, r0, #1
 8005c68:	89a3      	ldrh	r3, [r4, #12]
 8005c6a:	bf15      	itete	ne
 8005c6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c76:	81a3      	strheq	r3, [r4, #12]
 8005c78:	bf18      	it	ne
 8005c7a:	81a3      	strhne	r3, [r4, #12]
 8005c7c:	bd10      	pop	{r4, pc}

08005c7e <__sclose>:
 8005c7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c82:	f000 b89d 	b.w	8005dc0 <_close_r>

08005c86 <__swbuf_r>:
 8005c86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c88:	460e      	mov	r6, r1
 8005c8a:	4614      	mov	r4, r2
 8005c8c:	4605      	mov	r5, r0
 8005c8e:	b118      	cbz	r0, 8005c98 <__swbuf_r+0x12>
 8005c90:	6a03      	ldr	r3, [r0, #32]
 8005c92:	b90b      	cbnz	r3, 8005c98 <__swbuf_r+0x12>
 8005c94:	f7ff ff1a 	bl	8005acc <__sinit>
 8005c98:	69a3      	ldr	r3, [r4, #24]
 8005c9a:	60a3      	str	r3, [r4, #8]
 8005c9c:	89a3      	ldrh	r3, [r4, #12]
 8005c9e:	071a      	lsls	r2, r3, #28
 8005ca0:	d525      	bpl.n	8005cee <__swbuf_r+0x68>
 8005ca2:	6923      	ldr	r3, [r4, #16]
 8005ca4:	b31b      	cbz	r3, 8005cee <__swbuf_r+0x68>
 8005ca6:	6823      	ldr	r3, [r4, #0]
 8005ca8:	6922      	ldr	r2, [r4, #16]
 8005caa:	1a98      	subs	r0, r3, r2
 8005cac:	6963      	ldr	r3, [r4, #20]
 8005cae:	b2f6      	uxtb	r6, r6
 8005cb0:	4283      	cmp	r3, r0
 8005cb2:	4637      	mov	r7, r6
 8005cb4:	dc04      	bgt.n	8005cc0 <__swbuf_r+0x3a>
 8005cb6:	4621      	mov	r1, r4
 8005cb8:	4628      	mov	r0, r5
 8005cba:	f000 fa73 	bl	80061a4 <_fflush_r>
 8005cbe:	b9e0      	cbnz	r0, 8005cfa <__swbuf_r+0x74>
 8005cc0:	68a3      	ldr	r3, [r4, #8]
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	60a3      	str	r3, [r4, #8]
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	1c5a      	adds	r2, r3, #1
 8005cca:	6022      	str	r2, [r4, #0]
 8005ccc:	701e      	strb	r6, [r3, #0]
 8005cce:	6962      	ldr	r2, [r4, #20]
 8005cd0:	1c43      	adds	r3, r0, #1
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d004      	beq.n	8005ce0 <__swbuf_r+0x5a>
 8005cd6:	89a3      	ldrh	r3, [r4, #12]
 8005cd8:	07db      	lsls	r3, r3, #31
 8005cda:	d506      	bpl.n	8005cea <__swbuf_r+0x64>
 8005cdc:	2e0a      	cmp	r6, #10
 8005cde:	d104      	bne.n	8005cea <__swbuf_r+0x64>
 8005ce0:	4621      	mov	r1, r4
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	f000 fa5e 	bl	80061a4 <_fflush_r>
 8005ce8:	b938      	cbnz	r0, 8005cfa <__swbuf_r+0x74>
 8005cea:	4638      	mov	r0, r7
 8005cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cee:	4621      	mov	r1, r4
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	f000 f805 	bl	8005d00 <__swsetup_r>
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	d0d5      	beq.n	8005ca6 <__swbuf_r+0x20>
 8005cfa:	f04f 37ff 	mov.w	r7, #4294967295
 8005cfe:	e7f4      	b.n	8005cea <__swbuf_r+0x64>

08005d00 <__swsetup_r>:
 8005d00:	b538      	push	{r3, r4, r5, lr}
 8005d02:	4b2a      	ldr	r3, [pc, #168]	; (8005dac <__swsetup_r+0xac>)
 8005d04:	4605      	mov	r5, r0
 8005d06:	6818      	ldr	r0, [r3, #0]
 8005d08:	460c      	mov	r4, r1
 8005d0a:	b118      	cbz	r0, 8005d14 <__swsetup_r+0x14>
 8005d0c:	6a03      	ldr	r3, [r0, #32]
 8005d0e:	b90b      	cbnz	r3, 8005d14 <__swsetup_r+0x14>
 8005d10:	f7ff fedc 	bl	8005acc <__sinit>
 8005d14:	89a3      	ldrh	r3, [r4, #12]
 8005d16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d1a:	0718      	lsls	r0, r3, #28
 8005d1c:	d422      	bmi.n	8005d64 <__swsetup_r+0x64>
 8005d1e:	06d9      	lsls	r1, r3, #27
 8005d20:	d407      	bmi.n	8005d32 <__swsetup_r+0x32>
 8005d22:	2309      	movs	r3, #9
 8005d24:	602b      	str	r3, [r5, #0]
 8005d26:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d2a:	81a3      	strh	r3, [r4, #12]
 8005d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d30:	e034      	b.n	8005d9c <__swsetup_r+0x9c>
 8005d32:	0758      	lsls	r0, r3, #29
 8005d34:	d512      	bpl.n	8005d5c <__swsetup_r+0x5c>
 8005d36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d38:	b141      	cbz	r1, 8005d4c <__swsetup_r+0x4c>
 8005d3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d3e:	4299      	cmp	r1, r3
 8005d40:	d002      	beq.n	8005d48 <__swsetup_r+0x48>
 8005d42:	4628      	mov	r0, r5
 8005d44:	f000 f8b0 	bl	8005ea8 <_free_r>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	6363      	str	r3, [r4, #52]	; 0x34
 8005d4c:	89a3      	ldrh	r3, [r4, #12]
 8005d4e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d52:	81a3      	strh	r3, [r4, #12]
 8005d54:	2300      	movs	r3, #0
 8005d56:	6063      	str	r3, [r4, #4]
 8005d58:	6923      	ldr	r3, [r4, #16]
 8005d5a:	6023      	str	r3, [r4, #0]
 8005d5c:	89a3      	ldrh	r3, [r4, #12]
 8005d5e:	f043 0308 	orr.w	r3, r3, #8
 8005d62:	81a3      	strh	r3, [r4, #12]
 8005d64:	6923      	ldr	r3, [r4, #16]
 8005d66:	b94b      	cbnz	r3, 8005d7c <__swsetup_r+0x7c>
 8005d68:	89a3      	ldrh	r3, [r4, #12]
 8005d6a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d72:	d003      	beq.n	8005d7c <__swsetup_r+0x7c>
 8005d74:	4621      	mov	r1, r4
 8005d76:	4628      	mov	r0, r5
 8005d78:	f000 fa62 	bl	8006240 <__smakebuf_r>
 8005d7c:	89a0      	ldrh	r0, [r4, #12]
 8005d7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d82:	f010 0301 	ands.w	r3, r0, #1
 8005d86:	d00a      	beq.n	8005d9e <__swsetup_r+0x9e>
 8005d88:	2300      	movs	r3, #0
 8005d8a:	60a3      	str	r3, [r4, #8]
 8005d8c:	6963      	ldr	r3, [r4, #20]
 8005d8e:	425b      	negs	r3, r3
 8005d90:	61a3      	str	r3, [r4, #24]
 8005d92:	6923      	ldr	r3, [r4, #16]
 8005d94:	b943      	cbnz	r3, 8005da8 <__swsetup_r+0xa8>
 8005d96:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d9a:	d1c4      	bne.n	8005d26 <__swsetup_r+0x26>
 8005d9c:	bd38      	pop	{r3, r4, r5, pc}
 8005d9e:	0781      	lsls	r1, r0, #30
 8005da0:	bf58      	it	pl
 8005da2:	6963      	ldrpl	r3, [r4, #20]
 8005da4:	60a3      	str	r3, [r4, #8]
 8005da6:	e7f4      	b.n	8005d92 <__swsetup_r+0x92>
 8005da8:	2000      	movs	r0, #0
 8005daa:	e7f7      	b.n	8005d9c <__swsetup_r+0x9c>
 8005dac:	20000080 	.word	0x20000080

08005db0 <memset>:
 8005db0:	4402      	add	r2, r0
 8005db2:	4603      	mov	r3, r0
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d100      	bne.n	8005dba <memset+0xa>
 8005db8:	4770      	bx	lr
 8005dba:	f803 1b01 	strb.w	r1, [r3], #1
 8005dbe:	e7f9      	b.n	8005db4 <memset+0x4>

08005dc0 <_close_r>:
 8005dc0:	b538      	push	{r3, r4, r5, lr}
 8005dc2:	4d06      	ldr	r5, [pc, #24]	; (8005ddc <_close_r+0x1c>)
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	4608      	mov	r0, r1
 8005dca:	602b      	str	r3, [r5, #0]
 8005dcc:	f7fa fec3 	bl	8000b56 <_close>
 8005dd0:	1c43      	adds	r3, r0, #1
 8005dd2:	d102      	bne.n	8005dda <_close_r+0x1a>
 8005dd4:	682b      	ldr	r3, [r5, #0]
 8005dd6:	b103      	cbz	r3, 8005dda <_close_r+0x1a>
 8005dd8:	6023      	str	r3, [r4, #0]
 8005dda:	bd38      	pop	{r3, r4, r5, pc}
 8005ddc:	20000418 	.word	0x20000418

08005de0 <_lseek_r>:
 8005de0:	b538      	push	{r3, r4, r5, lr}
 8005de2:	4d07      	ldr	r5, [pc, #28]	; (8005e00 <_lseek_r+0x20>)
 8005de4:	4604      	mov	r4, r0
 8005de6:	4608      	mov	r0, r1
 8005de8:	4611      	mov	r1, r2
 8005dea:	2200      	movs	r2, #0
 8005dec:	602a      	str	r2, [r5, #0]
 8005dee:	461a      	mov	r2, r3
 8005df0:	f7fa fed8 	bl	8000ba4 <_lseek>
 8005df4:	1c43      	adds	r3, r0, #1
 8005df6:	d102      	bne.n	8005dfe <_lseek_r+0x1e>
 8005df8:	682b      	ldr	r3, [r5, #0]
 8005dfa:	b103      	cbz	r3, 8005dfe <_lseek_r+0x1e>
 8005dfc:	6023      	str	r3, [r4, #0]
 8005dfe:	bd38      	pop	{r3, r4, r5, pc}
 8005e00:	20000418 	.word	0x20000418

08005e04 <_read_r>:
 8005e04:	b538      	push	{r3, r4, r5, lr}
 8005e06:	4d07      	ldr	r5, [pc, #28]	; (8005e24 <_read_r+0x20>)
 8005e08:	4604      	mov	r4, r0
 8005e0a:	4608      	mov	r0, r1
 8005e0c:	4611      	mov	r1, r2
 8005e0e:	2200      	movs	r2, #0
 8005e10:	602a      	str	r2, [r5, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	f7fa fe66 	bl	8000ae4 <_read>
 8005e18:	1c43      	adds	r3, r0, #1
 8005e1a:	d102      	bne.n	8005e22 <_read_r+0x1e>
 8005e1c:	682b      	ldr	r3, [r5, #0]
 8005e1e:	b103      	cbz	r3, 8005e22 <_read_r+0x1e>
 8005e20:	6023      	str	r3, [r4, #0]
 8005e22:	bd38      	pop	{r3, r4, r5, pc}
 8005e24:	20000418 	.word	0x20000418

08005e28 <_write_r>:
 8005e28:	b538      	push	{r3, r4, r5, lr}
 8005e2a:	4d07      	ldr	r5, [pc, #28]	; (8005e48 <_write_r+0x20>)
 8005e2c:	4604      	mov	r4, r0
 8005e2e:	4608      	mov	r0, r1
 8005e30:	4611      	mov	r1, r2
 8005e32:	2200      	movs	r2, #0
 8005e34:	602a      	str	r2, [r5, #0]
 8005e36:	461a      	mov	r2, r3
 8005e38:	f7fa fe71 	bl	8000b1e <_write>
 8005e3c:	1c43      	adds	r3, r0, #1
 8005e3e:	d102      	bne.n	8005e46 <_write_r+0x1e>
 8005e40:	682b      	ldr	r3, [r5, #0]
 8005e42:	b103      	cbz	r3, 8005e46 <_write_r+0x1e>
 8005e44:	6023      	str	r3, [r4, #0]
 8005e46:	bd38      	pop	{r3, r4, r5, pc}
 8005e48:	20000418 	.word	0x20000418

08005e4c <__errno>:
 8005e4c:	4b01      	ldr	r3, [pc, #4]	; (8005e54 <__errno+0x8>)
 8005e4e:	6818      	ldr	r0, [r3, #0]
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	20000080 	.word	0x20000080

08005e58 <__libc_init_array>:
 8005e58:	b570      	push	{r4, r5, r6, lr}
 8005e5a:	4d0d      	ldr	r5, [pc, #52]	; (8005e90 <__libc_init_array+0x38>)
 8005e5c:	4c0d      	ldr	r4, [pc, #52]	; (8005e94 <__libc_init_array+0x3c>)
 8005e5e:	1b64      	subs	r4, r4, r5
 8005e60:	10a4      	asrs	r4, r4, #2
 8005e62:	2600      	movs	r6, #0
 8005e64:	42a6      	cmp	r6, r4
 8005e66:	d109      	bne.n	8005e7c <__libc_init_array+0x24>
 8005e68:	4d0b      	ldr	r5, [pc, #44]	; (8005e98 <__libc_init_array+0x40>)
 8005e6a:	4c0c      	ldr	r4, [pc, #48]	; (8005e9c <__libc_init_array+0x44>)
 8005e6c:	f000 fa8a 	bl	8006384 <_init>
 8005e70:	1b64      	subs	r4, r4, r5
 8005e72:	10a4      	asrs	r4, r4, #2
 8005e74:	2600      	movs	r6, #0
 8005e76:	42a6      	cmp	r6, r4
 8005e78:	d105      	bne.n	8005e86 <__libc_init_array+0x2e>
 8005e7a:	bd70      	pop	{r4, r5, r6, pc}
 8005e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e80:	4798      	blx	r3
 8005e82:	3601      	adds	r6, #1
 8005e84:	e7ee      	b.n	8005e64 <__libc_init_array+0xc>
 8005e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e8a:	4798      	blx	r3
 8005e8c:	3601      	adds	r6, #1
 8005e8e:	e7f2      	b.n	8005e76 <__libc_init_array+0x1e>
 8005e90:	08006c80 	.word	0x08006c80
 8005e94:	08006c80 	.word	0x08006c80
 8005e98:	08006c80 	.word	0x08006c80
 8005e9c:	08006c84 	.word	0x08006c84

08005ea0 <__retarget_lock_init_recursive>:
 8005ea0:	4770      	bx	lr

08005ea2 <__retarget_lock_acquire_recursive>:
 8005ea2:	4770      	bx	lr

08005ea4 <__retarget_lock_release_recursive>:
 8005ea4:	4770      	bx	lr
	...

08005ea8 <_free_r>:
 8005ea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005eaa:	2900      	cmp	r1, #0
 8005eac:	d044      	beq.n	8005f38 <_free_r+0x90>
 8005eae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005eb2:	9001      	str	r0, [sp, #4]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f1a1 0404 	sub.w	r4, r1, #4
 8005eba:	bfb8      	it	lt
 8005ebc:	18e4      	addlt	r4, r4, r3
 8005ebe:	f000 f8df 	bl	8006080 <__malloc_lock>
 8005ec2:	4a1e      	ldr	r2, [pc, #120]	; (8005f3c <_free_r+0x94>)
 8005ec4:	9801      	ldr	r0, [sp, #4]
 8005ec6:	6813      	ldr	r3, [r2, #0]
 8005ec8:	b933      	cbnz	r3, 8005ed8 <_free_r+0x30>
 8005eca:	6063      	str	r3, [r4, #4]
 8005ecc:	6014      	str	r4, [r2, #0]
 8005ece:	b003      	add	sp, #12
 8005ed0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ed4:	f000 b8da 	b.w	800608c <__malloc_unlock>
 8005ed8:	42a3      	cmp	r3, r4
 8005eda:	d908      	bls.n	8005eee <_free_r+0x46>
 8005edc:	6825      	ldr	r5, [r4, #0]
 8005ede:	1961      	adds	r1, r4, r5
 8005ee0:	428b      	cmp	r3, r1
 8005ee2:	bf01      	itttt	eq
 8005ee4:	6819      	ldreq	r1, [r3, #0]
 8005ee6:	685b      	ldreq	r3, [r3, #4]
 8005ee8:	1949      	addeq	r1, r1, r5
 8005eea:	6021      	streq	r1, [r4, #0]
 8005eec:	e7ed      	b.n	8005eca <_free_r+0x22>
 8005eee:	461a      	mov	r2, r3
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	b10b      	cbz	r3, 8005ef8 <_free_r+0x50>
 8005ef4:	42a3      	cmp	r3, r4
 8005ef6:	d9fa      	bls.n	8005eee <_free_r+0x46>
 8005ef8:	6811      	ldr	r1, [r2, #0]
 8005efa:	1855      	adds	r5, r2, r1
 8005efc:	42a5      	cmp	r5, r4
 8005efe:	d10b      	bne.n	8005f18 <_free_r+0x70>
 8005f00:	6824      	ldr	r4, [r4, #0]
 8005f02:	4421      	add	r1, r4
 8005f04:	1854      	adds	r4, r2, r1
 8005f06:	42a3      	cmp	r3, r4
 8005f08:	6011      	str	r1, [r2, #0]
 8005f0a:	d1e0      	bne.n	8005ece <_free_r+0x26>
 8005f0c:	681c      	ldr	r4, [r3, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	6053      	str	r3, [r2, #4]
 8005f12:	440c      	add	r4, r1
 8005f14:	6014      	str	r4, [r2, #0]
 8005f16:	e7da      	b.n	8005ece <_free_r+0x26>
 8005f18:	d902      	bls.n	8005f20 <_free_r+0x78>
 8005f1a:	230c      	movs	r3, #12
 8005f1c:	6003      	str	r3, [r0, #0]
 8005f1e:	e7d6      	b.n	8005ece <_free_r+0x26>
 8005f20:	6825      	ldr	r5, [r4, #0]
 8005f22:	1961      	adds	r1, r4, r5
 8005f24:	428b      	cmp	r3, r1
 8005f26:	bf04      	itt	eq
 8005f28:	6819      	ldreq	r1, [r3, #0]
 8005f2a:	685b      	ldreq	r3, [r3, #4]
 8005f2c:	6063      	str	r3, [r4, #4]
 8005f2e:	bf04      	itt	eq
 8005f30:	1949      	addeq	r1, r1, r5
 8005f32:	6021      	streq	r1, [r4, #0]
 8005f34:	6054      	str	r4, [r2, #4]
 8005f36:	e7ca      	b.n	8005ece <_free_r+0x26>
 8005f38:	b003      	add	sp, #12
 8005f3a:	bd30      	pop	{r4, r5, pc}
 8005f3c:	20000420 	.word	0x20000420

08005f40 <sbrk_aligned>:
 8005f40:	b570      	push	{r4, r5, r6, lr}
 8005f42:	4e0e      	ldr	r6, [pc, #56]	; (8005f7c <sbrk_aligned+0x3c>)
 8005f44:	460c      	mov	r4, r1
 8005f46:	6831      	ldr	r1, [r6, #0]
 8005f48:	4605      	mov	r5, r0
 8005f4a:	b911      	cbnz	r1, 8005f52 <sbrk_aligned+0x12>
 8005f4c:	f000 fa0a 	bl	8006364 <_sbrk_r>
 8005f50:	6030      	str	r0, [r6, #0]
 8005f52:	4621      	mov	r1, r4
 8005f54:	4628      	mov	r0, r5
 8005f56:	f000 fa05 	bl	8006364 <_sbrk_r>
 8005f5a:	1c43      	adds	r3, r0, #1
 8005f5c:	d00a      	beq.n	8005f74 <sbrk_aligned+0x34>
 8005f5e:	1cc4      	adds	r4, r0, #3
 8005f60:	f024 0403 	bic.w	r4, r4, #3
 8005f64:	42a0      	cmp	r0, r4
 8005f66:	d007      	beq.n	8005f78 <sbrk_aligned+0x38>
 8005f68:	1a21      	subs	r1, r4, r0
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	f000 f9fa 	bl	8006364 <_sbrk_r>
 8005f70:	3001      	adds	r0, #1
 8005f72:	d101      	bne.n	8005f78 <sbrk_aligned+0x38>
 8005f74:	f04f 34ff 	mov.w	r4, #4294967295
 8005f78:	4620      	mov	r0, r4
 8005f7a:	bd70      	pop	{r4, r5, r6, pc}
 8005f7c:	20000424 	.word	0x20000424

08005f80 <_malloc_r>:
 8005f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f84:	1ccd      	adds	r5, r1, #3
 8005f86:	f025 0503 	bic.w	r5, r5, #3
 8005f8a:	3508      	adds	r5, #8
 8005f8c:	2d0c      	cmp	r5, #12
 8005f8e:	bf38      	it	cc
 8005f90:	250c      	movcc	r5, #12
 8005f92:	2d00      	cmp	r5, #0
 8005f94:	4607      	mov	r7, r0
 8005f96:	db01      	blt.n	8005f9c <_malloc_r+0x1c>
 8005f98:	42a9      	cmp	r1, r5
 8005f9a:	d905      	bls.n	8005fa8 <_malloc_r+0x28>
 8005f9c:	230c      	movs	r3, #12
 8005f9e:	603b      	str	r3, [r7, #0]
 8005fa0:	2600      	movs	r6, #0
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fa8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800607c <_malloc_r+0xfc>
 8005fac:	f000 f868 	bl	8006080 <__malloc_lock>
 8005fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8005fb4:	461c      	mov	r4, r3
 8005fb6:	bb5c      	cbnz	r4, 8006010 <_malloc_r+0x90>
 8005fb8:	4629      	mov	r1, r5
 8005fba:	4638      	mov	r0, r7
 8005fbc:	f7ff ffc0 	bl	8005f40 <sbrk_aligned>
 8005fc0:	1c43      	adds	r3, r0, #1
 8005fc2:	4604      	mov	r4, r0
 8005fc4:	d155      	bne.n	8006072 <_malloc_r+0xf2>
 8005fc6:	f8d8 4000 	ldr.w	r4, [r8]
 8005fca:	4626      	mov	r6, r4
 8005fcc:	2e00      	cmp	r6, #0
 8005fce:	d145      	bne.n	800605c <_malloc_r+0xdc>
 8005fd0:	2c00      	cmp	r4, #0
 8005fd2:	d048      	beq.n	8006066 <_malloc_r+0xe6>
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	4631      	mov	r1, r6
 8005fd8:	4638      	mov	r0, r7
 8005fda:	eb04 0903 	add.w	r9, r4, r3
 8005fde:	f000 f9c1 	bl	8006364 <_sbrk_r>
 8005fe2:	4581      	cmp	r9, r0
 8005fe4:	d13f      	bne.n	8006066 <_malloc_r+0xe6>
 8005fe6:	6821      	ldr	r1, [r4, #0]
 8005fe8:	1a6d      	subs	r5, r5, r1
 8005fea:	4629      	mov	r1, r5
 8005fec:	4638      	mov	r0, r7
 8005fee:	f7ff ffa7 	bl	8005f40 <sbrk_aligned>
 8005ff2:	3001      	adds	r0, #1
 8005ff4:	d037      	beq.n	8006066 <_malloc_r+0xe6>
 8005ff6:	6823      	ldr	r3, [r4, #0]
 8005ff8:	442b      	add	r3, r5
 8005ffa:	6023      	str	r3, [r4, #0]
 8005ffc:	f8d8 3000 	ldr.w	r3, [r8]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d038      	beq.n	8006076 <_malloc_r+0xf6>
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	42a2      	cmp	r2, r4
 8006008:	d12b      	bne.n	8006062 <_malloc_r+0xe2>
 800600a:	2200      	movs	r2, #0
 800600c:	605a      	str	r2, [r3, #4]
 800600e:	e00f      	b.n	8006030 <_malloc_r+0xb0>
 8006010:	6822      	ldr	r2, [r4, #0]
 8006012:	1b52      	subs	r2, r2, r5
 8006014:	d41f      	bmi.n	8006056 <_malloc_r+0xd6>
 8006016:	2a0b      	cmp	r2, #11
 8006018:	d917      	bls.n	800604a <_malloc_r+0xca>
 800601a:	1961      	adds	r1, r4, r5
 800601c:	42a3      	cmp	r3, r4
 800601e:	6025      	str	r5, [r4, #0]
 8006020:	bf18      	it	ne
 8006022:	6059      	strne	r1, [r3, #4]
 8006024:	6863      	ldr	r3, [r4, #4]
 8006026:	bf08      	it	eq
 8006028:	f8c8 1000 	streq.w	r1, [r8]
 800602c:	5162      	str	r2, [r4, r5]
 800602e:	604b      	str	r3, [r1, #4]
 8006030:	4638      	mov	r0, r7
 8006032:	f104 060b 	add.w	r6, r4, #11
 8006036:	f000 f829 	bl	800608c <__malloc_unlock>
 800603a:	f026 0607 	bic.w	r6, r6, #7
 800603e:	1d23      	adds	r3, r4, #4
 8006040:	1af2      	subs	r2, r6, r3
 8006042:	d0ae      	beq.n	8005fa2 <_malloc_r+0x22>
 8006044:	1b9b      	subs	r3, r3, r6
 8006046:	50a3      	str	r3, [r4, r2]
 8006048:	e7ab      	b.n	8005fa2 <_malloc_r+0x22>
 800604a:	42a3      	cmp	r3, r4
 800604c:	6862      	ldr	r2, [r4, #4]
 800604e:	d1dd      	bne.n	800600c <_malloc_r+0x8c>
 8006050:	f8c8 2000 	str.w	r2, [r8]
 8006054:	e7ec      	b.n	8006030 <_malloc_r+0xb0>
 8006056:	4623      	mov	r3, r4
 8006058:	6864      	ldr	r4, [r4, #4]
 800605a:	e7ac      	b.n	8005fb6 <_malloc_r+0x36>
 800605c:	4634      	mov	r4, r6
 800605e:	6876      	ldr	r6, [r6, #4]
 8006060:	e7b4      	b.n	8005fcc <_malloc_r+0x4c>
 8006062:	4613      	mov	r3, r2
 8006064:	e7cc      	b.n	8006000 <_malloc_r+0x80>
 8006066:	230c      	movs	r3, #12
 8006068:	603b      	str	r3, [r7, #0]
 800606a:	4638      	mov	r0, r7
 800606c:	f000 f80e 	bl	800608c <__malloc_unlock>
 8006070:	e797      	b.n	8005fa2 <_malloc_r+0x22>
 8006072:	6025      	str	r5, [r4, #0]
 8006074:	e7dc      	b.n	8006030 <_malloc_r+0xb0>
 8006076:	605b      	str	r3, [r3, #4]
 8006078:	deff      	udf	#255	; 0xff
 800607a:	bf00      	nop
 800607c:	20000420 	.word	0x20000420

08006080 <__malloc_lock>:
 8006080:	4801      	ldr	r0, [pc, #4]	; (8006088 <__malloc_lock+0x8>)
 8006082:	f7ff bf0e 	b.w	8005ea2 <__retarget_lock_acquire_recursive>
 8006086:	bf00      	nop
 8006088:	2000041c 	.word	0x2000041c

0800608c <__malloc_unlock>:
 800608c:	4801      	ldr	r0, [pc, #4]	; (8006094 <__malloc_unlock+0x8>)
 800608e:	f7ff bf09 	b.w	8005ea4 <__retarget_lock_release_recursive>
 8006092:	bf00      	nop
 8006094:	2000041c 	.word	0x2000041c

08006098 <__sflush_r>:
 8006098:	898a      	ldrh	r2, [r1, #12]
 800609a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800609e:	4605      	mov	r5, r0
 80060a0:	0710      	lsls	r0, r2, #28
 80060a2:	460c      	mov	r4, r1
 80060a4:	d458      	bmi.n	8006158 <__sflush_r+0xc0>
 80060a6:	684b      	ldr	r3, [r1, #4]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	dc05      	bgt.n	80060b8 <__sflush_r+0x20>
 80060ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	dc02      	bgt.n	80060b8 <__sflush_r+0x20>
 80060b2:	2000      	movs	r0, #0
 80060b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060ba:	2e00      	cmp	r6, #0
 80060bc:	d0f9      	beq.n	80060b2 <__sflush_r+0x1a>
 80060be:	2300      	movs	r3, #0
 80060c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80060c4:	682f      	ldr	r7, [r5, #0]
 80060c6:	6a21      	ldr	r1, [r4, #32]
 80060c8:	602b      	str	r3, [r5, #0]
 80060ca:	d032      	beq.n	8006132 <__sflush_r+0x9a>
 80060cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80060ce:	89a3      	ldrh	r3, [r4, #12]
 80060d0:	075a      	lsls	r2, r3, #29
 80060d2:	d505      	bpl.n	80060e0 <__sflush_r+0x48>
 80060d4:	6863      	ldr	r3, [r4, #4]
 80060d6:	1ac0      	subs	r0, r0, r3
 80060d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060da:	b10b      	cbz	r3, 80060e0 <__sflush_r+0x48>
 80060dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060de:	1ac0      	subs	r0, r0, r3
 80060e0:	2300      	movs	r3, #0
 80060e2:	4602      	mov	r2, r0
 80060e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060e6:	6a21      	ldr	r1, [r4, #32]
 80060e8:	4628      	mov	r0, r5
 80060ea:	47b0      	blx	r6
 80060ec:	1c43      	adds	r3, r0, #1
 80060ee:	89a3      	ldrh	r3, [r4, #12]
 80060f0:	d106      	bne.n	8006100 <__sflush_r+0x68>
 80060f2:	6829      	ldr	r1, [r5, #0]
 80060f4:	291d      	cmp	r1, #29
 80060f6:	d82b      	bhi.n	8006150 <__sflush_r+0xb8>
 80060f8:	4a29      	ldr	r2, [pc, #164]	; (80061a0 <__sflush_r+0x108>)
 80060fa:	410a      	asrs	r2, r1
 80060fc:	07d6      	lsls	r6, r2, #31
 80060fe:	d427      	bmi.n	8006150 <__sflush_r+0xb8>
 8006100:	2200      	movs	r2, #0
 8006102:	6062      	str	r2, [r4, #4]
 8006104:	04d9      	lsls	r1, r3, #19
 8006106:	6922      	ldr	r2, [r4, #16]
 8006108:	6022      	str	r2, [r4, #0]
 800610a:	d504      	bpl.n	8006116 <__sflush_r+0x7e>
 800610c:	1c42      	adds	r2, r0, #1
 800610e:	d101      	bne.n	8006114 <__sflush_r+0x7c>
 8006110:	682b      	ldr	r3, [r5, #0]
 8006112:	b903      	cbnz	r3, 8006116 <__sflush_r+0x7e>
 8006114:	6560      	str	r0, [r4, #84]	; 0x54
 8006116:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006118:	602f      	str	r7, [r5, #0]
 800611a:	2900      	cmp	r1, #0
 800611c:	d0c9      	beq.n	80060b2 <__sflush_r+0x1a>
 800611e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006122:	4299      	cmp	r1, r3
 8006124:	d002      	beq.n	800612c <__sflush_r+0x94>
 8006126:	4628      	mov	r0, r5
 8006128:	f7ff febe 	bl	8005ea8 <_free_r>
 800612c:	2000      	movs	r0, #0
 800612e:	6360      	str	r0, [r4, #52]	; 0x34
 8006130:	e7c0      	b.n	80060b4 <__sflush_r+0x1c>
 8006132:	2301      	movs	r3, #1
 8006134:	4628      	mov	r0, r5
 8006136:	47b0      	blx	r6
 8006138:	1c41      	adds	r1, r0, #1
 800613a:	d1c8      	bne.n	80060ce <__sflush_r+0x36>
 800613c:	682b      	ldr	r3, [r5, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d0c5      	beq.n	80060ce <__sflush_r+0x36>
 8006142:	2b1d      	cmp	r3, #29
 8006144:	d001      	beq.n	800614a <__sflush_r+0xb2>
 8006146:	2b16      	cmp	r3, #22
 8006148:	d101      	bne.n	800614e <__sflush_r+0xb6>
 800614a:	602f      	str	r7, [r5, #0]
 800614c:	e7b1      	b.n	80060b2 <__sflush_r+0x1a>
 800614e:	89a3      	ldrh	r3, [r4, #12]
 8006150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006154:	81a3      	strh	r3, [r4, #12]
 8006156:	e7ad      	b.n	80060b4 <__sflush_r+0x1c>
 8006158:	690f      	ldr	r7, [r1, #16]
 800615a:	2f00      	cmp	r7, #0
 800615c:	d0a9      	beq.n	80060b2 <__sflush_r+0x1a>
 800615e:	0793      	lsls	r3, r2, #30
 8006160:	680e      	ldr	r6, [r1, #0]
 8006162:	bf08      	it	eq
 8006164:	694b      	ldreq	r3, [r1, #20]
 8006166:	600f      	str	r7, [r1, #0]
 8006168:	bf18      	it	ne
 800616a:	2300      	movne	r3, #0
 800616c:	eba6 0807 	sub.w	r8, r6, r7
 8006170:	608b      	str	r3, [r1, #8]
 8006172:	f1b8 0f00 	cmp.w	r8, #0
 8006176:	dd9c      	ble.n	80060b2 <__sflush_r+0x1a>
 8006178:	6a21      	ldr	r1, [r4, #32]
 800617a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800617c:	4643      	mov	r3, r8
 800617e:	463a      	mov	r2, r7
 8006180:	4628      	mov	r0, r5
 8006182:	47b0      	blx	r6
 8006184:	2800      	cmp	r0, #0
 8006186:	dc06      	bgt.n	8006196 <__sflush_r+0xfe>
 8006188:	89a3      	ldrh	r3, [r4, #12]
 800618a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800618e:	81a3      	strh	r3, [r4, #12]
 8006190:	f04f 30ff 	mov.w	r0, #4294967295
 8006194:	e78e      	b.n	80060b4 <__sflush_r+0x1c>
 8006196:	4407      	add	r7, r0
 8006198:	eba8 0800 	sub.w	r8, r8, r0
 800619c:	e7e9      	b.n	8006172 <__sflush_r+0xda>
 800619e:	bf00      	nop
 80061a0:	dfbffffe 	.word	0xdfbffffe

080061a4 <_fflush_r>:
 80061a4:	b538      	push	{r3, r4, r5, lr}
 80061a6:	690b      	ldr	r3, [r1, #16]
 80061a8:	4605      	mov	r5, r0
 80061aa:	460c      	mov	r4, r1
 80061ac:	b913      	cbnz	r3, 80061b4 <_fflush_r+0x10>
 80061ae:	2500      	movs	r5, #0
 80061b0:	4628      	mov	r0, r5
 80061b2:	bd38      	pop	{r3, r4, r5, pc}
 80061b4:	b118      	cbz	r0, 80061be <_fflush_r+0x1a>
 80061b6:	6a03      	ldr	r3, [r0, #32]
 80061b8:	b90b      	cbnz	r3, 80061be <_fflush_r+0x1a>
 80061ba:	f7ff fc87 	bl	8005acc <__sinit>
 80061be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d0f3      	beq.n	80061ae <_fflush_r+0xa>
 80061c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80061c8:	07d0      	lsls	r0, r2, #31
 80061ca:	d404      	bmi.n	80061d6 <_fflush_r+0x32>
 80061cc:	0599      	lsls	r1, r3, #22
 80061ce:	d402      	bmi.n	80061d6 <_fflush_r+0x32>
 80061d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061d2:	f7ff fe66 	bl	8005ea2 <__retarget_lock_acquire_recursive>
 80061d6:	4628      	mov	r0, r5
 80061d8:	4621      	mov	r1, r4
 80061da:	f7ff ff5d 	bl	8006098 <__sflush_r>
 80061de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061e0:	07da      	lsls	r2, r3, #31
 80061e2:	4605      	mov	r5, r0
 80061e4:	d4e4      	bmi.n	80061b0 <_fflush_r+0xc>
 80061e6:	89a3      	ldrh	r3, [r4, #12]
 80061e8:	059b      	lsls	r3, r3, #22
 80061ea:	d4e1      	bmi.n	80061b0 <_fflush_r+0xc>
 80061ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061ee:	f7ff fe59 	bl	8005ea4 <__retarget_lock_release_recursive>
 80061f2:	e7dd      	b.n	80061b0 <_fflush_r+0xc>

080061f4 <__swhatbuf_r>:
 80061f4:	b570      	push	{r4, r5, r6, lr}
 80061f6:	460c      	mov	r4, r1
 80061f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061fc:	2900      	cmp	r1, #0
 80061fe:	b096      	sub	sp, #88	; 0x58
 8006200:	4615      	mov	r5, r2
 8006202:	461e      	mov	r6, r3
 8006204:	da0d      	bge.n	8006222 <__swhatbuf_r+0x2e>
 8006206:	89a3      	ldrh	r3, [r4, #12]
 8006208:	f013 0f80 	tst.w	r3, #128	; 0x80
 800620c:	f04f 0100 	mov.w	r1, #0
 8006210:	bf0c      	ite	eq
 8006212:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006216:	2340      	movne	r3, #64	; 0x40
 8006218:	2000      	movs	r0, #0
 800621a:	6031      	str	r1, [r6, #0]
 800621c:	602b      	str	r3, [r5, #0]
 800621e:	b016      	add	sp, #88	; 0x58
 8006220:	bd70      	pop	{r4, r5, r6, pc}
 8006222:	466a      	mov	r2, sp
 8006224:	f000 f87c 	bl	8006320 <_fstat_r>
 8006228:	2800      	cmp	r0, #0
 800622a:	dbec      	blt.n	8006206 <__swhatbuf_r+0x12>
 800622c:	9901      	ldr	r1, [sp, #4]
 800622e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006232:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006236:	4259      	negs	r1, r3
 8006238:	4159      	adcs	r1, r3
 800623a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800623e:	e7eb      	b.n	8006218 <__swhatbuf_r+0x24>

08006240 <__smakebuf_r>:
 8006240:	898b      	ldrh	r3, [r1, #12]
 8006242:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006244:	079d      	lsls	r5, r3, #30
 8006246:	4606      	mov	r6, r0
 8006248:	460c      	mov	r4, r1
 800624a:	d507      	bpl.n	800625c <__smakebuf_r+0x1c>
 800624c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006250:	6023      	str	r3, [r4, #0]
 8006252:	6123      	str	r3, [r4, #16]
 8006254:	2301      	movs	r3, #1
 8006256:	6163      	str	r3, [r4, #20]
 8006258:	b002      	add	sp, #8
 800625a:	bd70      	pop	{r4, r5, r6, pc}
 800625c:	ab01      	add	r3, sp, #4
 800625e:	466a      	mov	r2, sp
 8006260:	f7ff ffc8 	bl	80061f4 <__swhatbuf_r>
 8006264:	9900      	ldr	r1, [sp, #0]
 8006266:	4605      	mov	r5, r0
 8006268:	4630      	mov	r0, r6
 800626a:	f7ff fe89 	bl	8005f80 <_malloc_r>
 800626e:	b948      	cbnz	r0, 8006284 <__smakebuf_r+0x44>
 8006270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006274:	059a      	lsls	r2, r3, #22
 8006276:	d4ef      	bmi.n	8006258 <__smakebuf_r+0x18>
 8006278:	f023 0303 	bic.w	r3, r3, #3
 800627c:	f043 0302 	orr.w	r3, r3, #2
 8006280:	81a3      	strh	r3, [r4, #12]
 8006282:	e7e3      	b.n	800624c <__smakebuf_r+0xc>
 8006284:	89a3      	ldrh	r3, [r4, #12]
 8006286:	6020      	str	r0, [r4, #0]
 8006288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800628c:	81a3      	strh	r3, [r4, #12]
 800628e:	9b00      	ldr	r3, [sp, #0]
 8006290:	6163      	str	r3, [r4, #20]
 8006292:	9b01      	ldr	r3, [sp, #4]
 8006294:	6120      	str	r0, [r4, #16]
 8006296:	b15b      	cbz	r3, 80062b0 <__smakebuf_r+0x70>
 8006298:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800629c:	4630      	mov	r0, r6
 800629e:	f000 f851 	bl	8006344 <_isatty_r>
 80062a2:	b128      	cbz	r0, 80062b0 <__smakebuf_r+0x70>
 80062a4:	89a3      	ldrh	r3, [r4, #12]
 80062a6:	f023 0303 	bic.w	r3, r3, #3
 80062aa:	f043 0301 	orr.w	r3, r3, #1
 80062ae:	81a3      	strh	r3, [r4, #12]
 80062b0:	89a3      	ldrh	r3, [r4, #12]
 80062b2:	431d      	orrs	r5, r3
 80062b4:	81a5      	strh	r5, [r4, #12]
 80062b6:	e7cf      	b.n	8006258 <__smakebuf_r+0x18>

080062b8 <_putc_r>:
 80062b8:	b570      	push	{r4, r5, r6, lr}
 80062ba:	460d      	mov	r5, r1
 80062bc:	4614      	mov	r4, r2
 80062be:	4606      	mov	r6, r0
 80062c0:	b118      	cbz	r0, 80062ca <_putc_r+0x12>
 80062c2:	6a03      	ldr	r3, [r0, #32]
 80062c4:	b90b      	cbnz	r3, 80062ca <_putc_r+0x12>
 80062c6:	f7ff fc01 	bl	8005acc <__sinit>
 80062ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062cc:	07d8      	lsls	r0, r3, #31
 80062ce:	d405      	bmi.n	80062dc <_putc_r+0x24>
 80062d0:	89a3      	ldrh	r3, [r4, #12]
 80062d2:	0599      	lsls	r1, r3, #22
 80062d4:	d402      	bmi.n	80062dc <_putc_r+0x24>
 80062d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062d8:	f7ff fde3 	bl	8005ea2 <__retarget_lock_acquire_recursive>
 80062dc:	68a3      	ldr	r3, [r4, #8]
 80062de:	3b01      	subs	r3, #1
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	60a3      	str	r3, [r4, #8]
 80062e4:	da05      	bge.n	80062f2 <_putc_r+0x3a>
 80062e6:	69a2      	ldr	r2, [r4, #24]
 80062e8:	4293      	cmp	r3, r2
 80062ea:	db12      	blt.n	8006312 <_putc_r+0x5a>
 80062ec:	b2eb      	uxtb	r3, r5
 80062ee:	2b0a      	cmp	r3, #10
 80062f0:	d00f      	beq.n	8006312 <_putc_r+0x5a>
 80062f2:	6823      	ldr	r3, [r4, #0]
 80062f4:	1c5a      	adds	r2, r3, #1
 80062f6:	6022      	str	r2, [r4, #0]
 80062f8:	701d      	strb	r5, [r3, #0]
 80062fa:	b2ed      	uxtb	r5, r5
 80062fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062fe:	07da      	lsls	r2, r3, #31
 8006300:	d405      	bmi.n	800630e <_putc_r+0x56>
 8006302:	89a3      	ldrh	r3, [r4, #12]
 8006304:	059b      	lsls	r3, r3, #22
 8006306:	d402      	bmi.n	800630e <_putc_r+0x56>
 8006308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800630a:	f7ff fdcb 	bl	8005ea4 <__retarget_lock_release_recursive>
 800630e:	4628      	mov	r0, r5
 8006310:	bd70      	pop	{r4, r5, r6, pc}
 8006312:	4629      	mov	r1, r5
 8006314:	4622      	mov	r2, r4
 8006316:	4630      	mov	r0, r6
 8006318:	f7ff fcb5 	bl	8005c86 <__swbuf_r>
 800631c:	4605      	mov	r5, r0
 800631e:	e7ed      	b.n	80062fc <_putc_r+0x44>

08006320 <_fstat_r>:
 8006320:	b538      	push	{r3, r4, r5, lr}
 8006322:	4d07      	ldr	r5, [pc, #28]	; (8006340 <_fstat_r+0x20>)
 8006324:	2300      	movs	r3, #0
 8006326:	4604      	mov	r4, r0
 8006328:	4608      	mov	r0, r1
 800632a:	4611      	mov	r1, r2
 800632c:	602b      	str	r3, [r5, #0]
 800632e:	f7fa fc1e 	bl	8000b6e <_fstat>
 8006332:	1c43      	adds	r3, r0, #1
 8006334:	d102      	bne.n	800633c <_fstat_r+0x1c>
 8006336:	682b      	ldr	r3, [r5, #0]
 8006338:	b103      	cbz	r3, 800633c <_fstat_r+0x1c>
 800633a:	6023      	str	r3, [r4, #0]
 800633c:	bd38      	pop	{r3, r4, r5, pc}
 800633e:	bf00      	nop
 8006340:	20000418 	.word	0x20000418

08006344 <_isatty_r>:
 8006344:	b538      	push	{r3, r4, r5, lr}
 8006346:	4d06      	ldr	r5, [pc, #24]	; (8006360 <_isatty_r+0x1c>)
 8006348:	2300      	movs	r3, #0
 800634a:	4604      	mov	r4, r0
 800634c:	4608      	mov	r0, r1
 800634e:	602b      	str	r3, [r5, #0]
 8006350:	f7fa fc1d 	bl	8000b8e <_isatty>
 8006354:	1c43      	adds	r3, r0, #1
 8006356:	d102      	bne.n	800635e <_isatty_r+0x1a>
 8006358:	682b      	ldr	r3, [r5, #0]
 800635a:	b103      	cbz	r3, 800635e <_isatty_r+0x1a>
 800635c:	6023      	str	r3, [r4, #0]
 800635e:	bd38      	pop	{r3, r4, r5, pc}
 8006360:	20000418 	.word	0x20000418

08006364 <_sbrk_r>:
 8006364:	b538      	push	{r3, r4, r5, lr}
 8006366:	4d06      	ldr	r5, [pc, #24]	; (8006380 <_sbrk_r+0x1c>)
 8006368:	2300      	movs	r3, #0
 800636a:	4604      	mov	r4, r0
 800636c:	4608      	mov	r0, r1
 800636e:	602b      	str	r3, [r5, #0]
 8006370:	f7fa fc26 	bl	8000bc0 <_sbrk>
 8006374:	1c43      	adds	r3, r0, #1
 8006376:	d102      	bne.n	800637e <_sbrk_r+0x1a>
 8006378:	682b      	ldr	r3, [r5, #0]
 800637a:	b103      	cbz	r3, 800637e <_sbrk_r+0x1a>
 800637c:	6023      	str	r3, [r4, #0]
 800637e:	bd38      	pop	{r3, r4, r5, pc}
 8006380:	20000418 	.word	0x20000418

08006384 <_init>:
 8006384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006386:	bf00      	nop
 8006388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800638a:	bc08      	pop	{r3}
 800638c:	469e      	mov	lr, r3
 800638e:	4770      	bx	lr

08006390 <_fini>:
 8006390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006392:	bf00      	nop
 8006394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006396:	bc08      	pop	{r3}
 8006398:	469e      	mov	lr, r3
 800639a:	4770      	bx	lr
