
CubeMX_STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000607c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08006188  08006188  00016188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062dc  080062dc  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080062dc  080062dc  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080062dc  080062dc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062dc  080062dc  000162dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062e0  080062e0  000162e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080062e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000068  0800634c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000574  0800634c  00020574  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011aed  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000327f  00000000  00000000  00031bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b0  00000000  00000000  00034e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000da5  00000000  00000000  00035ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aae2  00000000  00000000  00036d95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016c25  00000000  00000000  00051877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093680  00000000  00000000  0006849c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004fb4  00000000  00000000  000fbb1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00100ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08006170 	.word	0x08006170

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08006170 	.word	0x08006170

0800014c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b2e      	ldr	r3, [pc, #184]	; (8000218 <MX_ADC1_Init+0xcc>)
 800015e:	4a2f      	ldr	r2, [pc, #188]	; (800021c <MX_ADC1_Init+0xd0>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000162:	4b2d      	ldr	r3, [pc, #180]	; (8000218 <MX_ADC1_Init+0xcc>)
 8000164:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000168:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800016a:	4b2b      	ldr	r3, [pc, #172]	; (8000218 <MX_ADC1_Init+0xcc>)
 800016c:	2201      	movs	r2, #1
 800016e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000170:	4b29      	ldr	r3, [pc, #164]	; (8000218 <MX_ADC1_Init+0xcc>)
 8000172:	2200      	movs	r2, #0
 8000174:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000176:	4b28      	ldr	r3, [pc, #160]	; (8000218 <MX_ADC1_Init+0xcc>)
 8000178:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017e:	4b26      	ldr	r3, [pc, #152]	; (8000218 <MX_ADC1_Init+0xcc>)
 8000180:	2200      	movs	r2, #0
 8000182:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000184:	4b24      	ldr	r3, [pc, #144]	; (8000218 <MX_ADC1_Init+0xcc>)
 8000186:	2204      	movs	r2, #4
 8000188:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800018a:	4823      	ldr	r0, [pc, #140]	; (8000218 <MX_ADC1_Init+0xcc>)
 800018c:	f000 ff98 	bl	80010c0 <HAL_ADC_Init>
 8000190:	4603      	mov	r3, r0
 8000192:	2b00      	cmp	r3, #0
 8000194:	d001      	beq.n	800019a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000196:	f000 fa38 	bl	800060a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800019a:	2300      	movs	r3, #0
 800019c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019e:	2301      	movs	r3, #1
 80001a0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80001a2:	2307      	movs	r3, #7
 80001a4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	4619      	mov	r1, r3
 80001aa:	481b      	ldr	r0, [pc, #108]	; (8000218 <MX_ADC1_Init+0xcc>)
 80001ac:	f001 fa22 	bl	80015f4 <HAL_ADC_ConfigChannel>
 80001b0:	4603      	mov	r3, r0
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d001      	beq.n	80001ba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80001b6:	f000 fa28 	bl	800060a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80001ba:	2301      	movs	r3, #1
 80001bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80001be:	2302      	movs	r3, #2
 80001c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001c2:	1d3b      	adds	r3, r7, #4
 80001c4:	4619      	mov	r1, r3
 80001c6:	4814      	ldr	r0, [pc, #80]	; (8000218 <MX_ADC1_Init+0xcc>)
 80001c8:	f001 fa14 	bl	80015f4 <HAL_ADC_ConfigChannel>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d001      	beq.n	80001d6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80001d2:	f000 fa1a 	bl	800060a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80001d6:	2307      	movs	r3, #7
 80001d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80001da:	2303      	movs	r3, #3
 80001dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001de:	1d3b      	adds	r3, r7, #4
 80001e0:	4619      	mov	r1, r3
 80001e2:	480d      	ldr	r0, [pc, #52]	; (8000218 <MX_ADC1_Init+0xcc>)
 80001e4:	f001 fa06 	bl	80015f4 <HAL_ADC_ConfigChannel>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d001      	beq.n	80001f2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80001ee:	f000 fa0c 	bl	800060a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80001f2:	2308      	movs	r3, #8
 80001f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80001f6:	2304      	movs	r3, #4
 80001f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	4619      	mov	r1, r3
 80001fe:	4806      	ldr	r0, [pc, #24]	; (8000218 <MX_ADC1_Init+0xcc>)
 8000200:	f001 f9f8 	bl	80015f4 <HAL_ADC_ConfigChannel>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800020a:	f000 f9fe 	bl	800060a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800020e:	bf00      	nop
 8000210:	3710      	adds	r7, #16
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	20000084 	.word	0x20000084
 800021c:	40012400 	.word	0x40012400

08000220 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b08a      	sub	sp, #40	; 0x28
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000228:	f107 0318 	add.w	r3, r7, #24
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4a38      	ldr	r2, [pc, #224]	; (800031c <HAL_ADC_MspInit+0xfc>)
 800023c:	4293      	cmp	r3, r2
 800023e:	d168      	bne.n	8000312 <HAL_ADC_MspInit+0xf2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000240:	4b37      	ldr	r3, [pc, #220]	; (8000320 <HAL_ADC_MspInit+0x100>)
 8000242:	699b      	ldr	r3, [r3, #24]
 8000244:	4a36      	ldr	r2, [pc, #216]	; (8000320 <HAL_ADC_MspInit+0x100>)
 8000246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800024a:	6193      	str	r3, [r2, #24]
 800024c:	4b34      	ldr	r3, [pc, #208]	; (8000320 <HAL_ADC_MspInit+0x100>)
 800024e:	699b      	ldr	r3, [r3, #24]
 8000250:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000254:	617b      	str	r3, [r7, #20]
 8000256:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000258:	4b31      	ldr	r3, [pc, #196]	; (8000320 <HAL_ADC_MspInit+0x100>)
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	4a30      	ldr	r2, [pc, #192]	; (8000320 <HAL_ADC_MspInit+0x100>)
 800025e:	f043 0304 	orr.w	r3, r3, #4
 8000262:	6193      	str	r3, [r2, #24]
 8000264:	4b2e      	ldr	r3, [pc, #184]	; (8000320 <HAL_ADC_MspInit+0x100>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	f003 0304 	and.w	r3, r3, #4
 800026c:	613b      	str	r3, [r7, #16]
 800026e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000270:	4b2b      	ldr	r3, [pc, #172]	; (8000320 <HAL_ADC_MspInit+0x100>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	4a2a      	ldr	r2, [pc, #168]	; (8000320 <HAL_ADC_MspInit+0x100>)
 8000276:	f043 0308 	orr.w	r3, r3, #8
 800027a:	6193      	str	r3, [r2, #24]
 800027c:	4b28      	ldr	r3, [pc, #160]	; (8000320 <HAL_ADC_MspInit+0x100>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	f003 0308 	and.w	r3, r3, #8
 8000284:	60fb      	str	r3, [r7, #12]
 8000286:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7;
 8000288:	2383      	movs	r3, #131	; 0x83
 800028a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800028c:	2303      	movs	r3, #3
 800028e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000290:	f107 0318 	add.w	r3, r7, #24
 8000294:	4619      	mov	r1, r3
 8000296:	4823      	ldr	r0, [pc, #140]	; (8000324 <HAL_ADC_MspInit+0x104>)
 8000298:	f001 ff5e 	bl	8002158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800029c:	2301      	movs	r3, #1
 800029e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002a0:	2303      	movs	r3, #3
 80002a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002a4:	f107 0318 	add.w	r3, r7, #24
 80002a8:	4619      	mov	r1, r3
 80002aa:	481f      	ldr	r0, [pc, #124]	; (8000328 <HAL_ADC_MspInit+0x108>)
 80002ac:	f001 ff54 	bl	8002158 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80002b0:	4b1e      	ldr	r3, [pc, #120]	; (800032c <HAL_ADC_MspInit+0x10c>)
 80002b2:	4a1f      	ldr	r2, [pc, #124]	; (8000330 <HAL_ADC_MspInit+0x110>)
 80002b4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80002b6:	4b1d      	ldr	r3, [pc, #116]	; (800032c <HAL_ADC_MspInit+0x10c>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80002bc:	4b1b      	ldr	r3, [pc, #108]	; (800032c <HAL_ADC_MspInit+0x10c>)
 80002be:	2200      	movs	r2, #0
 80002c0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80002c2:	4b1a      	ldr	r3, [pc, #104]	; (800032c <HAL_ADC_MspInit+0x10c>)
 80002c4:	2280      	movs	r2, #128	; 0x80
 80002c6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80002c8:	4b18      	ldr	r3, [pc, #96]	; (800032c <HAL_ADC_MspInit+0x10c>)
 80002ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002ce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80002d0:	4b16      	ldr	r3, [pc, #88]	; (800032c <HAL_ADC_MspInit+0x10c>)
 80002d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002d6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80002d8:	4b14      	ldr	r3, [pc, #80]	; (800032c <HAL_ADC_MspInit+0x10c>)
 80002da:	2220      	movs	r2, #32
 80002dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80002de:	4b13      	ldr	r3, [pc, #76]	; (800032c <HAL_ADC_MspInit+0x10c>)
 80002e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80002e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80002e6:	4811      	ldr	r0, [pc, #68]	; (800032c <HAL_ADC_MspInit+0x10c>)
 80002e8:	f001 fc94 	bl	8001c14 <HAL_DMA_Init>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 80002f2:	f000 f98a 	bl	800060a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4a0c      	ldr	r2, [pc, #48]	; (800032c <HAL_ADC_MspInit+0x10c>)
 80002fa:	621a      	str	r2, [r3, #32]
 80002fc:	4a0b      	ldr	r2, [pc, #44]	; (800032c <HAL_ADC_MspInit+0x10c>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000302:	2200      	movs	r2, #0
 8000304:	2100      	movs	r1, #0
 8000306:	2012      	movs	r0, #18
 8000308:	f001 fc4d 	bl	8001ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800030c:	2012      	movs	r0, #18
 800030e:	f001 fc66 	bl	8001bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000312:	bf00      	nop
 8000314:	3728      	adds	r7, #40	; 0x28
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40012400 	.word	0x40012400
 8000320:	40021000 	.word	0x40021000
 8000324:	40010800 	.word	0x40010800
 8000328:	40010c00 	.word	0x40010c00
 800032c:	200000b4 	.word	0x200000b4
 8000330:	40020008 	.word	0x40020008

08000334 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800033a:	4b0c      	ldr	r3, [pc, #48]	; (800036c <MX_DMA_Init+0x38>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	4a0b      	ldr	r2, [pc, #44]	; (800036c <MX_DMA_Init+0x38>)
 8000340:	f043 0301 	orr.w	r3, r3, #1
 8000344:	6153      	str	r3, [r2, #20]
 8000346:	4b09      	ldr	r3, [pc, #36]	; (800036c <MX_DMA_Init+0x38>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	f003 0301 	and.w	r3, r3, #1
 800034e:	607b      	str	r3, [r7, #4]
 8000350:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000352:	2200      	movs	r2, #0
 8000354:	2100      	movs	r1, #0
 8000356:	200b      	movs	r0, #11
 8000358:	f001 fc25 	bl	8001ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800035c:	200b      	movs	r0, #11
 800035e:	f001 fc3e 	bl	8001bde <HAL_NVIC_EnableIRQ>

}
 8000362:	bf00      	nop
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40021000 	.word	0x40021000

08000370 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b088      	sub	sp, #32
 8000374:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000376:	f107 0310 	add.w	r3, r7, #16
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000384:	4b2f      	ldr	r3, [pc, #188]	; (8000444 <MX_GPIO_Init+0xd4>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	4a2e      	ldr	r2, [pc, #184]	; (8000444 <MX_GPIO_Init+0xd4>)
 800038a:	f043 0310 	orr.w	r3, r3, #16
 800038e:	6193      	str	r3, [r2, #24]
 8000390:	4b2c      	ldr	r3, [pc, #176]	; (8000444 <MX_GPIO_Init+0xd4>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	f003 0310 	and.w	r3, r3, #16
 8000398:	60fb      	str	r3, [r7, #12]
 800039a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800039c:	4b29      	ldr	r3, [pc, #164]	; (8000444 <MX_GPIO_Init+0xd4>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a28      	ldr	r2, [pc, #160]	; (8000444 <MX_GPIO_Init+0xd4>)
 80003a2:	f043 0320 	orr.w	r3, r3, #32
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b26      	ldr	r3, [pc, #152]	; (8000444 <MX_GPIO_Init+0xd4>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0320 	and.w	r3, r3, #32
 80003b0:	60bb      	str	r3, [r7, #8]
 80003b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b4:	4b23      	ldr	r3, [pc, #140]	; (8000444 <MX_GPIO_Init+0xd4>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a22      	ldr	r2, [pc, #136]	; (8000444 <MX_GPIO_Init+0xd4>)
 80003ba:	f043 0304 	orr.w	r3, r3, #4
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b20      	ldr	r3, [pc, #128]	; (8000444 <MX_GPIO_Init+0xd4>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0304 	and.w	r3, r3, #4
 80003c8:	607b      	str	r3, [r7, #4]
 80003ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003cc:	4b1d      	ldr	r3, [pc, #116]	; (8000444 <MX_GPIO_Init+0xd4>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a1c      	ldr	r2, [pc, #112]	; (8000444 <MX_GPIO_Init+0xd4>)
 80003d2:	f043 0308 	orr.w	r3, r3, #8
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b1a      	ldr	r3, [pc, #104]	; (8000444 <MX_GPIO_Init+0xd4>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0308 	and.w	r3, r3, #8
 80003e0:	603b      	str	r3, [r7, #0]
 80003e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_24L01_Pin|CE_24L01_Pin, GPIO_PIN_SET);
 80003e4:	2201      	movs	r2, #1
 80003e6:	2160      	movs	r1, #96	; 0x60
 80003e8:	4817      	ldr	r0, [pc, #92]	; (8000448 <MX_GPIO_Init+0xd8>)
 80003ea:	f002 f850 	bl	800248e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_24L01_Pin;
 80003ee:	2310      	movs	r3, #16
 80003f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003f2:	2300      	movs	r3, #0
 80003f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003f6:	2301      	movs	r3, #1
 80003f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IRQ_24L01_GPIO_Port, &GPIO_InitStruct);
 80003fa:	f107 0310 	add.w	r3, r7, #16
 80003fe:	4619      	mov	r1, r3
 8000400:	4811      	ldr	r0, [pc, #68]	; (8000448 <MX_GPIO_Init+0xd8>)
 8000402:	f001 fea9 	bl	8002158 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CSN_24L01_Pin|CE_24L01_Pin;
 8000406:	2360      	movs	r3, #96	; 0x60
 8000408:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800040a:	2301      	movs	r3, #1
 800040c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040e:	2300      	movs	r3, #0
 8000410:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000412:	2303      	movs	r3, #3
 8000414:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	4619      	mov	r1, r3
 800041c:	480a      	ldr	r0, [pc, #40]	; (8000448 <MX_GPIO_Init+0xd8>)
 800041e:	f001 fe9b 	bl	8002158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_Z_Pin;
 8000422:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000426:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000428:	2300      	movs	r3, #0
 800042a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800042c:	2301      	movs	r3, #1
 800042e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(JOY_Z_GPIO_Port, &GPIO_InitStruct);
 8000430:	f107 0310 	add.w	r3, r7, #16
 8000434:	4619      	mov	r1, r3
 8000436:	4805      	ldr	r0, [pc, #20]	; (800044c <MX_GPIO_Init+0xdc>)
 8000438:	f001 fe8e 	bl	8002158 <HAL_GPIO_Init>

}
 800043c:	bf00      	nop
 800043e:	3720      	adds	r7, #32
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	40021000 	.word	0x40021000
 8000448:	40010800 	.word	0x40010800
 800044c:	40010c00 	.word	0x40010c00

08000450 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000450:	b590      	push	{r4, r7, lr}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000456:	f000 fdad 	bl	8000fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045a:	f000 f87b 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800045e:	f7ff ff87 	bl	8000370 <MX_GPIO_Init>
  MX_DMA_Init();
 8000462:	f7ff ff67 	bl	8000334 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000466:	f000 fb5f 	bl	8000b28 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800046a:	f000 fa87 	bl	800097c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800046e:	f000 fb85 	bl	8000b7c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000472:	f000 fbad 	bl	8000bd0 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8000476:	f000 f8cd 	bl	8000614 <MX_SPI2_Init>
  MX_ADC1_Init();
 800047a:	f7ff fe67 	bl	800014c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  //* 锟斤拷锟斤拷锟斤拷锟斤拷1锟斤拷锟叫讹拷
  HAL_UART_Receive_IT(&huart1, (uint8_t *)&USART1_NewData, 1);
 800047e:	2201      	movs	r2, #1
 8000480:	4926      	ldr	r1, [pc, #152]	; (800051c <main+0xcc>)
 8000482:	4827      	ldr	r0, [pc, #156]	; (8000520 <main+0xd0>)
 8000484:	f003 fee8 	bl	8004258 <HAL_UART_Receive_IT>

  //* 锟斤拷锟斤拷锟斤拷锟斤拷2锟斤拷锟叫讹拷
  HAL_UART_Receive_IT(&huart2, (uint8_t *)&USART2_NewData, 1);
 8000488:	2201      	movs	r2, #1
 800048a:	4926      	ldr	r1, [pc, #152]	; (8000524 <main+0xd4>)
 800048c:	4826      	ldr	r0, [pc, #152]	; (8000528 <main+0xd8>)
 800048e:	f003 fee3 	bl	8004258 <HAL_UART_Receive_IT>

  //* 锟斤拷锟斤拷锟斤拷锟斤拷3锟斤拷锟叫讹拷
  HAL_UART_Receive_IT(&huart3, (uint8_t *)&USART3_NewData, 1);
 8000492:	2201      	movs	r2, #1
 8000494:	4925      	ldr	r1, [pc, #148]	; (800052c <main+0xdc>)
 8000496:	4826      	ldr	r0, [pc, #152]	; (8000530 <main+0xe0>)
 8000498:	f003 fede 	bl	8004258 <HAL_UART_Receive_IT>

  //* NRF24l01
  NRF24L01_TX_Start();
 800049c:	f004 fe82 	bl	80051a4 <NRF24L01_TX_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&AD_Value, 4);
 80004a0:	2204      	movs	r2, #4
 80004a2:	4924      	ldr	r1, [pc, #144]	; (8000534 <main+0xe4>)
 80004a4:	4824      	ldr	r0, [pc, #144]	; (8000538 <main+0xe8>)
 80004a6:	f000 fee3 	bl	8001270 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    printf("ADC0:%d\r\n", AD_Value[0]);
 80004aa:	4b22      	ldr	r3, [pc, #136]	; (8000534 <main+0xe4>)
 80004ac:	881b      	ldrh	r3, [r3, #0]
 80004ae:	4619      	mov	r1, r3
 80004b0:	4822      	ldr	r0, [pc, #136]	; (800053c <main+0xec>)
 80004b2:	f004 ff49 	bl	8005348 <iprintf>
    // printf("ADC1:%d\r\n", AD_Value[1]);
    // printf("ADC2:%d\r\n", AD_Value[2]);
    // printf("ADC3:%d\r\n", AD_Value[3]);

    printf("\r\n");
 80004b6:	4822      	ldr	r0, [pc, #136]	; (8000540 <main+0xf0>)
 80004b8:	f004 ffb4 	bl	8005424 <puts>

    HAL_Delay(1000);
 80004bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004c0:	f000 fdda 	bl	8001078 <HAL_Delay>
    // tmp_buf[31]++;
    if (NRF24L01_TxPacket(Adjusted_ADC_Data()) == 0x20) //????????
 80004c4:	f004 fc6e 	bl	8004da4 <Adjusted_ADC_Data>
 80004c8:	4603      	mov	r3, r0
 80004ca:	4618      	mov	r0, r3
 80004cc:	f004 fda8 	bl	8005020 <NRF24L01_TxPacket>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b20      	cmp	r3, #32
 80004d4:	d11e      	bne.n	8000514 <main+0xc4>
    {
      // if (NRF24L01_TxPacket(Adjusted_ADC_Value_low()) == 0x20)
      printf("send data OK!\r\n");
 80004d6:	481b      	ldr	r0, [pc, #108]	; (8000544 <main+0xf4>)
 80004d8:	f004 ffa4 	bl	8005424 <puts>
      unit = (uint16_t)(Adjusted_ADC_Data()[0] << 8) | Adjusted_ADC_Data()[4];
 80004dc:	f004 fc62 	bl	8004da4 <Adjusted_ADC_Data>
 80004e0:	4603      	mov	r3, r0
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	b29b      	uxth	r3, r3
 80004e6:	021b      	lsls	r3, r3, #8
 80004e8:	b29c      	uxth	r4, r3
 80004ea:	f004 fc5b 	bl	8004da4 <Adjusted_ADC_Data>
 80004ee:	4603      	mov	r3, r0
 80004f0:	3304      	adds	r3, #4
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	b29b      	uxth	r3, r3
 80004f6:	4323      	orrs	r3, r4
 80004f8:	80fb      	strh	r3, [r7, #6]
      printf("Adjusted_ADC_Data():%d\r\n", Adjusted_ADC_Data());
 80004fa:	f004 fc53 	bl	8004da4 <Adjusted_ADC_Data>
 80004fe:	4603      	mov	r3, r0
 8000500:	4619      	mov	r1, r3
 8000502:	4811      	ldr	r0, [pc, #68]	; (8000548 <main+0xf8>)
 8000504:	f004 ff20 	bl	8005348 <iprintf>

      printf("ADC0unit:%d\r\n", unit);
 8000508:	88fb      	ldrh	r3, [r7, #6]
 800050a:	4619      	mov	r1, r3
 800050c:	480f      	ldr	r0, [pc, #60]	; (800054c <main+0xfc>)
 800050e:	f004 ff1b 	bl	8005348 <iprintf>
 8000512:	e7ca      	b.n	80004aa <main+0x5a>
    }
    else
    {
      printf("send error!\r\n");
 8000514:	480e      	ldr	r0, [pc, #56]	; (8000550 <main+0x100>)
 8000516:	f004 ff85 	bl	8005424 <puts>
    printf("ADC0:%d\r\n", AD_Value[0]);
 800051a:	e7c6      	b.n	80004aa <main+0x5a>
 800051c:	20000266 	.word	0x20000266
 8000520:	20000334 	.word	0x20000334
 8000524:	20000332 	.word	0x20000332
 8000528:	2000037c 	.word	0x2000037c
 800052c:	20000333 	.word	0x20000333
 8000530:	200003c4 	.word	0x200003c4
 8000534:	20000410 	.word	0x20000410
 8000538:	20000084 	.word	0x20000084
 800053c:	08006188 	.word	0x08006188
 8000540:	08006194 	.word	0x08006194
 8000544:	08006198 	.word	0x08006198
 8000548:	080061a8 	.word	0x080061a8
 800054c:	080061c4 	.word	0x080061c4
 8000550:	080061d4 	.word	0x080061d4

08000554 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800055e:	2228      	movs	r2, #40	; 0x28
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f005 f83e 	bl	80055e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 0314 	add.w	r3, r7, #20
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000584:	2301      	movs	r3, #1
 8000586:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000588:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000592:	2301      	movs	r3, #1
 8000594:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800059e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005a0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 ff88 	bl	80024c0 <HAL_RCC_OscConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005b6:	f000 f828 	bl	800060a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80005ba:	230f      	movs	r3, #15
 80005bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005be:	2302      	movs	r3, #2
 80005c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	2102      	movs	r1, #2
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 f9f4 	bl	80029c4 <HAL_RCC_ClockConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80005e2:	f000 f812 	bl	800060a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005e6:	2302      	movs	r3, #2
 80005e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80005ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005ee:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 fb74 	bl	8002ce0 <HAL_RCCEx_PeriphCLKConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005fe:	f000 f804 	bl	800060a <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3750      	adds	r7, #80	; 0x50
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800060e:	b672      	cpsid	i
}
 8000610:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000612:	e7fe      	b.n	8000612 <Error_Handler+0x8>

08000614 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000618:	4b17      	ldr	r3, [pc, #92]	; (8000678 <MX_SPI2_Init+0x64>)
 800061a:	4a18      	ldr	r2, [pc, #96]	; (800067c <MX_SPI2_Init+0x68>)
 800061c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800061e:	4b16      	ldr	r3, [pc, #88]	; (8000678 <MX_SPI2_Init+0x64>)
 8000620:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000624:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000626:	4b14      	ldr	r3, [pc, #80]	; (8000678 <MX_SPI2_Init+0x64>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <MX_SPI2_Init+0x64>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_SPI2_Init+0x64>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_SPI2_Init+0x64>)
 800063a:	2200      	movs	r2, #0
 800063c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MX_SPI2_Init+0x64>)
 8000640:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000644:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_SPI2_Init+0x64>)
 8000648:	2210      	movs	r2, #16
 800064a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <MX_SPI2_Init+0x64>)
 800064e:	2200      	movs	r2, #0
 8000650:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_SPI2_Init+0x64>)
 8000654:	2200      	movs	r2, #0
 8000656:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000658:	4b07      	ldr	r3, [pc, #28]	; (8000678 <MX_SPI2_Init+0x64>)
 800065a:	2200      	movs	r2, #0
 800065c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_SPI2_Init+0x64>)
 8000660:	220a      	movs	r2, #10
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000664:	4804      	ldr	r0, [pc, #16]	; (8000678 <MX_SPI2_Init+0x64>)
 8000666:	f002 fbf1 	bl	8002e4c <HAL_SPI_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000670:	f7ff ffcb 	bl	800060a <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	200000f8 	.word	0x200000f8
 800067c:	40003800 	.word	0x40003800

08000680 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0310 	add.w	r3, r7, #16
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a1c      	ldr	r2, [pc, #112]	; (800070c <HAL_SPI_MspInit+0x8c>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d131      	bne.n	8000704 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <HAL_SPI_MspInit+0x90>)
 80006a2:	69db      	ldr	r3, [r3, #28]
 80006a4:	4a1a      	ldr	r2, [pc, #104]	; (8000710 <HAL_SPI_MspInit+0x90>)
 80006a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006aa:	61d3      	str	r3, [r2, #28]
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <HAL_SPI_MspInit+0x90>)
 80006ae:	69db      	ldr	r3, [r3, #28]
 80006b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <HAL_SPI_MspInit+0x90>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	4a14      	ldr	r2, [pc, #80]	; (8000710 <HAL_SPI_MspInit+0x90>)
 80006be:	f043 0308 	orr.w	r3, r3, #8
 80006c2:	6193      	str	r3, [r2, #24]
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <HAL_SPI_MspInit+0x90>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	f003 0308 	and.w	r3, r3, #8
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80006d0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80006d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d6:	2302      	movs	r3, #2
 80006d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006da:	2303      	movs	r3, #3
 80006dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006de:	f107 0310 	add.w	r3, r7, #16
 80006e2:	4619      	mov	r1, r3
 80006e4:	480b      	ldr	r0, [pc, #44]	; (8000714 <HAL_SPI_MspInit+0x94>)
 80006e6:	f001 fd37 	bl	8002158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80006ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f8:	f107 0310 	add.w	r3, r7, #16
 80006fc:	4619      	mov	r1, r3
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <HAL_SPI_MspInit+0x94>)
 8000700:	f001 fd2a 	bl	8002158 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000704:	bf00      	nop
 8000706:	3720      	adds	r7, #32
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40003800 	.word	0x40003800
 8000710:	40021000 	.word	0x40021000
 8000714:	40010c00 	.word	0x40010c00

08000718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <HAL_MspInit+0x5c>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	4a14      	ldr	r2, [pc, #80]	; (8000774 <HAL_MspInit+0x5c>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6193      	str	r3, [r2, #24]
 800072a:	4b12      	ldr	r3, [pc, #72]	; (8000774 <HAL_MspInit+0x5c>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <HAL_MspInit+0x5c>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	4a0e      	ldr	r2, [pc, #56]	; (8000774 <HAL_MspInit+0x5c>)
 800073c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000740:	61d3      	str	r3, [r2, #28]
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <HAL_MspInit+0x5c>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800074e:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <HAL_MspInit+0x60>)
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	4a04      	ldr	r2, [pc, #16]	; (8000778 <HAL_MspInit+0x60>)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076a:	bf00      	nop
 800076c:	3714      	adds	r7, #20
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr
 8000774:	40021000 	.word	0x40021000
 8000778:	40010000 	.word	0x40010000

0800077c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000780:	e7fe      	b.n	8000780 <NMI_Handler+0x4>

08000782 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <HardFault_Handler+0x4>

08000788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800078c:	e7fe      	b.n	800078c <MemManage_Handler+0x4>

0800078e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000792:	e7fe      	b.n	8000792 <BusFault_Handler+0x4>

08000794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <UsageFault_Handler+0x4>

0800079a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr

080007a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr

080007b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr

080007be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c2:	f000 fc3d 	bl	8001040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80007d0:	4802      	ldr	r0, [pc, #8]	; (80007dc <DMA1_Channel1_IRQHandler+0x10>)
 80007d2:	f001 fb8d 	bl	8001ef0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000b4 	.word	0x200000b4

080007e0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80007e4:	4802      	ldr	r0, [pc, #8]	; (80007f0 <ADC1_2_IRQHandler+0x10>)
 80007e6:	f000 fe21 	bl	800142c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000084 	.word	0x20000084

080007f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007f8:	4802      	ldr	r0, [pc, #8]	; (8000804 <USART1_IRQHandler+0x10>)
 80007fa:	f003 fd53 	bl	80042a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000334 	.word	0x20000334

08000808 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800080c:	4802      	ldr	r0, [pc, #8]	; (8000818 <USART2_IRQHandler+0x10>)
 800080e:	f003 fd49 	bl	80042a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	2000037c 	.word	0x2000037c

0800081c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <USART3_IRQHandler+0x10>)
 8000822:	f003 fd3f 	bl	80042a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200003c4 	.word	0x200003c4

08000830 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	e00a      	b.n	8000858 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000842:	f3af 8000 	nop.w
 8000846:	4601      	mov	r1, r0
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	1c5a      	adds	r2, r3, #1
 800084c:	60ba      	str	r2, [r7, #8]
 800084e:	b2ca      	uxtb	r2, r1
 8000850:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	3301      	adds	r3, #1
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	697a      	ldr	r2, [r7, #20]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	429a      	cmp	r2, r3
 800085e:	dbf0      	blt.n	8000842 <_read+0x12>
  }

  return len;
 8000860:	687b      	ldr	r3, [r7, #4]
}
 8000862:	4618      	mov	r0, r3
 8000864:	3718      	adds	r7, #24
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b086      	sub	sp, #24
 800086e:	af00      	add	r7, sp, #0
 8000870:	60f8      	str	r0, [r7, #12]
 8000872:	60b9      	str	r1, [r7, #8]
 8000874:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
 800087a:	e009      	b.n	8000890 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	1c5a      	adds	r2, r3, #1
 8000880:	60ba      	str	r2, [r7, #8]
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	4618      	mov	r0, r3
 8000886:	f000 faa5 	bl	8000dd4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	3301      	adds	r3, #1
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	697a      	ldr	r2, [r7, #20]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	429a      	cmp	r2, r3
 8000896:	dbf1      	blt.n	800087c <_write+0x12>
  }
  return len;
 8000898:	687b      	ldr	r3, [r7, #4]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3718      	adds	r7, #24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <_close>:

int _close(int file)
{
 80008a2:	b480      	push	{r7}
 80008a4:	b083      	sub	sp, #12
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr

080008b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008c8:	605a      	str	r2, [r3, #4]
  return 0;
 80008ca:	2300      	movs	r3, #0
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr

080008d6 <_isatty>:

int _isatty(int file)
{
 80008d6:	b480      	push	{r7}
 80008d8:	b083      	sub	sp, #12
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008de:	2301      	movs	r3, #1
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr

080008ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008ea:	b480      	push	{r7}
 80008ec:	b085      	sub	sp, #20
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	60f8      	str	r0, [r7, #12]
 80008f2:	60b9      	str	r1, [r7, #8]
 80008f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008f6:	2300      	movs	r3, #0
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
	...

08000904 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800090c:	4a14      	ldr	r2, [pc, #80]	; (8000960 <_sbrk+0x5c>)
 800090e:	4b15      	ldr	r3, [pc, #84]	; (8000964 <_sbrk+0x60>)
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000918:	4b13      	ldr	r3, [pc, #76]	; (8000968 <_sbrk+0x64>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d102      	bne.n	8000926 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <_sbrk+0x64>)
 8000922:	4a12      	ldr	r2, [pc, #72]	; (800096c <_sbrk+0x68>)
 8000924:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <_sbrk+0x64>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4413      	add	r3, r2
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	429a      	cmp	r2, r3
 8000932:	d207      	bcs.n	8000944 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000934:	f004 fea4 	bl	8005680 <__errno>
 8000938:	4603      	mov	r3, r0
 800093a:	220c      	movs	r2, #12
 800093c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800093e:	f04f 33ff 	mov.w	r3, #4294967295
 8000942:	e009      	b.n	8000958 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000944:	4b08      	ldr	r3, [pc, #32]	; (8000968 <_sbrk+0x64>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800094a:	4b07      	ldr	r3, [pc, #28]	; (8000968 <_sbrk+0x64>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	4a05      	ldr	r2, [pc, #20]	; (8000968 <_sbrk+0x64>)
 8000954:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000956:	68fb      	ldr	r3, [r7, #12]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3718      	adds	r7, #24
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20005000 	.word	0x20005000
 8000964:	00000400 	.word	0x00000400
 8000968:	20000150 	.word	0x20000150
 800096c:	20000578 	.word	0x20000578

08000970 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr

0800097c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b092      	sub	sp, #72	; 0x48
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000982:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800098c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
 800099c:	615a      	str	r2, [r3, #20]
 800099e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	2220      	movs	r2, #32
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f004 fe1c 	bl	80055e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009ac:	4b33      	ldr	r3, [pc, #204]	; (8000a7c <MX_TIM1_Init+0x100>)
 80009ae:	4a34      	ldr	r2, [pc, #208]	; (8000a80 <MX_TIM1_Init+0x104>)
 80009b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009b2:	4b32      	ldr	r3, [pc, #200]	; (8000a7c <MX_TIM1_Init+0x100>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b8:	4b30      	ldr	r3, [pc, #192]	; (8000a7c <MX_TIM1_Init+0x100>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8400-1;
 80009be:	4b2f      	ldr	r3, [pc, #188]	; (8000a7c <MX_TIM1_Init+0x100>)
 80009c0:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80009c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c6:	4b2d      	ldr	r3, [pc, #180]	; (8000a7c <MX_TIM1_Init+0x100>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009cc:	4b2b      	ldr	r3, [pc, #172]	; (8000a7c <MX_TIM1_Init+0x100>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d2:	4b2a      	ldr	r3, [pc, #168]	; (8000a7c <MX_TIM1_Init+0x100>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009d8:	4828      	ldr	r0, [pc, #160]	; (8000a7c <MX_TIM1_Init+0x100>)
 80009da:	f002 ffbf 	bl	800395c <HAL_TIM_PWM_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80009e4:	f7ff fe11 	bl	800060a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e8:	2300      	movs	r3, #0
 80009ea:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ec:	2300      	movs	r3, #0
 80009ee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009f4:	4619      	mov	r1, r3
 80009f6:	4821      	ldr	r0, [pc, #132]	; (8000a7c <MX_TIM1_Init+0x100>)
 80009f8:	f003 faac 	bl	8003f54 <HAL_TIMEx_MasterConfigSynchronization>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000a02:	f7ff fe02 	bl	800060a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a06:	2360      	movs	r3, #96	; 0x60
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a12:	2300      	movs	r3, #0
 8000a14:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a26:	2200      	movs	r2, #0
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4814      	ldr	r0, [pc, #80]	; (8000a7c <MX_TIM1_Init+0x100>)
 8000a2c:	f002 ffe6 	bl	80039fc <HAL_TIM_PWM_ConfigChannel>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000a36:	f7ff fde8 	bl	800060a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a52:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4807      	ldr	r0, [pc, #28]	; (8000a7c <MX_TIM1_Init+0x100>)
 8000a5e:	f003 fad7 	bl	8004010 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000a68:	f7ff fdcf 	bl	800060a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a6c:	4803      	ldr	r0, [pc, #12]	; (8000a7c <MX_TIM1_Init+0x100>)
 8000a6e:	f000 f827 	bl	8000ac0 <HAL_TIM_MspPostInit>

}
 8000a72:	bf00      	nop
 8000a74:	3748      	adds	r7, #72	; 0x48
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000154 	.word	0x20000154
 8000a80:	40012c00 	.word	0x40012c00

08000a84 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a09      	ldr	r2, [pc, #36]	; (8000ab8 <HAL_TIM_PWM_MspInit+0x34>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d10b      	bne.n	8000aae <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <HAL_TIM_PWM_MspInit+0x38>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	4a08      	ldr	r2, [pc, #32]	; (8000abc <HAL_TIM_PWM_MspInit+0x38>)
 8000a9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000aa0:	6193      	str	r3, [r2, #24]
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <HAL_TIM_PWM_MspInit+0x38>)
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000aae:	bf00      	nop
 8000ab0:	3714      	adds	r7, #20
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr
 8000ab8:	40012c00 	.word	0x40012c00
 8000abc:	40021000 	.word	0x40021000

08000ac0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0310 	add.w	r3, r7, #16
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a10      	ldr	r2, [pc, #64]	; (8000b1c <HAL_TIM_MspPostInit+0x5c>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d118      	bne.n	8000b12 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <HAL_TIM_MspPostInit+0x60>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <HAL_TIM_MspPostInit+0x60>)
 8000ae6:	f043 0304 	orr.w	r3, r3, #4
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <HAL_TIM_MspPostInit+0x60>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWMA_Pin;
 8000af8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000afc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b02:	2303      	movs	r3, #3
 8000b04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWMA_GPIO_Port, &GPIO_InitStruct);
 8000b06:	f107 0310 	add.w	r3, r7, #16
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4805      	ldr	r0, [pc, #20]	; (8000b24 <HAL_TIM_MspPostInit+0x64>)
 8000b0e:	f001 fb23 	bl	8002158 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b12:	bf00      	nop
 8000b14:	3720      	adds	r7, #32
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40012c00 	.word	0x40012c00
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40010800 	.word	0x40010800

08000b28 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <MX_USART1_UART_Init+0x4c>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <MX_USART1_UART_Init+0x50>)
 8000b30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <MX_USART1_UART_Init+0x4c>)
 8000b34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_USART1_UART_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <MX_USART1_UART_Init+0x4c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <MX_USART1_UART_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_USART1_UART_Init+0x4c>)
 8000b4e:	220c      	movs	r2, #12
 8000b50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <MX_USART1_UART_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <MX_USART1_UART_Init+0x4c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b5e:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_USART1_UART_Init+0x4c>)
 8000b60:	f003 faa7 	bl	80040b2 <HAL_UART_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b6a:	f7ff fd4e 	bl	800060a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000334 	.word	0x20000334
 8000b78:	40013800 	.word	0x40013800

08000b7c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <MX_USART2_UART_Init+0x50>)
 8000b84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000bb4:	f003 fa7d 	bl	80040b2 <HAL_UART_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bbe:	f7ff fd24 	bl	800060a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	2000037c 	.word	0x2000037c
 8000bcc:	40004400 	.word	0x40004400

08000bd0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <MX_USART3_UART_Init+0x4c>)
 8000bd6:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <MX_USART3_UART_Init+0x50>)
 8000bd8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <MX_USART3_UART_Init+0x4c>)
 8000bdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000be0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <MX_USART3_UART_Init+0x4c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <MX_USART3_UART_Init+0x4c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bee:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <MX_USART3_UART_Init+0x4c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bf4:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <MX_USART3_UART_Init+0x4c>)
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfa:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <MX_USART3_UART_Init+0x4c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <MX_USART3_UART_Init+0x4c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c06:	4805      	ldr	r0, [pc, #20]	; (8000c1c <MX_USART3_UART_Init+0x4c>)
 8000c08:	f003 fa53 	bl	80040b2 <HAL_UART_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c12:	f7ff fcfa 	bl	800060a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200003c4 	.word	0x200003c4
 8000c20:	40004800 	.word	0x40004800

08000c24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08c      	sub	sp, #48	; 0x30
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0320 	add.w	r3, r7, #32
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a5f      	ldr	r2, [pc, #380]	; (8000dbc <HAL_UART_MspInit+0x198>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d13a      	bne.n	8000cba <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c44:	4b5e      	ldr	r3, [pc, #376]	; (8000dc0 <HAL_UART_MspInit+0x19c>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a5d      	ldr	r2, [pc, #372]	; (8000dc0 <HAL_UART_MspInit+0x19c>)
 8000c4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c4e:	6193      	str	r3, [r2, #24]
 8000c50:	4b5b      	ldr	r3, [pc, #364]	; (8000dc0 <HAL_UART_MspInit+0x19c>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c58:	61fb      	str	r3, [r7, #28]
 8000c5a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	4b58      	ldr	r3, [pc, #352]	; (8000dc0 <HAL_UART_MspInit+0x19c>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a57      	ldr	r2, [pc, #348]	; (8000dc0 <HAL_UART_MspInit+0x19c>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	4b55      	ldr	r3, [pc, #340]	; (8000dc0 <HAL_UART_MspInit+0x19c>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	61bb      	str	r3, [r7, #24]
 8000c72:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 0320 	add.w	r3, r7, #32
 8000c86:	4619      	mov	r1, r3
 8000c88:	484e      	ldr	r0, [pc, #312]	; (8000dc4 <HAL_UART_MspInit+0x1a0>)
 8000c8a:	f001 fa65 	bl	8002158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c94:	2300      	movs	r3, #0
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9c:	f107 0320 	add.w	r3, r7, #32
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4848      	ldr	r0, [pc, #288]	; (8000dc4 <HAL_UART_MspInit+0x1a0>)
 8000ca4:	f001 fa58 	bl	8002158 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2100      	movs	r1, #0
 8000cac:	2025      	movs	r0, #37	; 0x25
 8000cae:	f000 ff7a 	bl	8001ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cb2:	2025      	movs	r0, #37	; 0x25
 8000cb4:	f000 ff93 	bl	8001bde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000cb8:	e07c      	b.n	8000db4 <HAL_UART_MspInit+0x190>
  else if(uartHandle->Instance==USART2)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a42      	ldr	r2, [pc, #264]	; (8000dc8 <HAL_UART_MspInit+0x1a4>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d138      	bne.n	8000d36 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc4:	4b3e      	ldr	r3, [pc, #248]	; (8000dc0 <HAL_UART_MspInit+0x19c>)
 8000cc6:	69db      	ldr	r3, [r3, #28]
 8000cc8:	4a3d      	ldr	r2, [pc, #244]	; (8000dc0 <HAL_UART_MspInit+0x19c>)
 8000cca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cce:	61d3      	str	r3, [r2, #28]
 8000cd0:	4b3b      	ldr	r3, [pc, #236]	; (8000dc0 <HAL_UART_MspInit+0x19c>)
 8000cd2:	69db      	ldr	r3, [r3, #28]
 8000cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cdc:	4b38      	ldr	r3, [pc, #224]	; (8000dc0 <HAL_UART_MspInit+0x19c>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a37      	ldr	r2, [pc, #220]	; (8000dc0 <HAL_UART_MspInit+0x19c>)
 8000ce2:	f043 0304 	orr.w	r3, r3, #4
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b35      	ldr	r3, [pc, #212]	; (8000dc0 <HAL_UART_MspInit+0x19c>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0304 	and.w	r3, r3, #4
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d00:	f107 0320 	add.w	r3, r7, #32
 8000d04:	4619      	mov	r1, r3
 8000d06:	482f      	ldr	r0, [pc, #188]	; (8000dc4 <HAL_UART_MspInit+0x1a0>)
 8000d08:	f001 fa26 	bl	8002158 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d0c:	2308      	movs	r3, #8
 8000d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d10:	2300      	movs	r3, #0
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 0320 	add.w	r3, r7, #32
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4829      	ldr	r0, [pc, #164]	; (8000dc4 <HAL_UART_MspInit+0x1a0>)
 8000d20:	f001 fa1a 	bl	8002158 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2100      	movs	r1, #0
 8000d28:	2026      	movs	r0, #38	; 0x26
 8000d2a:	f000 ff3c 	bl	8001ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d2e:	2026      	movs	r0, #38	; 0x26
 8000d30:	f000 ff55 	bl	8001bde <HAL_NVIC_EnableIRQ>
}
 8000d34:	e03e      	b.n	8000db4 <HAL_UART_MspInit+0x190>
  else if(uartHandle->Instance==USART3)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a24      	ldr	r2, [pc, #144]	; (8000dcc <HAL_UART_MspInit+0x1a8>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d139      	bne.n	8000db4 <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d40:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <HAL_UART_MspInit+0x19c>)
 8000d42:	69db      	ldr	r3, [r3, #28]
 8000d44:	4a1e      	ldr	r2, [pc, #120]	; (8000dc0 <HAL_UART_MspInit+0x19c>)
 8000d46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d4a:	61d3      	str	r3, [r2, #28]
 8000d4c:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <HAL_UART_MspInit+0x19c>)
 8000d4e:	69db      	ldr	r3, [r3, #28]
 8000d50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d58:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <HAL_UART_MspInit+0x19c>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	4a18      	ldr	r2, [pc, #96]	; (8000dc0 <HAL_UART_MspInit+0x19c>)
 8000d5e:	f043 0308 	orr.w	r3, r3, #8
 8000d62:	6193      	str	r3, [r2, #24]
 8000d64:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <HAL_UART_MspInit+0x19c>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	f003 0308 	and.w	r3, r3, #8
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7e:	f107 0320 	add.w	r3, r7, #32
 8000d82:	4619      	mov	r1, r3
 8000d84:	4812      	ldr	r0, [pc, #72]	; (8000dd0 <HAL_UART_MspInit+0x1ac>)
 8000d86:	f001 f9e7 	bl	8002158 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d90:	2300      	movs	r3, #0
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d98:	f107 0320 	add.w	r3, r7, #32
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <HAL_UART_MspInit+0x1ac>)
 8000da0:	f001 f9da 	bl	8002158 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2100      	movs	r1, #0
 8000da8:	2027      	movs	r0, #39	; 0x27
 8000daa:	f000 fefc 	bl	8001ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000dae:	2027      	movs	r0, #39	; 0x27
 8000db0:	f000 ff15 	bl	8001bde <HAL_NVIC_EnableIRQ>
}
 8000db4:	bf00      	nop
 8000db6:	3730      	adds	r7, #48	; 0x30
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40013800 	.word	0x40013800
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40010800 	.word	0x40010800
 8000dc8:	40004400 	.word	0x40004400
 8000dcc:	40004800 	.word	0x40004800
 8000dd0:	40010c00 	.word	0x40010c00

08000dd4 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
PUTCHAR_PROTOTYPE
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]

  /* Place your implementation of fputc here */

  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000ddc:	1d39      	adds	r1, r7, #4
 8000dde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000de2:	2201      	movs	r2, #1
 8000de4:	4803      	ldr	r0, [pc, #12]	; (8000df4 <__io_putchar+0x20>)
 8000de6:	f003 f9b4 	bl	8004152 <HAL_UART_Transmit>

  return ch;
 8000dea:	687b      	ldr	r3, [r7, #4]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000334 	.word	0x20000334

08000df8 <HAL_UART_RxCpltCallback>:
//* 閿熷彨鏂洖纰夋嫹
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]

  //* USART1 閿熸枻鎷烽敓鏂ゆ嫹
  if (huart == &huart1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a51      	ldr	r2, [pc, #324]	; (8000f48 <HAL_UART_RxCpltCallback+0x150>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d148      	bne.n	8000e9a <HAL_UART_RxCpltCallback+0xa2>
  {

    printf("%c", USART1_NewData);
 8000e08:	4b50      	ldr	r3, [pc, #320]	; (8000f4c <HAL_UART_RxCpltCallback+0x154>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f004 faad 	bl	800536c <putchar>
    //* 閿熷彨璁规嫹閿熸枻鎷烽敓鏂ゆ嫹浣嶉敓渚ョ鎷蜂竴浣�?
    if ((USART1_Rx_STA & 0x8000) == 0)
 8000e12:	4b4f      	ldr	r3, [pc, #316]	; (8000f50 <HAL_UART_RxCpltCallback+0x158>)
 8000e14:	881b      	ldrh	r3, [r3, #0]
 8000e16:	b21b      	sxth	r3, r3
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	db38      	blt.n	8000e8e <HAL_UART_RxCpltCallback+0x96>
    {
      //* 閿熷彨璁规嫹閿熸枻鎷烽敓鏂ゆ嫹浣嶉敓渚ョ璁规嫹浣�
      if (USART1_Rx_STA & 0x4000)
 8000e1c:	4b4c      	ldr	r3, [pc, #304]	; (8000f50 <HAL_UART_RxCpltCallback+0x158>)
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d011      	beq.n	8000e4c <HAL_UART_RxCpltCallback+0x54>
      {
        if (USART1_NewData != 0x0a) //? 0x0a(閿熸枻鎷烽敓鏂ゆ嫹)
 8000e28:	4b48      	ldr	r3, [pc, #288]	; (8000f4c <HAL_UART_RxCpltCallback+0x154>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b0a      	cmp	r3, #10
 8000e2e:	d003      	beq.n	8000e38 <HAL_UART_RxCpltCallback+0x40>
          USART1_Rx_STA = 0;
 8000e30:	4b47      	ldr	r3, [pc, #284]	; (8000f50 <HAL_UART_RxCpltCallback+0x158>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	801a      	strh	r2, [r3, #0]
 8000e36:	e02a      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x96>
        else
          USART1_Rx_STA |= 0x8000;
 8000e38:	4b45      	ldr	r3, [pc, #276]	; (8000f50 <HAL_UART_RxCpltCallback+0x158>)
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000e40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	4b42      	ldr	r3, [pc, #264]	; (8000f50 <HAL_UART_RxCpltCallback+0x158>)
 8000e48:	801a      	strh	r2, [r3, #0]
 8000e4a:	e020      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x96>
      }
      else
      { //* 閿熷彨璁规嫹閿熻璇ф嫹閿熻鍥炵鎷�
        if (USART1_NewData == 0x0d)
 8000e4c:	4b3f      	ldr	r3, [pc, #252]	; (8000f4c <HAL_UART_RxCpltCallback+0x154>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b0d      	cmp	r3, #13
 8000e52:	d107      	bne.n	8000e64 <HAL_UART_RxCpltCallback+0x6c>
          USART1_Rx_STA |= 0x4000;
 8000e54:	4b3e      	ldr	r3, [pc, #248]	; (8000f50 <HAL_UART_RxCpltCallback+0x158>)
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	4b3c      	ldr	r3, [pc, #240]	; (8000f50 <HAL_UART_RxCpltCallback+0x158>)
 8000e60:	801a      	strh	r2, [r3, #0]
 8000e62:	e014      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x96>
        else
        {
          //* 閿熸枻鎷烽敓鏂ゆ嫹閿熸枻鎷烽敓鏂ゆ嫹鎷ラ敓鏂ゆ嫹閿熸枻鎷烽敓鏂ゆ嫹閿燂拷
          USART1_Rx_Buf[USART1_Rx_STA & 0x3FFF] = USART1_NewData;
 8000e64:	4b3a      	ldr	r3, [pc, #232]	; (8000f50 <HAL_UART_RxCpltCallback+0x158>)
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000e6c:	4a37      	ldr	r2, [pc, #220]	; (8000f4c <HAL_UART_RxCpltCallback+0x154>)
 8000e6e:	7811      	ldrb	r1, [r2, #0]
 8000e70:	4a38      	ldr	r2, [pc, #224]	; (8000f54 <HAL_UART_RxCpltCallback+0x15c>)
 8000e72:	54d1      	strb	r1, [r2, r3]
          USART1_Rx_STA++;
 8000e74:	4b36      	ldr	r3, [pc, #216]	; (8000f50 <HAL_UART_RxCpltCallback+0x158>)
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	4b34      	ldr	r3, [pc, #208]	; (8000f50 <HAL_UART_RxCpltCallback+0x158>)
 8000e7e:	801a      	strh	r2, [r3, #0]
          if (USART1_Rx_STA > (USART1_REC_LEN - 1))
 8000e80:	4b33      	ldr	r3, [pc, #204]	; (8000f50 <HAL_UART_RxCpltCallback+0x158>)
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	2bc7      	cmp	r3, #199	; 0xc7
 8000e86:	d902      	bls.n	8000e8e <HAL_UART_RxCpltCallback+0x96>
            USART1_Rx_STA = 0;
 8000e88:	4b31      	ldr	r3, [pc, #196]	; (8000f50 <HAL_UART_RxCpltCallback+0x158>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	801a      	strh	r2, [r3, #0]
        }
      }
    }
    //* 閿熸枻鎷烽敓閾板尅鎷峰閿熷彨璁规嫹
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&USART1_NewData, 1);
 8000e8e:	2201      	movs	r2, #1
 8000e90:	492e      	ldr	r1, [pc, #184]	; (8000f4c <HAL_UART_RxCpltCallback+0x154>)
 8000e92:	482d      	ldr	r0, [pc, #180]	; (8000f48 <HAL_UART_RxCpltCallback+0x150>)
 8000e94:	f003 f9e0 	bl	8004258 <HAL_UART_Receive_IT>
      }
    }
    //* 閿熸枻鎷烽敓閾板尅鎷峰閿熷彨璁规嫹
    HAL_UART_Receive_IT(&huart2, (uint8_t *)&USART2_NewData, 1);
  }
}
 8000e98:	e052      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x148>
  else if (huart == &huart2)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a2e      	ldr	r2, [pc, #184]	; (8000f58 <HAL_UART_RxCpltCallback+0x160>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d14e      	bne.n	8000f40 <HAL_UART_RxCpltCallback+0x148>
    HAL_UART_Transmit(&huart2, (uint8_t *)&USART2_NewData, 1, 0xFFFF);
 8000ea2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	492c      	ldr	r1, [pc, #176]	; (8000f5c <HAL_UART_RxCpltCallback+0x164>)
 8000eaa:	482b      	ldr	r0, [pc, #172]	; (8000f58 <HAL_UART_RxCpltCallback+0x160>)
 8000eac:	f003 f951 	bl	8004152 <HAL_UART_Transmit>
    printf("%c", USART2_NewData);
 8000eb0:	4b2a      	ldr	r3, [pc, #168]	; (8000f5c <HAL_UART_RxCpltCallback+0x164>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f004 fa59 	bl	800536c <putchar>
    if ((USART2_Rx_STA & 0x8000) == 0)
 8000eba:	4b29      	ldr	r3, [pc, #164]	; (8000f60 <HAL_UART_RxCpltCallback+0x168>)
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	b21b      	sxth	r3, r3
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	db38      	blt.n	8000f36 <HAL_UART_RxCpltCallback+0x13e>
      if (USART2_Rx_STA & 0x4000)
 8000ec4:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <HAL_UART_RxCpltCallback+0x168>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d011      	beq.n	8000ef4 <HAL_UART_RxCpltCallback+0xfc>
        if (USART2_NewData != 0x0a) //? 0x0a(閿熸枻鎷烽敓鏂ゆ嫹)
 8000ed0:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <HAL_UART_RxCpltCallback+0x164>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b0a      	cmp	r3, #10
 8000ed6:	d003      	beq.n	8000ee0 <HAL_UART_RxCpltCallback+0xe8>
          USART2_Rx_STA = 0;
 8000ed8:	4b21      	ldr	r3, [pc, #132]	; (8000f60 <HAL_UART_RxCpltCallback+0x168>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	801a      	strh	r2, [r3, #0]
 8000ede:	e02a      	b.n	8000f36 <HAL_UART_RxCpltCallback+0x13e>
          USART2_Rx_STA |= 0x8000;
 8000ee0:	4b1f      	ldr	r3, [pc, #124]	; (8000f60 <HAL_UART_RxCpltCallback+0x168>)
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000ee8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <HAL_UART_RxCpltCallback+0x168>)
 8000ef0:	801a      	strh	r2, [r3, #0]
 8000ef2:	e020      	b.n	8000f36 <HAL_UART_RxCpltCallback+0x13e>
        if (USART2_NewData == 0x0d)
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <HAL_UART_RxCpltCallback+0x164>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b0d      	cmp	r3, #13
 8000efa:	d107      	bne.n	8000f0c <HAL_UART_RxCpltCallback+0x114>
          USART2_Rx_STA |= 0x4000;
 8000efc:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <HAL_UART_RxCpltCallback+0x168>)
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <HAL_UART_RxCpltCallback+0x168>)
 8000f08:	801a      	strh	r2, [r3, #0]
 8000f0a:	e014      	b.n	8000f36 <HAL_UART_RxCpltCallback+0x13e>
          USART2_Rx_Buf[USART2_Rx_STA & 0x3FFF] = USART2_NewData;
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <HAL_UART_RxCpltCallback+0x168>)
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000f14:	4a11      	ldr	r2, [pc, #68]	; (8000f5c <HAL_UART_RxCpltCallback+0x164>)
 8000f16:	7811      	ldrb	r1, [r2, #0]
 8000f18:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <HAL_UART_RxCpltCallback+0x16c>)
 8000f1a:	54d1      	strb	r1, [r2, r3]
          USART2_Rx_STA++;
 8000f1c:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <HAL_UART_RxCpltCallback+0x168>)
 8000f1e:	881b      	ldrh	r3, [r3, #0]
 8000f20:	3301      	adds	r3, #1
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <HAL_UART_RxCpltCallback+0x168>)
 8000f26:	801a      	strh	r2, [r3, #0]
          if (USART2_Rx_STA > (USART2_REC_LEN - 1))
 8000f28:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <HAL_UART_RxCpltCallback+0x168>)
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	2bc7      	cmp	r3, #199	; 0xc7
 8000f2e:	d902      	bls.n	8000f36 <HAL_UART_RxCpltCallback+0x13e>
            USART2_Rx_STA = 0;
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <HAL_UART_RxCpltCallback+0x168>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	801a      	strh	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart2, (uint8_t *)&USART2_NewData, 1);
 8000f36:	2201      	movs	r2, #1
 8000f38:	4908      	ldr	r1, [pc, #32]	; (8000f5c <HAL_UART_RxCpltCallback+0x164>)
 8000f3a:	4807      	ldr	r0, [pc, #28]	; (8000f58 <HAL_UART_RxCpltCallback+0x160>)
 8000f3c:	f003 f98c 	bl	8004258 <HAL_UART_Receive_IT>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000334 	.word	0x20000334
 8000f4c:	20000266 	.word	0x20000266
 8000f50:	20000264 	.word	0x20000264
 8000f54:	2000019c 	.word	0x2000019c
 8000f58:	2000037c 	.word	0x2000037c
 8000f5c:	20000332 	.word	0x20000332
 8000f60:	20000330 	.word	0x20000330
 8000f64:	20000268 	.word	0x20000268

08000f68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f68:	f7ff fd02 	bl	8000970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f6c:	480b      	ldr	r0, [pc, #44]	; (8000f9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f6e:	490c      	ldr	r1, [pc, #48]	; (8000fa0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f70:	4a0c      	ldr	r2, [pc, #48]	; (8000fa4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f74:	e002      	b.n	8000f7c <LoopCopyDataInit>

08000f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7a:	3304      	adds	r3, #4

08000f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f80:	d3f9      	bcc.n	8000f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f82:	4a09      	ldr	r2, [pc, #36]	; (8000fa8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f84:	4c09      	ldr	r4, [pc, #36]	; (8000fac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f88:	e001      	b.n	8000f8e <LoopFillZerobss>

08000f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f8c:	3204      	adds	r2, #4

08000f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f90:	d3fb      	bcc.n	8000f8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f92:	f004 fb7b 	bl	800568c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f96:	f7ff fa5b 	bl	8000450 <main>
  bx lr
 8000f9a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000fa4:	080062e4 	.word	0x080062e4
  ldr r2, =_sbss
 8000fa8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000fac:	20000574 	.word	0x20000574

08000fb0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb0:	e7fe      	b.n	8000fb0 <CAN1_RX1_IRQHandler>
	...

08000fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <HAL_Init+0x28>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_Init+0x28>)
 8000fbe:	f043 0310 	orr.w	r3, r3, #16
 8000fc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 fde3 	bl	8001b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fca:	200f      	movs	r0, #15
 8000fcc:	f000 f808 	bl	8000fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd0:	f7ff fba2 	bl	8000718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40022000 	.word	0x40022000

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x54>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x58>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 fdfb 	bl	8001bfa <HAL_SYSTICK_Config>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e00e      	b.n	800102c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b0f      	cmp	r3, #15
 8001012:	d80a      	bhi.n	800102a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001014:	2200      	movs	r2, #0
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f000 fdc3 	bl	8001ba6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <HAL_InitTick+0x5c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	e000      	b.n	800102c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000000 	.word	0x20000000
 8001038:	20000008 	.word	0x20000008
 800103c:	20000004 	.word	0x20000004

08001040 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <HAL_IncTick+0x1c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_IncTick+0x20>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a03      	ldr	r2, [pc, #12]	; (8001060 <HAL_IncTick+0x20>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	20000008 	.word	0x20000008
 8001060:	2000040c 	.word	0x2000040c

08001064 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b02      	ldr	r3, [pc, #8]	; (8001074 <HAL_GetTick+0x10>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	2000040c 	.word	0x2000040c

08001078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001080:	f7ff fff0 	bl	8001064 <HAL_GetTick>
 8001084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001090:	d005      	beq.n	800109e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_Delay+0x44>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4413      	add	r3, r2
 800109c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800109e:	bf00      	nop
 80010a0:	f7ff ffe0 	bl	8001064 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d8f7      	bhi.n	80010a0 <HAL_Delay+0x28>
  {
  }
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000008 	.word	0x20000008

080010c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c8:	2300      	movs	r3, #0
 80010ca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e0be      	b.n	8001260 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d109      	bne.n	8001104 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff f88e 	bl	8000220 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 fbc7 	bl	8001898 <ADC_ConversionStop_Disable>
 800110a:	4603      	mov	r3, r0
 800110c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001112:	f003 0310 	and.w	r3, r3, #16
 8001116:	2b00      	cmp	r3, #0
 8001118:	f040 8099 	bne.w	800124e <HAL_ADC_Init+0x18e>
 800111c:	7dfb      	ldrb	r3, [r7, #23]
 800111e:	2b00      	cmp	r3, #0
 8001120:	f040 8095 	bne.w	800124e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001128:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800112c:	f023 0302 	bic.w	r3, r3, #2
 8001130:	f043 0202 	orr.w	r2, r3, #2
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001140:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	7b1b      	ldrb	r3, [r3, #12]
 8001146:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001148:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	4313      	orrs	r3, r2
 800114e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001158:	d003      	beq.n	8001162 <HAL_ADC_Init+0xa2>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d102      	bne.n	8001168 <HAL_ADC_Init+0xa8>
 8001162:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001166:	e000      	b.n	800116a <HAL_ADC_Init+0xaa>
 8001168:	2300      	movs	r3, #0
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	7d1b      	ldrb	r3, [r3, #20]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d119      	bne.n	80011ac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	7b1b      	ldrb	r3, [r3, #12]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d109      	bne.n	8001194 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	3b01      	subs	r3, #1
 8001186:	035a      	lsls	r2, r3, #13
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	e00b      	b.n	80011ac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001198:	f043 0220 	orr.w	r2, r3, #32
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a4:	f043 0201 	orr.w	r2, r3, #1
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	430a      	orrs	r2, r1
 80011be:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	4b28      	ldr	r3, [pc, #160]	; (8001268 <HAL_ADC_Init+0x1a8>)
 80011c8:	4013      	ands	r3, r2
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	6812      	ldr	r2, [r2, #0]
 80011ce:	68b9      	ldr	r1, [r7, #8]
 80011d0:	430b      	orrs	r3, r1
 80011d2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011dc:	d003      	beq.n	80011e6 <HAL_ADC_Init+0x126>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d104      	bne.n	80011f0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	051b      	lsls	r3, r3, #20
 80011ee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	430a      	orrs	r2, r1
 8001202:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689a      	ldr	r2, [r3, #8]
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <HAL_ADC_Init+0x1ac>)
 800120c:	4013      	ands	r3, r2
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	429a      	cmp	r2, r3
 8001212:	d10b      	bne.n	800122c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121e:	f023 0303 	bic.w	r3, r3, #3
 8001222:	f043 0201 	orr.w	r2, r3, #1
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800122a:	e018      	b.n	800125e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001230:	f023 0312 	bic.w	r3, r3, #18
 8001234:	f043 0210 	orr.w	r2, r3, #16
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001240:	f043 0201 	orr.w	r2, r3, #1
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800124c:	e007      	b.n	800125e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001252:	f043 0210 	orr.w	r2, r3, #16
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800125e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	ffe1f7fd 	.word	0xffe1f7fd
 800126c:	ff1f0efe 	.word	0xff1f0efe

08001270 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800127c:	2300      	movs	r3, #0
 800127e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a64      	ldr	r2, [pc, #400]	; (8001418 <HAL_ADC_Start_DMA+0x1a8>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d004      	beq.n	8001294 <HAL_ADC_Start_DMA+0x24>
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a63      	ldr	r2, [pc, #396]	; (800141c <HAL_ADC_Start_DMA+0x1ac>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d106      	bne.n	80012a2 <HAL_ADC_Start_DMA+0x32>
 8001294:	4b60      	ldr	r3, [pc, #384]	; (8001418 <HAL_ADC_Start_DMA+0x1a8>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800129c:	2b00      	cmp	r3, #0
 800129e:	f040 80b3 	bne.w	8001408 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d101      	bne.n	80012b0 <HAL_ADC_Start_DMA+0x40>
 80012ac:	2302      	movs	r3, #2
 80012ae:	e0ae      	b.n	800140e <HAL_ADC_Start_DMA+0x19e>
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2201      	movs	r2, #1
 80012b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80012b8:	68f8      	ldr	r0, [r7, #12]
 80012ba:	f000 fa93 	bl	80017e4 <ADC_Enable>
 80012be:	4603      	mov	r3, r0
 80012c0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80012c2:	7dfb      	ldrb	r3, [r7, #23]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f040 809a 	bne.w	80013fe <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80012d2:	f023 0301 	bic.w	r3, r3, #1
 80012d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a4e      	ldr	r2, [pc, #312]	; (800141c <HAL_ADC_Start_DMA+0x1ac>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d105      	bne.n	80012f4 <HAL_ADC_Start_DMA+0x84>
 80012e8:	4b4b      	ldr	r3, [pc, #300]	; (8001418 <HAL_ADC_Start_DMA+0x1a8>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d115      	bne.n	8001320 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800130a:	2b00      	cmp	r3, #0
 800130c:	d026      	beq.n	800135c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001312:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001316:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800131e:	e01d      	b.n	800135c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001324:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a39      	ldr	r2, [pc, #228]	; (8001418 <HAL_ADC_Start_DMA+0x1a8>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d004      	beq.n	8001340 <HAL_ADC_Start_DMA+0xd0>
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a38      	ldr	r2, [pc, #224]	; (800141c <HAL_ADC_Start_DMA+0x1ac>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d10d      	bne.n	800135c <HAL_ADC_Start_DMA+0xec>
 8001340:	4b35      	ldr	r3, [pc, #212]	; (8001418 <HAL_ADC_Start_DMA+0x1a8>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001348:	2b00      	cmp	r3, #0
 800134a:	d007      	beq.n	800135c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001350:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001354:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001360:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d006      	beq.n	8001376 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136c:	f023 0206 	bic.w	r2, r3, #6
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	62da      	str	r2, [r3, #44]	; 0x2c
 8001374:	e002      	b.n	800137c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2200      	movs	r2, #0
 800137a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	4a25      	ldr	r2, [pc, #148]	; (8001420 <HAL_ADC_Start_DMA+0x1b0>)
 800138a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	4a24      	ldr	r2, [pc, #144]	; (8001424 <HAL_ADC_Start_DMA+0x1b4>)
 8001392:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	4a23      	ldr	r2, [pc, #140]	; (8001428 <HAL_ADC_Start_DMA+0x1b8>)
 800139a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f06f 0202 	mvn.w	r2, #2
 80013a4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013b4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6a18      	ldr	r0, [r3, #32]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	334c      	adds	r3, #76	; 0x4c
 80013c0:	4619      	mov	r1, r3
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f000 fc7f 	bl	8001cc8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80013d4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80013d8:	d108      	bne.n	80013ec <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80013e8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80013ea:	e00f      	b.n	800140c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80013fa:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80013fc:	e006      	b.n	800140c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001406:	e001      	b.n	800140c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800140c:	7dfb      	ldrb	r3, [r7, #23]
}
 800140e:	4618      	mov	r0, r3
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40012400 	.word	0x40012400
 800141c:	40012800 	.word	0x40012800
 8001420:	0800191b 	.word	0x0800191b
 8001424:	08001997 	.word	0x08001997
 8001428:	080019b3 	.word	0x080019b3

0800142c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	f003 0320 	and.w	r3, r3, #32
 800144a:	2b00      	cmp	r3, #0
 800144c:	d03e      	beq.n	80014cc <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d039      	beq.n	80014cc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145c:	f003 0310 	and.w	r3, r3, #16
 8001460:	2b00      	cmp	r3, #0
 8001462:	d105      	bne.n	8001470 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001468:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800147a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800147e:	d11d      	bne.n	80014bc <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001484:	2b00      	cmp	r3, #0
 8001486:	d119      	bne.n	80014bc <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0220 	bic.w	r2, r2, #32
 8001496:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d105      	bne.n	80014bc <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b4:	f043 0201 	orr.w	r2, r3, #1
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 f874 	bl	80015aa <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f06f 0212 	mvn.w	r2, #18
 80014ca:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d04d      	beq.n	8001572 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d048      	beq.n	8001572 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e4:	f003 0310 	and.w	r3, r3, #16
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d105      	bne.n	80014f8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001502:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001506:	d012      	beq.n	800152e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001512:	2b00      	cmp	r3, #0
 8001514:	d125      	bne.n	8001562 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001520:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001524:	d11d      	bne.n	8001562 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800152a:	2b00      	cmp	r3, #0
 800152c:	d119      	bne.n	8001562 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800153c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001542:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001552:	2b00      	cmp	r3, #0
 8001554:	d105      	bne.n	8001562 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155a:	f043 0201 	orr.w	r2, r3, #1
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 fa3f 	bl	80019e6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f06f 020c 	mvn.w	r2, #12
 8001570:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001578:	2b00      	cmp	r3, #0
 800157a:	d012      	beq.n	80015a2 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00d      	beq.n	80015a2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f000 f81b 	bl	80015ce <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f06f 0201 	mvn.w	r2, #1
 80015a0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr

080015ce <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr

080015e0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
	...

080015f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800160c:	2b01      	cmp	r3, #1
 800160e:	d101      	bne.n	8001614 <HAL_ADC_ConfigChannel+0x20>
 8001610:	2302      	movs	r3, #2
 8001612:	e0dc      	b.n	80017ce <HAL_ADC_ConfigChannel+0x1da>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b06      	cmp	r3, #6
 8001622:	d81c      	bhi.n	800165e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	3b05      	subs	r3, #5
 8001636:	221f      	movs	r2, #31
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	4019      	ands	r1, r3
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	6818      	ldr	r0, [r3, #0]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	4613      	mov	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	3b05      	subs	r3, #5
 8001650:	fa00 f203 	lsl.w	r2, r0, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	635a      	str	r2, [r3, #52]	; 0x34
 800165c:	e03c      	b.n	80016d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b0c      	cmp	r3, #12
 8001664:	d81c      	bhi.n	80016a0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	3b23      	subs	r3, #35	; 0x23
 8001678:	221f      	movs	r2, #31
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	4019      	ands	r1, r3
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	6818      	ldr	r0, [r3, #0]
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	3b23      	subs	r3, #35	; 0x23
 8001692:	fa00 f203 	lsl.w	r2, r0, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	631a      	str	r2, [r3, #48]	; 0x30
 800169e:	e01b      	b.n	80016d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	3b41      	subs	r3, #65	; 0x41
 80016b2:	221f      	movs	r2, #31
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	4019      	ands	r1, r3
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	4613      	mov	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	3b41      	subs	r3, #65	; 0x41
 80016cc:	fa00 f203 	lsl.w	r2, r0, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b09      	cmp	r3, #9
 80016de:	d91c      	bls.n	800171a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68d9      	ldr	r1, [r3, #12]
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	4613      	mov	r3, r2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	4413      	add	r3, r2
 80016f0:	3b1e      	subs	r3, #30
 80016f2:	2207      	movs	r2, #7
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	4019      	ands	r1, r3
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	6898      	ldr	r0, [r3, #8]
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	4613      	mov	r3, r2
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	4413      	add	r3, r2
 800170a:	3b1e      	subs	r3, #30
 800170c:	fa00 f203 	lsl.w	r2, r0, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	e019      	b.n	800174e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6919      	ldr	r1, [r3, #16]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4613      	mov	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	4413      	add	r3, r2
 800172a:	2207      	movs	r2, #7
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	4019      	ands	r1, r3
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	6898      	ldr	r0, [r3, #8]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4613      	mov	r3, r2
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	4413      	add	r3, r2
 8001742:	fa00 f203 	lsl.w	r2, r0, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b10      	cmp	r3, #16
 8001754:	d003      	beq.n	800175e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800175a:	2b11      	cmp	r3, #17
 800175c:	d132      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a1d      	ldr	r2, [pc, #116]	; (80017d8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d125      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d126      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001784:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b10      	cmp	r3, #16
 800178c:	d11a      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800178e:	4b13      	ldr	r3, [pc, #76]	; (80017dc <HAL_ADC_ConfigChannel+0x1e8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a13      	ldr	r2, [pc, #76]	; (80017e0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001794:	fba2 2303 	umull	r2, r3, r2, r3
 8001798:	0c9a      	lsrs	r2, r3, #18
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017a4:	e002      	b.n	80017ac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f9      	bne.n	80017a6 <HAL_ADC_ConfigChannel+0x1b2>
 80017b2:	e007      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b8:	f043 0220 	orr.w	r2, r3, #32
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr
 80017d8:	40012400 	.word	0x40012400
 80017dc:	20000000 	.word	0x20000000
 80017e0:	431bde83 	.word	0x431bde83

080017e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d040      	beq.n	8001884 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f042 0201 	orr.w	r2, r2, #1
 8001810:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001812:	4b1f      	ldr	r3, [pc, #124]	; (8001890 <ADC_Enable+0xac>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a1f      	ldr	r2, [pc, #124]	; (8001894 <ADC_Enable+0xb0>)
 8001818:	fba2 2303 	umull	r2, r3, r2, r3
 800181c:	0c9b      	lsrs	r3, r3, #18
 800181e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001820:	e002      	b.n	8001828 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	3b01      	subs	r3, #1
 8001826:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f9      	bne.n	8001822 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800182e:	f7ff fc19 	bl	8001064 <HAL_GetTick>
 8001832:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001834:	e01f      	b.n	8001876 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001836:	f7ff fc15 	bl	8001064 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d918      	bls.n	8001876 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b01      	cmp	r3, #1
 8001850:	d011      	beq.n	8001876 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001856:	f043 0210 	orr.w	r2, r3, #16
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001862:	f043 0201 	orr.w	r2, r3, #1
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e007      	b.n	8001886 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b01      	cmp	r3, #1
 8001882:	d1d8      	bne.n	8001836 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000000 	.word	0x20000000
 8001894:	431bde83 	.word	0x431bde83

08001898 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d12e      	bne.n	8001910 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 0201 	bic.w	r2, r2, #1
 80018c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018c2:	f7ff fbcf 	bl	8001064 <HAL_GetTick>
 80018c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018c8:	e01b      	b.n	8001902 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018ca:	f7ff fbcb 	bl	8001064 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d914      	bls.n	8001902 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d10d      	bne.n	8001902 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ea:	f043 0210 	orr.w	r2, r3, #16
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f6:	f043 0201 	orr.w	r2, r3, #1
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e007      	b.n	8001912 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b01      	cmp	r3, #1
 800190e:	d0dc      	beq.n	80018ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b084      	sub	sp, #16
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001930:	2b00      	cmp	r3, #0
 8001932:	d127      	bne.n	8001984 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001938:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800194a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800194e:	d115      	bne.n	800197c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001954:	2b00      	cmp	r3, #0
 8001956:	d111      	bne.n	800197c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001968:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d105      	bne.n	800197c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001974:	f043 0201 	orr.w	r2, r3, #1
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f7ff fe14 	bl	80015aa <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001982:	e004      	b.n	800198e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	4798      	blx	r3
}
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b084      	sub	sp, #16
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f7ff fe09 	bl	80015bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019aa:	bf00      	nop
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b084      	sub	sp, #16
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019be:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d0:	f043 0204 	orr.w	r2, r3, #4
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f7ff fe01 	bl	80015e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <__NVIC_SetPriorityGrouping+0x44>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a14:	4013      	ands	r3, r2
 8001a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a2a:	4a04      	ldr	r2, [pc, #16]	; (8001a3c <__NVIC_SetPriorityGrouping+0x44>)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	60d3      	str	r3, [r2, #12]
}
 8001a30:	bf00      	nop
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a44:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <__NVIC_GetPriorityGrouping+0x18>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	0a1b      	lsrs	r3, r3, #8
 8001a4a:	f003 0307 	and.w	r3, r3, #7
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	db0b      	blt.n	8001a86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	f003 021f 	and.w	r2, r3, #31
 8001a74:	4906      	ldr	r1, [pc, #24]	; (8001a90 <__NVIC_EnableIRQ+0x34>)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	095b      	lsrs	r3, r3, #5
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr
 8001a90:	e000e100 	.word	0xe000e100

08001a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	6039      	str	r1, [r7, #0]
 8001a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	db0a      	blt.n	8001abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	490c      	ldr	r1, [pc, #48]	; (8001ae0 <__NVIC_SetPriority+0x4c>)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	0112      	lsls	r2, r2, #4
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001abc:	e00a      	b.n	8001ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4908      	ldr	r1, [pc, #32]	; (8001ae4 <__NVIC_SetPriority+0x50>)
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	3b04      	subs	r3, #4
 8001acc:	0112      	lsls	r2, r2, #4
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	761a      	strb	r2, [r3, #24]
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	e000e100 	.word	0xe000e100
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b089      	sub	sp, #36	; 0x24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f1c3 0307 	rsb	r3, r3, #7
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	bf28      	it	cs
 8001b06:	2304      	movcs	r3, #4
 8001b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	2b06      	cmp	r3, #6
 8001b10:	d902      	bls.n	8001b18 <NVIC_EncodePriority+0x30>
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3b03      	subs	r3, #3
 8001b16:	e000      	b.n	8001b1a <NVIC_EncodePriority+0x32>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43da      	mvns	r2, r3
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b30:	f04f 31ff 	mov.w	r1, #4294967295
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	43d9      	mvns	r1, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b40:	4313      	orrs	r3, r2
         );
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3724      	adds	r7, #36	; 0x24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr

08001b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b5c:	d301      	bcc.n	8001b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e00f      	b.n	8001b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b62:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <SysTick_Config+0x40>)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b6a:	210f      	movs	r1, #15
 8001b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b70:	f7ff ff90 	bl	8001a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b74:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <SysTick_Config+0x40>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b7a:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <SysTick_Config+0x40>)
 8001b7c:	2207      	movs	r2, #7
 8001b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	e000e010 	.word	0xe000e010

08001b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff ff2d 	bl	80019f8 <__NVIC_SetPriorityGrouping>
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b086      	sub	sp, #24
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	607a      	str	r2, [r7, #4]
 8001bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb8:	f7ff ff42 	bl	8001a40 <__NVIC_GetPriorityGrouping>
 8001bbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	68b9      	ldr	r1, [r7, #8]
 8001bc2:	6978      	ldr	r0, [r7, #20]
 8001bc4:	f7ff ff90 	bl	8001ae8 <NVIC_EncodePriority>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff5f 	bl	8001a94 <__NVIC_SetPriority>
}
 8001bd6:	bf00      	nop
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4603      	mov	r3, r0
 8001be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff35 	bl	8001a5c <__NVIC_EnableIRQ>
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff ffa2 	bl	8001b4c <SysTick_Config>
 8001c08:	4603      	mov	r3, r0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e043      	b.n	8001cb2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	4b22      	ldr	r3, [pc, #136]	; (8001cbc <HAL_DMA_Init+0xa8>)
 8001c32:	4413      	add	r3, r2
 8001c34:	4a22      	ldr	r2, [pc, #136]	; (8001cc0 <HAL_DMA_Init+0xac>)
 8001c36:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3a:	091b      	lsrs	r3, r3, #4
 8001c3c:	009a      	lsls	r2, r3, #2
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a1f      	ldr	r2, [pc, #124]	; (8001cc4 <HAL_DMA_Init+0xb0>)
 8001c46:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c5e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001c62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr
 8001cbc:	bffdfff8 	.word	0xbffdfff8
 8001cc0:	cccccccd 	.word	0xcccccccd
 8001cc4:	40020000 	.word	0x40020000

08001cc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
 8001cd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d101      	bne.n	8001ce8 <HAL_DMA_Start_IT+0x20>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e04b      	b.n	8001d80 <HAL_DMA_Start_IT+0xb8>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d13a      	bne.n	8001d72 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2202      	movs	r2, #2
 8001d00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0201 	bic.w	r2, r2, #1
 8001d18:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	68b9      	ldr	r1, [r7, #8]
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f000 f9eb 	bl	80020fc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d008      	beq.n	8001d40 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f042 020e 	orr.w	r2, r2, #14
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	e00f      	b.n	8001d60 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0204 	bic.w	r2, r2, #4
 8001d4e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 020a 	orr.w	r2, r2, #10
 8001d5e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0201 	orr.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	e005      	b.n	8001d7e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d90:	2300      	movs	r3, #0
 8001d92:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d008      	beq.n	8001db2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2204      	movs	r2, #4
 8001da4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e020      	b.n	8001df4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 020e 	bic.w	r2, r2, #14
 8001dc0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0201 	bic.w	r2, r2, #1
 8001dd0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dda:	2101      	movs	r1, #1
 8001ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8001de0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr
	...

08001e00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d005      	beq.n	8001e24 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2204      	movs	r2, #4
 8001e1c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	73fb      	strb	r3, [r7, #15]
 8001e22:	e051      	b.n	8001ec8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 020e 	bic.w	r2, r2, #14
 8001e32:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0201 	bic.w	r2, r2, #1
 8001e42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a22      	ldr	r2, [pc, #136]	; (8001ed4 <HAL_DMA_Abort_IT+0xd4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d029      	beq.n	8001ea2 <HAL_DMA_Abort_IT+0xa2>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a21      	ldr	r2, [pc, #132]	; (8001ed8 <HAL_DMA_Abort_IT+0xd8>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d022      	beq.n	8001e9e <HAL_DMA_Abort_IT+0x9e>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a1f      	ldr	r2, [pc, #124]	; (8001edc <HAL_DMA_Abort_IT+0xdc>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01a      	beq.n	8001e98 <HAL_DMA_Abort_IT+0x98>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a1e      	ldr	r2, [pc, #120]	; (8001ee0 <HAL_DMA_Abort_IT+0xe0>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d012      	beq.n	8001e92 <HAL_DMA_Abort_IT+0x92>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a1c      	ldr	r2, [pc, #112]	; (8001ee4 <HAL_DMA_Abort_IT+0xe4>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d00a      	beq.n	8001e8c <HAL_DMA_Abort_IT+0x8c>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a1b      	ldr	r2, [pc, #108]	; (8001ee8 <HAL_DMA_Abort_IT+0xe8>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d102      	bne.n	8001e86 <HAL_DMA_Abort_IT+0x86>
 8001e80:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e84:	e00e      	b.n	8001ea4 <HAL_DMA_Abort_IT+0xa4>
 8001e86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e8a:	e00b      	b.n	8001ea4 <HAL_DMA_Abort_IT+0xa4>
 8001e8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e90:	e008      	b.n	8001ea4 <HAL_DMA_Abort_IT+0xa4>
 8001e92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e96:	e005      	b.n	8001ea4 <HAL_DMA_Abort_IT+0xa4>
 8001e98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e9c:	e002      	b.n	8001ea4 <HAL_DMA_Abort_IT+0xa4>
 8001e9e:	2310      	movs	r3, #16
 8001ea0:	e000      	b.n	8001ea4 <HAL_DMA_Abort_IT+0xa4>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	4a11      	ldr	r2, [pc, #68]	; (8001eec <HAL_DMA_Abort_IT+0xec>)
 8001ea6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	4798      	blx	r3
    } 
  }
  return status;
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40020008 	.word	0x40020008
 8001ed8:	4002001c 	.word	0x4002001c
 8001edc:	40020030 	.word	0x40020030
 8001ee0:	40020044 	.word	0x40020044
 8001ee4:	40020058 	.word	0x40020058
 8001ee8:	4002006c 	.word	0x4002006c
 8001eec:	40020000 	.word	0x40020000

08001ef0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	2204      	movs	r2, #4
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d04f      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0xc8>
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d04a      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0320 	and.w	r3, r3, #32
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d107      	bne.n	8001f40 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0204 	bic.w	r2, r2, #4
 8001f3e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a66      	ldr	r2, [pc, #408]	; (80020e0 <HAL_DMA_IRQHandler+0x1f0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d029      	beq.n	8001f9e <HAL_DMA_IRQHandler+0xae>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a65      	ldr	r2, [pc, #404]	; (80020e4 <HAL_DMA_IRQHandler+0x1f4>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d022      	beq.n	8001f9a <HAL_DMA_IRQHandler+0xaa>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a63      	ldr	r2, [pc, #396]	; (80020e8 <HAL_DMA_IRQHandler+0x1f8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d01a      	beq.n	8001f94 <HAL_DMA_IRQHandler+0xa4>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a62      	ldr	r2, [pc, #392]	; (80020ec <HAL_DMA_IRQHandler+0x1fc>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d012      	beq.n	8001f8e <HAL_DMA_IRQHandler+0x9e>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a60      	ldr	r2, [pc, #384]	; (80020f0 <HAL_DMA_IRQHandler+0x200>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d00a      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x98>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a5f      	ldr	r2, [pc, #380]	; (80020f4 <HAL_DMA_IRQHandler+0x204>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d102      	bne.n	8001f82 <HAL_DMA_IRQHandler+0x92>
 8001f7c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f80:	e00e      	b.n	8001fa0 <HAL_DMA_IRQHandler+0xb0>
 8001f82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001f86:	e00b      	b.n	8001fa0 <HAL_DMA_IRQHandler+0xb0>
 8001f88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f8c:	e008      	b.n	8001fa0 <HAL_DMA_IRQHandler+0xb0>
 8001f8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f92:	e005      	b.n	8001fa0 <HAL_DMA_IRQHandler+0xb0>
 8001f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f98:	e002      	b.n	8001fa0 <HAL_DMA_IRQHandler+0xb0>
 8001f9a:	2340      	movs	r3, #64	; 0x40
 8001f9c:	e000      	b.n	8001fa0 <HAL_DMA_IRQHandler+0xb0>
 8001f9e:	2304      	movs	r3, #4
 8001fa0:	4a55      	ldr	r2, [pc, #340]	; (80020f8 <HAL_DMA_IRQHandler+0x208>)
 8001fa2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 8094 	beq.w	80020d6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001fb6:	e08e      	b.n	80020d6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	409a      	lsls	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d056      	beq.n	8002076 <HAL_DMA_IRQHandler+0x186>
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d051      	beq.n	8002076 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0320 	and.w	r3, r3, #32
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10b      	bne.n	8001ff8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 020a 	bic.w	r2, r2, #10
 8001fee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a38      	ldr	r2, [pc, #224]	; (80020e0 <HAL_DMA_IRQHandler+0x1f0>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d029      	beq.n	8002056 <HAL_DMA_IRQHandler+0x166>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a37      	ldr	r2, [pc, #220]	; (80020e4 <HAL_DMA_IRQHandler+0x1f4>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d022      	beq.n	8002052 <HAL_DMA_IRQHandler+0x162>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a35      	ldr	r2, [pc, #212]	; (80020e8 <HAL_DMA_IRQHandler+0x1f8>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d01a      	beq.n	800204c <HAL_DMA_IRQHandler+0x15c>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a34      	ldr	r2, [pc, #208]	; (80020ec <HAL_DMA_IRQHandler+0x1fc>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d012      	beq.n	8002046 <HAL_DMA_IRQHandler+0x156>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a32      	ldr	r2, [pc, #200]	; (80020f0 <HAL_DMA_IRQHandler+0x200>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d00a      	beq.n	8002040 <HAL_DMA_IRQHandler+0x150>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a31      	ldr	r2, [pc, #196]	; (80020f4 <HAL_DMA_IRQHandler+0x204>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d102      	bne.n	800203a <HAL_DMA_IRQHandler+0x14a>
 8002034:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002038:	e00e      	b.n	8002058 <HAL_DMA_IRQHandler+0x168>
 800203a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800203e:	e00b      	b.n	8002058 <HAL_DMA_IRQHandler+0x168>
 8002040:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002044:	e008      	b.n	8002058 <HAL_DMA_IRQHandler+0x168>
 8002046:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800204a:	e005      	b.n	8002058 <HAL_DMA_IRQHandler+0x168>
 800204c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002050:	e002      	b.n	8002058 <HAL_DMA_IRQHandler+0x168>
 8002052:	2320      	movs	r3, #32
 8002054:	e000      	b.n	8002058 <HAL_DMA_IRQHandler+0x168>
 8002056:	2302      	movs	r3, #2
 8002058:	4a27      	ldr	r2, [pc, #156]	; (80020f8 <HAL_DMA_IRQHandler+0x208>)
 800205a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002068:	2b00      	cmp	r3, #0
 800206a:	d034      	beq.n	80020d6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002074:	e02f      	b.n	80020d6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	2208      	movs	r2, #8
 800207c:	409a      	lsls	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4013      	ands	r3, r2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d028      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x1e8>
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	f003 0308 	and.w	r3, r3, #8
 800208c:	2b00      	cmp	r3, #0
 800208e:	d023      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 020e 	bic.w	r2, r2, #14
 800209e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a8:	2101      	movs	r1, #1
 80020aa:	fa01 f202 	lsl.w	r2, r1, r2
 80020ae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d004      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	4798      	blx	r3
    }
  }
  return;
 80020d6:	bf00      	nop
 80020d8:	bf00      	nop
}
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40020008 	.word	0x40020008
 80020e4:	4002001c 	.word	0x4002001c
 80020e8:	40020030 	.word	0x40020030
 80020ec:	40020044 	.word	0x40020044
 80020f0:	40020058 	.word	0x40020058
 80020f4:	4002006c 	.word	0x4002006c
 80020f8:	40020000 	.word	0x40020000

080020fc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002112:	2101      	movs	r1, #1
 8002114:	fa01 f202 	lsl.w	r2, r1, r2
 8002118:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b10      	cmp	r3, #16
 8002128:	d108      	bne.n	800213c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800213a:	e007      	b.n	800214c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	60da      	str	r2, [r3, #12]
}
 800214c:	bf00      	nop
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr
	...

08002158 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002158:	b480      	push	{r7}
 800215a:	b08b      	sub	sp, #44	; 0x2c
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002162:	2300      	movs	r3, #0
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002166:	2300      	movs	r3, #0
 8002168:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800216a:	e169      	b.n	8002440 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800216c:	2201      	movs	r2, #1
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	69fa      	ldr	r2, [r7, #28]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	429a      	cmp	r2, r3
 8002186:	f040 8158 	bne.w	800243a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	4a9a      	ldr	r2, [pc, #616]	; (80023f8 <HAL_GPIO_Init+0x2a0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d05e      	beq.n	8002252 <HAL_GPIO_Init+0xfa>
 8002194:	4a98      	ldr	r2, [pc, #608]	; (80023f8 <HAL_GPIO_Init+0x2a0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d875      	bhi.n	8002286 <HAL_GPIO_Init+0x12e>
 800219a:	4a98      	ldr	r2, [pc, #608]	; (80023fc <HAL_GPIO_Init+0x2a4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d058      	beq.n	8002252 <HAL_GPIO_Init+0xfa>
 80021a0:	4a96      	ldr	r2, [pc, #600]	; (80023fc <HAL_GPIO_Init+0x2a4>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d86f      	bhi.n	8002286 <HAL_GPIO_Init+0x12e>
 80021a6:	4a96      	ldr	r2, [pc, #600]	; (8002400 <HAL_GPIO_Init+0x2a8>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d052      	beq.n	8002252 <HAL_GPIO_Init+0xfa>
 80021ac:	4a94      	ldr	r2, [pc, #592]	; (8002400 <HAL_GPIO_Init+0x2a8>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d869      	bhi.n	8002286 <HAL_GPIO_Init+0x12e>
 80021b2:	4a94      	ldr	r2, [pc, #592]	; (8002404 <HAL_GPIO_Init+0x2ac>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d04c      	beq.n	8002252 <HAL_GPIO_Init+0xfa>
 80021b8:	4a92      	ldr	r2, [pc, #584]	; (8002404 <HAL_GPIO_Init+0x2ac>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d863      	bhi.n	8002286 <HAL_GPIO_Init+0x12e>
 80021be:	4a92      	ldr	r2, [pc, #584]	; (8002408 <HAL_GPIO_Init+0x2b0>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d046      	beq.n	8002252 <HAL_GPIO_Init+0xfa>
 80021c4:	4a90      	ldr	r2, [pc, #576]	; (8002408 <HAL_GPIO_Init+0x2b0>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d85d      	bhi.n	8002286 <HAL_GPIO_Init+0x12e>
 80021ca:	2b12      	cmp	r3, #18
 80021cc:	d82a      	bhi.n	8002224 <HAL_GPIO_Init+0xcc>
 80021ce:	2b12      	cmp	r3, #18
 80021d0:	d859      	bhi.n	8002286 <HAL_GPIO_Init+0x12e>
 80021d2:	a201      	add	r2, pc, #4	; (adr r2, 80021d8 <HAL_GPIO_Init+0x80>)
 80021d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d8:	08002253 	.word	0x08002253
 80021dc:	0800222d 	.word	0x0800222d
 80021e0:	0800223f 	.word	0x0800223f
 80021e4:	08002281 	.word	0x08002281
 80021e8:	08002287 	.word	0x08002287
 80021ec:	08002287 	.word	0x08002287
 80021f0:	08002287 	.word	0x08002287
 80021f4:	08002287 	.word	0x08002287
 80021f8:	08002287 	.word	0x08002287
 80021fc:	08002287 	.word	0x08002287
 8002200:	08002287 	.word	0x08002287
 8002204:	08002287 	.word	0x08002287
 8002208:	08002287 	.word	0x08002287
 800220c:	08002287 	.word	0x08002287
 8002210:	08002287 	.word	0x08002287
 8002214:	08002287 	.word	0x08002287
 8002218:	08002287 	.word	0x08002287
 800221c:	08002235 	.word	0x08002235
 8002220:	08002249 	.word	0x08002249
 8002224:	4a79      	ldr	r2, [pc, #484]	; (800240c <HAL_GPIO_Init+0x2b4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d013      	beq.n	8002252 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800222a:	e02c      	b.n	8002286 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	623b      	str	r3, [r7, #32]
          break;
 8002232:	e029      	b.n	8002288 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	3304      	adds	r3, #4
 800223a:	623b      	str	r3, [r7, #32]
          break;
 800223c:	e024      	b.n	8002288 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	3308      	adds	r3, #8
 8002244:	623b      	str	r3, [r7, #32]
          break;
 8002246:	e01f      	b.n	8002288 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	330c      	adds	r3, #12
 800224e:	623b      	str	r3, [r7, #32]
          break;
 8002250:	e01a      	b.n	8002288 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d102      	bne.n	8002260 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800225a:	2304      	movs	r3, #4
 800225c:	623b      	str	r3, [r7, #32]
          break;
 800225e:	e013      	b.n	8002288 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d105      	bne.n	8002274 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002268:	2308      	movs	r3, #8
 800226a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69fa      	ldr	r2, [r7, #28]
 8002270:	611a      	str	r2, [r3, #16]
          break;
 8002272:	e009      	b.n	8002288 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002274:	2308      	movs	r3, #8
 8002276:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69fa      	ldr	r2, [r7, #28]
 800227c:	615a      	str	r2, [r3, #20]
          break;
 800227e:	e003      	b.n	8002288 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002280:	2300      	movs	r3, #0
 8002282:	623b      	str	r3, [r7, #32]
          break;
 8002284:	e000      	b.n	8002288 <HAL_GPIO_Init+0x130>
          break;
 8002286:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	2bff      	cmp	r3, #255	; 0xff
 800228c:	d801      	bhi.n	8002292 <HAL_GPIO_Init+0x13a>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	e001      	b.n	8002296 <HAL_GPIO_Init+0x13e>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3304      	adds	r3, #4
 8002296:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	2bff      	cmp	r3, #255	; 0xff
 800229c:	d802      	bhi.n	80022a4 <HAL_GPIO_Init+0x14c>
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	e002      	b.n	80022aa <HAL_GPIO_Init+0x152>
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	3b08      	subs	r3, #8
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	210f      	movs	r1, #15
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	fa01 f303 	lsl.w	r3, r1, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	401a      	ands	r2, r3
 80022bc:	6a39      	ldr	r1, [r7, #32]
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	fa01 f303 	lsl.w	r3, r1, r3
 80022c4:	431a      	orrs	r2, r3
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 80b1 	beq.w	800243a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022d8:	4b4d      	ldr	r3, [pc, #308]	; (8002410 <HAL_GPIO_Init+0x2b8>)
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	4a4c      	ldr	r2, [pc, #304]	; (8002410 <HAL_GPIO_Init+0x2b8>)
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	6193      	str	r3, [r2, #24]
 80022e4:	4b4a      	ldr	r3, [pc, #296]	; (8002410 <HAL_GPIO_Init+0x2b8>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022f0:	4a48      	ldr	r2, [pc, #288]	; (8002414 <HAL_GPIO_Init+0x2bc>)
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	089b      	lsrs	r3, r3, #2
 80022f6:	3302      	adds	r3, #2
 80022f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	f003 0303 	and.w	r3, r3, #3
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	220f      	movs	r2, #15
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4013      	ands	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a40      	ldr	r2, [pc, #256]	; (8002418 <HAL_GPIO_Init+0x2c0>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d013      	beq.n	8002344 <HAL_GPIO_Init+0x1ec>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a3f      	ldr	r2, [pc, #252]	; (800241c <HAL_GPIO_Init+0x2c4>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d00d      	beq.n	8002340 <HAL_GPIO_Init+0x1e8>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a3e      	ldr	r2, [pc, #248]	; (8002420 <HAL_GPIO_Init+0x2c8>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d007      	beq.n	800233c <HAL_GPIO_Init+0x1e4>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a3d      	ldr	r2, [pc, #244]	; (8002424 <HAL_GPIO_Init+0x2cc>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d101      	bne.n	8002338 <HAL_GPIO_Init+0x1e0>
 8002334:	2303      	movs	r3, #3
 8002336:	e006      	b.n	8002346 <HAL_GPIO_Init+0x1ee>
 8002338:	2304      	movs	r3, #4
 800233a:	e004      	b.n	8002346 <HAL_GPIO_Init+0x1ee>
 800233c:	2302      	movs	r3, #2
 800233e:	e002      	b.n	8002346 <HAL_GPIO_Init+0x1ee>
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <HAL_GPIO_Init+0x1ee>
 8002344:	2300      	movs	r3, #0
 8002346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002348:	f002 0203 	and.w	r2, r2, #3
 800234c:	0092      	lsls	r2, r2, #2
 800234e:	4093      	lsls	r3, r2
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	4313      	orrs	r3, r2
 8002354:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002356:	492f      	ldr	r1, [pc, #188]	; (8002414 <HAL_GPIO_Init+0x2bc>)
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	089b      	lsrs	r3, r3, #2
 800235c:	3302      	adds	r3, #2
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d006      	beq.n	800237e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002370:	4b2d      	ldr	r3, [pc, #180]	; (8002428 <HAL_GPIO_Init+0x2d0>)
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	492c      	ldr	r1, [pc, #176]	; (8002428 <HAL_GPIO_Init+0x2d0>)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	4313      	orrs	r3, r2
 800237a:	608b      	str	r3, [r1, #8]
 800237c:	e006      	b.n	800238c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800237e:	4b2a      	ldr	r3, [pc, #168]	; (8002428 <HAL_GPIO_Init+0x2d0>)
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	43db      	mvns	r3, r3
 8002386:	4928      	ldr	r1, [pc, #160]	; (8002428 <HAL_GPIO_Init+0x2d0>)
 8002388:	4013      	ands	r3, r2
 800238a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d006      	beq.n	80023a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002398:	4b23      	ldr	r3, [pc, #140]	; (8002428 <HAL_GPIO_Init+0x2d0>)
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	4922      	ldr	r1, [pc, #136]	; (8002428 <HAL_GPIO_Init+0x2d0>)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	60cb      	str	r3, [r1, #12]
 80023a4:	e006      	b.n	80023b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023a6:	4b20      	ldr	r3, [pc, #128]	; (8002428 <HAL_GPIO_Init+0x2d0>)
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	43db      	mvns	r3, r3
 80023ae:	491e      	ldr	r1, [pc, #120]	; (8002428 <HAL_GPIO_Init+0x2d0>)
 80023b0:	4013      	ands	r3, r2
 80023b2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d006      	beq.n	80023ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023c0:	4b19      	ldr	r3, [pc, #100]	; (8002428 <HAL_GPIO_Init+0x2d0>)
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	4918      	ldr	r1, [pc, #96]	; (8002428 <HAL_GPIO_Init+0x2d0>)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	604b      	str	r3, [r1, #4]
 80023cc:	e006      	b.n	80023dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023ce:	4b16      	ldr	r3, [pc, #88]	; (8002428 <HAL_GPIO_Init+0x2d0>)
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	4914      	ldr	r1, [pc, #80]	; (8002428 <HAL_GPIO_Init+0x2d0>)
 80023d8:	4013      	ands	r3, r2
 80023da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d021      	beq.n	800242c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023e8:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <HAL_GPIO_Init+0x2d0>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	490e      	ldr	r1, [pc, #56]	; (8002428 <HAL_GPIO_Init+0x2d0>)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	600b      	str	r3, [r1, #0]
 80023f4:	e021      	b.n	800243a <HAL_GPIO_Init+0x2e2>
 80023f6:	bf00      	nop
 80023f8:	10320000 	.word	0x10320000
 80023fc:	10310000 	.word	0x10310000
 8002400:	10220000 	.word	0x10220000
 8002404:	10210000 	.word	0x10210000
 8002408:	10120000 	.word	0x10120000
 800240c:	10110000 	.word	0x10110000
 8002410:	40021000 	.word	0x40021000
 8002414:	40010000 	.word	0x40010000
 8002418:	40010800 	.word	0x40010800
 800241c:	40010c00 	.word	0x40010c00
 8002420:	40011000 	.word	0x40011000
 8002424:	40011400 	.word	0x40011400
 8002428:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800242c:	4b0b      	ldr	r3, [pc, #44]	; (800245c <HAL_GPIO_Init+0x304>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	43db      	mvns	r3, r3
 8002434:	4909      	ldr	r1, [pc, #36]	; (800245c <HAL_GPIO_Init+0x304>)
 8002436:	4013      	ands	r3, r2
 8002438:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	3301      	adds	r3, #1
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	fa22 f303 	lsr.w	r3, r2, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	f47f ae8e 	bne.w	800216c <HAL_GPIO_Init+0x14>
  }
}
 8002450:	bf00      	nop
 8002452:	bf00      	nop
 8002454:	372c      	adds	r7, #44	; 0x2c
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr
 800245c:	40010400 	.word	0x40010400

08002460 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	887b      	ldrh	r3, [r7, #2]
 8002472:	4013      	ands	r3, r2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d002      	beq.n	800247e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
 800247c:	e001      	b.n	8002482 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800247e:	2300      	movs	r3, #0
 8002480:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002482:	7bfb      	ldrb	r3, [r7, #15]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr

0800248e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	460b      	mov	r3, r1
 8002498:	807b      	strh	r3, [r7, #2]
 800249a:	4613      	mov	r3, r2
 800249c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800249e:	787b      	ldrb	r3, [r7, #1]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024a4:	887a      	ldrh	r2, [r7, #2]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024aa:	e003      	b.n	80024b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024ac:	887b      	ldrh	r3, [r7, #2]
 80024ae:	041a      	lsls	r2, r3, #16
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	611a      	str	r2, [r3, #16]
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bc80      	pop	{r7}
 80024bc:	4770      	bx	lr
	...

080024c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e272      	b.n	80029b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 8087 	beq.w	80025ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024e0:	4b92      	ldr	r3, [pc, #584]	; (800272c <HAL_RCC_OscConfig+0x26c>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 030c 	and.w	r3, r3, #12
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d00c      	beq.n	8002506 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024ec:	4b8f      	ldr	r3, [pc, #572]	; (800272c <HAL_RCC_OscConfig+0x26c>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 030c 	and.w	r3, r3, #12
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d112      	bne.n	800251e <HAL_RCC_OscConfig+0x5e>
 80024f8:	4b8c      	ldr	r3, [pc, #560]	; (800272c <HAL_RCC_OscConfig+0x26c>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002504:	d10b      	bne.n	800251e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002506:	4b89      	ldr	r3, [pc, #548]	; (800272c <HAL_RCC_OscConfig+0x26c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d06c      	beq.n	80025ec <HAL_RCC_OscConfig+0x12c>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d168      	bne.n	80025ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e24c      	b.n	80029b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002526:	d106      	bne.n	8002536 <HAL_RCC_OscConfig+0x76>
 8002528:	4b80      	ldr	r3, [pc, #512]	; (800272c <HAL_RCC_OscConfig+0x26c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a7f      	ldr	r2, [pc, #508]	; (800272c <HAL_RCC_OscConfig+0x26c>)
 800252e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	e02e      	b.n	8002594 <HAL_RCC_OscConfig+0xd4>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10c      	bne.n	8002558 <HAL_RCC_OscConfig+0x98>
 800253e:	4b7b      	ldr	r3, [pc, #492]	; (800272c <HAL_RCC_OscConfig+0x26c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a7a      	ldr	r2, [pc, #488]	; (800272c <HAL_RCC_OscConfig+0x26c>)
 8002544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	4b78      	ldr	r3, [pc, #480]	; (800272c <HAL_RCC_OscConfig+0x26c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a77      	ldr	r2, [pc, #476]	; (800272c <HAL_RCC_OscConfig+0x26c>)
 8002550:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	e01d      	b.n	8002594 <HAL_RCC_OscConfig+0xd4>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002560:	d10c      	bne.n	800257c <HAL_RCC_OscConfig+0xbc>
 8002562:	4b72      	ldr	r3, [pc, #456]	; (800272c <HAL_RCC_OscConfig+0x26c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a71      	ldr	r2, [pc, #452]	; (800272c <HAL_RCC_OscConfig+0x26c>)
 8002568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	4b6f      	ldr	r3, [pc, #444]	; (800272c <HAL_RCC_OscConfig+0x26c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a6e      	ldr	r2, [pc, #440]	; (800272c <HAL_RCC_OscConfig+0x26c>)
 8002574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	e00b      	b.n	8002594 <HAL_RCC_OscConfig+0xd4>
 800257c:	4b6b      	ldr	r3, [pc, #428]	; (800272c <HAL_RCC_OscConfig+0x26c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a6a      	ldr	r2, [pc, #424]	; (800272c <HAL_RCC_OscConfig+0x26c>)
 8002582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002586:	6013      	str	r3, [r2, #0]
 8002588:	4b68      	ldr	r3, [pc, #416]	; (800272c <HAL_RCC_OscConfig+0x26c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a67      	ldr	r2, [pc, #412]	; (800272c <HAL_RCC_OscConfig+0x26c>)
 800258e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002592:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d013      	beq.n	80025c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259c:	f7fe fd62 	bl	8001064 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a4:	f7fe fd5e 	bl	8001064 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b64      	cmp	r3, #100	; 0x64
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e200      	b.n	80029b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b6:	4b5d      	ldr	r3, [pc, #372]	; (800272c <HAL_RCC_OscConfig+0x26c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0xe4>
 80025c2:	e014      	b.n	80025ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c4:	f7fe fd4e 	bl	8001064 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025cc:	f7fe fd4a 	bl	8001064 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b64      	cmp	r3, #100	; 0x64
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e1ec      	b.n	80029b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025de:	4b53      	ldr	r3, [pc, #332]	; (800272c <HAL_RCC_OscConfig+0x26c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f0      	bne.n	80025cc <HAL_RCC_OscConfig+0x10c>
 80025ea:	e000      	b.n	80025ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d063      	beq.n	80026c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025fa:	4b4c      	ldr	r3, [pc, #304]	; (800272c <HAL_RCC_OscConfig+0x26c>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f003 030c 	and.w	r3, r3, #12
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00b      	beq.n	800261e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002606:	4b49      	ldr	r3, [pc, #292]	; (800272c <HAL_RCC_OscConfig+0x26c>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f003 030c 	and.w	r3, r3, #12
 800260e:	2b08      	cmp	r3, #8
 8002610:	d11c      	bne.n	800264c <HAL_RCC_OscConfig+0x18c>
 8002612:	4b46      	ldr	r3, [pc, #280]	; (800272c <HAL_RCC_OscConfig+0x26c>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d116      	bne.n	800264c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800261e:	4b43      	ldr	r3, [pc, #268]	; (800272c <HAL_RCC_OscConfig+0x26c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d005      	beq.n	8002636 <HAL_RCC_OscConfig+0x176>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d001      	beq.n	8002636 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e1c0      	b.n	80029b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002636:	4b3d      	ldr	r3, [pc, #244]	; (800272c <HAL_RCC_OscConfig+0x26c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	4939      	ldr	r1, [pc, #228]	; (800272c <HAL_RCC_OscConfig+0x26c>)
 8002646:	4313      	orrs	r3, r2
 8002648:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800264a:	e03a      	b.n	80026c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d020      	beq.n	8002696 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002654:	4b36      	ldr	r3, [pc, #216]	; (8002730 <HAL_RCC_OscConfig+0x270>)
 8002656:	2201      	movs	r2, #1
 8002658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265a:	f7fe fd03 	bl	8001064 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002662:	f7fe fcff 	bl	8001064 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e1a1      	b.n	80029b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002674:	4b2d      	ldr	r3, [pc, #180]	; (800272c <HAL_RCC_OscConfig+0x26c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0f0      	beq.n	8002662 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002680:	4b2a      	ldr	r3, [pc, #168]	; (800272c <HAL_RCC_OscConfig+0x26c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	4927      	ldr	r1, [pc, #156]	; (800272c <HAL_RCC_OscConfig+0x26c>)
 8002690:	4313      	orrs	r3, r2
 8002692:	600b      	str	r3, [r1, #0]
 8002694:	e015      	b.n	80026c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002696:	4b26      	ldr	r3, [pc, #152]	; (8002730 <HAL_RCC_OscConfig+0x270>)
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269c:	f7fe fce2 	bl	8001064 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a4:	f7fe fcde 	bl	8001064 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e180      	b.n	80029b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b6:	4b1d      	ldr	r3, [pc, #116]	; (800272c <HAL_RCC_OscConfig+0x26c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f0      	bne.n	80026a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d03a      	beq.n	8002744 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d019      	beq.n	800270a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026d6:	4b17      	ldr	r3, [pc, #92]	; (8002734 <HAL_RCC_OscConfig+0x274>)
 80026d8:	2201      	movs	r2, #1
 80026da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026dc:	f7fe fcc2 	bl	8001064 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026e4:	f7fe fcbe 	bl	8001064 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e160      	b.n	80029b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f6:	4b0d      	ldr	r3, [pc, #52]	; (800272c <HAL_RCC_OscConfig+0x26c>)
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0f0      	beq.n	80026e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002702:	2001      	movs	r0, #1
 8002704:	f000 face 	bl	8002ca4 <RCC_Delay>
 8002708:	e01c      	b.n	8002744 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800270a:	4b0a      	ldr	r3, [pc, #40]	; (8002734 <HAL_RCC_OscConfig+0x274>)
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002710:	f7fe fca8 	bl	8001064 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002716:	e00f      	b.n	8002738 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002718:	f7fe fca4 	bl	8001064 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d908      	bls.n	8002738 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e146      	b.n	80029b8 <HAL_RCC_OscConfig+0x4f8>
 800272a:	bf00      	nop
 800272c:	40021000 	.word	0x40021000
 8002730:	42420000 	.word	0x42420000
 8002734:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002738:	4b92      	ldr	r3, [pc, #584]	; (8002984 <HAL_RCC_OscConfig+0x4c4>)
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1e9      	bne.n	8002718 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 80a6 	beq.w	800289e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002752:	2300      	movs	r3, #0
 8002754:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002756:	4b8b      	ldr	r3, [pc, #556]	; (8002984 <HAL_RCC_OscConfig+0x4c4>)
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10d      	bne.n	800277e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002762:	4b88      	ldr	r3, [pc, #544]	; (8002984 <HAL_RCC_OscConfig+0x4c4>)
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	4a87      	ldr	r2, [pc, #540]	; (8002984 <HAL_RCC_OscConfig+0x4c4>)
 8002768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800276c:	61d3      	str	r3, [r2, #28]
 800276e:	4b85      	ldr	r3, [pc, #532]	; (8002984 <HAL_RCC_OscConfig+0x4c4>)
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002776:	60bb      	str	r3, [r7, #8]
 8002778:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800277a:	2301      	movs	r3, #1
 800277c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277e:	4b82      	ldr	r3, [pc, #520]	; (8002988 <HAL_RCC_OscConfig+0x4c8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002786:	2b00      	cmp	r3, #0
 8002788:	d118      	bne.n	80027bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800278a:	4b7f      	ldr	r3, [pc, #508]	; (8002988 <HAL_RCC_OscConfig+0x4c8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a7e      	ldr	r2, [pc, #504]	; (8002988 <HAL_RCC_OscConfig+0x4c8>)
 8002790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002794:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002796:	f7fe fc65 	bl	8001064 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800279e:	f7fe fc61 	bl	8001064 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b64      	cmp	r3, #100	; 0x64
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e103      	b.n	80029b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b0:	4b75      	ldr	r3, [pc, #468]	; (8002988 <HAL_RCC_OscConfig+0x4c8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0f0      	beq.n	800279e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d106      	bne.n	80027d2 <HAL_RCC_OscConfig+0x312>
 80027c4:	4b6f      	ldr	r3, [pc, #444]	; (8002984 <HAL_RCC_OscConfig+0x4c4>)
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	4a6e      	ldr	r2, [pc, #440]	; (8002984 <HAL_RCC_OscConfig+0x4c4>)
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	6213      	str	r3, [r2, #32]
 80027d0:	e02d      	b.n	800282e <HAL_RCC_OscConfig+0x36e>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10c      	bne.n	80027f4 <HAL_RCC_OscConfig+0x334>
 80027da:	4b6a      	ldr	r3, [pc, #424]	; (8002984 <HAL_RCC_OscConfig+0x4c4>)
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	4a69      	ldr	r2, [pc, #420]	; (8002984 <HAL_RCC_OscConfig+0x4c4>)
 80027e0:	f023 0301 	bic.w	r3, r3, #1
 80027e4:	6213      	str	r3, [r2, #32]
 80027e6:	4b67      	ldr	r3, [pc, #412]	; (8002984 <HAL_RCC_OscConfig+0x4c4>)
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	4a66      	ldr	r2, [pc, #408]	; (8002984 <HAL_RCC_OscConfig+0x4c4>)
 80027ec:	f023 0304 	bic.w	r3, r3, #4
 80027f0:	6213      	str	r3, [r2, #32]
 80027f2:	e01c      	b.n	800282e <HAL_RCC_OscConfig+0x36e>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	2b05      	cmp	r3, #5
 80027fa:	d10c      	bne.n	8002816 <HAL_RCC_OscConfig+0x356>
 80027fc:	4b61      	ldr	r3, [pc, #388]	; (8002984 <HAL_RCC_OscConfig+0x4c4>)
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	4a60      	ldr	r2, [pc, #384]	; (8002984 <HAL_RCC_OscConfig+0x4c4>)
 8002802:	f043 0304 	orr.w	r3, r3, #4
 8002806:	6213      	str	r3, [r2, #32]
 8002808:	4b5e      	ldr	r3, [pc, #376]	; (8002984 <HAL_RCC_OscConfig+0x4c4>)
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	4a5d      	ldr	r2, [pc, #372]	; (8002984 <HAL_RCC_OscConfig+0x4c4>)
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	6213      	str	r3, [r2, #32]
 8002814:	e00b      	b.n	800282e <HAL_RCC_OscConfig+0x36e>
 8002816:	4b5b      	ldr	r3, [pc, #364]	; (8002984 <HAL_RCC_OscConfig+0x4c4>)
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	4a5a      	ldr	r2, [pc, #360]	; (8002984 <HAL_RCC_OscConfig+0x4c4>)
 800281c:	f023 0301 	bic.w	r3, r3, #1
 8002820:	6213      	str	r3, [r2, #32]
 8002822:	4b58      	ldr	r3, [pc, #352]	; (8002984 <HAL_RCC_OscConfig+0x4c4>)
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	4a57      	ldr	r2, [pc, #348]	; (8002984 <HAL_RCC_OscConfig+0x4c4>)
 8002828:	f023 0304 	bic.w	r3, r3, #4
 800282c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d015      	beq.n	8002862 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002836:	f7fe fc15 	bl	8001064 <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283c:	e00a      	b.n	8002854 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283e:	f7fe fc11 	bl	8001064 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	f241 3288 	movw	r2, #5000	; 0x1388
 800284c:	4293      	cmp	r3, r2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e0b1      	b.n	80029b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002854:	4b4b      	ldr	r3, [pc, #300]	; (8002984 <HAL_RCC_OscConfig+0x4c4>)
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0ee      	beq.n	800283e <HAL_RCC_OscConfig+0x37e>
 8002860:	e014      	b.n	800288c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002862:	f7fe fbff 	bl	8001064 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002868:	e00a      	b.n	8002880 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286a:	f7fe fbfb 	bl	8001064 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	f241 3288 	movw	r2, #5000	; 0x1388
 8002878:	4293      	cmp	r3, r2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e09b      	b.n	80029b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002880:	4b40      	ldr	r3, [pc, #256]	; (8002984 <HAL_RCC_OscConfig+0x4c4>)
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1ee      	bne.n	800286a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800288c:	7dfb      	ldrb	r3, [r7, #23]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d105      	bne.n	800289e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002892:	4b3c      	ldr	r3, [pc, #240]	; (8002984 <HAL_RCC_OscConfig+0x4c4>)
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	4a3b      	ldr	r2, [pc, #236]	; (8002984 <HAL_RCC_OscConfig+0x4c4>)
 8002898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800289c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 8087 	beq.w	80029b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028a8:	4b36      	ldr	r3, [pc, #216]	; (8002984 <HAL_RCC_OscConfig+0x4c4>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 030c 	and.w	r3, r3, #12
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d061      	beq.n	8002978 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d146      	bne.n	800294a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028bc:	4b33      	ldr	r3, [pc, #204]	; (800298c <HAL_RCC_OscConfig+0x4cc>)
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c2:	f7fe fbcf 	bl	8001064 <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ca:	f7fe fbcb 	bl	8001064 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e06d      	b.n	80029b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028dc:	4b29      	ldr	r3, [pc, #164]	; (8002984 <HAL_RCC_OscConfig+0x4c4>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1f0      	bne.n	80028ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f0:	d108      	bne.n	8002904 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028f2:	4b24      	ldr	r3, [pc, #144]	; (8002984 <HAL_RCC_OscConfig+0x4c4>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	4921      	ldr	r1, [pc, #132]	; (8002984 <HAL_RCC_OscConfig+0x4c4>)
 8002900:	4313      	orrs	r3, r2
 8002902:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002904:	4b1f      	ldr	r3, [pc, #124]	; (8002984 <HAL_RCC_OscConfig+0x4c4>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a19      	ldr	r1, [r3, #32]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	430b      	orrs	r3, r1
 8002916:	491b      	ldr	r1, [pc, #108]	; (8002984 <HAL_RCC_OscConfig+0x4c4>)
 8002918:	4313      	orrs	r3, r2
 800291a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800291c:	4b1b      	ldr	r3, [pc, #108]	; (800298c <HAL_RCC_OscConfig+0x4cc>)
 800291e:	2201      	movs	r2, #1
 8002920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002922:	f7fe fb9f 	bl	8001064 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800292a:	f7fe fb9b 	bl	8001064 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e03d      	b.n	80029b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800293c:	4b11      	ldr	r3, [pc, #68]	; (8002984 <HAL_RCC_OscConfig+0x4c4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0f0      	beq.n	800292a <HAL_RCC_OscConfig+0x46a>
 8002948:	e035      	b.n	80029b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800294a:	4b10      	ldr	r3, [pc, #64]	; (800298c <HAL_RCC_OscConfig+0x4cc>)
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002950:	f7fe fb88 	bl	8001064 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002958:	f7fe fb84 	bl	8001064 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e026      	b.n	80029b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800296a:	4b06      	ldr	r3, [pc, #24]	; (8002984 <HAL_RCC_OscConfig+0x4c4>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1f0      	bne.n	8002958 <HAL_RCC_OscConfig+0x498>
 8002976:	e01e      	b.n	80029b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d107      	bne.n	8002990 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e019      	b.n	80029b8 <HAL_RCC_OscConfig+0x4f8>
 8002984:	40021000 	.word	0x40021000
 8002988:	40007000 	.word	0x40007000
 800298c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002990:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <HAL_RCC_OscConfig+0x500>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d106      	bne.n	80029b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d001      	beq.n	80029b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40021000 	.word	0x40021000

080029c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e0d0      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029d8:	4b6a      	ldr	r3, [pc, #424]	; (8002b84 <HAL_RCC_ClockConfig+0x1c0>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d910      	bls.n	8002a08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e6:	4b67      	ldr	r3, [pc, #412]	; (8002b84 <HAL_RCC_ClockConfig+0x1c0>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f023 0207 	bic.w	r2, r3, #7
 80029ee:	4965      	ldr	r1, [pc, #404]	; (8002b84 <HAL_RCC_ClockConfig+0x1c0>)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f6:	4b63      	ldr	r3, [pc, #396]	; (8002b84 <HAL_RCC_ClockConfig+0x1c0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e0b8      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d020      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d005      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a20:	4b59      	ldr	r3, [pc, #356]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	4a58      	ldr	r2, [pc, #352]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d005      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a38:	4b53      	ldr	r3, [pc, #332]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	4a52      	ldr	r2, [pc, #328]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a44:	4b50      	ldr	r3, [pc, #320]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	494d      	ldr	r1, [pc, #308]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d040      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d107      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6a:	4b47      	ldr	r3, [pc, #284]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d115      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e07f      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d107      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a82:	4b41      	ldr	r3, [pc, #260]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d109      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e073      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a92:	4b3d      	ldr	r3, [pc, #244]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e06b      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aa2:	4b39      	ldr	r3, [pc, #228]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f023 0203 	bic.w	r2, r3, #3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	4936      	ldr	r1, [pc, #216]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ab4:	f7fe fad6 	bl	8001064 <HAL_GetTick>
 8002ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aba:	e00a      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002abc:	f7fe fad2 	bl	8001064 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e053      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad2:	4b2d      	ldr	r3, [pc, #180]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 020c 	and.w	r2, r3, #12
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d1eb      	bne.n	8002abc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae4:	4b27      	ldr	r3, [pc, #156]	; (8002b84 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d210      	bcs.n	8002b14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af2:	4b24      	ldr	r3, [pc, #144]	; (8002b84 <HAL_RCC_ClockConfig+0x1c0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f023 0207 	bic.w	r2, r3, #7
 8002afa:	4922      	ldr	r1, [pc, #136]	; (8002b84 <HAL_RCC_ClockConfig+0x1c0>)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b02:	4b20      	ldr	r3, [pc, #128]	; (8002b84 <HAL_RCC_ClockConfig+0x1c0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e032      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d008      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b20:	4b19      	ldr	r3, [pc, #100]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	4916      	ldr	r1, [pc, #88]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d009      	beq.n	8002b52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b3e:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	490e      	ldr	r1, [pc, #56]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b52:	f000 f821 	bl	8002b98 <HAL_RCC_GetSysClockFreq>
 8002b56:	4602      	mov	r2, r0
 8002b58:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	091b      	lsrs	r3, r3, #4
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	490a      	ldr	r1, [pc, #40]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b64:	5ccb      	ldrb	r3, [r1, r3]
 8002b66:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6a:	4a09      	ldr	r2, [pc, #36]	; (8002b90 <HAL_RCC_ClockConfig+0x1cc>)
 8002b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b6e:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <HAL_RCC_ClockConfig+0x1d0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe fa34 	bl	8000fe0 <HAL_InitTick>

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40022000 	.word	0x40022000
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	08006278 	.word	0x08006278
 8002b90:	20000000 	.word	0x20000000
 8002b94:	20000004 	.word	0x20000004

08002b98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b087      	sub	sp, #28
 8002b9c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	617b      	str	r3, [r7, #20]
 8002baa:	2300      	movs	r3, #0
 8002bac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bb2:	4b1e      	ldr	r3, [pc, #120]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x94>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f003 030c 	and.w	r3, r3, #12
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d002      	beq.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x30>
 8002bc2:	2b08      	cmp	r3, #8
 8002bc4:	d003      	beq.n	8002bce <HAL_RCC_GetSysClockFreq+0x36>
 8002bc6:	e027      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bc8:	4b19      	ldr	r3, [pc, #100]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bca:	613b      	str	r3, [r7, #16]
      break;
 8002bcc:	e027      	b.n	8002c1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	0c9b      	lsrs	r3, r3, #18
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	4a17      	ldr	r2, [pc, #92]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bd8:	5cd3      	ldrb	r3, [r2, r3]
 8002bda:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d010      	beq.n	8002c08 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002be6:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x94>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	0c5b      	lsrs	r3, r3, #17
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	4a11      	ldr	r2, [pc, #68]	; (8002c38 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bf2:	5cd3      	ldrb	r3, [r2, r3]
 8002bf4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a0d      	ldr	r2, [pc, #52]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bfa:	fb03 f202 	mul.w	r2, r3, r2
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c04:	617b      	str	r3, [r7, #20]
 8002c06:	e004      	b.n	8002c12 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a0c      	ldr	r2, [pc, #48]	; (8002c3c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c0c:	fb02 f303 	mul.w	r3, r2, r3
 8002c10:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	613b      	str	r3, [r7, #16]
      break;
 8002c16:	e002      	b.n	8002c1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c18:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c1a:	613b      	str	r3, [r7, #16]
      break;
 8002c1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c1e:	693b      	ldr	r3, [r7, #16]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	371c      	adds	r7, #28
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	007a1200 	.word	0x007a1200
 8002c34:	08006290 	.word	0x08006290
 8002c38:	080062a0 	.word	0x080062a0
 8002c3c:	003d0900 	.word	0x003d0900

08002c40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c44:	4b02      	ldr	r3, [pc, #8]	; (8002c50 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c46:	681b      	ldr	r3, [r3, #0]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr
 8002c50:	20000000 	.word	0x20000000

08002c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c58:	f7ff fff2 	bl	8002c40 <HAL_RCC_GetHCLKFreq>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	0a1b      	lsrs	r3, r3, #8
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	4903      	ldr	r1, [pc, #12]	; (8002c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c6a:	5ccb      	ldrb	r3, [r1, r3]
 8002c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40021000 	.word	0x40021000
 8002c78:	08006288 	.word	0x08006288

08002c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c80:	f7ff ffde 	bl	8002c40 <HAL_RCC_GetHCLKFreq>
 8002c84:	4602      	mov	r2, r0
 8002c86:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	0adb      	lsrs	r3, r3, #11
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	4903      	ldr	r1, [pc, #12]	; (8002ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c92:	5ccb      	ldrb	r3, [r1, r3]
 8002c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	08006288 	.word	0x08006288

08002ca4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cac:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <RCC_Delay+0x34>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a0a      	ldr	r2, [pc, #40]	; (8002cdc <RCC_Delay+0x38>)
 8002cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb6:	0a5b      	lsrs	r3, r3, #9
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	fb02 f303 	mul.w	r3, r2, r3
 8002cbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cc0:	bf00      	nop
  }
  while (Delay --);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1e5a      	subs	r2, r3, #1
 8002cc6:	60fa      	str	r2, [r7, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1f9      	bne.n	8002cc0 <RCC_Delay+0x1c>
}
 8002ccc:	bf00      	nop
 8002cce:	bf00      	nop
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr
 8002cd8:	20000000 	.word	0x20000000
 8002cdc:	10624dd3 	.word	0x10624dd3

08002ce0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	613b      	str	r3, [r7, #16]
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d07d      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d00:	4b4f      	ldr	r3, [pc, #316]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10d      	bne.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d0c:	4b4c      	ldr	r3, [pc, #304]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	4a4b      	ldr	r2, [pc, #300]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d16:	61d3      	str	r3, [r2, #28]
 8002d18:	4b49      	ldr	r3, [pc, #292]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d24:	2301      	movs	r3, #1
 8002d26:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d28:	4b46      	ldr	r3, [pc, #280]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d118      	bne.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d34:	4b43      	ldr	r3, [pc, #268]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a42      	ldr	r2, [pc, #264]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d40:	f7fe f990 	bl	8001064 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d46:	e008      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d48:	f7fe f98c 	bl	8001064 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b64      	cmp	r3, #100	; 0x64
 8002d54:	d901      	bls.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e06d      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5a:	4b3a      	ldr	r3, [pc, #232]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d66:	4b36      	ldr	r3, [pc, #216]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d6e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d02e      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d027      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d84:	4b2e      	ldr	r3, [pc, #184]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d8c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d8e:	4b2e      	ldr	r3, [pc, #184]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d94:	4b2c      	ldr	r3, [pc, #176]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d9a:	4a29      	ldr	r2, [pc, #164]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d014      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002daa:	f7fe f95b 	bl	8001064 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db0:	e00a      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db2:	f7fe f957 	bl	8001064 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e036      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc8:	4b1d      	ldr	r3, [pc, #116]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0ee      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dd4:	4b1a      	ldr	r3, [pc, #104]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	4917      	ldr	r1, [pc, #92]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002de6:	7dfb      	ldrb	r3, [r7, #23]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d105      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dec:	4b14      	ldr	r3, [pc, #80]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	4a13      	ldr	r2, [pc, #76]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002df6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d008      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e04:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	490b      	ldr	r1, [pc, #44]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0310 	and.w	r3, r3, #16
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d008      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e22:	4b07      	ldr	r3, [pc, #28]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	4904      	ldr	r1, [pc, #16]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40021000 	.word	0x40021000
 8002e44:	40007000 	.word	0x40007000
 8002e48:	42420440 	.word	0x42420440

08002e4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e076      	b.n	8002f4c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d108      	bne.n	8002e78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e6e:	d009      	beq.n	8002e84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	61da      	str	r2, [r3, #28]
 8002e76:	e005      	b.n	8002e84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d106      	bne.n	8002ea4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7fd fbee 	bl	8000680 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f08:	ea42 0103 	orr.w	r1, r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	0c1a      	lsrs	r2, r3, #16
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f002 0204 	and.w	r2, r2, #4
 8002f2a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	69da      	ldr	r2, [r3, #28]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	603b      	str	r3, [r7, #0]
 8002f60:	4613      	mov	r3, r2
 8002f62:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <HAL_SPI_Transmit+0x22>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e12d      	b.n	80031d2 <HAL_SPI_Transmit+0x27e>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f7e:	f7fe f871 	bl	8001064 <HAL_GetTick>
 8002f82:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f84:	88fb      	ldrh	r3, [r7, #6]
 8002f86:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d002      	beq.n	8002f9a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f94:	2302      	movs	r3, #2
 8002f96:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f98:	e116      	b.n	80031c8 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <HAL_SPI_Transmit+0x52>
 8002fa0:	88fb      	ldrh	r3, [r7, #6]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d102      	bne.n	8002fac <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002faa:	e10d      	b.n	80031c8 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2203      	movs	r2, #3
 8002fb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	88fa      	ldrh	r2, [r7, #6]
 8002fc4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	88fa      	ldrh	r2, [r7, #6]
 8002fca:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ff2:	d10f      	bne.n	8003014 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003002:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003012:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301e:	2b40      	cmp	r3, #64	; 0x40
 8003020:	d007      	beq.n	8003032 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003030:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800303a:	d14f      	bne.n	80030dc <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d002      	beq.n	800304a <HAL_SPI_Transmit+0xf6>
 8003044:	8afb      	ldrh	r3, [r7, #22]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d142      	bne.n	80030d0 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	881a      	ldrh	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	1c9a      	adds	r2, r3, #2
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003064:	b29b      	uxth	r3, r3
 8003066:	3b01      	subs	r3, #1
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800306e:	e02f      	b.n	80030d0 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b02      	cmp	r3, #2
 800307c:	d112      	bne.n	80030a4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	881a      	ldrh	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	1c9a      	adds	r2, r3, #2
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003098:	b29b      	uxth	r3, r3
 800309a:	3b01      	subs	r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	86da      	strh	r2, [r3, #54]	; 0x36
 80030a2:	e015      	b.n	80030d0 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030a4:	f7fd ffde 	bl	8001064 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d803      	bhi.n	80030bc <HAL_SPI_Transmit+0x168>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ba:	d102      	bne.n	80030c2 <HAL_SPI_Transmit+0x16e>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d106      	bne.n	80030d0 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80030ce:	e07b      	b.n	80031c8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1ca      	bne.n	8003070 <HAL_SPI_Transmit+0x11c>
 80030da:	e050      	b.n	800317e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <HAL_SPI_Transmit+0x196>
 80030e4:	8afb      	ldrh	r3, [r7, #22]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d144      	bne.n	8003174 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	330c      	adds	r3, #12
 80030f4:	7812      	ldrb	r2, [r2, #0]
 80030f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fc:	1c5a      	adds	r2, r3, #1
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003106:	b29b      	uxth	r3, r3
 8003108:	3b01      	subs	r3, #1
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003110:	e030      	b.n	8003174 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b02      	cmp	r3, #2
 800311e:	d113      	bne.n	8003148 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	330c      	adds	r3, #12
 800312a:	7812      	ldrb	r2, [r2, #0]
 800312c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800313c:	b29b      	uxth	r3, r3
 800313e:	3b01      	subs	r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	86da      	strh	r2, [r3, #54]	; 0x36
 8003146:	e015      	b.n	8003174 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003148:	f7fd ff8c 	bl	8001064 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	429a      	cmp	r2, r3
 8003156:	d803      	bhi.n	8003160 <HAL_SPI_Transmit+0x20c>
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315e:	d102      	bne.n	8003166 <HAL_SPI_Transmit+0x212>
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d106      	bne.n	8003174 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003172:	e029      	b.n	80031c8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003178:	b29b      	uxth	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1c9      	bne.n	8003112 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	6839      	ldr	r1, [r7, #0]
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 fbcc 	bl	8003920 <SPI_EndRxTxTransaction>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2220      	movs	r2, #32
 8003192:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10a      	bne.n	80031b2 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800319c:	2300      	movs	r3, #0
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	613b      	str	r3, [r7, #16]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d002      	beq.n	80031c0 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	77fb      	strb	r3, [r7, #31]
 80031be:	e003      	b.n	80031c8 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80031d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3720      	adds	r7, #32
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b088      	sub	sp, #32
 80031de:	af02      	add	r7, sp, #8
 80031e0:	60f8      	str	r0, [r7, #12]
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	603b      	str	r3, [r7, #0]
 80031e6:	4613      	mov	r3, r2
 80031e8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d002      	beq.n	8003200 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80031fa:	2302      	movs	r3, #2
 80031fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80031fe:	e0fb      	b.n	80033f8 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003208:	d112      	bne.n	8003230 <HAL_SPI_Receive+0x56>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10e      	bne.n	8003230 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2204      	movs	r2, #4
 8003216:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800321a:	88fa      	ldrh	r2, [r7, #6]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	4613      	mov	r3, r2
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	68b9      	ldr	r1, [r7, #8]
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 f8ef 	bl	800340a <HAL_SPI_TransmitReceive>
 800322c:	4603      	mov	r3, r0
 800322e:	e0e8      	b.n	8003402 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003236:	2b01      	cmp	r3, #1
 8003238:	d101      	bne.n	800323e <HAL_SPI_Receive+0x64>
 800323a:	2302      	movs	r3, #2
 800323c:	e0e1      	b.n	8003402 <HAL_SPI_Receive+0x228>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003246:	f7fd ff0d 	bl	8001064 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <HAL_SPI_Receive+0x7e>
 8003252:	88fb      	ldrh	r3, [r7, #6]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d102      	bne.n	800325e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800325c:	e0cc      	b.n	80033f8 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2204      	movs	r2, #4
 8003262:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	88fa      	ldrh	r2, [r7, #6]
 8003276:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	88fa      	ldrh	r2, [r7, #6]
 800327c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032a4:	d10f      	bne.n	80032c6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032c4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d0:	2b40      	cmp	r3, #64	; 0x40
 80032d2:	d007      	beq.n	80032e4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032e2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d16a      	bne.n	80033c2 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80032ec:	e032      	b.n	8003354 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d115      	bne.n	8003328 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f103 020c 	add.w	r2, r3, #12
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003308:	7812      	ldrb	r2, [r2, #0]
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800331c:	b29b      	uxth	r3, r3
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003326:	e015      	b.n	8003354 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003328:	f7fd fe9c 	bl	8001064 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d803      	bhi.n	8003340 <HAL_SPI_Receive+0x166>
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333e:	d102      	bne.n	8003346 <HAL_SPI_Receive+0x16c>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d106      	bne.n	8003354 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003352:	e051      	b.n	80033f8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003358:	b29b      	uxth	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1c7      	bne.n	80032ee <HAL_SPI_Receive+0x114>
 800335e:	e035      	b.n	80033cc <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b01      	cmp	r3, #1
 800336c:	d113      	bne.n	8003396 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68da      	ldr	r2, [r3, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003378:	b292      	uxth	r2, r2
 800337a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003380:	1c9a      	adds	r2, r3, #2
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800338a:	b29b      	uxth	r3, r3
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003394:	e015      	b.n	80033c2 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003396:	f7fd fe65 	bl	8001064 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d803      	bhi.n	80033ae <HAL_SPI_Receive+0x1d4>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ac:	d102      	bne.n	80033b4 <HAL_SPI_Receive+0x1da>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d106      	bne.n	80033c2 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80033c0:	e01a      	b.n	80033f8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1c9      	bne.n	8003360 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	6839      	ldr	r1, [r7, #0]
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 fa53 	bl	800387c <SPI_EndRxTransaction>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d002      	beq.n	80033e2 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2220      	movs	r2, #32
 80033e0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	75fb      	strb	r3, [r7, #23]
 80033ee:	e003      	b.n	80033f8 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003400:	7dfb      	ldrb	r3, [r7, #23]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b08c      	sub	sp, #48	; 0x30
 800340e:	af00      	add	r7, sp, #0
 8003410:	60f8      	str	r0, [r7, #12]
 8003412:	60b9      	str	r1, [r7, #8]
 8003414:	607a      	str	r2, [r7, #4]
 8003416:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003418:	2301      	movs	r3, #1
 800341a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003428:	2b01      	cmp	r3, #1
 800342a:	d101      	bne.n	8003430 <HAL_SPI_TransmitReceive+0x26>
 800342c:	2302      	movs	r3, #2
 800342e:	e198      	b.n	8003762 <HAL_SPI_TransmitReceive+0x358>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003438:	f7fd fe14 	bl	8001064 <HAL_GetTick>
 800343c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003444:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800344e:	887b      	ldrh	r3, [r7, #2]
 8003450:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003452:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003456:	2b01      	cmp	r3, #1
 8003458:	d00f      	beq.n	800347a <HAL_SPI_TransmitReceive+0x70>
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003460:	d107      	bne.n	8003472 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d103      	bne.n	8003472 <HAL_SPI_TransmitReceive+0x68>
 800346a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800346e:	2b04      	cmp	r3, #4
 8003470:	d003      	beq.n	800347a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003472:	2302      	movs	r3, #2
 8003474:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003478:	e16d      	b.n	8003756 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_SPI_TransmitReceive+0x82>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <HAL_SPI_TransmitReceive+0x82>
 8003486:	887b      	ldrh	r3, [r7, #2]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d103      	bne.n	8003494 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003492:	e160      	b.n	8003756 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b04      	cmp	r3, #4
 800349e:	d003      	beq.n	80034a8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2205      	movs	r2, #5
 80034a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	887a      	ldrh	r2, [r7, #2]
 80034b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	887a      	ldrh	r2, [r7, #2]
 80034be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	887a      	ldrh	r2, [r7, #2]
 80034ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	887a      	ldrh	r2, [r7, #2]
 80034d0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e8:	2b40      	cmp	r3, #64	; 0x40
 80034ea:	d007      	beq.n	80034fc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003504:	d17c      	bne.n	8003600 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <HAL_SPI_TransmitReceive+0x10a>
 800350e:	8b7b      	ldrh	r3, [r7, #26]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d16a      	bne.n	80035ea <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003518:	881a      	ldrh	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	1c9a      	adds	r2, r3, #2
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003538:	e057      	b.n	80035ea <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b02      	cmp	r3, #2
 8003546:	d11b      	bne.n	8003580 <HAL_SPI_TransmitReceive+0x176>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d016      	beq.n	8003580 <HAL_SPI_TransmitReceive+0x176>
 8003552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003554:	2b01      	cmp	r3, #1
 8003556:	d113      	bne.n	8003580 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355c:	881a      	ldrh	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003568:	1c9a      	adds	r2, r3, #2
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003572:	b29b      	uxth	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b01      	cmp	r3, #1
 800358c:	d119      	bne.n	80035c2 <HAL_SPI_TransmitReceive+0x1b8>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003592:	b29b      	uxth	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d014      	beq.n	80035c2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a2:	b292      	uxth	r2, r2
 80035a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035aa:	1c9a      	adds	r2, r3, #2
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035be:	2301      	movs	r3, #1
 80035c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80035c2:	f7fd fd4f 	bl	8001064 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d80b      	bhi.n	80035ea <HAL_SPI_TransmitReceive+0x1e0>
 80035d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d8:	d007      	beq.n	80035ea <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80035e8:	e0b5      	b.n	8003756 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1a2      	bne.n	800353a <HAL_SPI_TransmitReceive+0x130>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d19d      	bne.n	800353a <HAL_SPI_TransmitReceive+0x130>
 80035fe:	e080      	b.n	8003702 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <HAL_SPI_TransmitReceive+0x204>
 8003608:	8b7b      	ldrh	r3, [r7, #26]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d16f      	bne.n	80036ee <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	330c      	adds	r3, #12
 8003618:	7812      	ldrb	r2, [r2, #0]
 800361a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800362a:	b29b      	uxth	r3, r3
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003634:	e05b      	b.n	80036ee <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b02      	cmp	r3, #2
 8003642:	d11c      	bne.n	800367e <HAL_SPI_TransmitReceive+0x274>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003648:	b29b      	uxth	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d017      	beq.n	800367e <HAL_SPI_TransmitReceive+0x274>
 800364e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003650:	2b01      	cmp	r3, #1
 8003652:	d114      	bne.n	800367e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	330c      	adds	r3, #12
 800365e:	7812      	ldrb	r2, [r2, #0]
 8003660:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	1c5a      	adds	r2, r3, #1
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003670:	b29b      	uxth	r3, r3
 8003672:	3b01      	subs	r3, #1
 8003674:	b29a      	uxth	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b01      	cmp	r3, #1
 800368a:	d119      	bne.n	80036c0 <HAL_SPI_TransmitReceive+0x2b6>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003690:	b29b      	uxth	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d014      	beq.n	80036c0 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036bc:	2301      	movs	r3, #1
 80036be:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80036c0:	f7fd fcd0 	bl	8001064 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d803      	bhi.n	80036d8 <HAL_SPI_TransmitReceive+0x2ce>
 80036d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d6:	d102      	bne.n	80036de <HAL_SPI_TransmitReceive+0x2d4>
 80036d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d107      	bne.n	80036ee <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80036ec:	e033      	b.n	8003756 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d19e      	bne.n	8003636 <HAL_SPI_TransmitReceive+0x22c>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d199      	bne.n	8003636 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003704:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 f90a 	bl	8003920 <SPI_EndRxTxTransaction>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d006      	beq.n	8003720 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800371e:	e01a      	b.n	8003756 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10a      	bne.n	800373e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003728:	2300      	movs	r3, #0
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800374c:	e003      	b.n	8003756 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800375e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003762:	4618      	mov	r0, r3
 8003764:	3730      	adds	r7, #48	; 0x30
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
	...

0800376c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b088      	sub	sp, #32
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	603b      	str	r3, [r7, #0]
 8003778:	4613      	mov	r3, r2
 800377a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800377c:	f7fd fc72 	bl	8001064 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003784:	1a9b      	subs	r3, r3, r2
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	4413      	add	r3, r2
 800378a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800378c:	f7fd fc6a 	bl	8001064 <HAL_GetTick>
 8003790:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003792:	4b39      	ldr	r3, [pc, #228]	; (8003878 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	015b      	lsls	r3, r3, #5
 8003798:	0d1b      	lsrs	r3, r3, #20
 800379a:	69fa      	ldr	r2, [r7, #28]
 800379c:	fb02 f303 	mul.w	r3, r2, r3
 80037a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037a2:	e054      	b.n	800384e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037aa:	d050      	beq.n	800384e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037ac:	f7fd fc5a 	bl	8001064 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	69fa      	ldr	r2, [r7, #28]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d902      	bls.n	80037c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d13d      	bne.n	800383e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037da:	d111      	bne.n	8003800 <SPI_WaitFlagStateUntilTimeout+0x94>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037e4:	d004      	beq.n	80037f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ee:	d107      	bne.n	8003800 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003808:	d10f      	bne.n	800382a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003828:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e017      	b.n	800386e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	3b01      	subs	r3, #1
 800384c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	4013      	ands	r3, r2
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	429a      	cmp	r2, r3
 800385c:	bf0c      	ite	eq
 800385e:	2301      	moveq	r3, #1
 8003860:	2300      	movne	r3, #0
 8003862:	b2db      	uxtb	r3, r3
 8003864:	461a      	mov	r2, r3
 8003866:	79fb      	ldrb	r3, [r7, #7]
 8003868:	429a      	cmp	r2, r3
 800386a:	d19b      	bne.n	80037a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3720      	adds	r7, #32
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	20000000 	.word	0x20000000

0800387c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af02      	add	r7, sp, #8
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003890:	d111      	bne.n	80038b6 <SPI_EndRxTransaction+0x3a>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800389a:	d004      	beq.n	80038a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a4:	d107      	bne.n	80038b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038b4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038be:	d117      	bne.n	80038f0 <SPI_EndRxTransaction+0x74>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c8:	d112      	bne.n	80038f0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	2200      	movs	r2, #0
 80038d2:	2101      	movs	r1, #1
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f7ff ff49 	bl	800376c <SPI_WaitFlagStateUntilTimeout>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d01a      	beq.n	8003916 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e4:	f043 0220 	orr.w	r2, r3, #32
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e013      	b.n	8003918 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2200      	movs	r2, #0
 80038f8:	2180      	movs	r1, #128	; 0x80
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f7ff ff36 	bl	800376c <SPI_WaitFlagStateUntilTimeout>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d007      	beq.n	8003916 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390a:	f043 0220 	orr.w	r2, r3, #32
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e000      	b.n	8003918 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af02      	add	r7, sp, #8
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	2200      	movs	r2, #0
 8003934:	2180      	movs	r1, #128	; 0x80
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f7ff ff18 	bl	800376c <SPI_WaitFlagStateUntilTimeout>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d007      	beq.n	8003952 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003946:	f043 0220 	orr.w	r2, r3, #32
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e000      	b.n	8003954 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e041      	b.n	80039f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7fd f87e 	bl	8000a84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3304      	adds	r3, #4
 8003998:	4619      	mov	r1, r3
 800399a:	4610      	mov	r0, r2
 800399c:	f000 f8f0 	bl	8003b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d101      	bne.n	8003a1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a16:	2302      	movs	r3, #2
 8003a18:	e0ae      	b.n	8003b78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b0c      	cmp	r3, #12
 8003a26:	f200 809f 	bhi.w	8003b68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a2a:	a201      	add	r2, pc, #4	; (adr r2, 8003a30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a30:	08003a65 	.word	0x08003a65
 8003a34:	08003b69 	.word	0x08003b69
 8003a38:	08003b69 	.word	0x08003b69
 8003a3c:	08003b69 	.word	0x08003b69
 8003a40:	08003aa5 	.word	0x08003aa5
 8003a44:	08003b69 	.word	0x08003b69
 8003a48:	08003b69 	.word	0x08003b69
 8003a4c:	08003b69 	.word	0x08003b69
 8003a50:	08003ae7 	.word	0x08003ae7
 8003a54:	08003b69 	.word	0x08003b69
 8003a58:	08003b69 	.word	0x08003b69
 8003a5c:	08003b69 	.word	0x08003b69
 8003a60:	08003b27 	.word	0x08003b27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68b9      	ldr	r1, [r7, #8]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 f8ea 	bl	8003c44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699a      	ldr	r2, [r3, #24]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0208 	orr.w	r2, r2, #8
 8003a7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699a      	ldr	r2, [r3, #24]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0204 	bic.w	r2, r2, #4
 8003a8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6999      	ldr	r1, [r3, #24]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	691a      	ldr	r2, [r3, #16]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	619a      	str	r2, [r3, #24]
      break;
 8003aa2:	e064      	b.n	8003b6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68b9      	ldr	r1, [r7, #8]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 f930 	bl	8003d10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699a      	ldr	r2, [r3, #24]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003abe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699a      	ldr	r2, [r3, #24]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6999      	ldr	r1, [r3, #24]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	021a      	lsls	r2, r3, #8
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	619a      	str	r2, [r3, #24]
      break;
 8003ae4:	e043      	b.n	8003b6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68b9      	ldr	r1, [r7, #8]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 f979 	bl	8003de4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69da      	ldr	r2, [r3, #28]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f042 0208 	orr.w	r2, r2, #8
 8003b00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69da      	ldr	r2, [r3, #28]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0204 	bic.w	r2, r2, #4
 8003b10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	69d9      	ldr	r1, [r3, #28]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	61da      	str	r2, [r3, #28]
      break;
 8003b24:	e023      	b.n	8003b6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68b9      	ldr	r1, [r7, #8]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 f9c3 	bl	8003eb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	69da      	ldr	r2, [r3, #28]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69da      	ldr	r2, [r3, #28]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	69d9      	ldr	r1, [r3, #28]
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	021a      	lsls	r2, r3, #8
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	61da      	str	r2, [r3, #28]
      break;
 8003b66:	e002      	b.n	8003b6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a29      	ldr	r2, [pc, #164]	; (8003c38 <TIM_Base_SetConfig+0xb8>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d00b      	beq.n	8003bb0 <TIM_Base_SetConfig+0x30>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b9e:	d007      	beq.n	8003bb0 <TIM_Base_SetConfig+0x30>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a26      	ldr	r2, [pc, #152]	; (8003c3c <TIM_Base_SetConfig+0xbc>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d003      	beq.n	8003bb0 <TIM_Base_SetConfig+0x30>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a25      	ldr	r2, [pc, #148]	; (8003c40 <TIM_Base_SetConfig+0xc0>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d108      	bne.n	8003bc2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a1c      	ldr	r2, [pc, #112]	; (8003c38 <TIM_Base_SetConfig+0xb8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d00b      	beq.n	8003be2 <TIM_Base_SetConfig+0x62>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd0:	d007      	beq.n	8003be2 <TIM_Base_SetConfig+0x62>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a19      	ldr	r2, [pc, #100]	; (8003c3c <TIM_Base_SetConfig+0xbc>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d003      	beq.n	8003be2 <TIM_Base_SetConfig+0x62>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a18      	ldr	r2, [pc, #96]	; (8003c40 <TIM_Base_SetConfig+0xc0>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d108      	bne.n	8003bf4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003be8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a07      	ldr	r2, [pc, #28]	; (8003c38 <TIM_Base_SetConfig+0xb8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d103      	bne.n	8003c28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	615a      	str	r2, [r3, #20]
}
 8003c2e:	bf00      	nop
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr
 8003c38:	40012c00 	.word	0x40012c00
 8003c3c:	40000400 	.word	0x40000400
 8003c40:	40000800 	.word	0x40000800

08003c44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b087      	sub	sp, #28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	f023 0201 	bic.w	r2, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f023 0303 	bic.w	r3, r3, #3
 8003c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f023 0302 	bic.w	r3, r3, #2
 8003c8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a1c      	ldr	r2, [pc, #112]	; (8003d0c <TIM_OC1_SetConfig+0xc8>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d10c      	bne.n	8003cba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f023 0308 	bic.w	r3, r3, #8
 8003ca6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f023 0304 	bic.w	r3, r3, #4
 8003cb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a13      	ldr	r2, [pc, #76]	; (8003d0c <TIM_OC1_SetConfig+0xc8>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d111      	bne.n	8003ce6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	621a      	str	r2, [r3, #32]
}
 8003d00:	bf00      	nop
 8003d02:	371c      	adds	r7, #28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	40012c00 	.word	0x40012c00

08003d10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	f023 0210 	bic.w	r2, r3, #16
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	021b      	lsls	r3, r3, #8
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f023 0320 	bic.w	r3, r3, #32
 8003d5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	011b      	lsls	r3, r3, #4
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a1d      	ldr	r2, [pc, #116]	; (8003de0 <TIM_OC2_SetConfig+0xd0>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d10d      	bne.n	8003d8c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a14      	ldr	r2, [pc, #80]	; (8003de0 <TIM_OC2_SetConfig+0xd0>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d113      	bne.n	8003dbc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003da2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	621a      	str	r2, [r3, #32]
}
 8003dd6:	bf00      	nop
 8003dd8:	371c      	adds	r7, #28
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bc80      	pop	{r7}
 8003dde:	4770      	bx	lr
 8003de0:	40012c00 	.word	0x40012c00

08003de4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f023 0303 	bic.w	r3, r3, #3
 8003e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	021b      	lsls	r3, r3, #8
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a1d      	ldr	r2, [pc, #116]	; (8003eb4 <TIM_OC3_SetConfig+0xd0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d10d      	bne.n	8003e5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	021b      	lsls	r3, r3, #8
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a14      	ldr	r2, [pc, #80]	; (8003eb4 <TIM_OC3_SetConfig+0xd0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d113      	bne.n	8003e8e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	621a      	str	r2, [r3, #32]
}
 8003ea8:	bf00      	nop
 8003eaa:	371c      	adds	r7, #28
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bc80      	pop	{r7}
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	40012c00 	.word	0x40012c00

08003eb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	021b      	lsls	r3, r3, #8
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	031b      	lsls	r3, r3, #12
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a0f      	ldr	r2, [pc, #60]	; (8003f50 <TIM_OC4_SetConfig+0x98>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d109      	bne.n	8003f2c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	019b      	lsls	r3, r3, #6
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	621a      	str	r2, [r3, #32]
}
 8003f46:	bf00      	nop
 8003f48:	371c      	adds	r7, #28
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bc80      	pop	{r7}
 8003f4e:	4770      	bx	lr
 8003f50:	40012c00 	.word	0x40012c00

08003f54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d101      	bne.n	8003f6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	e046      	b.n	8003ffa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a16      	ldr	r2, [pc, #88]	; (8004004 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d00e      	beq.n	8003fce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb8:	d009      	beq.n	8003fce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a12      	ldr	r2, [pc, #72]	; (8004008 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d004      	beq.n	8003fce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a10      	ldr	r2, [pc, #64]	; (800400c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d10c      	bne.n	8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3714      	adds	r7, #20
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bc80      	pop	{r7}
 8004002:	4770      	bx	lr
 8004004:	40012c00 	.word	0x40012c00
 8004008:	40000400 	.word	0x40000400
 800400c:	40000800 	.word	0x40000800

08004010 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800401a:	2300      	movs	r3, #0
 800401c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004024:	2b01      	cmp	r3, #1
 8004026:	d101      	bne.n	800402c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004028:	2302      	movs	r3, #2
 800402a:	e03d      	b.n	80040a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	4313      	orrs	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4313      	orrs	r3, r2
 800406a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	4313      	orrs	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc80      	pop	{r7}
 80040b0:	4770      	bx	lr

080040b2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b082      	sub	sp, #8
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e042      	b.n	800414a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d106      	bne.n	80040de <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7fc fda3 	bl	8000c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2224      	movs	r2, #36	; 0x24
 80040e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68da      	ldr	r2, [r3, #12]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040f4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 fdc6 	bl	8004c88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691a      	ldr	r2, [r3, #16]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800410a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695a      	ldr	r2, [r3, #20]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800411a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68da      	ldr	r2, [r3, #12]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800412a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2220      	movs	r2, #32
 8004136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2220      	movs	r2, #32
 800413e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b08a      	sub	sp, #40	; 0x28
 8004156:	af02      	add	r7, sp, #8
 8004158:	60f8      	str	r0, [r7, #12]
 800415a:	60b9      	str	r1, [r7, #8]
 800415c:	603b      	str	r3, [r7, #0]
 800415e:	4613      	mov	r3, r2
 8004160:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b20      	cmp	r3, #32
 8004170:	d16d      	bne.n	800424e <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <HAL_UART_Transmit+0x2c>
 8004178:	88fb      	ldrh	r3, [r7, #6]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e066      	b.n	8004250 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2221      	movs	r2, #33	; 0x21
 800418c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004190:	f7fc ff68 	bl	8001064 <HAL_GetTick>
 8004194:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	88fa      	ldrh	r2, [r7, #6]
 800419a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	88fa      	ldrh	r2, [r7, #6]
 80041a0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041aa:	d108      	bne.n	80041be <HAL_UART_Transmit+0x6c>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d104      	bne.n	80041be <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80041b4:	2300      	movs	r3, #0
 80041b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	61bb      	str	r3, [r7, #24]
 80041bc:	e003      	b.n	80041c6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041c2:	2300      	movs	r3, #0
 80041c4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041c6:	e02a      	b.n	800421e <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	2200      	movs	r2, #0
 80041d0:	2180      	movs	r1, #128	; 0x80
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 fb15 	bl	8004802 <UART_WaitOnFlagUntilTimeout>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e036      	b.n	8004250 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10b      	bne.n	8004200 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	881b      	ldrh	r3, [r3, #0]
 80041ec:	461a      	mov	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041f6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	3302      	adds	r3, #2
 80041fc:	61bb      	str	r3, [r7, #24]
 80041fe:	e007      	b.n	8004210 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	781a      	ldrb	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	3301      	adds	r3, #1
 800420e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004214:	b29b      	uxth	r3, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004222:	b29b      	uxth	r3, r3
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1cf      	bne.n	80041c8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	2200      	movs	r2, #0
 8004230:	2140      	movs	r1, #64	; 0x40
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 fae5 	bl	8004802 <UART_WaitOnFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e006      	b.n	8004250 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2220      	movs	r2, #32
 8004246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	e000      	b.n	8004250 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800424e:	2302      	movs	r3, #2
  }
}
 8004250:	4618      	mov	r0, r3
 8004252:	3720      	adds	r7, #32
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	4613      	mov	r3, r2
 8004264:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b20      	cmp	r3, #32
 8004270:	d112      	bne.n	8004298 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d002      	beq.n	800427e <HAL_UART_Receive_IT+0x26>
 8004278:	88fb      	ldrh	r3, [r7, #6]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e00b      	b.n	800429a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004288:	88fb      	ldrh	r3, [r7, #6]
 800428a:	461a      	mov	r2, r3
 800428c:	68b9      	ldr	r1, [r7, #8]
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 fb25 	bl	80048de <UART_Start_Receive_IT>
 8004294:	4603      	mov	r3, r0
 8004296:	e000      	b.n	800429a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004298:	2302      	movs	r3, #2
  }
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
	...

080042a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b0ba      	sub	sp, #232	; 0xe8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80042e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10f      	bne.n	800430a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ee:	f003 0320 	and.w	r3, r3, #32
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d009      	beq.n	800430a <HAL_UART_IRQHandler+0x66>
 80042f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042fa:	f003 0320 	and.w	r3, r3, #32
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 fc01 	bl	8004b0a <UART_Receive_IT>
      return;
 8004308:	e25b      	b.n	80047c2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800430a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 80de 	beq.w	80044d0 <HAL_UART_IRQHandler+0x22c>
 8004314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	d106      	bne.n	800432e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004324:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 80d1 	beq.w	80044d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800432e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00b      	beq.n	8004352 <HAL_UART_IRQHandler+0xae>
 800433a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800433e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004342:	2b00      	cmp	r3, #0
 8004344:	d005      	beq.n	8004352 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434a:	f043 0201 	orr.w	r2, r3, #1
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00b      	beq.n	8004376 <HAL_UART_IRQHandler+0xd2>
 800435e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d005      	beq.n	8004376 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436e:	f043 0202 	orr.w	r2, r3, #2
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00b      	beq.n	800439a <HAL_UART_IRQHandler+0xf6>
 8004382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d005      	beq.n	800439a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004392:	f043 0204 	orr.w	r2, r3, #4
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800439a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d011      	beq.n	80043ca <HAL_UART_IRQHandler+0x126>
 80043a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d105      	bne.n	80043be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d005      	beq.n	80043ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c2:	f043 0208 	orr.w	r2, r3, #8
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 81f2 	beq.w	80047b8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043d8:	f003 0320 	and.w	r3, r3, #32
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d008      	beq.n	80043f2 <HAL_UART_IRQHandler+0x14e>
 80043e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043e4:	f003 0320 	and.w	r3, r3, #32
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d002      	beq.n	80043f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 fb8c 	bl	8004b0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	bf14      	ite	ne
 8004400:	2301      	movne	r3, #1
 8004402:	2300      	moveq	r3, #0
 8004404:	b2db      	uxtb	r3, r3
 8004406:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440e:	f003 0308 	and.w	r3, r3, #8
 8004412:	2b00      	cmp	r3, #0
 8004414:	d103      	bne.n	800441e <HAL_UART_IRQHandler+0x17a>
 8004416:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800441a:	2b00      	cmp	r3, #0
 800441c:	d04f      	beq.n	80044be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 fa96 	bl	8004950 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442e:	2b00      	cmp	r3, #0
 8004430:	d041      	beq.n	80044b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	3314      	adds	r3, #20
 8004438:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004440:	e853 3f00 	ldrex	r3, [r3]
 8004444:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004448:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800444c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004450:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	3314      	adds	r3, #20
 800445a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800445e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004462:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004466:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800446a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800446e:	e841 2300 	strex	r3, r2, [r1]
 8004472:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004476:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1d9      	bne.n	8004432 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004482:	2b00      	cmp	r3, #0
 8004484:	d013      	beq.n	80044ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448a:	4a7e      	ldr	r2, [pc, #504]	; (8004684 <HAL_UART_IRQHandler+0x3e0>)
 800448c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004492:	4618      	mov	r0, r3
 8004494:	f7fd fcb4 	bl	8001e00 <HAL_DMA_Abort_IT>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d016      	beq.n	80044cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80044a8:	4610      	mov	r0, r2
 80044aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ac:	e00e      	b.n	80044cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f993 	bl	80047da <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b4:	e00a      	b.n	80044cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f98f 	bl	80047da <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044bc:	e006      	b.n	80044cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f98b 	bl	80047da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80044ca:	e175      	b.n	80047b8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044cc:	bf00      	nop
    return;
 80044ce:	e173      	b.n	80047b8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	f040 814f 	bne.w	8004778 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044de:	f003 0310 	and.w	r3, r3, #16
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 8148 	beq.w	8004778 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044ec:	f003 0310 	and.w	r3, r3, #16
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 8141 	beq.w	8004778 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044f6:	2300      	movs	r3, #0
 80044f8:	60bb      	str	r3, [r7, #8]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	60bb      	str	r3, [r7, #8]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	60bb      	str	r3, [r7, #8]
 800450a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 80b6 	beq.w	8004688 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004528:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 8145 	beq.w	80047bc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004536:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800453a:	429a      	cmp	r2, r3
 800453c:	f080 813e 	bcs.w	80047bc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004546:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	2b20      	cmp	r3, #32
 8004550:	f000 8088 	beq.w	8004664 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	330c      	adds	r3, #12
 800455a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004562:	e853 3f00 	ldrex	r3, [r3]
 8004566:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800456a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800456e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004572:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	330c      	adds	r3, #12
 800457c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004580:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004584:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004588:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800458c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004590:	e841 2300 	strex	r3, r2, [r1]
 8004594:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004598:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1d9      	bne.n	8004554 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3314      	adds	r3, #20
 80045a6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045aa:	e853 3f00 	ldrex	r3, [r3]
 80045ae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80045b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045b2:	f023 0301 	bic.w	r3, r3, #1
 80045b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3314      	adds	r3, #20
 80045c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045c4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80045c8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80045d0:	e841 2300 	strex	r3, r2, [r1]
 80045d4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80045d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1e1      	bne.n	80045a0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3314      	adds	r3, #20
 80045e2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045e6:	e853 3f00 	ldrex	r3, [r3]
 80045ea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80045ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	3314      	adds	r3, #20
 80045fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004600:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004602:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004604:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004606:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004608:	e841 2300 	strex	r3, r2, [r1]
 800460c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800460e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1e3      	bne.n	80045dc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2220      	movs	r2, #32
 8004618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	330c      	adds	r3, #12
 8004628:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800462c:	e853 3f00 	ldrex	r3, [r3]
 8004630:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004634:	f023 0310 	bic.w	r3, r3, #16
 8004638:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	330c      	adds	r3, #12
 8004642:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004646:	65ba      	str	r2, [r7, #88]	; 0x58
 8004648:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800464c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800464e:	e841 2300 	strex	r3, r2, [r1]
 8004652:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1e3      	bne.n	8004622 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465e:	4618      	mov	r0, r3
 8004660:	f7fd fb92 	bl	8001d88 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004672:	b29b      	uxth	r3, r3
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	b29b      	uxth	r3, r3
 8004678:	4619      	mov	r1, r3
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f8b6 	bl	80047ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004680:	e09c      	b.n	80047bc <HAL_UART_IRQHandler+0x518>
 8004682:	bf00      	nop
 8004684:	08004a15 	.word	0x08004a15
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004690:	b29b      	uxth	r3, r3
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800469c:	b29b      	uxth	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 808e 	beq.w	80047c0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80046a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 8089 	beq.w	80047c0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	330c      	adds	r3, #12
 80046b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b8:	e853 3f00 	ldrex	r3, [r3]
 80046bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	330c      	adds	r3, #12
 80046ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80046d2:	647a      	str	r2, [r7, #68]	; 0x44
 80046d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046da:	e841 2300 	strex	r3, r2, [r1]
 80046de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1e3      	bne.n	80046ae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	3314      	adds	r3, #20
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	e853 3f00 	ldrex	r3, [r3]
 80046f4:	623b      	str	r3, [r7, #32]
   return(result);
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	f023 0301 	bic.w	r3, r3, #1
 80046fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3314      	adds	r3, #20
 8004706:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800470a:	633a      	str	r2, [r7, #48]	; 0x30
 800470c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004712:	e841 2300 	strex	r3, r2, [r1]
 8004716:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1e3      	bne.n	80046e6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2220      	movs	r2, #32
 8004722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	330c      	adds	r3, #12
 8004732:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	e853 3f00 	ldrex	r3, [r3]
 800473a:	60fb      	str	r3, [r7, #12]
   return(result);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 0310 	bic.w	r3, r3, #16
 8004742:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	330c      	adds	r3, #12
 800474c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004750:	61fa      	str	r2, [r7, #28]
 8004752:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004754:	69b9      	ldr	r1, [r7, #24]
 8004756:	69fa      	ldr	r2, [r7, #28]
 8004758:	e841 2300 	strex	r3, r2, [r1]
 800475c:	617b      	str	r3, [r7, #20]
   return(result);
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1e3      	bne.n	800472c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800476a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800476e:	4619      	mov	r1, r3
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f83b 	bl	80047ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004776:	e023      	b.n	80047c0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800477c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004780:	2b00      	cmp	r3, #0
 8004782:	d009      	beq.n	8004798 <HAL_UART_IRQHandler+0x4f4>
 8004784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f953 	bl	8004a3c <UART_Transmit_IT>
    return;
 8004796:	e014      	b.n	80047c2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800479c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00e      	beq.n	80047c2 <HAL_UART_IRQHandler+0x51e>
 80047a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d008      	beq.n	80047c2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f992 	bl	8004ada <UART_EndTransmit_IT>
    return;
 80047b6:	e004      	b.n	80047c2 <HAL_UART_IRQHandler+0x51e>
    return;
 80047b8:	bf00      	nop
 80047ba:	e002      	b.n	80047c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80047bc:	bf00      	nop
 80047be:	e000      	b.n	80047c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80047c0:	bf00      	nop
  }
}
 80047c2:	37e8      	adds	r7, #232	; 0xe8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bc80      	pop	{r7}
 80047d8:	4770      	bx	lr

080047da <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047e2:	bf00      	nop
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bc80      	pop	{r7}
 80047ea:	4770      	bx	lr

080047ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bc80      	pop	{r7}
 8004800:	4770      	bx	lr

08004802 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b090      	sub	sp, #64	; 0x40
 8004806:	af00      	add	r7, sp, #0
 8004808:	60f8      	str	r0, [r7, #12]
 800480a:	60b9      	str	r1, [r7, #8]
 800480c:	603b      	str	r3, [r7, #0]
 800480e:	4613      	mov	r3, r2
 8004810:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004812:	e050      	b.n	80048b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481a:	d04c      	beq.n	80048b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800481c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800481e:	2b00      	cmp	r3, #0
 8004820:	d007      	beq.n	8004832 <UART_WaitOnFlagUntilTimeout+0x30>
 8004822:	f7fc fc1f 	bl	8001064 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800482e:	429a      	cmp	r2, r3
 8004830:	d241      	bcs.n	80048b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	330c      	adds	r3, #12
 8004838:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483c:	e853 3f00 	ldrex	r3, [r3]
 8004840:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004848:	63fb      	str	r3, [r7, #60]	; 0x3c
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	330c      	adds	r3, #12
 8004850:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004852:	637a      	str	r2, [r7, #52]	; 0x34
 8004854:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004856:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004858:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800485a:	e841 2300 	strex	r3, r2, [r1]
 800485e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1e5      	bne.n	8004832 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	3314      	adds	r3, #20
 800486c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	e853 3f00 	ldrex	r3, [r3]
 8004874:	613b      	str	r3, [r7, #16]
   return(result);
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f023 0301 	bic.w	r3, r3, #1
 800487c:	63bb      	str	r3, [r7, #56]	; 0x38
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	3314      	adds	r3, #20
 8004884:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004886:	623a      	str	r2, [r7, #32]
 8004888:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488a:	69f9      	ldr	r1, [r7, #28]
 800488c:	6a3a      	ldr	r2, [r7, #32]
 800488e:	e841 2300 	strex	r3, r2, [r1]
 8004892:	61bb      	str	r3, [r7, #24]
   return(result);
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1e5      	bne.n	8004866 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2220      	movs	r2, #32
 800489e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e00f      	b.n	80048d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	4013      	ands	r3, r2
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	bf0c      	ite	eq
 80048c6:	2301      	moveq	r3, #1
 80048c8:	2300      	movne	r3, #0
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	461a      	mov	r2, r3
 80048ce:	79fb      	ldrb	r3, [r7, #7]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d09f      	beq.n	8004814 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3740      	adds	r7, #64	; 0x40
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048de:	b480      	push	{r7}
 80048e0:	b085      	sub	sp, #20
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	60f8      	str	r0, [r7, #12]
 80048e6:	60b9      	str	r1, [r7, #8]
 80048e8:	4613      	mov	r3, r2
 80048ea:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	88fa      	ldrh	r2, [r7, #6]
 80048f6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	88fa      	ldrh	r2, [r7, #6]
 80048fc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2222      	movs	r2, #34	; 0x22
 8004908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d007      	beq.n	8004924 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004922:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	695a      	ldr	r2, [r3, #20]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0201 	orr.w	r2, r2, #1
 8004932:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0220 	orr.w	r2, r2, #32
 8004942:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	bc80      	pop	{r7}
 800494e:	4770      	bx	lr

08004950 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004950:	b480      	push	{r7}
 8004952:	b095      	sub	sp, #84	; 0x54
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	330c      	adds	r3, #12
 800495e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004962:	e853 3f00 	ldrex	r3, [r3]
 8004966:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800496e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	330c      	adds	r3, #12
 8004976:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004978:	643a      	str	r2, [r7, #64]	; 0x40
 800497a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800497e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004980:	e841 2300 	strex	r3, r2, [r1]
 8004984:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1e5      	bne.n	8004958 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3314      	adds	r3, #20
 8004992:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004994:	6a3b      	ldr	r3, [r7, #32]
 8004996:	e853 3f00 	ldrex	r3, [r3]
 800499a:	61fb      	str	r3, [r7, #28]
   return(result);
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	f023 0301 	bic.w	r3, r3, #1
 80049a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3314      	adds	r3, #20
 80049aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049b4:	e841 2300 	strex	r3, r2, [r1]
 80049b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1e5      	bne.n	800498c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d119      	bne.n	80049fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	330c      	adds	r3, #12
 80049ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	e853 3f00 	ldrex	r3, [r3]
 80049d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f023 0310 	bic.w	r3, r3, #16
 80049de:	647b      	str	r3, [r7, #68]	; 0x44
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	330c      	adds	r3, #12
 80049e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049e8:	61ba      	str	r2, [r7, #24]
 80049ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ec:	6979      	ldr	r1, [r7, #20]
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	e841 2300 	strex	r3, r2, [r1]
 80049f4:	613b      	str	r3, [r7, #16]
   return(result);
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1e5      	bne.n	80049c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2220      	movs	r2, #32
 8004a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a0a:	bf00      	nop
 8004a0c:	3754      	adds	r7, #84	; 0x54
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr

08004a14 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f7ff fed3 	bl	80047da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a34:	bf00      	nop
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b21      	cmp	r3, #33	; 0x21
 8004a4e:	d13e      	bne.n	8004ace <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a58:	d114      	bne.n	8004a84 <UART_Transmit_IT+0x48>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d110      	bne.n	8004a84 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	881b      	ldrh	r3, [r3, #0]
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a76:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	1c9a      	adds	r2, r3, #2
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	621a      	str	r2, [r3, #32]
 8004a82:	e008      	b.n	8004a96 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	1c59      	adds	r1, r3, #1
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6211      	str	r1, [r2, #32]
 8004a8e:	781a      	ldrb	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10f      	bne.n	8004aca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68da      	ldr	r2, [r3, #12]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ab8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ac8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	e000      	b.n	8004ad0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ace:	2302      	movs	r3, #2
  }
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bc80      	pop	{r7}
 8004ad8:	4770      	bx	lr

08004ada <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b082      	sub	sp, #8
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004af0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2220      	movs	r2, #32
 8004af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7ff fe64 	bl	80047c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b08c      	sub	sp, #48	; 0x30
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b22      	cmp	r3, #34	; 0x22
 8004b1c:	f040 80ae 	bne.w	8004c7c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b28:	d117      	bne.n	8004b5a <UART_Receive_IT+0x50>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d113      	bne.n	8004b5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b32:	2300      	movs	r3, #0
 8004b34:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b52:	1c9a      	adds	r2, r3, #2
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	629a      	str	r2, [r3, #40]	; 0x28
 8004b58:	e026      	b.n	8004ba8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004b60:	2300      	movs	r3, #0
 8004b62:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b6c:	d007      	beq.n	8004b7e <UART_Receive_IT+0x74>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10a      	bne.n	8004b8c <UART_Receive_IT+0x82>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d106      	bne.n	8004b8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	b2da      	uxtb	r2, r3
 8004b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b88:	701a      	strb	r2, [r3, #0]
 8004b8a:	e008      	b.n	8004b9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba2:	1c5a      	adds	r2, r3, #1
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d15d      	bne.n	8004c78 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68da      	ldr	r2, [r3, #12]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0220 	bic.w	r2, r2, #32
 8004bca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68da      	ldr	r2, [r3, #12]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	695a      	ldr	r2, [r3, #20]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 0201 	bic.w	r2, r2, #1
 8004bea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d135      	bne.n	8004c6e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	330c      	adds	r3, #12
 8004c0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	e853 3f00 	ldrex	r3, [r3]
 8004c16:	613b      	str	r3, [r7, #16]
   return(result);
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	f023 0310 	bic.w	r3, r3, #16
 8004c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	330c      	adds	r3, #12
 8004c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c28:	623a      	str	r2, [r7, #32]
 8004c2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2c:	69f9      	ldr	r1, [r7, #28]
 8004c2e:	6a3a      	ldr	r2, [r7, #32]
 8004c30:	e841 2300 	strex	r3, r2, [r1]
 8004c34:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1e5      	bne.n	8004c08 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0310 	and.w	r3, r3, #16
 8004c46:	2b10      	cmp	r3, #16
 8004c48:	d10a      	bne.n	8004c60 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c64:	4619      	mov	r1, r3
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7ff fdc0 	bl	80047ec <HAL_UARTEx_RxEventCallback>
 8004c6c:	e002      	b.n	8004c74 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7fc f8c2 	bl	8000df8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c74:	2300      	movs	r3, #0
 8004c76:	e002      	b.n	8004c7e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	e000      	b.n	8004c7e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004c7c:	2302      	movs	r3, #2
  }
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3730      	adds	r7, #48	; 0x30
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
	...

08004c88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68da      	ldr	r2, [r3, #12]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689a      	ldr	r2, [r3, #8]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004cc2:	f023 030c 	bic.w	r3, r3, #12
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6812      	ldr	r2, [r2, #0]
 8004cca:	68b9      	ldr	r1, [r7, #8]
 8004ccc:	430b      	orrs	r3, r1
 8004cce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	699a      	ldr	r2, [r3, #24]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a2c      	ldr	r2, [pc, #176]	; (8004d9c <UART_SetConfig+0x114>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d103      	bne.n	8004cf8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004cf0:	f7fd ffc4 	bl	8002c7c <HAL_RCC_GetPCLK2Freq>
 8004cf4:	60f8      	str	r0, [r7, #12]
 8004cf6:	e002      	b.n	8004cfe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004cf8:	f7fd ffac 	bl	8002c54 <HAL_RCC_GetPCLK1Freq>
 8004cfc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	4613      	mov	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	009a      	lsls	r2, r3, #2
 8004d08:	441a      	add	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d14:	4a22      	ldr	r2, [pc, #136]	; (8004da0 <UART_SetConfig+0x118>)
 8004d16:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1a:	095b      	lsrs	r3, r3, #5
 8004d1c:	0119      	lsls	r1, r3, #4
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	4613      	mov	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	009a      	lsls	r2, r3, #2
 8004d28:	441a      	add	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d34:	4b1a      	ldr	r3, [pc, #104]	; (8004da0 <UART_SetConfig+0x118>)
 8004d36:	fba3 0302 	umull	r0, r3, r3, r2
 8004d3a:	095b      	lsrs	r3, r3, #5
 8004d3c:	2064      	movs	r0, #100	; 0x64
 8004d3e:	fb00 f303 	mul.w	r3, r0, r3
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	011b      	lsls	r3, r3, #4
 8004d46:	3332      	adds	r3, #50	; 0x32
 8004d48:	4a15      	ldr	r2, [pc, #84]	; (8004da0 <UART_SetConfig+0x118>)
 8004d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4e:	095b      	lsrs	r3, r3, #5
 8004d50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d54:	4419      	add	r1, r3
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	009a      	lsls	r2, r3, #2
 8004d60:	441a      	add	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d6c:	4b0c      	ldr	r3, [pc, #48]	; (8004da0 <UART_SetConfig+0x118>)
 8004d6e:	fba3 0302 	umull	r0, r3, r3, r2
 8004d72:	095b      	lsrs	r3, r3, #5
 8004d74:	2064      	movs	r0, #100	; 0x64
 8004d76:	fb00 f303 	mul.w	r3, r0, r3
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	011b      	lsls	r3, r3, #4
 8004d7e:	3332      	adds	r3, #50	; 0x32
 8004d80:	4a07      	ldr	r2, [pc, #28]	; (8004da0 <UART_SetConfig+0x118>)
 8004d82:	fba2 2303 	umull	r2, r3, r2, r3
 8004d86:	095b      	lsrs	r3, r3, #5
 8004d88:	f003 020f 	and.w	r2, r3, #15
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	440a      	add	r2, r1
 8004d92:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004d94:	bf00      	nop
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	40013800 	.word	0x40013800
 8004da0:	51eb851f 	.word	0x51eb851f

08004da4 <Adjusted_ADC_Data>:

uint16_t AD_Value[4]; // 定义一个数组

//* 将16位拆分成俩个8位，再将俩个八位合并到一个数组
uint8_t *Adjusted_ADC_Data()
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0

  static uint8_t Adjusted_ADC_Data_Low[4]; // 低位

  int loop, index, h_len, l_len;

  h_len = l_len = 4;
 8004daa:	2304      	movs	r3, #4
 8004dac:	60bb      	str	r3, [r7, #8]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	607b      	str	r3, [r7, #4]

  index = 0;
 8004db2:	2300      	movs	r3, #0
 8004db4:	613b      	str	r3, [r7, #16]

  for (uint8_t i = 0; i < 4; i++)
 8004db6:	2300      	movs	r3, #0
 8004db8:	73fb      	strb	r3, [r7, #15]
 8004dba:	e00c      	b.n	8004dd6 <Adjusted_ADC_Data+0x32>
  {
    Adjusted_ADC_Data_High[i] = (AD_Value[i] >> 8) & 0xff; // 高8位
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
 8004dbe:	4a29      	ldr	r2, [pc, #164]	; (8004e64 <Adjusted_ADC_Data+0xc0>)
 8004dc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dc4:	0a1b      	lsrs	r3, r3, #8
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
 8004dca:	b2d1      	uxtb	r1, r2
 8004dcc:	4a26      	ldr	r2, [pc, #152]	; (8004e68 <Adjusted_ADC_Data+0xc4>)
 8004dce:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < 4; i++)
 8004dd0:	7bfb      	ldrb	r3, [r7, #15]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	73fb      	strb	r3, [r7, #15]
 8004dd6:	7bfb      	ldrb	r3, [r7, #15]
 8004dd8:	2b03      	cmp	r3, #3
 8004dda:	d9ef      	bls.n	8004dbc <Adjusted_ADC_Data+0x18>
  }

  for (uint8_t i = 0; i < 4; i++)
 8004ddc:	2300      	movs	r3, #0
 8004dde:	73bb      	strb	r3, [r7, #14]
 8004de0:	e00a      	b.n	8004df8 <Adjusted_ADC_Data+0x54>
  {
    Adjusted_ADC_Data_Low[i] = AD_Value[i] & 0xff; // 低8位
 8004de2:	7bbb      	ldrb	r3, [r7, #14]
 8004de4:	4a1f      	ldr	r2, [pc, #124]	; (8004e64 <Adjusted_ADC_Data+0xc0>)
 8004de6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004dea:	7bbb      	ldrb	r3, [r7, #14]
 8004dec:	b2d1      	uxtb	r1, r2
 8004dee:	4a1f      	ldr	r2, [pc, #124]	; (8004e6c <Adjusted_ADC_Data+0xc8>)
 8004df0:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < 4; i++)
 8004df2:	7bbb      	ldrb	r3, [r7, #14]
 8004df4:	3301      	adds	r3, #1
 8004df6:	73bb      	strb	r3, [r7, #14]
 8004df8:	7bbb      	ldrb	r3, [r7, #14]
 8004dfa:	2b03      	cmp	r3, #3
 8004dfc:	d9f1      	bls.n	8004de2 <Adjusted_ADC_Data+0x3e>
  }

  for (loop = 0; loop < h_len; loop++)
 8004dfe:	2300      	movs	r3, #0
 8004e00:	617b      	str	r3, [r7, #20]
 8004e02:	e00e      	b.n	8004e22 <Adjusted_ADC_Data+0x7e>
  {
    Adjusted_ADC_Data_Variable[index] = Adjusted_ADC_Data_High[loop];
 8004e04:	4a18      	ldr	r2, [pc, #96]	; (8004e68 <Adjusted_ADC_Data+0xc4>)
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	4413      	add	r3, r2
 8004e0a:	7819      	ldrb	r1, [r3, #0]
 8004e0c:	4a18      	ldr	r2, [pc, #96]	; (8004e70 <Adjusted_ADC_Data+0xcc>)
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	4413      	add	r3, r2
 8004e12:	460a      	mov	r2, r1
 8004e14:	701a      	strb	r2, [r3, #0]
    index++;
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	613b      	str	r3, [r7, #16]
  for (loop = 0; loop < h_len; loop++)
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	617b      	str	r3, [r7, #20]
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	dbec      	blt.n	8004e04 <Adjusted_ADC_Data+0x60>
  }

  for (loop = 0; loop < l_len; loop++)
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	617b      	str	r3, [r7, #20]
 8004e2e:	e00e      	b.n	8004e4e <Adjusted_ADC_Data+0xaa>
  {
    Adjusted_ADC_Data_Variable[index] = Adjusted_ADC_Data_Low[loop];
 8004e30:	4a0e      	ldr	r2, [pc, #56]	; (8004e6c <Adjusted_ADC_Data+0xc8>)
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	4413      	add	r3, r2
 8004e36:	7819      	ldrb	r1, [r3, #0]
 8004e38:	4a0d      	ldr	r2, [pc, #52]	; (8004e70 <Adjusted_ADC_Data+0xcc>)
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	460a      	mov	r2, r1
 8004e40:	701a      	strb	r2, [r3, #0]
    index++;
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	3301      	adds	r3, #1
 8004e46:	613b      	str	r3, [r7, #16]
  for (loop = 0; loop < l_len; loop++)
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	617b      	str	r3, [r7, #20]
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	dbec      	blt.n	8004e30 <Adjusted_ADC_Data+0x8c>
  }

  return Adjusted_ADC_Data_Variable;
 8004e56:	4b06      	ldr	r3, [pc, #24]	; (8004e70 <Adjusted_ADC_Data+0xcc>)
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	371c      	adds	r7, #28
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bc80      	pop	{r7}
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	20000410 	.word	0x20000410
 8004e68:	20000418 	.word	0x20000418
 8004e6c:	2000041c 	.word	0x2000041c
 8004e70:	20000420 	.word	0x20000420

08004e74 <delay_us>:
#define CH_Num 120
#define debug_out(fmt, args...) printf(fmt, ##args)
// #define debug_out(fmt,args...)

void delay_us(uint32_t n)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  unsigned char i;

  while (n--)
 8004e7c:	e007      	b.n	8004e8e <delay_us+0x1a>
  {
    i = 8;
 8004e7e:	2308      	movs	r3, #8
 8004e80:	73fb      	strb	r3, [r7, #15]
    while (i--)
 8004e82:	bf00      	nop
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
 8004e86:	1e5a      	subs	r2, r3, #1
 8004e88:	73fa      	strb	r2, [r7, #15]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1fa      	bne.n	8004e84 <delay_us+0x10>
  while (n--)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	1e5a      	subs	r2, r3, #1
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1f2      	bne.n	8004e7e <delay_us+0xa>
      ;
  }
}
 8004e98:	bf00      	nop
 8004e9a:	bf00      	nop
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bc80      	pop	{r7}
 8004ea2:	4770      	bx	lr

08004ea4 <NRF24L01_Init>:
// 初始化24L01的IO口
void NRF24L01_Init(void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
  // spi init
  // gpio init
  Clr_NRF24L01_CE;  // chip enable
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	2140      	movs	r1, #64	; 0x40
 8004eac:	4806      	ldr	r0, [pc, #24]	; (8004ec8 <NRF24L01_Init+0x24>)
 8004eae:	f7fd faee 	bl	800248e <HAL_GPIO_WritePin>
  Set_NRF24L01_CSN; // Spi disable
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	2120      	movs	r1, #32
 8004eb6:	4804      	ldr	r0, [pc, #16]	; (8004ec8 <NRF24L01_Init+0x24>)
 8004eb8:	f7fd fae9 	bl	800248e <HAL_GPIO_WritePin>
  delay_us(100);
 8004ebc:	2064      	movs	r0, #100	; 0x64
 8004ebe:	f7ff ffd9 	bl	8004e74 <delay_us>
}
 8004ec2:	bf00      	nop
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	40010800 	.word	0x40010800

08004ecc <nRF24_SPI_Send_Byte>:

// 封装spi读写函数
unsigned char nRF24_SPI_Send_Byte(unsigned char txdata)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af02      	add	r7, sp, #8
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	71fb      	strb	r3, [r7, #7]
  unsigned char rxdata;
  HAL_SPI_TransmitReceive(&hspi2, &txdata, &rxdata, 1, 0x10);
 8004ed6:	f107 020f 	add.w	r2, r7, #15
 8004eda:	1df9      	adds	r1, r7, #7
 8004edc:	2310      	movs	r3, #16
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	4804      	ldr	r0, [pc, #16]	; (8004ef4 <nRF24_SPI_Send_Byte+0x28>)
 8004ee4:	f7fe fa91 	bl	800340a <HAL_SPI_TransmitReceive>
  return (rxdata); // return read unsigned char
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	200000f8 	.word	0x200000f8

08004ef8 <NRF24L01_Write_Reg>:

// 通过SPI写寄存器
unsigned char NRF24L01_Write_Reg(unsigned char regaddr, unsigned char data)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	4603      	mov	r3, r0
 8004f00:	460a      	mov	r2, r1
 8004f02:	71fb      	strb	r3, [r7, #7]
 8004f04:	4613      	mov	r3, r2
 8004f06:	71bb      	strb	r3, [r7, #6]
  unsigned char status;
  Clr_NRF24L01_CSN;                      // 使能SPI传输
 8004f08:	2200      	movs	r2, #0
 8004f0a:	2120      	movs	r1, #32
 8004f0c:	480b      	ldr	r0, [pc, #44]	; (8004f3c <NRF24L01_Write_Reg+0x44>)
 8004f0e:	f7fd fabe 	bl	800248e <HAL_GPIO_WritePin>
  status = nRF24_SPI_Send_Byte(regaddr); // 发送寄存器号
 8004f12:	79fb      	ldrb	r3, [r7, #7]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7ff ffd9 	bl	8004ecc <nRF24_SPI_Send_Byte>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	73fb      	strb	r3, [r7, #15]
  nRF24_SPI_Send_Byte(data);             // 写入寄存器的值
 8004f1e:	79bb      	ldrb	r3, [r7, #6]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7ff ffd3 	bl	8004ecc <nRF24_SPI_Send_Byte>
  Set_NRF24L01_CSN;                      // 禁止SPI传输
 8004f26:	2201      	movs	r2, #1
 8004f28:	2120      	movs	r1, #32
 8004f2a:	4804      	ldr	r0, [pc, #16]	; (8004f3c <NRF24L01_Write_Reg+0x44>)
 8004f2c:	f7fd faaf 	bl	800248e <HAL_GPIO_WritePin>
  return (status);                       // 返回状态值
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	40010800 	.word	0x40010800

08004f40 <NRF24L01_Read_Reg>:
// 读取SPI寄存器值 ，regaddr:要读的寄存器
unsigned char NRF24L01_Read_Reg(unsigned char regaddr)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	4603      	mov	r3, r0
 8004f48:	71fb      	strb	r3, [r7, #7]
  unsigned char reg_val;
  Clr_NRF24L01_CSN;                    // 使能SPI传输
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	2120      	movs	r1, #32
 8004f4e:	480b      	ldr	r0, [pc, #44]	; (8004f7c <NRF24L01_Read_Reg+0x3c>)
 8004f50:	f7fd fa9d 	bl	800248e <HAL_GPIO_WritePin>
  nRF24_SPI_Send_Byte(regaddr);        // 发送寄存器号
 8004f54:	79fb      	ldrb	r3, [r7, #7]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff ffb8 	bl	8004ecc <nRF24_SPI_Send_Byte>
  reg_val = nRF24_SPI_Send_Byte(0XFF); // 读取寄存器内容
 8004f5c:	20ff      	movs	r0, #255	; 0xff
 8004f5e:	f7ff ffb5 	bl	8004ecc <nRF24_SPI_Send_Byte>
 8004f62:	4603      	mov	r3, r0
 8004f64:	73fb      	strb	r3, [r7, #15]
  Set_NRF24L01_CSN;                    // 禁止SPI传输
 8004f66:	2201      	movs	r2, #1
 8004f68:	2120      	movs	r1, #32
 8004f6a:	4804      	ldr	r0, [pc, #16]	; (8004f7c <NRF24L01_Read_Reg+0x3c>)
 8004f6c:	f7fd fa8f 	bl	800248e <HAL_GPIO_WritePin>
  return (reg_val);                    // 返回状态值
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40010800 	.word	0x40010800

08004f80 <NRF24L01_Read_Buf>:
// 在指定位置读出指定长度的数据
//*pBuf:数据指针
// 返回值,此次读到的状态寄存器值
unsigned char NRF24L01_Read_Buf(unsigned char regaddr, unsigned char *pBuf, unsigned char datalen)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	4603      	mov	r3, r0
 8004f88:	6039      	str	r1, [r7, #0]
 8004f8a:	71fb      	strb	r3, [r7, #7]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	71bb      	strb	r3, [r7, #6]
  unsigned char status;
  Clr_NRF24L01_CSN;                      // 使能SPI传输
 8004f90:	2200      	movs	r2, #0
 8004f92:	2120      	movs	r1, #32
 8004f94:	480c      	ldr	r0, [pc, #48]	; (8004fc8 <NRF24L01_Read_Buf+0x48>)
 8004f96:	f7fd fa7a 	bl	800248e <HAL_GPIO_WritePin>
  status = nRF24_SPI_Send_Byte(regaddr); // 发送寄存器值(位置),并读取状态值
 8004f9a:	79fb      	ldrb	r3, [r7, #7]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7ff ff95 	bl	8004ecc <nRF24_SPI_Send_Byte>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	73fb      	strb	r3, [r7, #15]
  // for(u8_ctr=0;u8_ctr<datalen;u8_ctr++)pBuf[u8_ctr]=SPI_ReadWriteByte(0XFF);//读出数据
  HAL_SPI_Receive(&hspi2, pBuf, datalen, 0x10);
 8004fa6:	79bb      	ldrb	r3, [r7, #6]
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	2310      	movs	r3, #16
 8004fac:	6839      	ldr	r1, [r7, #0]
 8004fae:	4807      	ldr	r0, [pc, #28]	; (8004fcc <NRF24L01_Read_Buf+0x4c>)
 8004fb0:	f7fe f913 	bl	80031da <HAL_SPI_Receive>
  Set_NRF24L01_CSN; // 关闭SPI传输
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	2120      	movs	r1, #32
 8004fb8:	4803      	ldr	r0, [pc, #12]	; (8004fc8 <NRF24L01_Read_Buf+0x48>)
 8004fba:	f7fd fa68 	bl	800248e <HAL_GPIO_WritePin>
  return status;    // 返回读到的状态值
 8004fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	40010800 	.word	0x40010800
 8004fcc:	200000f8 	.word	0x200000f8

08004fd0 <NRF24L01_Write_Buf>:
// 在指定位置写指定长度的数据
//*pBuf:数据指针
// 返回值,此次读到的状态寄存器值
unsigned char NRF24L01_Write_Buf(unsigned char regaddr, unsigned char *pBuf, unsigned char datalen)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	6039      	str	r1, [r7, #0]
 8004fda:	71fb      	strb	r3, [r7, #7]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	71bb      	strb	r3, [r7, #6]
  unsigned char status;
  Clr_NRF24L01_CSN;                      // 使能SPI传输
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2120      	movs	r1, #32
 8004fe4:	480c      	ldr	r0, [pc, #48]	; (8005018 <NRF24L01_Write_Buf+0x48>)
 8004fe6:	f7fd fa52 	bl	800248e <HAL_GPIO_WritePin>
  status = nRF24_SPI_Send_Byte(regaddr); // 发送寄存器值(位置),并读取状态值
 8004fea:	79fb      	ldrb	r3, [r7, #7]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7ff ff6d 	bl	8004ecc <nRF24_SPI_Send_Byte>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	73fb      	strb	r3, [r7, #15]
  // for(u8_ctr=0; u8_ctr<datalen; u8_ctr++)SPI_ReadWriteByte(*pBuf++); //写入数据
  HAL_SPI_Transmit(&hspi2, pBuf, datalen, 0x10);
 8004ff6:	79bb      	ldrb	r3, [r7, #6]
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	2310      	movs	r3, #16
 8004ffc:	6839      	ldr	r1, [r7, #0]
 8004ffe:	4807      	ldr	r0, [pc, #28]	; (800501c <NRF24L01_Write_Buf+0x4c>)
 8005000:	f7fd ffa8 	bl	8002f54 <HAL_SPI_Transmit>
  Set_NRF24L01_CSN; // 关闭SPI传输
 8005004:	2201      	movs	r2, #1
 8005006:	2120      	movs	r1, #32
 8005008:	4803      	ldr	r0, [pc, #12]	; (8005018 <NRF24L01_Write_Buf+0x48>)
 800500a:	f7fd fa40 	bl	800248e <HAL_GPIO_WritePin>
  return status;    // 返回读到的状态值
 800500e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005010:	4618      	mov	r0, r3
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	40010800 	.word	0x40010800
 800501c:	200000f8 	.word	0x200000f8

08005020 <NRF24L01_TxPacket>:
// 启动NRF24L01发送一次数据
// txbuf:待发送数据首地址
// 返回值:发送完成状况
unsigned char NRF24L01_TxPacket(unsigned char *txbuf)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  unsigned char state;
  Clr_NRF24L01_CE;
 8005028:	2200      	movs	r2, #0
 800502a:	2140      	movs	r1, #64	; 0x40
 800502c:	481f      	ldr	r0, [pc, #124]	; (80050ac <NRF24L01_TxPacket+0x8c>)
 800502e:	f7fd fa2e 	bl	800248e <HAL_GPIO_WritePin>
  NRF24L01_Write_Buf(WR_TX_PLOAD, txbuf, TX_PLOAD_WIDTH); // 写数据到TX BUF  32个字节
 8005032:	2220      	movs	r2, #32
 8005034:	6879      	ldr	r1, [r7, #4]
 8005036:	20a0      	movs	r0, #160	; 0xa0
 8005038:	f7ff ffca 	bl	8004fd0 <NRF24L01_Write_Buf>
  Set_NRF24L01_CE;                                        // 启动发送
 800503c:	2201      	movs	r2, #1
 800503e:	2140      	movs	r1, #64	; 0x40
 8005040:	481a      	ldr	r0, [pc, #104]	; (80050ac <NRF24L01_TxPacket+0x8c>)
 8005042:	f7fd fa24 	bl	800248e <HAL_GPIO_WritePin>
  while (READ_NRF24L01_IRQ != 0)
 8005046:	bf00      	nop
 8005048:	2110      	movs	r1, #16
 800504a:	4818      	ldr	r0, [pc, #96]	; (80050ac <NRF24L01_TxPacket+0x8c>)
 800504c:	f7fd fa08 	bl	8002460 <HAL_GPIO_ReadPin>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1f8      	bne.n	8005048 <NRF24L01_TxPacket+0x28>
    ;                                                // 等待发送完成
  state = NRF24L01_Read_Reg(STATUS);                 // 读取状态寄存器的值
 8005056:	2007      	movs	r0, #7
 8005058:	f7ff ff72 	bl	8004f40 <NRF24L01_Read_Reg>
 800505c:	4603      	mov	r3, r0
 800505e:	73fb      	strb	r3, [r7, #15]
  NRF24L01_Write_Reg(SPI_WRITE_REG + STATUS, state); // 清除TX_DS或MAX_RT中断标志
 8005060:	7bfb      	ldrb	r3, [r7, #15]
 8005062:	4619      	mov	r1, r3
 8005064:	2027      	movs	r0, #39	; 0x27
 8005066:	f7ff ff47 	bl	8004ef8 <NRF24L01_Write_Reg>
  if (state & MAX_TX)                                // 达到最大重发次数
 800506a:	7bfb      	ldrb	r3, [r7, #15]
 800506c:	f003 0310 	and.w	r3, r3, #16
 8005070:	2b00      	cmp	r3, #0
 8005072:	d008      	beq.n	8005086 <NRF24L01_TxPacket+0x66>
  {
    NRF24L01_Write_Reg(FLUSH_TX, 0xff); // 清除TX FIFO寄存器
 8005074:	21ff      	movs	r1, #255	; 0xff
 8005076:	20e1      	movs	r0, #225	; 0xe1
 8005078:	f7ff ff3e 	bl	8004ef8 <NRF24L01_Write_Reg>
    debug_out("TX MAX_TX error!\r\n");
 800507c:	480c      	ldr	r0, [pc, #48]	; (80050b0 <NRF24L01_TxPacket+0x90>)
 800507e:	f000 f9d1 	bl	8005424 <puts>
    return MAX_TX;
 8005082:	2310      	movs	r3, #16
 8005084:	e00d      	b.n	80050a2 <NRF24L01_TxPacket+0x82>
  }
  if (state & TX_OK) // 发送完成
 8005086:	7bfb      	ldrb	r3, [r7, #15]
 8005088:	f003 0320 	and.w	r3, r3, #32
 800508c:	2b00      	cmp	r3, #0
 800508e:	d004      	beq.n	800509a <NRF24L01_TxPacket+0x7a>
  {
    debug_out("TX OK!\r\n");
 8005090:	4808      	ldr	r0, [pc, #32]	; (80050b4 <NRF24L01_TxPacket+0x94>)
 8005092:	f000 f9c7 	bl	8005424 <puts>
    return TX_OK;
 8005096:	2320      	movs	r3, #32
 8005098:	e003      	b.n	80050a2 <NRF24L01_TxPacket+0x82>
  }
  debug_out("TX other error!\r\n");
 800509a:	4807      	ldr	r0, [pc, #28]	; (80050b8 <NRF24L01_TxPacket+0x98>)
 800509c:	f000 f9c2 	bl	8005424 <puts>
  return 0xff; // 其他原因发送失败
 80050a0:	23ff      	movs	r3, #255	; 0xff
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	40010800 	.word	0x40010800
 80050b0:	080061e4 	.word	0x080061e4
 80050b4:	080061f8 	.word	0x080061f8
 80050b8:	08006200 	.word	0x08006200

080050bc <TX_Mode>:
// 设置TX地址,写TX数据宽度,设置RX自动应答的地址,填充TX发送数据,
// 选择RF频道,波特率和LNA HCURR PWR_UP,CRC使能
// 当CE变高后,即进入RX模式,并可以接收数据了
// CE为高大于10us,则启动发送.
void TX_Mode(void)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
  Clr_NRF24L01_CE;
 80050c0:	2200      	movs	r2, #0
 80050c2:	2140      	movs	r1, #64	; 0x40
 80050c4:	4815      	ldr	r0, [pc, #84]	; (800511c <TX_Mode+0x60>)
 80050c6:	f7fd f9e2 	bl	800248e <HAL_GPIO_WritePin>
  // 写TX节点地址
  NRF24L01_Write_Buf(SPI_WRITE_REG + TX_ADDR, (unsigned char *)INIT_ADDR0, TX_ADR_WIDTH);
 80050ca:	2205      	movs	r2, #5
 80050cc:	4914      	ldr	r1, [pc, #80]	; (8005120 <TX_Mode+0x64>)
 80050ce:	2030      	movs	r0, #48	; 0x30
 80050d0:	f7ff ff7e 	bl	8004fd0 <NRF24L01_Write_Buf>
  // 设置TX节点地址,主要为了使能ACK
  NRF24L01_Write_Buf(SPI_WRITE_REG + RX_ADDR_P0, (unsigned char *)INIT_ADDR0, RX_ADR_WIDTH);
 80050d4:	2205      	movs	r2, #5
 80050d6:	4912      	ldr	r1, [pc, #72]	; (8005120 <TX_Mode+0x64>)
 80050d8:	202a      	movs	r0, #42	; 0x2a
 80050da:	f7ff ff79 	bl	8004fd0 <NRF24L01_Write_Buf>

  // 使能通道0的自动应答
  NRF24L01_Write_Reg(SPI_WRITE_REG + EN_AA, 0x01);
 80050de:	2101      	movs	r1, #1
 80050e0:	2021      	movs	r0, #33	; 0x21
 80050e2:	f7ff ff09 	bl	8004ef8 <NRF24L01_Write_Reg>
  // 使能通道0的接收地址
  NRF24L01_Write_Reg(SPI_WRITE_REG + EN_RXADDR, 0x01);
 80050e6:	2101      	movs	r1, #1
 80050e8:	2022      	movs	r0, #34	; 0x22
 80050ea:	f7ff ff05 	bl	8004ef8 <NRF24L01_Write_Reg>
  // 设置自动重发间隔时间:500us + 86us;最大自动重发次数:10次
  NRF24L01_Write_Reg(SPI_WRITE_REG + SETUP_RETR, 0x1a);
 80050ee:	211a      	movs	r1, #26
 80050f0:	2024      	movs	r0, #36	; 0x24
 80050f2:	f7ff ff01 	bl	8004ef8 <NRF24L01_Write_Reg>
  // 设置RF通道为40
  NRF24L01_Write_Reg(SPI_WRITE_REG + RF_CH, CH_Num);
 80050f6:	2178      	movs	r1, #120	; 0x78
 80050f8:	2025      	movs	r0, #37	; 0x25
 80050fa:	f7ff fefd 	bl	8004ef8 <NRF24L01_Write_Reg>
  // 设置TX发射参数,0db增益,2Mbps,低噪声增益开启
  NRF24L01_Write_Reg(SPI_WRITE_REG + RF_SETUP, 0x0f);
 80050fe:	210f      	movs	r1, #15
 8005100:	2026      	movs	r0, #38	; 0x26
 8005102:	f7ff fef9 	bl	8004ef8 <NRF24L01_Write_Reg>
  // 配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC,PRIM_RX发送模式,开启所有中断
  NRF24L01_Write_Reg(SPI_WRITE_REG + CONFIG, 0x0e);
 8005106:	210e      	movs	r1, #14
 8005108:	2020      	movs	r0, #32
 800510a:	f7ff fef5 	bl	8004ef8 <NRF24L01_Write_Reg>
  // CE为高,10us后启动发送
  Set_NRF24L01_CE;
 800510e:	2201      	movs	r2, #1
 8005110:	2140      	movs	r1, #64	; 0x40
 8005112:	4802      	ldr	r0, [pc, #8]	; (800511c <TX_Mode+0x60>)
 8005114:	f7fd f9bb 	bl	800248e <HAL_GPIO_WritePin>
}
 8005118:	bf00      	nop
 800511a:	bd80      	pop	{r7, pc}
 800511c:	40010800 	.word	0x40010800
 8005120:	080062a4 	.word	0x080062a4

08005124 <NRF24L01_Check>:

// 上电检测NRF24L01是否在位
// 写5个数据然后再读回来进行比较，
// 相同时返回值:0，表示在位;否则返回1，表示不在位
unsigned char NRF24L01_Check(void)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
  unsigned char buf[5] = {0XA5, 0XA5, 0XA5, 0XA5, 0XA5};
 800512a:	4a1b      	ldr	r2, [pc, #108]	; (8005198 <NRF24L01_Check+0x74>)
 800512c:	f107 0308 	add.w	r3, r7, #8
 8005130:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005134:	6018      	str	r0, [r3, #0]
 8005136:	3304      	adds	r3, #4
 8005138:	7019      	strb	r1, [r3, #0]
  unsigned char buf1[5];
  unsigned char i;
  NRF24L01_Write_Buf(SPI_WRITE_REG + TX_ADDR, buf, 5); // 写入5个字节的地址.
 800513a:	f107 0308 	add.w	r3, r7, #8
 800513e:	2205      	movs	r2, #5
 8005140:	4619      	mov	r1, r3
 8005142:	2030      	movs	r0, #48	; 0x30
 8005144:	f7ff ff44 	bl	8004fd0 <NRF24L01_Write_Buf>
  NRF24L01_Read_Buf(TX_ADDR, buf1, 5);                 // 读出写入的地址
 8005148:	463b      	mov	r3, r7
 800514a:	2205      	movs	r2, #5
 800514c:	4619      	mov	r1, r3
 800514e:	2010      	movs	r0, #16
 8005150:	f7ff ff16 	bl	8004f80 <NRF24L01_Read_Buf>
  for (i = 0; i < 5; i++)
 8005154:	2300      	movs	r3, #0
 8005156:	73fb      	strb	r3, [r7, #15]
 8005158:	e009      	b.n	800516e <NRF24L01_Check+0x4a>
    if (buf1[i] != 0XA5)
 800515a:	7bfb      	ldrb	r3, [r7, #15]
 800515c:	3310      	adds	r3, #16
 800515e:	443b      	add	r3, r7
 8005160:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005164:	2ba5      	cmp	r3, #165	; 0xa5
 8005166:	d106      	bne.n	8005176 <NRF24L01_Check+0x52>
  for (i = 0; i < 5; i++)
 8005168:	7bfb      	ldrb	r3, [r7, #15]
 800516a:	3301      	adds	r3, #1
 800516c:	73fb      	strb	r3, [r7, #15]
 800516e:	7bfb      	ldrb	r3, [r7, #15]
 8005170:	2b04      	cmp	r3, #4
 8005172:	d9f2      	bls.n	800515a <NRF24L01_Check+0x36>
 8005174:	e000      	b.n	8005178 <NRF24L01_Check+0x54>
      break;
 8005176:	bf00      	nop
  if (i != 5)
 8005178:	7bfb      	ldrb	r3, [r7, #15]
 800517a:	2b05      	cmp	r3, #5
 800517c:	d004      	beq.n	8005188 <NRF24L01_Check+0x64>
  {
    debug_out(("nRF24L01 TEST FAIL\r\n"));
 800517e:	4807      	ldr	r0, [pc, #28]	; (800519c <NRF24L01_Check+0x78>)
 8005180:	f000 f950 	bl	8005424 <puts>
    return 1; // NRF24L01不在位
 8005184:	2301      	movs	r3, #1
 8005186:	e003      	b.n	8005190 <NRF24L01_Check+0x6c>
  }
  debug_out(("nRF24L01 TEST OK\r\n"));
 8005188:	4805      	ldr	r0, [pc, #20]	; (80051a0 <NRF24L01_Check+0x7c>)
 800518a:	f000 f94b 	bl	8005424 <puts>
  return 0; // NRF24L01在位
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	0800625c 	.word	0x0800625c
 800519c:	08006234 	.word	0x08006234
 80051a0:	08006248 	.word	0x08006248

080051a4 <NRF24L01_TX_Start>:

void NRF24L01_TX_Start(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
  NRF24L01_Init();
 80051a8:	f7ff fe7c 	bl	8004ea4 <NRF24L01_Init>
  printf("\r\nNRF24l01 init ok\r\n");
 80051ac:	4804      	ldr	r0, [pc, #16]	; (80051c0 <NRF24L01_TX_Start+0x1c>)
 80051ae:	f000 f939 	bl	8005424 <puts>
  NRF24L01_Check();
 80051b2:	f7ff ffb7 	bl	8005124 <NRF24L01_Check>
  TX_Mode();
 80051b6:	f7ff ff81 	bl	80050bc <TX_Mode>
}
 80051ba:	bf00      	nop
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	08006264 	.word	0x08006264

080051c4 <std>:
 80051c4:	2300      	movs	r3, #0
 80051c6:	b510      	push	{r4, lr}
 80051c8:	4604      	mov	r4, r0
 80051ca:	e9c0 3300 	strd	r3, r3, [r0]
 80051ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051d2:	6083      	str	r3, [r0, #8]
 80051d4:	8181      	strh	r1, [r0, #12]
 80051d6:	6643      	str	r3, [r0, #100]	; 0x64
 80051d8:	81c2      	strh	r2, [r0, #14]
 80051da:	6183      	str	r3, [r0, #24]
 80051dc:	4619      	mov	r1, r3
 80051de:	2208      	movs	r2, #8
 80051e0:	305c      	adds	r0, #92	; 0x5c
 80051e2:	f000 f9ff 	bl	80055e4 <memset>
 80051e6:	4b0d      	ldr	r3, [pc, #52]	; (800521c <std+0x58>)
 80051e8:	6224      	str	r4, [r4, #32]
 80051ea:	6263      	str	r3, [r4, #36]	; 0x24
 80051ec:	4b0c      	ldr	r3, [pc, #48]	; (8005220 <std+0x5c>)
 80051ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80051f0:	4b0c      	ldr	r3, [pc, #48]	; (8005224 <std+0x60>)
 80051f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051f4:	4b0c      	ldr	r3, [pc, #48]	; (8005228 <std+0x64>)
 80051f6:	6323      	str	r3, [r4, #48]	; 0x30
 80051f8:	4b0c      	ldr	r3, [pc, #48]	; (800522c <std+0x68>)
 80051fa:	429c      	cmp	r4, r3
 80051fc:	d006      	beq.n	800520c <std+0x48>
 80051fe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005202:	4294      	cmp	r4, r2
 8005204:	d002      	beq.n	800520c <std+0x48>
 8005206:	33d0      	adds	r3, #208	; 0xd0
 8005208:	429c      	cmp	r4, r3
 800520a:	d105      	bne.n	8005218 <std+0x54>
 800520c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005214:	f000 ba5e 	b.w	80056d4 <__retarget_lock_init_recursive>
 8005218:	bd10      	pop	{r4, pc}
 800521a:	bf00      	nop
 800521c:	08005435 	.word	0x08005435
 8005220:	08005457 	.word	0x08005457
 8005224:	0800548f 	.word	0x0800548f
 8005228:	080054b3 	.word	0x080054b3
 800522c:	20000428 	.word	0x20000428

08005230 <stdio_exit_handler>:
 8005230:	4a02      	ldr	r2, [pc, #8]	; (800523c <stdio_exit_handler+0xc>)
 8005232:	4903      	ldr	r1, [pc, #12]	; (8005240 <stdio_exit_handler+0x10>)
 8005234:	4803      	ldr	r0, [pc, #12]	; (8005244 <stdio_exit_handler+0x14>)
 8005236:	f000 b869 	b.w	800530c <_fwalk_sglue>
 800523a:	bf00      	nop
 800523c:	2000000c 	.word	0x2000000c
 8005240:	08005f75 	.word	0x08005f75
 8005244:	20000018 	.word	0x20000018

08005248 <cleanup_stdio>:
 8005248:	6841      	ldr	r1, [r0, #4]
 800524a:	4b0c      	ldr	r3, [pc, #48]	; (800527c <cleanup_stdio+0x34>)
 800524c:	b510      	push	{r4, lr}
 800524e:	4299      	cmp	r1, r3
 8005250:	4604      	mov	r4, r0
 8005252:	d001      	beq.n	8005258 <cleanup_stdio+0x10>
 8005254:	f000 fe8e 	bl	8005f74 <_fflush_r>
 8005258:	68a1      	ldr	r1, [r4, #8]
 800525a:	4b09      	ldr	r3, [pc, #36]	; (8005280 <cleanup_stdio+0x38>)
 800525c:	4299      	cmp	r1, r3
 800525e:	d002      	beq.n	8005266 <cleanup_stdio+0x1e>
 8005260:	4620      	mov	r0, r4
 8005262:	f000 fe87 	bl	8005f74 <_fflush_r>
 8005266:	68e1      	ldr	r1, [r4, #12]
 8005268:	4b06      	ldr	r3, [pc, #24]	; (8005284 <cleanup_stdio+0x3c>)
 800526a:	4299      	cmp	r1, r3
 800526c:	d004      	beq.n	8005278 <cleanup_stdio+0x30>
 800526e:	4620      	mov	r0, r4
 8005270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005274:	f000 be7e 	b.w	8005f74 <_fflush_r>
 8005278:	bd10      	pop	{r4, pc}
 800527a:	bf00      	nop
 800527c:	20000428 	.word	0x20000428
 8005280:	20000490 	.word	0x20000490
 8005284:	200004f8 	.word	0x200004f8

08005288 <global_stdio_init.part.0>:
 8005288:	b510      	push	{r4, lr}
 800528a:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <global_stdio_init.part.0+0x30>)
 800528c:	4c0b      	ldr	r4, [pc, #44]	; (80052bc <global_stdio_init.part.0+0x34>)
 800528e:	4a0c      	ldr	r2, [pc, #48]	; (80052c0 <global_stdio_init.part.0+0x38>)
 8005290:	4620      	mov	r0, r4
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	2104      	movs	r1, #4
 8005296:	2200      	movs	r2, #0
 8005298:	f7ff ff94 	bl	80051c4 <std>
 800529c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80052a0:	2201      	movs	r2, #1
 80052a2:	2109      	movs	r1, #9
 80052a4:	f7ff ff8e 	bl	80051c4 <std>
 80052a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80052ac:	2202      	movs	r2, #2
 80052ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052b2:	2112      	movs	r1, #18
 80052b4:	f7ff bf86 	b.w	80051c4 <std>
 80052b8:	20000560 	.word	0x20000560
 80052bc:	20000428 	.word	0x20000428
 80052c0:	08005231 	.word	0x08005231

080052c4 <__sfp_lock_acquire>:
 80052c4:	4801      	ldr	r0, [pc, #4]	; (80052cc <__sfp_lock_acquire+0x8>)
 80052c6:	f000 ba06 	b.w	80056d6 <__retarget_lock_acquire_recursive>
 80052ca:	bf00      	nop
 80052cc:	20000569 	.word	0x20000569

080052d0 <__sfp_lock_release>:
 80052d0:	4801      	ldr	r0, [pc, #4]	; (80052d8 <__sfp_lock_release+0x8>)
 80052d2:	f000 ba01 	b.w	80056d8 <__retarget_lock_release_recursive>
 80052d6:	bf00      	nop
 80052d8:	20000569 	.word	0x20000569

080052dc <__sinit>:
 80052dc:	b510      	push	{r4, lr}
 80052de:	4604      	mov	r4, r0
 80052e0:	f7ff fff0 	bl	80052c4 <__sfp_lock_acquire>
 80052e4:	6a23      	ldr	r3, [r4, #32]
 80052e6:	b11b      	cbz	r3, 80052f0 <__sinit+0x14>
 80052e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052ec:	f7ff bff0 	b.w	80052d0 <__sfp_lock_release>
 80052f0:	4b04      	ldr	r3, [pc, #16]	; (8005304 <__sinit+0x28>)
 80052f2:	6223      	str	r3, [r4, #32]
 80052f4:	4b04      	ldr	r3, [pc, #16]	; (8005308 <__sinit+0x2c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1f5      	bne.n	80052e8 <__sinit+0xc>
 80052fc:	f7ff ffc4 	bl	8005288 <global_stdio_init.part.0>
 8005300:	e7f2      	b.n	80052e8 <__sinit+0xc>
 8005302:	bf00      	nop
 8005304:	08005249 	.word	0x08005249
 8005308:	20000560 	.word	0x20000560

0800530c <_fwalk_sglue>:
 800530c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005310:	4607      	mov	r7, r0
 8005312:	4688      	mov	r8, r1
 8005314:	4614      	mov	r4, r2
 8005316:	2600      	movs	r6, #0
 8005318:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800531c:	f1b9 0901 	subs.w	r9, r9, #1
 8005320:	d505      	bpl.n	800532e <_fwalk_sglue+0x22>
 8005322:	6824      	ldr	r4, [r4, #0]
 8005324:	2c00      	cmp	r4, #0
 8005326:	d1f7      	bne.n	8005318 <_fwalk_sglue+0xc>
 8005328:	4630      	mov	r0, r6
 800532a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800532e:	89ab      	ldrh	r3, [r5, #12]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d907      	bls.n	8005344 <_fwalk_sglue+0x38>
 8005334:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005338:	3301      	adds	r3, #1
 800533a:	d003      	beq.n	8005344 <_fwalk_sglue+0x38>
 800533c:	4629      	mov	r1, r5
 800533e:	4638      	mov	r0, r7
 8005340:	47c0      	blx	r8
 8005342:	4306      	orrs	r6, r0
 8005344:	3568      	adds	r5, #104	; 0x68
 8005346:	e7e9      	b.n	800531c <_fwalk_sglue+0x10>

08005348 <iprintf>:
 8005348:	b40f      	push	{r0, r1, r2, r3}
 800534a:	b507      	push	{r0, r1, r2, lr}
 800534c:	4906      	ldr	r1, [pc, #24]	; (8005368 <iprintf+0x20>)
 800534e:	ab04      	add	r3, sp, #16
 8005350:	6808      	ldr	r0, [r1, #0]
 8005352:	f853 2b04 	ldr.w	r2, [r3], #4
 8005356:	6881      	ldr	r1, [r0, #8]
 8005358:	9301      	str	r3, [sp, #4]
 800535a:	f000 fadb 	bl	8005914 <_vfiprintf_r>
 800535e:	b003      	add	sp, #12
 8005360:	f85d eb04 	ldr.w	lr, [sp], #4
 8005364:	b004      	add	sp, #16
 8005366:	4770      	bx	lr
 8005368:	20000064 	.word	0x20000064

0800536c <putchar>:
 800536c:	4b02      	ldr	r3, [pc, #8]	; (8005378 <putchar+0xc>)
 800536e:	4601      	mov	r1, r0
 8005370:	6818      	ldr	r0, [r3, #0]
 8005372:	6882      	ldr	r2, [r0, #8]
 8005374:	f000 be87 	b.w	8006086 <_putc_r>
 8005378:	20000064 	.word	0x20000064

0800537c <_puts_r>:
 800537c:	6a03      	ldr	r3, [r0, #32]
 800537e:	b570      	push	{r4, r5, r6, lr}
 8005380:	4605      	mov	r5, r0
 8005382:	460e      	mov	r6, r1
 8005384:	6884      	ldr	r4, [r0, #8]
 8005386:	b90b      	cbnz	r3, 800538c <_puts_r+0x10>
 8005388:	f7ff ffa8 	bl	80052dc <__sinit>
 800538c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800538e:	07db      	lsls	r3, r3, #31
 8005390:	d405      	bmi.n	800539e <_puts_r+0x22>
 8005392:	89a3      	ldrh	r3, [r4, #12]
 8005394:	0598      	lsls	r0, r3, #22
 8005396:	d402      	bmi.n	800539e <_puts_r+0x22>
 8005398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800539a:	f000 f99c 	bl	80056d6 <__retarget_lock_acquire_recursive>
 800539e:	89a3      	ldrh	r3, [r4, #12]
 80053a0:	0719      	lsls	r1, r3, #28
 80053a2:	d513      	bpl.n	80053cc <_puts_r+0x50>
 80053a4:	6923      	ldr	r3, [r4, #16]
 80053a6:	b18b      	cbz	r3, 80053cc <_puts_r+0x50>
 80053a8:	3e01      	subs	r6, #1
 80053aa:	68a3      	ldr	r3, [r4, #8]
 80053ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80053b0:	3b01      	subs	r3, #1
 80053b2:	60a3      	str	r3, [r4, #8]
 80053b4:	b9e9      	cbnz	r1, 80053f2 <_puts_r+0x76>
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	da2e      	bge.n	8005418 <_puts_r+0x9c>
 80053ba:	4622      	mov	r2, r4
 80053bc:	210a      	movs	r1, #10
 80053be:	4628      	mov	r0, r5
 80053c0:	f000 f87b 	bl	80054ba <__swbuf_r>
 80053c4:	3001      	adds	r0, #1
 80053c6:	d007      	beq.n	80053d8 <_puts_r+0x5c>
 80053c8:	250a      	movs	r5, #10
 80053ca:	e007      	b.n	80053dc <_puts_r+0x60>
 80053cc:	4621      	mov	r1, r4
 80053ce:	4628      	mov	r0, r5
 80053d0:	f000 f8b0 	bl	8005534 <__swsetup_r>
 80053d4:	2800      	cmp	r0, #0
 80053d6:	d0e7      	beq.n	80053a8 <_puts_r+0x2c>
 80053d8:	f04f 35ff 	mov.w	r5, #4294967295
 80053dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053de:	07da      	lsls	r2, r3, #31
 80053e0:	d405      	bmi.n	80053ee <_puts_r+0x72>
 80053e2:	89a3      	ldrh	r3, [r4, #12]
 80053e4:	059b      	lsls	r3, r3, #22
 80053e6:	d402      	bmi.n	80053ee <_puts_r+0x72>
 80053e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053ea:	f000 f975 	bl	80056d8 <__retarget_lock_release_recursive>
 80053ee:	4628      	mov	r0, r5
 80053f0:	bd70      	pop	{r4, r5, r6, pc}
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	da04      	bge.n	8005400 <_puts_r+0x84>
 80053f6:	69a2      	ldr	r2, [r4, #24]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	dc06      	bgt.n	800540a <_puts_r+0x8e>
 80053fc:	290a      	cmp	r1, #10
 80053fe:	d004      	beq.n	800540a <_puts_r+0x8e>
 8005400:	6823      	ldr	r3, [r4, #0]
 8005402:	1c5a      	adds	r2, r3, #1
 8005404:	6022      	str	r2, [r4, #0]
 8005406:	7019      	strb	r1, [r3, #0]
 8005408:	e7cf      	b.n	80053aa <_puts_r+0x2e>
 800540a:	4622      	mov	r2, r4
 800540c:	4628      	mov	r0, r5
 800540e:	f000 f854 	bl	80054ba <__swbuf_r>
 8005412:	3001      	adds	r0, #1
 8005414:	d1c9      	bne.n	80053aa <_puts_r+0x2e>
 8005416:	e7df      	b.n	80053d8 <_puts_r+0x5c>
 8005418:	250a      	movs	r5, #10
 800541a:	6823      	ldr	r3, [r4, #0]
 800541c:	1c5a      	adds	r2, r3, #1
 800541e:	6022      	str	r2, [r4, #0]
 8005420:	701d      	strb	r5, [r3, #0]
 8005422:	e7db      	b.n	80053dc <_puts_r+0x60>

08005424 <puts>:
 8005424:	4b02      	ldr	r3, [pc, #8]	; (8005430 <puts+0xc>)
 8005426:	4601      	mov	r1, r0
 8005428:	6818      	ldr	r0, [r3, #0]
 800542a:	f7ff bfa7 	b.w	800537c <_puts_r>
 800542e:	bf00      	nop
 8005430:	20000064 	.word	0x20000064

08005434 <__sread>:
 8005434:	b510      	push	{r4, lr}
 8005436:	460c      	mov	r4, r1
 8005438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800543c:	f000 f8fc 	bl	8005638 <_read_r>
 8005440:	2800      	cmp	r0, #0
 8005442:	bfab      	itete	ge
 8005444:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005446:	89a3      	ldrhlt	r3, [r4, #12]
 8005448:	181b      	addge	r3, r3, r0
 800544a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800544e:	bfac      	ite	ge
 8005450:	6563      	strge	r3, [r4, #84]	; 0x54
 8005452:	81a3      	strhlt	r3, [r4, #12]
 8005454:	bd10      	pop	{r4, pc}

08005456 <__swrite>:
 8005456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800545a:	461f      	mov	r7, r3
 800545c:	898b      	ldrh	r3, [r1, #12]
 800545e:	4605      	mov	r5, r0
 8005460:	05db      	lsls	r3, r3, #23
 8005462:	460c      	mov	r4, r1
 8005464:	4616      	mov	r6, r2
 8005466:	d505      	bpl.n	8005474 <__swrite+0x1e>
 8005468:	2302      	movs	r3, #2
 800546a:	2200      	movs	r2, #0
 800546c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005470:	f000 f8d0 	bl	8005614 <_lseek_r>
 8005474:	89a3      	ldrh	r3, [r4, #12]
 8005476:	4632      	mov	r2, r6
 8005478:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800547c:	81a3      	strh	r3, [r4, #12]
 800547e:	4628      	mov	r0, r5
 8005480:	463b      	mov	r3, r7
 8005482:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005486:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800548a:	f000 b8e7 	b.w	800565c <_write_r>

0800548e <__sseek>:
 800548e:	b510      	push	{r4, lr}
 8005490:	460c      	mov	r4, r1
 8005492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005496:	f000 f8bd 	bl	8005614 <_lseek_r>
 800549a:	1c43      	adds	r3, r0, #1
 800549c:	89a3      	ldrh	r3, [r4, #12]
 800549e:	bf15      	itete	ne
 80054a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80054a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054aa:	81a3      	strheq	r3, [r4, #12]
 80054ac:	bf18      	it	ne
 80054ae:	81a3      	strhne	r3, [r4, #12]
 80054b0:	bd10      	pop	{r4, pc}

080054b2 <__sclose>:
 80054b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054b6:	f000 b89d 	b.w	80055f4 <_close_r>

080054ba <__swbuf_r>:
 80054ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054bc:	460e      	mov	r6, r1
 80054be:	4614      	mov	r4, r2
 80054c0:	4605      	mov	r5, r0
 80054c2:	b118      	cbz	r0, 80054cc <__swbuf_r+0x12>
 80054c4:	6a03      	ldr	r3, [r0, #32]
 80054c6:	b90b      	cbnz	r3, 80054cc <__swbuf_r+0x12>
 80054c8:	f7ff ff08 	bl	80052dc <__sinit>
 80054cc:	69a3      	ldr	r3, [r4, #24]
 80054ce:	60a3      	str	r3, [r4, #8]
 80054d0:	89a3      	ldrh	r3, [r4, #12]
 80054d2:	071a      	lsls	r2, r3, #28
 80054d4:	d525      	bpl.n	8005522 <__swbuf_r+0x68>
 80054d6:	6923      	ldr	r3, [r4, #16]
 80054d8:	b31b      	cbz	r3, 8005522 <__swbuf_r+0x68>
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	6922      	ldr	r2, [r4, #16]
 80054de:	b2f6      	uxtb	r6, r6
 80054e0:	1a98      	subs	r0, r3, r2
 80054e2:	6963      	ldr	r3, [r4, #20]
 80054e4:	4637      	mov	r7, r6
 80054e6:	4283      	cmp	r3, r0
 80054e8:	dc04      	bgt.n	80054f4 <__swbuf_r+0x3a>
 80054ea:	4621      	mov	r1, r4
 80054ec:	4628      	mov	r0, r5
 80054ee:	f000 fd41 	bl	8005f74 <_fflush_r>
 80054f2:	b9e0      	cbnz	r0, 800552e <__swbuf_r+0x74>
 80054f4:	68a3      	ldr	r3, [r4, #8]
 80054f6:	3b01      	subs	r3, #1
 80054f8:	60a3      	str	r3, [r4, #8]
 80054fa:	6823      	ldr	r3, [r4, #0]
 80054fc:	1c5a      	adds	r2, r3, #1
 80054fe:	6022      	str	r2, [r4, #0]
 8005500:	701e      	strb	r6, [r3, #0]
 8005502:	6962      	ldr	r2, [r4, #20]
 8005504:	1c43      	adds	r3, r0, #1
 8005506:	429a      	cmp	r2, r3
 8005508:	d004      	beq.n	8005514 <__swbuf_r+0x5a>
 800550a:	89a3      	ldrh	r3, [r4, #12]
 800550c:	07db      	lsls	r3, r3, #31
 800550e:	d506      	bpl.n	800551e <__swbuf_r+0x64>
 8005510:	2e0a      	cmp	r6, #10
 8005512:	d104      	bne.n	800551e <__swbuf_r+0x64>
 8005514:	4621      	mov	r1, r4
 8005516:	4628      	mov	r0, r5
 8005518:	f000 fd2c 	bl	8005f74 <_fflush_r>
 800551c:	b938      	cbnz	r0, 800552e <__swbuf_r+0x74>
 800551e:	4638      	mov	r0, r7
 8005520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005522:	4621      	mov	r1, r4
 8005524:	4628      	mov	r0, r5
 8005526:	f000 f805 	bl	8005534 <__swsetup_r>
 800552a:	2800      	cmp	r0, #0
 800552c:	d0d5      	beq.n	80054da <__swbuf_r+0x20>
 800552e:	f04f 37ff 	mov.w	r7, #4294967295
 8005532:	e7f4      	b.n	800551e <__swbuf_r+0x64>

08005534 <__swsetup_r>:
 8005534:	b538      	push	{r3, r4, r5, lr}
 8005536:	4b2a      	ldr	r3, [pc, #168]	; (80055e0 <__swsetup_r+0xac>)
 8005538:	4605      	mov	r5, r0
 800553a:	6818      	ldr	r0, [r3, #0]
 800553c:	460c      	mov	r4, r1
 800553e:	b118      	cbz	r0, 8005548 <__swsetup_r+0x14>
 8005540:	6a03      	ldr	r3, [r0, #32]
 8005542:	b90b      	cbnz	r3, 8005548 <__swsetup_r+0x14>
 8005544:	f7ff feca 	bl	80052dc <__sinit>
 8005548:	89a3      	ldrh	r3, [r4, #12]
 800554a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800554e:	0718      	lsls	r0, r3, #28
 8005550:	d422      	bmi.n	8005598 <__swsetup_r+0x64>
 8005552:	06d9      	lsls	r1, r3, #27
 8005554:	d407      	bmi.n	8005566 <__swsetup_r+0x32>
 8005556:	2309      	movs	r3, #9
 8005558:	602b      	str	r3, [r5, #0]
 800555a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800555e:	f04f 30ff 	mov.w	r0, #4294967295
 8005562:	81a3      	strh	r3, [r4, #12]
 8005564:	e034      	b.n	80055d0 <__swsetup_r+0x9c>
 8005566:	0758      	lsls	r0, r3, #29
 8005568:	d512      	bpl.n	8005590 <__swsetup_r+0x5c>
 800556a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800556c:	b141      	cbz	r1, 8005580 <__swsetup_r+0x4c>
 800556e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005572:	4299      	cmp	r1, r3
 8005574:	d002      	beq.n	800557c <__swsetup_r+0x48>
 8005576:	4628      	mov	r0, r5
 8005578:	f000 f8b0 	bl	80056dc <_free_r>
 800557c:	2300      	movs	r3, #0
 800557e:	6363      	str	r3, [r4, #52]	; 0x34
 8005580:	89a3      	ldrh	r3, [r4, #12]
 8005582:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005586:	81a3      	strh	r3, [r4, #12]
 8005588:	2300      	movs	r3, #0
 800558a:	6063      	str	r3, [r4, #4]
 800558c:	6923      	ldr	r3, [r4, #16]
 800558e:	6023      	str	r3, [r4, #0]
 8005590:	89a3      	ldrh	r3, [r4, #12]
 8005592:	f043 0308 	orr.w	r3, r3, #8
 8005596:	81a3      	strh	r3, [r4, #12]
 8005598:	6923      	ldr	r3, [r4, #16]
 800559a:	b94b      	cbnz	r3, 80055b0 <__swsetup_r+0x7c>
 800559c:	89a3      	ldrh	r3, [r4, #12]
 800559e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055a6:	d003      	beq.n	80055b0 <__swsetup_r+0x7c>
 80055a8:	4621      	mov	r1, r4
 80055aa:	4628      	mov	r0, r5
 80055ac:	f000 fd2f 	bl	800600e <__smakebuf_r>
 80055b0:	89a0      	ldrh	r0, [r4, #12]
 80055b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055b6:	f010 0301 	ands.w	r3, r0, #1
 80055ba:	d00a      	beq.n	80055d2 <__swsetup_r+0x9e>
 80055bc:	2300      	movs	r3, #0
 80055be:	60a3      	str	r3, [r4, #8]
 80055c0:	6963      	ldr	r3, [r4, #20]
 80055c2:	425b      	negs	r3, r3
 80055c4:	61a3      	str	r3, [r4, #24]
 80055c6:	6923      	ldr	r3, [r4, #16]
 80055c8:	b943      	cbnz	r3, 80055dc <__swsetup_r+0xa8>
 80055ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80055ce:	d1c4      	bne.n	800555a <__swsetup_r+0x26>
 80055d0:	bd38      	pop	{r3, r4, r5, pc}
 80055d2:	0781      	lsls	r1, r0, #30
 80055d4:	bf58      	it	pl
 80055d6:	6963      	ldrpl	r3, [r4, #20]
 80055d8:	60a3      	str	r3, [r4, #8]
 80055da:	e7f4      	b.n	80055c6 <__swsetup_r+0x92>
 80055dc:	2000      	movs	r0, #0
 80055de:	e7f7      	b.n	80055d0 <__swsetup_r+0x9c>
 80055e0:	20000064 	.word	0x20000064

080055e4 <memset>:
 80055e4:	4603      	mov	r3, r0
 80055e6:	4402      	add	r2, r0
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d100      	bne.n	80055ee <memset+0xa>
 80055ec:	4770      	bx	lr
 80055ee:	f803 1b01 	strb.w	r1, [r3], #1
 80055f2:	e7f9      	b.n	80055e8 <memset+0x4>

080055f4 <_close_r>:
 80055f4:	b538      	push	{r3, r4, r5, lr}
 80055f6:	2300      	movs	r3, #0
 80055f8:	4d05      	ldr	r5, [pc, #20]	; (8005610 <_close_r+0x1c>)
 80055fa:	4604      	mov	r4, r0
 80055fc:	4608      	mov	r0, r1
 80055fe:	602b      	str	r3, [r5, #0]
 8005600:	f7fb f94f 	bl	80008a2 <_close>
 8005604:	1c43      	adds	r3, r0, #1
 8005606:	d102      	bne.n	800560e <_close_r+0x1a>
 8005608:	682b      	ldr	r3, [r5, #0]
 800560a:	b103      	cbz	r3, 800560e <_close_r+0x1a>
 800560c:	6023      	str	r3, [r4, #0]
 800560e:	bd38      	pop	{r3, r4, r5, pc}
 8005610:	20000564 	.word	0x20000564

08005614 <_lseek_r>:
 8005614:	b538      	push	{r3, r4, r5, lr}
 8005616:	4604      	mov	r4, r0
 8005618:	4608      	mov	r0, r1
 800561a:	4611      	mov	r1, r2
 800561c:	2200      	movs	r2, #0
 800561e:	4d05      	ldr	r5, [pc, #20]	; (8005634 <_lseek_r+0x20>)
 8005620:	602a      	str	r2, [r5, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	f7fb f961 	bl	80008ea <_lseek>
 8005628:	1c43      	adds	r3, r0, #1
 800562a:	d102      	bne.n	8005632 <_lseek_r+0x1e>
 800562c:	682b      	ldr	r3, [r5, #0]
 800562e:	b103      	cbz	r3, 8005632 <_lseek_r+0x1e>
 8005630:	6023      	str	r3, [r4, #0]
 8005632:	bd38      	pop	{r3, r4, r5, pc}
 8005634:	20000564 	.word	0x20000564

08005638 <_read_r>:
 8005638:	b538      	push	{r3, r4, r5, lr}
 800563a:	4604      	mov	r4, r0
 800563c:	4608      	mov	r0, r1
 800563e:	4611      	mov	r1, r2
 8005640:	2200      	movs	r2, #0
 8005642:	4d05      	ldr	r5, [pc, #20]	; (8005658 <_read_r+0x20>)
 8005644:	602a      	str	r2, [r5, #0]
 8005646:	461a      	mov	r2, r3
 8005648:	f7fb f8f2 	bl	8000830 <_read>
 800564c:	1c43      	adds	r3, r0, #1
 800564e:	d102      	bne.n	8005656 <_read_r+0x1e>
 8005650:	682b      	ldr	r3, [r5, #0]
 8005652:	b103      	cbz	r3, 8005656 <_read_r+0x1e>
 8005654:	6023      	str	r3, [r4, #0]
 8005656:	bd38      	pop	{r3, r4, r5, pc}
 8005658:	20000564 	.word	0x20000564

0800565c <_write_r>:
 800565c:	b538      	push	{r3, r4, r5, lr}
 800565e:	4604      	mov	r4, r0
 8005660:	4608      	mov	r0, r1
 8005662:	4611      	mov	r1, r2
 8005664:	2200      	movs	r2, #0
 8005666:	4d05      	ldr	r5, [pc, #20]	; (800567c <_write_r+0x20>)
 8005668:	602a      	str	r2, [r5, #0]
 800566a:	461a      	mov	r2, r3
 800566c:	f7fb f8fd 	bl	800086a <_write>
 8005670:	1c43      	adds	r3, r0, #1
 8005672:	d102      	bne.n	800567a <_write_r+0x1e>
 8005674:	682b      	ldr	r3, [r5, #0]
 8005676:	b103      	cbz	r3, 800567a <_write_r+0x1e>
 8005678:	6023      	str	r3, [r4, #0]
 800567a:	bd38      	pop	{r3, r4, r5, pc}
 800567c:	20000564 	.word	0x20000564

08005680 <__errno>:
 8005680:	4b01      	ldr	r3, [pc, #4]	; (8005688 <__errno+0x8>)
 8005682:	6818      	ldr	r0, [r3, #0]
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	20000064 	.word	0x20000064

0800568c <__libc_init_array>:
 800568c:	b570      	push	{r4, r5, r6, lr}
 800568e:	2600      	movs	r6, #0
 8005690:	4d0c      	ldr	r5, [pc, #48]	; (80056c4 <__libc_init_array+0x38>)
 8005692:	4c0d      	ldr	r4, [pc, #52]	; (80056c8 <__libc_init_array+0x3c>)
 8005694:	1b64      	subs	r4, r4, r5
 8005696:	10a4      	asrs	r4, r4, #2
 8005698:	42a6      	cmp	r6, r4
 800569a:	d109      	bne.n	80056b0 <__libc_init_array+0x24>
 800569c:	f000 fd68 	bl	8006170 <_init>
 80056a0:	2600      	movs	r6, #0
 80056a2:	4d0a      	ldr	r5, [pc, #40]	; (80056cc <__libc_init_array+0x40>)
 80056a4:	4c0a      	ldr	r4, [pc, #40]	; (80056d0 <__libc_init_array+0x44>)
 80056a6:	1b64      	subs	r4, r4, r5
 80056a8:	10a4      	asrs	r4, r4, #2
 80056aa:	42a6      	cmp	r6, r4
 80056ac:	d105      	bne.n	80056ba <__libc_init_array+0x2e>
 80056ae:	bd70      	pop	{r4, r5, r6, pc}
 80056b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80056b4:	4798      	blx	r3
 80056b6:	3601      	adds	r6, #1
 80056b8:	e7ee      	b.n	8005698 <__libc_init_array+0xc>
 80056ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80056be:	4798      	blx	r3
 80056c0:	3601      	adds	r6, #1
 80056c2:	e7f2      	b.n	80056aa <__libc_init_array+0x1e>
 80056c4:	080062dc 	.word	0x080062dc
 80056c8:	080062dc 	.word	0x080062dc
 80056cc:	080062dc 	.word	0x080062dc
 80056d0:	080062e0 	.word	0x080062e0

080056d4 <__retarget_lock_init_recursive>:
 80056d4:	4770      	bx	lr

080056d6 <__retarget_lock_acquire_recursive>:
 80056d6:	4770      	bx	lr

080056d8 <__retarget_lock_release_recursive>:
 80056d8:	4770      	bx	lr
	...

080056dc <_free_r>:
 80056dc:	b538      	push	{r3, r4, r5, lr}
 80056de:	4605      	mov	r5, r0
 80056e0:	2900      	cmp	r1, #0
 80056e2:	d040      	beq.n	8005766 <_free_r+0x8a>
 80056e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056e8:	1f0c      	subs	r4, r1, #4
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	bfb8      	it	lt
 80056ee:	18e4      	addlt	r4, r4, r3
 80056f0:	f000 f8dc 	bl	80058ac <__malloc_lock>
 80056f4:	4a1c      	ldr	r2, [pc, #112]	; (8005768 <_free_r+0x8c>)
 80056f6:	6813      	ldr	r3, [r2, #0]
 80056f8:	b933      	cbnz	r3, 8005708 <_free_r+0x2c>
 80056fa:	6063      	str	r3, [r4, #4]
 80056fc:	6014      	str	r4, [r2, #0]
 80056fe:	4628      	mov	r0, r5
 8005700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005704:	f000 b8d8 	b.w	80058b8 <__malloc_unlock>
 8005708:	42a3      	cmp	r3, r4
 800570a:	d908      	bls.n	800571e <_free_r+0x42>
 800570c:	6820      	ldr	r0, [r4, #0]
 800570e:	1821      	adds	r1, r4, r0
 8005710:	428b      	cmp	r3, r1
 8005712:	bf01      	itttt	eq
 8005714:	6819      	ldreq	r1, [r3, #0]
 8005716:	685b      	ldreq	r3, [r3, #4]
 8005718:	1809      	addeq	r1, r1, r0
 800571a:	6021      	streq	r1, [r4, #0]
 800571c:	e7ed      	b.n	80056fa <_free_r+0x1e>
 800571e:	461a      	mov	r2, r3
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	b10b      	cbz	r3, 8005728 <_free_r+0x4c>
 8005724:	42a3      	cmp	r3, r4
 8005726:	d9fa      	bls.n	800571e <_free_r+0x42>
 8005728:	6811      	ldr	r1, [r2, #0]
 800572a:	1850      	adds	r0, r2, r1
 800572c:	42a0      	cmp	r0, r4
 800572e:	d10b      	bne.n	8005748 <_free_r+0x6c>
 8005730:	6820      	ldr	r0, [r4, #0]
 8005732:	4401      	add	r1, r0
 8005734:	1850      	adds	r0, r2, r1
 8005736:	4283      	cmp	r3, r0
 8005738:	6011      	str	r1, [r2, #0]
 800573a:	d1e0      	bne.n	80056fe <_free_r+0x22>
 800573c:	6818      	ldr	r0, [r3, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	4408      	add	r0, r1
 8005742:	6010      	str	r0, [r2, #0]
 8005744:	6053      	str	r3, [r2, #4]
 8005746:	e7da      	b.n	80056fe <_free_r+0x22>
 8005748:	d902      	bls.n	8005750 <_free_r+0x74>
 800574a:	230c      	movs	r3, #12
 800574c:	602b      	str	r3, [r5, #0]
 800574e:	e7d6      	b.n	80056fe <_free_r+0x22>
 8005750:	6820      	ldr	r0, [r4, #0]
 8005752:	1821      	adds	r1, r4, r0
 8005754:	428b      	cmp	r3, r1
 8005756:	bf01      	itttt	eq
 8005758:	6819      	ldreq	r1, [r3, #0]
 800575a:	685b      	ldreq	r3, [r3, #4]
 800575c:	1809      	addeq	r1, r1, r0
 800575e:	6021      	streq	r1, [r4, #0]
 8005760:	6063      	str	r3, [r4, #4]
 8005762:	6054      	str	r4, [r2, #4]
 8005764:	e7cb      	b.n	80056fe <_free_r+0x22>
 8005766:	bd38      	pop	{r3, r4, r5, pc}
 8005768:	2000056c 	.word	0x2000056c

0800576c <sbrk_aligned>:
 800576c:	b570      	push	{r4, r5, r6, lr}
 800576e:	4e0e      	ldr	r6, [pc, #56]	; (80057a8 <sbrk_aligned+0x3c>)
 8005770:	460c      	mov	r4, r1
 8005772:	6831      	ldr	r1, [r6, #0]
 8005774:	4605      	mov	r5, r0
 8005776:	b911      	cbnz	r1, 800577e <sbrk_aligned+0x12>
 8005778:	f000 fcdc 	bl	8006134 <_sbrk_r>
 800577c:	6030      	str	r0, [r6, #0]
 800577e:	4621      	mov	r1, r4
 8005780:	4628      	mov	r0, r5
 8005782:	f000 fcd7 	bl	8006134 <_sbrk_r>
 8005786:	1c43      	adds	r3, r0, #1
 8005788:	d00a      	beq.n	80057a0 <sbrk_aligned+0x34>
 800578a:	1cc4      	adds	r4, r0, #3
 800578c:	f024 0403 	bic.w	r4, r4, #3
 8005790:	42a0      	cmp	r0, r4
 8005792:	d007      	beq.n	80057a4 <sbrk_aligned+0x38>
 8005794:	1a21      	subs	r1, r4, r0
 8005796:	4628      	mov	r0, r5
 8005798:	f000 fccc 	bl	8006134 <_sbrk_r>
 800579c:	3001      	adds	r0, #1
 800579e:	d101      	bne.n	80057a4 <sbrk_aligned+0x38>
 80057a0:	f04f 34ff 	mov.w	r4, #4294967295
 80057a4:	4620      	mov	r0, r4
 80057a6:	bd70      	pop	{r4, r5, r6, pc}
 80057a8:	20000570 	.word	0x20000570

080057ac <_malloc_r>:
 80057ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057b0:	1ccd      	adds	r5, r1, #3
 80057b2:	f025 0503 	bic.w	r5, r5, #3
 80057b6:	3508      	adds	r5, #8
 80057b8:	2d0c      	cmp	r5, #12
 80057ba:	bf38      	it	cc
 80057bc:	250c      	movcc	r5, #12
 80057be:	2d00      	cmp	r5, #0
 80057c0:	4607      	mov	r7, r0
 80057c2:	db01      	blt.n	80057c8 <_malloc_r+0x1c>
 80057c4:	42a9      	cmp	r1, r5
 80057c6:	d905      	bls.n	80057d4 <_malloc_r+0x28>
 80057c8:	230c      	movs	r3, #12
 80057ca:	2600      	movs	r6, #0
 80057cc:	603b      	str	r3, [r7, #0]
 80057ce:	4630      	mov	r0, r6
 80057d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80058a8 <_malloc_r+0xfc>
 80057d8:	f000 f868 	bl	80058ac <__malloc_lock>
 80057dc:	f8d8 3000 	ldr.w	r3, [r8]
 80057e0:	461c      	mov	r4, r3
 80057e2:	bb5c      	cbnz	r4, 800583c <_malloc_r+0x90>
 80057e4:	4629      	mov	r1, r5
 80057e6:	4638      	mov	r0, r7
 80057e8:	f7ff ffc0 	bl	800576c <sbrk_aligned>
 80057ec:	1c43      	adds	r3, r0, #1
 80057ee:	4604      	mov	r4, r0
 80057f0:	d155      	bne.n	800589e <_malloc_r+0xf2>
 80057f2:	f8d8 4000 	ldr.w	r4, [r8]
 80057f6:	4626      	mov	r6, r4
 80057f8:	2e00      	cmp	r6, #0
 80057fa:	d145      	bne.n	8005888 <_malloc_r+0xdc>
 80057fc:	2c00      	cmp	r4, #0
 80057fe:	d048      	beq.n	8005892 <_malloc_r+0xe6>
 8005800:	6823      	ldr	r3, [r4, #0]
 8005802:	4631      	mov	r1, r6
 8005804:	4638      	mov	r0, r7
 8005806:	eb04 0903 	add.w	r9, r4, r3
 800580a:	f000 fc93 	bl	8006134 <_sbrk_r>
 800580e:	4581      	cmp	r9, r0
 8005810:	d13f      	bne.n	8005892 <_malloc_r+0xe6>
 8005812:	6821      	ldr	r1, [r4, #0]
 8005814:	4638      	mov	r0, r7
 8005816:	1a6d      	subs	r5, r5, r1
 8005818:	4629      	mov	r1, r5
 800581a:	f7ff ffa7 	bl	800576c <sbrk_aligned>
 800581e:	3001      	adds	r0, #1
 8005820:	d037      	beq.n	8005892 <_malloc_r+0xe6>
 8005822:	6823      	ldr	r3, [r4, #0]
 8005824:	442b      	add	r3, r5
 8005826:	6023      	str	r3, [r4, #0]
 8005828:	f8d8 3000 	ldr.w	r3, [r8]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d038      	beq.n	80058a2 <_malloc_r+0xf6>
 8005830:	685a      	ldr	r2, [r3, #4]
 8005832:	42a2      	cmp	r2, r4
 8005834:	d12b      	bne.n	800588e <_malloc_r+0xe2>
 8005836:	2200      	movs	r2, #0
 8005838:	605a      	str	r2, [r3, #4]
 800583a:	e00f      	b.n	800585c <_malloc_r+0xb0>
 800583c:	6822      	ldr	r2, [r4, #0]
 800583e:	1b52      	subs	r2, r2, r5
 8005840:	d41f      	bmi.n	8005882 <_malloc_r+0xd6>
 8005842:	2a0b      	cmp	r2, #11
 8005844:	d917      	bls.n	8005876 <_malloc_r+0xca>
 8005846:	1961      	adds	r1, r4, r5
 8005848:	42a3      	cmp	r3, r4
 800584a:	6025      	str	r5, [r4, #0]
 800584c:	bf18      	it	ne
 800584e:	6059      	strne	r1, [r3, #4]
 8005850:	6863      	ldr	r3, [r4, #4]
 8005852:	bf08      	it	eq
 8005854:	f8c8 1000 	streq.w	r1, [r8]
 8005858:	5162      	str	r2, [r4, r5]
 800585a:	604b      	str	r3, [r1, #4]
 800585c:	4638      	mov	r0, r7
 800585e:	f104 060b 	add.w	r6, r4, #11
 8005862:	f000 f829 	bl	80058b8 <__malloc_unlock>
 8005866:	f026 0607 	bic.w	r6, r6, #7
 800586a:	1d23      	adds	r3, r4, #4
 800586c:	1af2      	subs	r2, r6, r3
 800586e:	d0ae      	beq.n	80057ce <_malloc_r+0x22>
 8005870:	1b9b      	subs	r3, r3, r6
 8005872:	50a3      	str	r3, [r4, r2]
 8005874:	e7ab      	b.n	80057ce <_malloc_r+0x22>
 8005876:	42a3      	cmp	r3, r4
 8005878:	6862      	ldr	r2, [r4, #4]
 800587a:	d1dd      	bne.n	8005838 <_malloc_r+0x8c>
 800587c:	f8c8 2000 	str.w	r2, [r8]
 8005880:	e7ec      	b.n	800585c <_malloc_r+0xb0>
 8005882:	4623      	mov	r3, r4
 8005884:	6864      	ldr	r4, [r4, #4]
 8005886:	e7ac      	b.n	80057e2 <_malloc_r+0x36>
 8005888:	4634      	mov	r4, r6
 800588a:	6876      	ldr	r6, [r6, #4]
 800588c:	e7b4      	b.n	80057f8 <_malloc_r+0x4c>
 800588e:	4613      	mov	r3, r2
 8005890:	e7cc      	b.n	800582c <_malloc_r+0x80>
 8005892:	230c      	movs	r3, #12
 8005894:	4638      	mov	r0, r7
 8005896:	603b      	str	r3, [r7, #0]
 8005898:	f000 f80e 	bl	80058b8 <__malloc_unlock>
 800589c:	e797      	b.n	80057ce <_malloc_r+0x22>
 800589e:	6025      	str	r5, [r4, #0]
 80058a0:	e7dc      	b.n	800585c <_malloc_r+0xb0>
 80058a2:	605b      	str	r3, [r3, #4]
 80058a4:	deff      	udf	#255	; 0xff
 80058a6:	bf00      	nop
 80058a8:	2000056c 	.word	0x2000056c

080058ac <__malloc_lock>:
 80058ac:	4801      	ldr	r0, [pc, #4]	; (80058b4 <__malloc_lock+0x8>)
 80058ae:	f7ff bf12 	b.w	80056d6 <__retarget_lock_acquire_recursive>
 80058b2:	bf00      	nop
 80058b4:	20000568 	.word	0x20000568

080058b8 <__malloc_unlock>:
 80058b8:	4801      	ldr	r0, [pc, #4]	; (80058c0 <__malloc_unlock+0x8>)
 80058ba:	f7ff bf0d 	b.w	80056d8 <__retarget_lock_release_recursive>
 80058be:	bf00      	nop
 80058c0:	20000568 	.word	0x20000568

080058c4 <__sfputc_r>:
 80058c4:	6893      	ldr	r3, [r2, #8]
 80058c6:	b410      	push	{r4}
 80058c8:	3b01      	subs	r3, #1
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	6093      	str	r3, [r2, #8]
 80058ce:	da07      	bge.n	80058e0 <__sfputc_r+0x1c>
 80058d0:	6994      	ldr	r4, [r2, #24]
 80058d2:	42a3      	cmp	r3, r4
 80058d4:	db01      	blt.n	80058da <__sfputc_r+0x16>
 80058d6:	290a      	cmp	r1, #10
 80058d8:	d102      	bne.n	80058e0 <__sfputc_r+0x1c>
 80058da:	bc10      	pop	{r4}
 80058dc:	f7ff bded 	b.w	80054ba <__swbuf_r>
 80058e0:	6813      	ldr	r3, [r2, #0]
 80058e2:	1c58      	adds	r0, r3, #1
 80058e4:	6010      	str	r0, [r2, #0]
 80058e6:	7019      	strb	r1, [r3, #0]
 80058e8:	4608      	mov	r0, r1
 80058ea:	bc10      	pop	{r4}
 80058ec:	4770      	bx	lr

080058ee <__sfputs_r>:
 80058ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058f0:	4606      	mov	r6, r0
 80058f2:	460f      	mov	r7, r1
 80058f4:	4614      	mov	r4, r2
 80058f6:	18d5      	adds	r5, r2, r3
 80058f8:	42ac      	cmp	r4, r5
 80058fa:	d101      	bne.n	8005900 <__sfputs_r+0x12>
 80058fc:	2000      	movs	r0, #0
 80058fe:	e007      	b.n	8005910 <__sfputs_r+0x22>
 8005900:	463a      	mov	r2, r7
 8005902:	4630      	mov	r0, r6
 8005904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005908:	f7ff ffdc 	bl	80058c4 <__sfputc_r>
 800590c:	1c43      	adds	r3, r0, #1
 800590e:	d1f3      	bne.n	80058f8 <__sfputs_r+0xa>
 8005910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005914 <_vfiprintf_r>:
 8005914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005918:	460d      	mov	r5, r1
 800591a:	4614      	mov	r4, r2
 800591c:	4698      	mov	r8, r3
 800591e:	4606      	mov	r6, r0
 8005920:	b09d      	sub	sp, #116	; 0x74
 8005922:	b118      	cbz	r0, 800592c <_vfiprintf_r+0x18>
 8005924:	6a03      	ldr	r3, [r0, #32]
 8005926:	b90b      	cbnz	r3, 800592c <_vfiprintf_r+0x18>
 8005928:	f7ff fcd8 	bl	80052dc <__sinit>
 800592c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800592e:	07d9      	lsls	r1, r3, #31
 8005930:	d405      	bmi.n	800593e <_vfiprintf_r+0x2a>
 8005932:	89ab      	ldrh	r3, [r5, #12]
 8005934:	059a      	lsls	r2, r3, #22
 8005936:	d402      	bmi.n	800593e <_vfiprintf_r+0x2a>
 8005938:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800593a:	f7ff fecc 	bl	80056d6 <__retarget_lock_acquire_recursive>
 800593e:	89ab      	ldrh	r3, [r5, #12]
 8005940:	071b      	lsls	r3, r3, #28
 8005942:	d501      	bpl.n	8005948 <_vfiprintf_r+0x34>
 8005944:	692b      	ldr	r3, [r5, #16]
 8005946:	b99b      	cbnz	r3, 8005970 <_vfiprintf_r+0x5c>
 8005948:	4629      	mov	r1, r5
 800594a:	4630      	mov	r0, r6
 800594c:	f7ff fdf2 	bl	8005534 <__swsetup_r>
 8005950:	b170      	cbz	r0, 8005970 <_vfiprintf_r+0x5c>
 8005952:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005954:	07dc      	lsls	r4, r3, #31
 8005956:	d504      	bpl.n	8005962 <_vfiprintf_r+0x4e>
 8005958:	f04f 30ff 	mov.w	r0, #4294967295
 800595c:	b01d      	add	sp, #116	; 0x74
 800595e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005962:	89ab      	ldrh	r3, [r5, #12]
 8005964:	0598      	lsls	r0, r3, #22
 8005966:	d4f7      	bmi.n	8005958 <_vfiprintf_r+0x44>
 8005968:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800596a:	f7ff feb5 	bl	80056d8 <__retarget_lock_release_recursive>
 800596e:	e7f3      	b.n	8005958 <_vfiprintf_r+0x44>
 8005970:	2300      	movs	r3, #0
 8005972:	9309      	str	r3, [sp, #36]	; 0x24
 8005974:	2320      	movs	r3, #32
 8005976:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800597a:	2330      	movs	r3, #48	; 0x30
 800597c:	f04f 0901 	mov.w	r9, #1
 8005980:	f8cd 800c 	str.w	r8, [sp, #12]
 8005984:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8005b34 <_vfiprintf_r+0x220>
 8005988:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800598c:	4623      	mov	r3, r4
 800598e:	469a      	mov	sl, r3
 8005990:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005994:	b10a      	cbz	r2, 800599a <_vfiprintf_r+0x86>
 8005996:	2a25      	cmp	r2, #37	; 0x25
 8005998:	d1f9      	bne.n	800598e <_vfiprintf_r+0x7a>
 800599a:	ebba 0b04 	subs.w	fp, sl, r4
 800599e:	d00b      	beq.n	80059b8 <_vfiprintf_r+0xa4>
 80059a0:	465b      	mov	r3, fp
 80059a2:	4622      	mov	r2, r4
 80059a4:	4629      	mov	r1, r5
 80059a6:	4630      	mov	r0, r6
 80059a8:	f7ff ffa1 	bl	80058ee <__sfputs_r>
 80059ac:	3001      	adds	r0, #1
 80059ae:	f000 80a9 	beq.w	8005b04 <_vfiprintf_r+0x1f0>
 80059b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059b4:	445a      	add	r2, fp
 80059b6:	9209      	str	r2, [sp, #36]	; 0x24
 80059b8:	f89a 3000 	ldrb.w	r3, [sl]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f000 80a1 	beq.w	8005b04 <_vfiprintf_r+0x1f0>
 80059c2:	2300      	movs	r3, #0
 80059c4:	f04f 32ff 	mov.w	r2, #4294967295
 80059c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059cc:	f10a 0a01 	add.w	sl, sl, #1
 80059d0:	9304      	str	r3, [sp, #16]
 80059d2:	9307      	str	r3, [sp, #28]
 80059d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059d8:	931a      	str	r3, [sp, #104]	; 0x68
 80059da:	4654      	mov	r4, sl
 80059dc:	2205      	movs	r2, #5
 80059de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059e2:	4854      	ldr	r0, [pc, #336]	; (8005b34 <_vfiprintf_r+0x220>)
 80059e4:	f000 fbb6 	bl	8006154 <memchr>
 80059e8:	9a04      	ldr	r2, [sp, #16]
 80059ea:	b9d8      	cbnz	r0, 8005a24 <_vfiprintf_r+0x110>
 80059ec:	06d1      	lsls	r1, r2, #27
 80059ee:	bf44      	itt	mi
 80059f0:	2320      	movmi	r3, #32
 80059f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059f6:	0713      	lsls	r3, r2, #28
 80059f8:	bf44      	itt	mi
 80059fa:	232b      	movmi	r3, #43	; 0x2b
 80059fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a00:	f89a 3000 	ldrb.w	r3, [sl]
 8005a04:	2b2a      	cmp	r3, #42	; 0x2a
 8005a06:	d015      	beq.n	8005a34 <_vfiprintf_r+0x120>
 8005a08:	4654      	mov	r4, sl
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	f04f 0c0a 	mov.w	ip, #10
 8005a10:	9a07      	ldr	r2, [sp, #28]
 8005a12:	4621      	mov	r1, r4
 8005a14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a18:	3b30      	subs	r3, #48	; 0x30
 8005a1a:	2b09      	cmp	r3, #9
 8005a1c:	d94d      	bls.n	8005aba <_vfiprintf_r+0x1a6>
 8005a1e:	b1b0      	cbz	r0, 8005a4e <_vfiprintf_r+0x13a>
 8005a20:	9207      	str	r2, [sp, #28]
 8005a22:	e014      	b.n	8005a4e <_vfiprintf_r+0x13a>
 8005a24:	eba0 0308 	sub.w	r3, r0, r8
 8005a28:	fa09 f303 	lsl.w	r3, r9, r3
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	46a2      	mov	sl, r4
 8005a30:	9304      	str	r3, [sp, #16]
 8005a32:	e7d2      	b.n	80059da <_vfiprintf_r+0xc6>
 8005a34:	9b03      	ldr	r3, [sp, #12]
 8005a36:	1d19      	adds	r1, r3, #4
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	9103      	str	r1, [sp, #12]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	bfbb      	ittet	lt
 8005a40:	425b      	neglt	r3, r3
 8005a42:	f042 0202 	orrlt.w	r2, r2, #2
 8005a46:	9307      	strge	r3, [sp, #28]
 8005a48:	9307      	strlt	r3, [sp, #28]
 8005a4a:	bfb8      	it	lt
 8005a4c:	9204      	strlt	r2, [sp, #16]
 8005a4e:	7823      	ldrb	r3, [r4, #0]
 8005a50:	2b2e      	cmp	r3, #46	; 0x2e
 8005a52:	d10c      	bne.n	8005a6e <_vfiprintf_r+0x15a>
 8005a54:	7863      	ldrb	r3, [r4, #1]
 8005a56:	2b2a      	cmp	r3, #42	; 0x2a
 8005a58:	d134      	bne.n	8005ac4 <_vfiprintf_r+0x1b0>
 8005a5a:	9b03      	ldr	r3, [sp, #12]
 8005a5c:	3402      	adds	r4, #2
 8005a5e:	1d1a      	adds	r2, r3, #4
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	9203      	str	r2, [sp, #12]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	bfb8      	it	lt
 8005a68:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a6c:	9305      	str	r3, [sp, #20]
 8005a6e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b38 <_vfiprintf_r+0x224>
 8005a72:	2203      	movs	r2, #3
 8005a74:	4650      	mov	r0, sl
 8005a76:	7821      	ldrb	r1, [r4, #0]
 8005a78:	f000 fb6c 	bl	8006154 <memchr>
 8005a7c:	b138      	cbz	r0, 8005a8e <_vfiprintf_r+0x17a>
 8005a7e:	2240      	movs	r2, #64	; 0x40
 8005a80:	9b04      	ldr	r3, [sp, #16]
 8005a82:	eba0 000a 	sub.w	r0, r0, sl
 8005a86:	4082      	lsls	r2, r0
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	3401      	adds	r4, #1
 8005a8c:	9304      	str	r3, [sp, #16]
 8005a8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a92:	2206      	movs	r2, #6
 8005a94:	4829      	ldr	r0, [pc, #164]	; (8005b3c <_vfiprintf_r+0x228>)
 8005a96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a9a:	f000 fb5b 	bl	8006154 <memchr>
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	d03f      	beq.n	8005b22 <_vfiprintf_r+0x20e>
 8005aa2:	4b27      	ldr	r3, [pc, #156]	; (8005b40 <_vfiprintf_r+0x22c>)
 8005aa4:	bb1b      	cbnz	r3, 8005aee <_vfiprintf_r+0x1da>
 8005aa6:	9b03      	ldr	r3, [sp, #12]
 8005aa8:	3307      	adds	r3, #7
 8005aaa:	f023 0307 	bic.w	r3, r3, #7
 8005aae:	3308      	adds	r3, #8
 8005ab0:	9303      	str	r3, [sp, #12]
 8005ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ab4:	443b      	add	r3, r7
 8005ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ab8:	e768      	b.n	800598c <_vfiprintf_r+0x78>
 8005aba:	460c      	mov	r4, r1
 8005abc:	2001      	movs	r0, #1
 8005abe:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ac2:	e7a6      	b.n	8005a12 <_vfiprintf_r+0xfe>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	f04f 0c0a 	mov.w	ip, #10
 8005aca:	4619      	mov	r1, r3
 8005acc:	3401      	adds	r4, #1
 8005ace:	9305      	str	r3, [sp, #20]
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ad6:	3a30      	subs	r2, #48	; 0x30
 8005ad8:	2a09      	cmp	r2, #9
 8005ada:	d903      	bls.n	8005ae4 <_vfiprintf_r+0x1d0>
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d0c6      	beq.n	8005a6e <_vfiprintf_r+0x15a>
 8005ae0:	9105      	str	r1, [sp, #20]
 8005ae2:	e7c4      	b.n	8005a6e <_vfiprintf_r+0x15a>
 8005ae4:	4604      	mov	r4, r0
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005aec:	e7f0      	b.n	8005ad0 <_vfiprintf_r+0x1bc>
 8005aee:	ab03      	add	r3, sp, #12
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	462a      	mov	r2, r5
 8005af4:	4630      	mov	r0, r6
 8005af6:	4b13      	ldr	r3, [pc, #76]	; (8005b44 <_vfiprintf_r+0x230>)
 8005af8:	a904      	add	r1, sp, #16
 8005afa:	f3af 8000 	nop.w
 8005afe:	4607      	mov	r7, r0
 8005b00:	1c78      	adds	r0, r7, #1
 8005b02:	d1d6      	bne.n	8005ab2 <_vfiprintf_r+0x19e>
 8005b04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b06:	07d9      	lsls	r1, r3, #31
 8005b08:	d405      	bmi.n	8005b16 <_vfiprintf_r+0x202>
 8005b0a:	89ab      	ldrh	r3, [r5, #12]
 8005b0c:	059a      	lsls	r2, r3, #22
 8005b0e:	d402      	bmi.n	8005b16 <_vfiprintf_r+0x202>
 8005b10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b12:	f7ff fde1 	bl	80056d8 <__retarget_lock_release_recursive>
 8005b16:	89ab      	ldrh	r3, [r5, #12]
 8005b18:	065b      	lsls	r3, r3, #25
 8005b1a:	f53f af1d 	bmi.w	8005958 <_vfiprintf_r+0x44>
 8005b1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b20:	e71c      	b.n	800595c <_vfiprintf_r+0x48>
 8005b22:	ab03      	add	r3, sp, #12
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	462a      	mov	r2, r5
 8005b28:	4630      	mov	r0, r6
 8005b2a:	4b06      	ldr	r3, [pc, #24]	; (8005b44 <_vfiprintf_r+0x230>)
 8005b2c:	a904      	add	r1, sp, #16
 8005b2e:	f000 f87d 	bl	8005c2c <_printf_i>
 8005b32:	e7e4      	b.n	8005afe <_vfiprintf_r+0x1ea>
 8005b34:	080062a9 	.word	0x080062a9
 8005b38:	080062af 	.word	0x080062af
 8005b3c:	080062b3 	.word	0x080062b3
 8005b40:	00000000 	.word	0x00000000
 8005b44:	080058ef 	.word	0x080058ef

08005b48 <_printf_common>:
 8005b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b4c:	4616      	mov	r6, r2
 8005b4e:	4699      	mov	r9, r3
 8005b50:	688a      	ldr	r2, [r1, #8]
 8005b52:	690b      	ldr	r3, [r1, #16]
 8005b54:	4607      	mov	r7, r0
 8005b56:	4293      	cmp	r3, r2
 8005b58:	bfb8      	it	lt
 8005b5a:	4613      	movlt	r3, r2
 8005b5c:	6033      	str	r3, [r6, #0]
 8005b5e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b62:	460c      	mov	r4, r1
 8005b64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b68:	b10a      	cbz	r2, 8005b6e <_printf_common+0x26>
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	6033      	str	r3, [r6, #0]
 8005b6e:	6823      	ldr	r3, [r4, #0]
 8005b70:	0699      	lsls	r1, r3, #26
 8005b72:	bf42      	ittt	mi
 8005b74:	6833      	ldrmi	r3, [r6, #0]
 8005b76:	3302      	addmi	r3, #2
 8005b78:	6033      	strmi	r3, [r6, #0]
 8005b7a:	6825      	ldr	r5, [r4, #0]
 8005b7c:	f015 0506 	ands.w	r5, r5, #6
 8005b80:	d106      	bne.n	8005b90 <_printf_common+0x48>
 8005b82:	f104 0a19 	add.w	sl, r4, #25
 8005b86:	68e3      	ldr	r3, [r4, #12]
 8005b88:	6832      	ldr	r2, [r6, #0]
 8005b8a:	1a9b      	subs	r3, r3, r2
 8005b8c:	42ab      	cmp	r3, r5
 8005b8e:	dc2b      	bgt.n	8005be8 <_printf_common+0xa0>
 8005b90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b94:	1e13      	subs	r3, r2, #0
 8005b96:	6822      	ldr	r2, [r4, #0]
 8005b98:	bf18      	it	ne
 8005b9a:	2301      	movne	r3, #1
 8005b9c:	0692      	lsls	r2, r2, #26
 8005b9e:	d430      	bmi.n	8005c02 <_printf_common+0xba>
 8005ba0:	4649      	mov	r1, r9
 8005ba2:	4638      	mov	r0, r7
 8005ba4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ba8:	47c0      	blx	r8
 8005baa:	3001      	adds	r0, #1
 8005bac:	d023      	beq.n	8005bf6 <_printf_common+0xae>
 8005bae:	6823      	ldr	r3, [r4, #0]
 8005bb0:	6922      	ldr	r2, [r4, #16]
 8005bb2:	f003 0306 	and.w	r3, r3, #6
 8005bb6:	2b04      	cmp	r3, #4
 8005bb8:	bf14      	ite	ne
 8005bba:	2500      	movne	r5, #0
 8005bbc:	6833      	ldreq	r3, [r6, #0]
 8005bbe:	f04f 0600 	mov.w	r6, #0
 8005bc2:	bf08      	it	eq
 8005bc4:	68e5      	ldreq	r5, [r4, #12]
 8005bc6:	f104 041a 	add.w	r4, r4, #26
 8005bca:	bf08      	it	eq
 8005bcc:	1aed      	subeq	r5, r5, r3
 8005bce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005bd2:	bf08      	it	eq
 8005bd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	bfc4      	itt	gt
 8005bdc:	1a9b      	subgt	r3, r3, r2
 8005bde:	18ed      	addgt	r5, r5, r3
 8005be0:	42b5      	cmp	r5, r6
 8005be2:	d11a      	bne.n	8005c1a <_printf_common+0xd2>
 8005be4:	2000      	movs	r0, #0
 8005be6:	e008      	b.n	8005bfa <_printf_common+0xb2>
 8005be8:	2301      	movs	r3, #1
 8005bea:	4652      	mov	r2, sl
 8005bec:	4649      	mov	r1, r9
 8005bee:	4638      	mov	r0, r7
 8005bf0:	47c0      	blx	r8
 8005bf2:	3001      	adds	r0, #1
 8005bf4:	d103      	bne.n	8005bfe <_printf_common+0xb6>
 8005bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8005bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bfe:	3501      	adds	r5, #1
 8005c00:	e7c1      	b.n	8005b86 <_printf_common+0x3e>
 8005c02:	2030      	movs	r0, #48	; 0x30
 8005c04:	18e1      	adds	r1, r4, r3
 8005c06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c0a:	1c5a      	adds	r2, r3, #1
 8005c0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c10:	4422      	add	r2, r4
 8005c12:	3302      	adds	r3, #2
 8005c14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c18:	e7c2      	b.n	8005ba0 <_printf_common+0x58>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	4622      	mov	r2, r4
 8005c1e:	4649      	mov	r1, r9
 8005c20:	4638      	mov	r0, r7
 8005c22:	47c0      	blx	r8
 8005c24:	3001      	adds	r0, #1
 8005c26:	d0e6      	beq.n	8005bf6 <_printf_common+0xae>
 8005c28:	3601      	adds	r6, #1
 8005c2a:	e7d9      	b.n	8005be0 <_printf_common+0x98>

08005c2c <_printf_i>:
 8005c2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c30:	7e0f      	ldrb	r7, [r1, #24]
 8005c32:	4691      	mov	r9, r2
 8005c34:	2f78      	cmp	r7, #120	; 0x78
 8005c36:	4680      	mov	r8, r0
 8005c38:	460c      	mov	r4, r1
 8005c3a:	469a      	mov	sl, r3
 8005c3c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c42:	d807      	bhi.n	8005c54 <_printf_i+0x28>
 8005c44:	2f62      	cmp	r7, #98	; 0x62
 8005c46:	d80a      	bhi.n	8005c5e <_printf_i+0x32>
 8005c48:	2f00      	cmp	r7, #0
 8005c4a:	f000 80d5 	beq.w	8005df8 <_printf_i+0x1cc>
 8005c4e:	2f58      	cmp	r7, #88	; 0x58
 8005c50:	f000 80c1 	beq.w	8005dd6 <_printf_i+0x1aa>
 8005c54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c5c:	e03a      	b.n	8005cd4 <_printf_i+0xa8>
 8005c5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c62:	2b15      	cmp	r3, #21
 8005c64:	d8f6      	bhi.n	8005c54 <_printf_i+0x28>
 8005c66:	a101      	add	r1, pc, #4	; (adr r1, 8005c6c <_printf_i+0x40>)
 8005c68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c6c:	08005cc5 	.word	0x08005cc5
 8005c70:	08005cd9 	.word	0x08005cd9
 8005c74:	08005c55 	.word	0x08005c55
 8005c78:	08005c55 	.word	0x08005c55
 8005c7c:	08005c55 	.word	0x08005c55
 8005c80:	08005c55 	.word	0x08005c55
 8005c84:	08005cd9 	.word	0x08005cd9
 8005c88:	08005c55 	.word	0x08005c55
 8005c8c:	08005c55 	.word	0x08005c55
 8005c90:	08005c55 	.word	0x08005c55
 8005c94:	08005c55 	.word	0x08005c55
 8005c98:	08005ddf 	.word	0x08005ddf
 8005c9c:	08005d05 	.word	0x08005d05
 8005ca0:	08005d99 	.word	0x08005d99
 8005ca4:	08005c55 	.word	0x08005c55
 8005ca8:	08005c55 	.word	0x08005c55
 8005cac:	08005e01 	.word	0x08005e01
 8005cb0:	08005c55 	.word	0x08005c55
 8005cb4:	08005d05 	.word	0x08005d05
 8005cb8:	08005c55 	.word	0x08005c55
 8005cbc:	08005c55 	.word	0x08005c55
 8005cc0:	08005da1 	.word	0x08005da1
 8005cc4:	682b      	ldr	r3, [r5, #0]
 8005cc6:	1d1a      	adds	r2, r3, #4
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	602a      	str	r2, [r5, #0]
 8005ccc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e0a0      	b.n	8005e1a <_printf_i+0x1ee>
 8005cd8:	6820      	ldr	r0, [r4, #0]
 8005cda:	682b      	ldr	r3, [r5, #0]
 8005cdc:	0607      	lsls	r7, r0, #24
 8005cde:	f103 0104 	add.w	r1, r3, #4
 8005ce2:	6029      	str	r1, [r5, #0]
 8005ce4:	d501      	bpl.n	8005cea <_printf_i+0xbe>
 8005ce6:	681e      	ldr	r6, [r3, #0]
 8005ce8:	e003      	b.n	8005cf2 <_printf_i+0xc6>
 8005cea:	0646      	lsls	r6, r0, #25
 8005cec:	d5fb      	bpl.n	8005ce6 <_printf_i+0xba>
 8005cee:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005cf2:	2e00      	cmp	r6, #0
 8005cf4:	da03      	bge.n	8005cfe <_printf_i+0xd2>
 8005cf6:	232d      	movs	r3, #45	; 0x2d
 8005cf8:	4276      	negs	r6, r6
 8005cfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cfe:	230a      	movs	r3, #10
 8005d00:	4859      	ldr	r0, [pc, #356]	; (8005e68 <_printf_i+0x23c>)
 8005d02:	e012      	b.n	8005d2a <_printf_i+0xfe>
 8005d04:	682b      	ldr	r3, [r5, #0]
 8005d06:	6820      	ldr	r0, [r4, #0]
 8005d08:	1d19      	adds	r1, r3, #4
 8005d0a:	6029      	str	r1, [r5, #0]
 8005d0c:	0605      	lsls	r5, r0, #24
 8005d0e:	d501      	bpl.n	8005d14 <_printf_i+0xe8>
 8005d10:	681e      	ldr	r6, [r3, #0]
 8005d12:	e002      	b.n	8005d1a <_printf_i+0xee>
 8005d14:	0641      	lsls	r1, r0, #25
 8005d16:	d5fb      	bpl.n	8005d10 <_printf_i+0xe4>
 8005d18:	881e      	ldrh	r6, [r3, #0]
 8005d1a:	2f6f      	cmp	r7, #111	; 0x6f
 8005d1c:	bf0c      	ite	eq
 8005d1e:	2308      	moveq	r3, #8
 8005d20:	230a      	movne	r3, #10
 8005d22:	4851      	ldr	r0, [pc, #324]	; (8005e68 <_printf_i+0x23c>)
 8005d24:	2100      	movs	r1, #0
 8005d26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d2a:	6865      	ldr	r5, [r4, #4]
 8005d2c:	2d00      	cmp	r5, #0
 8005d2e:	bfa8      	it	ge
 8005d30:	6821      	ldrge	r1, [r4, #0]
 8005d32:	60a5      	str	r5, [r4, #8]
 8005d34:	bfa4      	itt	ge
 8005d36:	f021 0104 	bicge.w	r1, r1, #4
 8005d3a:	6021      	strge	r1, [r4, #0]
 8005d3c:	b90e      	cbnz	r6, 8005d42 <_printf_i+0x116>
 8005d3e:	2d00      	cmp	r5, #0
 8005d40:	d04b      	beq.n	8005dda <_printf_i+0x1ae>
 8005d42:	4615      	mov	r5, r2
 8005d44:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d48:	fb03 6711 	mls	r7, r3, r1, r6
 8005d4c:	5dc7      	ldrb	r7, [r0, r7]
 8005d4e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d52:	4637      	mov	r7, r6
 8005d54:	42bb      	cmp	r3, r7
 8005d56:	460e      	mov	r6, r1
 8005d58:	d9f4      	bls.n	8005d44 <_printf_i+0x118>
 8005d5a:	2b08      	cmp	r3, #8
 8005d5c:	d10b      	bne.n	8005d76 <_printf_i+0x14a>
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	07de      	lsls	r6, r3, #31
 8005d62:	d508      	bpl.n	8005d76 <_printf_i+0x14a>
 8005d64:	6923      	ldr	r3, [r4, #16]
 8005d66:	6861      	ldr	r1, [r4, #4]
 8005d68:	4299      	cmp	r1, r3
 8005d6a:	bfde      	ittt	le
 8005d6c:	2330      	movle	r3, #48	; 0x30
 8005d6e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d72:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d76:	1b52      	subs	r2, r2, r5
 8005d78:	6122      	str	r2, [r4, #16]
 8005d7a:	464b      	mov	r3, r9
 8005d7c:	4621      	mov	r1, r4
 8005d7e:	4640      	mov	r0, r8
 8005d80:	f8cd a000 	str.w	sl, [sp]
 8005d84:	aa03      	add	r2, sp, #12
 8005d86:	f7ff fedf 	bl	8005b48 <_printf_common>
 8005d8a:	3001      	adds	r0, #1
 8005d8c:	d14a      	bne.n	8005e24 <_printf_i+0x1f8>
 8005d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d92:	b004      	add	sp, #16
 8005d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d98:	6823      	ldr	r3, [r4, #0]
 8005d9a:	f043 0320 	orr.w	r3, r3, #32
 8005d9e:	6023      	str	r3, [r4, #0]
 8005da0:	2778      	movs	r7, #120	; 0x78
 8005da2:	4832      	ldr	r0, [pc, #200]	; (8005e6c <_printf_i+0x240>)
 8005da4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005da8:	6823      	ldr	r3, [r4, #0]
 8005daa:	6829      	ldr	r1, [r5, #0]
 8005dac:	061f      	lsls	r7, r3, #24
 8005dae:	f851 6b04 	ldr.w	r6, [r1], #4
 8005db2:	d402      	bmi.n	8005dba <_printf_i+0x18e>
 8005db4:	065f      	lsls	r7, r3, #25
 8005db6:	bf48      	it	mi
 8005db8:	b2b6      	uxthmi	r6, r6
 8005dba:	07df      	lsls	r7, r3, #31
 8005dbc:	bf48      	it	mi
 8005dbe:	f043 0320 	orrmi.w	r3, r3, #32
 8005dc2:	6029      	str	r1, [r5, #0]
 8005dc4:	bf48      	it	mi
 8005dc6:	6023      	strmi	r3, [r4, #0]
 8005dc8:	b91e      	cbnz	r6, 8005dd2 <_printf_i+0x1a6>
 8005dca:	6823      	ldr	r3, [r4, #0]
 8005dcc:	f023 0320 	bic.w	r3, r3, #32
 8005dd0:	6023      	str	r3, [r4, #0]
 8005dd2:	2310      	movs	r3, #16
 8005dd4:	e7a6      	b.n	8005d24 <_printf_i+0xf8>
 8005dd6:	4824      	ldr	r0, [pc, #144]	; (8005e68 <_printf_i+0x23c>)
 8005dd8:	e7e4      	b.n	8005da4 <_printf_i+0x178>
 8005dda:	4615      	mov	r5, r2
 8005ddc:	e7bd      	b.n	8005d5a <_printf_i+0x12e>
 8005dde:	682b      	ldr	r3, [r5, #0]
 8005de0:	6826      	ldr	r6, [r4, #0]
 8005de2:	1d18      	adds	r0, r3, #4
 8005de4:	6961      	ldr	r1, [r4, #20]
 8005de6:	6028      	str	r0, [r5, #0]
 8005de8:	0635      	lsls	r5, r6, #24
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	d501      	bpl.n	8005df2 <_printf_i+0x1c6>
 8005dee:	6019      	str	r1, [r3, #0]
 8005df0:	e002      	b.n	8005df8 <_printf_i+0x1cc>
 8005df2:	0670      	lsls	r0, r6, #25
 8005df4:	d5fb      	bpl.n	8005dee <_printf_i+0x1c2>
 8005df6:	8019      	strh	r1, [r3, #0]
 8005df8:	2300      	movs	r3, #0
 8005dfa:	4615      	mov	r5, r2
 8005dfc:	6123      	str	r3, [r4, #16]
 8005dfe:	e7bc      	b.n	8005d7a <_printf_i+0x14e>
 8005e00:	682b      	ldr	r3, [r5, #0]
 8005e02:	2100      	movs	r1, #0
 8005e04:	1d1a      	adds	r2, r3, #4
 8005e06:	602a      	str	r2, [r5, #0]
 8005e08:	681d      	ldr	r5, [r3, #0]
 8005e0a:	6862      	ldr	r2, [r4, #4]
 8005e0c:	4628      	mov	r0, r5
 8005e0e:	f000 f9a1 	bl	8006154 <memchr>
 8005e12:	b108      	cbz	r0, 8005e18 <_printf_i+0x1ec>
 8005e14:	1b40      	subs	r0, r0, r5
 8005e16:	6060      	str	r0, [r4, #4]
 8005e18:	6863      	ldr	r3, [r4, #4]
 8005e1a:	6123      	str	r3, [r4, #16]
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e22:	e7aa      	b.n	8005d7a <_printf_i+0x14e>
 8005e24:	462a      	mov	r2, r5
 8005e26:	4649      	mov	r1, r9
 8005e28:	4640      	mov	r0, r8
 8005e2a:	6923      	ldr	r3, [r4, #16]
 8005e2c:	47d0      	blx	sl
 8005e2e:	3001      	adds	r0, #1
 8005e30:	d0ad      	beq.n	8005d8e <_printf_i+0x162>
 8005e32:	6823      	ldr	r3, [r4, #0]
 8005e34:	079b      	lsls	r3, r3, #30
 8005e36:	d413      	bmi.n	8005e60 <_printf_i+0x234>
 8005e38:	68e0      	ldr	r0, [r4, #12]
 8005e3a:	9b03      	ldr	r3, [sp, #12]
 8005e3c:	4298      	cmp	r0, r3
 8005e3e:	bfb8      	it	lt
 8005e40:	4618      	movlt	r0, r3
 8005e42:	e7a6      	b.n	8005d92 <_printf_i+0x166>
 8005e44:	2301      	movs	r3, #1
 8005e46:	4632      	mov	r2, r6
 8005e48:	4649      	mov	r1, r9
 8005e4a:	4640      	mov	r0, r8
 8005e4c:	47d0      	blx	sl
 8005e4e:	3001      	adds	r0, #1
 8005e50:	d09d      	beq.n	8005d8e <_printf_i+0x162>
 8005e52:	3501      	adds	r5, #1
 8005e54:	68e3      	ldr	r3, [r4, #12]
 8005e56:	9903      	ldr	r1, [sp, #12]
 8005e58:	1a5b      	subs	r3, r3, r1
 8005e5a:	42ab      	cmp	r3, r5
 8005e5c:	dcf2      	bgt.n	8005e44 <_printf_i+0x218>
 8005e5e:	e7eb      	b.n	8005e38 <_printf_i+0x20c>
 8005e60:	2500      	movs	r5, #0
 8005e62:	f104 0619 	add.w	r6, r4, #25
 8005e66:	e7f5      	b.n	8005e54 <_printf_i+0x228>
 8005e68:	080062ba 	.word	0x080062ba
 8005e6c:	080062cb 	.word	0x080062cb

08005e70 <__sflush_r>:
 8005e70:	898a      	ldrh	r2, [r1, #12]
 8005e72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e74:	4605      	mov	r5, r0
 8005e76:	0710      	lsls	r0, r2, #28
 8005e78:	460c      	mov	r4, r1
 8005e7a:	d457      	bmi.n	8005f2c <__sflush_r+0xbc>
 8005e7c:	684b      	ldr	r3, [r1, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	dc04      	bgt.n	8005e8c <__sflush_r+0x1c>
 8005e82:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	dc01      	bgt.n	8005e8c <__sflush_r+0x1c>
 8005e88:	2000      	movs	r0, #0
 8005e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e8e:	2e00      	cmp	r6, #0
 8005e90:	d0fa      	beq.n	8005e88 <__sflush_r+0x18>
 8005e92:	2300      	movs	r3, #0
 8005e94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005e98:	682f      	ldr	r7, [r5, #0]
 8005e9a:	6a21      	ldr	r1, [r4, #32]
 8005e9c:	602b      	str	r3, [r5, #0]
 8005e9e:	d032      	beq.n	8005f06 <__sflush_r+0x96>
 8005ea0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ea2:	89a3      	ldrh	r3, [r4, #12]
 8005ea4:	075a      	lsls	r2, r3, #29
 8005ea6:	d505      	bpl.n	8005eb4 <__sflush_r+0x44>
 8005ea8:	6863      	ldr	r3, [r4, #4]
 8005eaa:	1ac0      	subs	r0, r0, r3
 8005eac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005eae:	b10b      	cbz	r3, 8005eb4 <__sflush_r+0x44>
 8005eb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005eb2:	1ac0      	subs	r0, r0, r3
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005eba:	4628      	mov	r0, r5
 8005ebc:	6a21      	ldr	r1, [r4, #32]
 8005ebe:	47b0      	blx	r6
 8005ec0:	1c43      	adds	r3, r0, #1
 8005ec2:	89a3      	ldrh	r3, [r4, #12]
 8005ec4:	d106      	bne.n	8005ed4 <__sflush_r+0x64>
 8005ec6:	6829      	ldr	r1, [r5, #0]
 8005ec8:	291d      	cmp	r1, #29
 8005eca:	d82b      	bhi.n	8005f24 <__sflush_r+0xb4>
 8005ecc:	4a28      	ldr	r2, [pc, #160]	; (8005f70 <__sflush_r+0x100>)
 8005ece:	410a      	asrs	r2, r1
 8005ed0:	07d6      	lsls	r6, r2, #31
 8005ed2:	d427      	bmi.n	8005f24 <__sflush_r+0xb4>
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	6062      	str	r2, [r4, #4]
 8005ed8:	6922      	ldr	r2, [r4, #16]
 8005eda:	04d9      	lsls	r1, r3, #19
 8005edc:	6022      	str	r2, [r4, #0]
 8005ede:	d504      	bpl.n	8005eea <__sflush_r+0x7a>
 8005ee0:	1c42      	adds	r2, r0, #1
 8005ee2:	d101      	bne.n	8005ee8 <__sflush_r+0x78>
 8005ee4:	682b      	ldr	r3, [r5, #0]
 8005ee6:	b903      	cbnz	r3, 8005eea <__sflush_r+0x7a>
 8005ee8:	6560      	str	r0, [r4, #84]	; 0x54
 8005eea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005eec:	602f      	str	r7, [r5, #0]
 8005eee:	2900      	cmp	r1, #0
 8005ef0:	d0ca      	beq.n	8005e88 <__sflush_r+0x18>
 8005ef2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ef6:	4299      	cmp	r1, r3
 8005ef8:	d002      	beq.n	8005f00 <__sflush_r+0x90>
 8005efa:	4628      	mov	r0, r5
 8005efc:	f7ff fbee 	bl	80056dc <_free_r>
 8005f00:	2000      	movs	r0, #0
 8005f02:	6360      	str	r0, [r4, #52]	; 0x34
 8005f04:	e7c1      	b.n	8005e8a <__sflush_r+0x1a>
 8005f06:	2301      	movs	r3, #1
 8005f08:	4628      	mov	r0, r5
 8005f0a:	47b0      	blx	r6
 8005f0c:	1c41      	adds	r1, r0, #1
 8005f0e:	d1c8      	bne.n	8005ea2 <__sflush_r+0x32>
 8005f10:	682b      	ldr	r3, [r5, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d0c5      	beq.n	8005ea2 <__sflush_r+0x32>
 8005f16:	2b1d      	cmp	r3, #29
 8005f18:	d001      	beq.n	8005f1e <__sflush_r+0xae>
 8005f1a:	2b16      	cmp	r3, #22
 8005f1c:	d101      	bne.n	8005f22 <__sflush_r+0xb2>
 8005f1e:	602f      	str	r7, [r5, #0]
 8005f20:	e7b2      	b.n	8005e88 <__sflush_r+0x18>
 8005f22:	89a3      	ldrh	r3, [r4, #12]
 8005f24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f28:	81a3      	strh	r3, [r4, #12]
 8005f2a:	e7ae      	b.n	8005e8a <__sflush_r+0x1a>
 8005f2c:	690f      	ldr	r7, [r1, #16]
 8005f2e:	2f00      	cmp	r7, #0
 8005f30:	d0aa      	beq.n	8005e88 <__sflush_r+0x18>
 8005f32:	0793      	lsls	r3, r2, #30
 8005f34:	bf18      	it	ne
 8005f36:	2300      	movne	r3, #0
 8005f38:	680e      	ldr	r6, [r1, #0]
 8005f3a:	bf08      	it	eq
 8005f3c:	694b      	ldreq	r3, [r1, #20]
 8005f3e:	1bf6      	subs	r6, r6, r7
 8005f40:	600f      	str	r7, [r1, #0]
 8005f42:	608b      	str	r3, [r1, #8]
 8005f44:	2e00      	cmp	r6, #0
 8005f46:	dd9f      	ble.n	8005e88 <__sflush_r+0x18>
 8005f48:	4633      	mov	r3, r6
 8005f4a:	463a      	mov	r2, r7
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	6a21      	ldr	r1, [r4, #32]
 8005f50:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005f54:	47e0      	blx	ip
 8005f56:	2800      	cmp	r0, #0
 8005f58:	dc06      	bgt.n	8005f68 <__sflush_r+0xf8>
 8005f5a:	89a3      	ldrh	r3, [r4, #12]
 8005f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f64:	81a3      	strh	r3, [r4, #12]
 8005f66:	e790      	b.n	8005e8a <__sflush_r+0x1a>
 8005f68:	4407      	add	r7, r0
 8005f6a:	1a36      	subs	r6, r6, r0
 8005f6c:	e7ea      	b.n	8005f44 <__sflush_r+0xd4>
 8005f6e:	bf00      	nop
 8005f70:	dfbffffe 	.word	0xdfbffffe

08005f74 <_fflush_r>:
 8005f74:	b538      	push	{r3, r4, r5, lr}
 8005f76:	690b      	ldr	r3, [r1, #16]
 8005f78:	4605      	mov	r5, r0
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	b913      	cbnz	r3, 8005f84 <_fflush_r+0x10>
 8005f7e:	2500      	movs	r5, #0
 8005f80:	4628      	mov	r0, r5
 8005f82:	bd38      	pop	{r3, r4, r5, pc}
 8005f84:	b118      	cbz	r0, 8005f8e <_fflush_r+0x1a>
 8005f86:	6a03      	ldr	r3, [r0, #32]
 8005f88:	b90b      	cbnz	r3, 8005f8e <_fflush_r+0x1a>
 8005f8a:	f7ff f9a7 	bl	80052dc <__sinit>
 8005f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d0f3      	beq.n	8005f7e <_fflush_r+0xa>
 8005f96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f98:	07d0      	lsls	r0, r2, #31
 8005f9a:	d404      	bmi.n	8005fa6 <_fflush_r+0x32>
 8005f9c:	0599      	lsls	r1, r3, #22
 8005f9e:	d402      	bmi.n	8005fa6 <_fflush_r+0x32>
 8005fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fa2:	f7ff fb98 	bl	80056d6 <__retarget_lock_acquire_recursive>
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	4621      	mov	r1, r4
 8005faa:	f7ff ff61 	bl	8005e70 <__sflush_r>
 8005fae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fb0:	4605      	mov	r5, r0
 8005fb2:	07da      	lsls	r2, r3, #31
 8005fb4:	d4e4      	bmi.n	8005f80 <_fflush_r+0xc>
 8005fb6:	89a3      	ldrh	r3, [r4, #12]
 8005fb8:	059b      	lsls	r3, r3, #22
 8005fba:	d4e1      	bmi.n	8005f80 <_fflush_r+0xc>
 8005fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fbe:	f7ff fb8b 	bl	80056d8 <__retarget_lock_release_recursive>
 8005fc2:	e7dd      	b.n	8005f80 <_fflush_r+0xc>

08005fc4 <__swhatbuf_r>:
 8005fc4:	b570      	push	{r4, r5, r6, lr}
 8005fc6:	460c      	mov	r4, r1
 8005fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fcc:	4615      	mov	r5, r2
 8005fce:	2900      	cmp	r1, #0
 8005fd0:	461e      	mov	r6, r3
 8005fd2:	b096      	sub	sp, #88	; 0x58
 8005fd4:	da0c      	bge.n	8005ff0 <__swhatbuf_r+0x2c>
 8005fd6:	89a3      	ldrh	r3, [r4, #12]
 8005fd8:	2100      	movs	r1, #0
 8005fda:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005fde:	bf0c      	ite	eq
 8005fe0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005fe4:	2340      	movne	r3, #64	; 0x40
 8005fe6:	2000      	movs	r0, #0
 8005fe8:	6031      	str	r1, [r6, #0]
 8005fea:	602b      	str	r3, [r5, #0]
 8005fec:	b016      	add	sp, #88	; 0x58
 8005fee:	bd70      	pop	{r4, r5, r6, pc}
 8005ff0:	466a      	mov	r2, sp
 8005ff2:	f000 f87d 	bl	80060f0 <_fstat_r>
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	dbed      	blt.n	8005fd6 <__swhatbuf_r+0x12>
 8005ffa:	9901      	ldr	r1, [sp, #4]
 8005ffc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006000:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006004:	4259      	negs	r1, r3
 8006006:	4159      	adcs	r1, r3
 8006008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800600c:	e7eb      	b.n	8005fe6 <__swhatbuf_r+0x22>

0800600e <__smakebuf_r>:
 800600e:	898b      	ldrh	r3, [r1, #12]
 8006010:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006012:	079d      	lsls	r5, r3, #30
 8006014:	4606      	mov	r6, r0
 8006016:	460c      	mov	r4, r1
 8006018:	d507      	bpl.n	800602a <__smakebuf_r+0x1c>
 800601a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800601e:	6023      	str	r3, [r4, #0]
 8006020:	6123      	str	r3, [r4, #16]
 8006022:	2301      	movs	r3, #1
 8006024:	6163      	str	r3, [r4, #20]
 8006026:	b002      	add	sp, #8
 8006028:	bd70      	pop	{r4, r5, r6, pc}
 800602a:	466a      	mov	r2, sp
 800602c:	ab01      	add	r3, sp, #4
 800602e:	f7ff ffc9 	bl	8005fc4 <__swhatbuf_r>
 8006032:	9900      	ldr	r1, [sp, #0]
 8006034:	4605      	mov	r5, r0
 8006036:	4630      	mov	r0, r6
 8006038:	f7ff fbb8 	bl	80057ac <_malloc_r>
 800603c:	b948      	cbnz	r0, 8006052 <__smakebuf_r+0x44>
 800603e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006042:	059a      	lsls	r2, r3, #22
 8006044:	d4ef      	bmi.n	8006026 <__smakebuf_r+0x18>
 8006046:	f023 0303 	bic.w	r3, r3, #3
 800604a:	f043 0302 	orr.w	r3, r3, #2
 800604e:	81a3      	strh	r3, [r4, #12]
 8006050:	e7e3      	b.n	800601a <__smakebuf_r+0xc>
 8006052:	89a3      	ldrh	r3, [r4, #12]
 8006054:	6020      	str	r0, [r4, #0]
 8006056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800605a:	81a3      	strh	r3, [r4, #12]
 800605c:	9b00      	ldr	r3, [sp, #0]
 800605e:	6120      	str	r0, [r4, #16]
 8006060:	6163      	str	r3, [r4, #20]
 8006062:	9b01      	ldr	r3, [sp, #4]
 8006064:	b15b      	cbz	r3, 800607e <__smakebuf_r+0x70>
 8006066:	4630      	mov	r0, r6
 8006068:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800606c:	f000 f852 	bl	8006114 <_isatty_r>
 8006070:	b128      	cbz	r0, 800607e <__smakebuf_r+0x70>
 8006072:	89a3      	ldrh	r3, [r4, #12]
 8006074:	f023 0303 	bic.w	r3, r3, #3
 8006078:	f043 0301 	orr.w	r3, r3, #1
 800607c:	81a3      	strh	r3, [r4, #12]
 800607e:	89a3      	ldrh	r3, [r4, #12]
 8006080:	431d      	orrs	r5, r3
 8006082:	81a5      	strh	r5, [r4, #12]
 8006084:	e7cf      	b.n	8006026 <__smakebuf_r+0x18>

08006086 <_putc_r>:
 8006086:	b570      	push	{r4, r5, r6, lr}
 8006088:	460d      	mov	r5, r1
 800608a:	4614      	mov	r4, r2
 800608c:	4606      	mov	r6, r0
 800608e:	b118      	cbz	r0, 8006098 <_putc_r+0x12>
 8006090:	6a03      	ldr	r3, [r0, #32]
 8006092:	b90b      	cbnz	r3, 8006098 <_putc_r+0x12>
 8006094:	f7ff f922 	bl	80052dc <__sinit>
 8006098:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800609a:	07d8      	lsls	r0, r3, #31
 800609c:	d405      	bmi.n	80060aa <_putc_r+0x24>
 800609e:	89a3      	ldrh	r3, [r4, #12]
 80060a0:	0599      	lsls	r1, r3, #22
 80060a2:	d402      	bmi.n	80060aa <_putc_r+0x24>
 80060a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060a6:	f7ff fb16 	bl	80056d6 <__retarget_lock_acquire_recursive>
 80060aa:	68a3      	ldr	r3, [r4, #8]
 80060ac:	3b01      	subs	r3, #1
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	60a3      	str	r3, [r4, #8]
 80060b2:	da05      	bge.n	80060c0 <_putc_r+0x3a>
 80060b4:	69a2      	ldr	r2, [r4, #24]
 80060b6:	4293      	cmp	r3, r2
 80060b8:	db12      	blt.n	80060e0 <_putc_r+0x5a>
 80060ba:	b2eb      	uxtb	r3, r5
 80060bc:	2b0a      	cmp	r3, #10
 80060be:	d00f      	beq.n	80060e0 <_putc_r+0x5a>
 80060c0:	6823      	ldr	r3, [r4, #0]
 80060c2:	1c5a      	adds	r2, r3, #1
 80060c4:	6022      	str	r2, [r4, #0]
 80060c6:	701d      	strb	r5, [r3, #0]
 80060c8:	b2ed      	uxtb	r5, r5
 80060ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060cc:	07da      	lsls	r2, r3, #31
 80060ce:	d405      	bmi.n	80060dc <_putc_r+0x56>
 80060d0:	89a3      	ldrh	r3, [r4, #12]
 80060d2:	059b      	lsls	r3, r3, #22
 80060d4:	d402      	bmi.n	80060dc <_putc_r+0x56>
 80060d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060d8:	f7ff fafe 	bl	80056d8 <__retarget_lock_release_recursive>
 80060dc:	4628      	mov	r0, r5
 80060de:	bd70      	pop	{r4, r5, r6, pc}
 80060e0:	4629      	mov	r1, r5
 80060e2:	4622      	mov	r2, r4
 80060e4:	4630      	mov	r0, r6
 80060e6:	f7ff f9e8 	bl	80054ba <__swbuf_r>
 80060ea:	4605      	mov	r5, r0
 80060ec:	e7ed      	b.n	80060ca <_putc_r+0x44>
	...

080060f0 <_fstat_r>:
 80060f0:	b538      	push	{r3, r4, r5, lr}
 80060f2:	2300      	movs	r3, #0
 80060f4:	4d06      	ldr	r5, [pc, #24]	; (8006110 <_fstat_r+0x20>)
 80060f6:	4604      	mov	r4, r0
 80060f8:	4608      	mov	r0, r1
 80060fa:	4611      	mov	r1, r2
 80060fc:	602b      	str	r3, [r5, #0]
 80060fe:	f7fa fbdb 	bl	80008b8 <_fstat>
 8006102:	1c43      	adds	r3, r0, #1
 8006104:	d102      	bne.n	800610c <_fstat_r+0x1c>
 8006106:	682b      	ldr	r3, [r5, #0]
 8006108:	b103      	cbz	r3, 800610c <_fstat_r+0x1c>
 800610a:	6023      	str	r3, [r4, #0]
 800610c:	bd38      	pop	{r3, r4, r5, pc}
 800610e:	bf00      	nop
 8006110:	20000564 	.word	0x20000564

08006114 <_isatty_r>:
 8006114:	b538      	push	{r3, r4, r5, lr}
 8006116:	2300      	movs	r3, #0
 8006118:	4d05      	ldr	r5, [pc, #20]	; (8006130 <_isatty_r+0x1c>)
 800611a:	4604      	mov	r4, r0
 800611c:	4608      	mov	r0, r1
 800611e:	602b      	str	r3, [r5, #0]
 8006120:	f7fa fbd9 	bl	80008d6 <_isatty>
 8006124:	1c43      	adds	r3, r0, #1
 8006126:	d102      	bne.n	800612e <_isatty_r+0x1a>
 8006128:	682b      	ldr	r3, [r5, #0]
 800612a:	b103      	cbz	r3, 800612e <_isatty_r+0x1a>
 800612c:	6023      	str	r3, [r4, #0]
 800612e:	bd38      	pop	{r3, r4, r5, pc}
 8006130:	20000564 	.word	0x20000564

08006134 <_sbrk_r>:
 8006134:	b538      	push	{r3, r4, r5, lr}
 8006136:	2300      	movs	r3, #0
 8006138:	4d05      	ldr	r5, [pc, #20]	; (8006150 <_sbrk_r+0x1c>)
 800613a:	4604      	mov	r4, r0
 800613c:	4608      	mov	r0, r1
 800613e:	602b      	str	r3, [r5, #0]
 8006140:	f7fa fbe0 	bl	8000904 <_sbrk>
 8006144:	1c43      	adds	r3, r0, #1
 8006146:	d102      	bne.n	800614e <_sbrk_r+0x1a>
 8006148:	682b      	ldr	r3, [r5, #0]
 800614a:	b103      	cbz	r3, 800614e <_sbrk_r+0x1a>
 800614c:	6023      	str	r3, [r4, #0]
 800614e:	bd38      	pop	{r3, r4, r5, pc}
 8006150:	20000564 	.word	0x20000564

08006154 <memchr>:
 8006154:	4603      	mov	r3, r0
 8006156:	b510      	push	{r4, lr}
 8006158:	b2c9      	uxtb	r1, r1
 800615a:	4402      	add	r2, r0
 800615c:	4293      	cmp	r3, r2
 800615e:	4618      	mov	r0, r3
 8006160:	d101      	bne.n	8006166 <memchr+0x12>
 8006162:	2000      	movs	r0, #0
 8006164:	e003      	b.n	800616e <memchr+0x1a>
 8006166:	7804      	ldrb	r4, [r0, #0]
 8006168:	3301      	adds	r3, #1
 800616a:	428c      	cmp	r4, r1
 800616c:	d1f6      	bne.n	800615c <memchr+0x8>
 800616e:	bd10      	pop	{r4, pc}

08006170 <_init>:
 8006170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006172:	bf00      	nop
 8006174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006176:	bc08      	pop	{r3}
 8006178:	469e      	mov	lr, r3
 800617a:	4770      	bx	lr

0800617c <_fini>:
 800617c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800617e:	bf00      	nop
 8006180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006182:	bc08      	pop	{r3}
 8006184:	469e      	mov	lr, r3
 8006186:	4770      	bx	lr
